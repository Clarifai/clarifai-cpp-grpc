// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/resources.proto

#include "proto/clarifai/api/resources.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace clarifai {
namespace api {
PROTOBUF_CONSTEXPR Annotation::Annotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.embed_model_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.workflow_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.annotation_info_)*/nullptr
  , /*decltype(_impl_.consensus_info_)*/nullptr
  , /*decltype(_impl_.trusted_)*/false
  , /*decltype(_impl_.input_level_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnnotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnotationDefaultTypeInternal() {}
  union {
    Annotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnotationDefaultTypeInternal _Annotation_default_instance_;
PROTOBUF_CONSTEXPR App::App(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.default_language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.default_workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_tier_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_.default_workflow_)*/nullptr
  , /*decltype(_impl_.legal_consent_status_)*/0u
  , /*decltype(_impl_.sample_ms_)*/0u
  , /*decltype(_impl_.is_starred_)*/false
  , /*decltype(_impl_.star_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppDefaultTypeInternal() {}
  union {
    App _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppDefaultTypeInternal _App_default_instance_;
PROTOBUF_CONSTEXPR AppQuery::AppQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppQueryDefaultTypeInternal() {}
  union {
    AppQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppQueryDefaultTypeInternal _AppQuery_default_instance_;
PROTOBUF_CONSTEXPR Collaborator::Collaborator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scopes_)*/{}
  , /*decltype(_impl_.endpoints_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_)*/nullptr
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.deleted_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollaboratorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaboratorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaboratorDefaultTypeInternal() {}
  union {
    Collaborator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaboratorDefaultTypeInternal _Collaborator_default_instance_;
PROTOBUF_CONSTEXPR Collaboration::Collaboration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scopes_)*/{}
  , /*decltype(_impl_.endpoints_)*/{}
  , /*decltype(_impl_.app_)*/nullptr
  , /*decltype(_impl_.app_owner_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollaborationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaborationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaborationDefaultTypeInternal() {}
  union {
    Collaboration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaborationDefaultTypeInternal _Collaboration_default_instance_;
PROTOBUF_CONSTEXPR Audio::Audio(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base64_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hosted_)*/nullptr
  , /*decltype(_impl_.audio_info_)*/nullptr
  , /*decltype(_impl_.allow_duplicate_url_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AudioDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioDefaultTypeInternal() {}
  union {
    Audio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioDefaultTypeInternal _Audio_default_instance_;
PROTOBUF_CONSTEXPR AudioInfo::AudioInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.audio_format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sample_rate_)*/0
  , /*decltype(_impl_.duration_seconds_)*/0
  , /*decltype(_impl_.bit_rate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AudioInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioInfoDefaultTypeInternal() {}
  union {
    AudioInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioInfoDefaultTypeInternal _AudioInfo_default_instance_;
PROTOBUF_CONSTEXPR Track::Track(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.time_info_)*/nullptr
  , /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackDefaultTypeInternal() {}
  union {
    Track _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackDefaultTypeInternal _Track_default_instance_;
PROTOBUF_CONSTEXPR Cluster::Cluster(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hits_)*/{}
  , /*decltype(_impl_.projection_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClusterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClusterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClusterDefaultTypeInternal() {}
  union {
    Cluster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClusterDefaultTypeInternal _Cluster_default_instance_;
PROTOBUF_CONSTEXPR Color::Color(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.raw_hex_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.w3c_)*/nullptr
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorDefaultTypeInternal _Color_default_instance_;
PROTOBUF_CONSTEXPR W3C::W3C(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hex_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct W3CDefaultTypeInternal {
  PROTOBUF_CONSTEXPR W3CDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~W3CDefaultTypeInternal() {}
  union {
    W3C _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 W3CDefaultTypeInternal _W3C_default_instance_;
PROTOBUF_CONSTEXPR UserAppIDSet::UserAppIDSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserAppIDSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserAppIDSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserAppIDSetDefaultTypeInternal() {}
  union {
    UserAppIDSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserAppIDSetDefaultTypeInternal _UserAppIDSet_default_instance_;
PROTOBUF_CONSTEXPR PatchAction::PatchAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.op_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.merge_conflict_resolution_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchActionDefaultTypeInternal() {}
  union {
    PatchAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchActionDefaultTypeInternal _PatchAction_default_instance_;
PROTOBUF_CONSTEXPR Concept::Concept(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.definition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vocab_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_.keypoint_info_)*/nullptr
  , /*decltype(_impl_.extra_info_)*/nullptr
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConceptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConceptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConceptDefaultTypeInternal() {}
  union {
    Concept _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConceptDefaultTypeInternal _Concept_default_instance_;
PROTOBUF_CONSTEXPR KeypointInfo::KeypointInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keypoint_names_)*/{}
  , /*decltype(_impl_.skeleton_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeypointInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeypointInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeypointInfoDefaultTypeInternal() {}
  union {
    KeypointInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeypointInfoDefaultTypeInternal _KeypointInfo_default_instance_;
PROTOBUF_CONSTEXPR KeypointEdge::KeypointEdge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.k1_)*/0u
  , /*decltype(_impl_.k2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeypointEdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeypointEdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeypointEdgeDefaultTypeInternal() {}
  union {
    KeypointEdge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeypointEdgeDefaultTypeInternal _KeypointEdge_default_instance_;
PROTOBUF_CONSTEXPR ConceptExtraInfo::ConceptExtraInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.is_rankable_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConceptExtraInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConceptExtraInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConceptExtraInfoDefaultTypeInternal() {}
  union {
    ConceptExtraInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConceptExtraInfoDefaultTypeInternal _ConceptExtraInfo_default_instance_;
PROTOBUF_CONSTEXPR ConceptCount::ConceptCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.concept_type_count_)*/nullptr
  , /*decltype(_impl_.detail_concept_count_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConceptCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConceptCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConceptCountDefaultTypeInternal() {}
  union {
    ConceptCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConceptCountDefaultTypeInternal _ConceptCount_default_instance_;
PROTOBUF_CONSTEXPR ConceptTypeCount::ConceptTypeCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.positive_)*/0u
  , /*decltype(_impl_.negative_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConceptTypeCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConceptTypeCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConceptTypeCountDefaultTypeInternal() {}
  union {
    ConceptTypeCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConceptTypeCountDefaultTypeInternal _ConceptTypeCount_default_instance_;
PROTOBUF_CONSTEXPR DetailConceptCount::DetailConceptCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.processed_)*/nullptr
  , /*decltype(_impl_.to_process_)*/nullptr
  , /*decltype(_impl_.errors_)*/nullptr
  , /*decltype(_impl_.processing_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DetailConceptCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetailConceptCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetailConceptCountDefaultTypeInternal() {}
  union {
    DetailConceptCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetailConceptCountDefaultTypeInternal _DetailConceptCount_default_instance_;
PROTOBUF_CONSTEXPR ConceptQuery::ConceptQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConceptQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConceptQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConceptQueryDefaultTypeInternal() {}
  union {
    ConceptQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConceptQueryDefaultTypeInternal _ConceptQuery_default_instance_;
PROTOBUF_CONSTEXPR ConceptRelation::ConceptRelation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.predicate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.knowledge_graph_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subject_concept_)*/nullptr
  , /*decltype(_impl_.object_concept_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConceptRelationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConceptRelationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConceptRelationDefaultTypeInternal() {}
  union {
    ConceptRelation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConceptRelationDefaultTypeInternal _ConceptRelation_default_instance_;
PROTOBUF_CONSTEXPR KnowledgeGraph::KnowledgeGraph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.examples_app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sampled_examples_app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KnowledgeGraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KnowledgeGraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KnowledgeGraphDefaultTypeInternal() {}
  union {
    KnowledgeGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KnowledgeGraphDefaultTypeInternal _KnowledgeGraph_default_instance_;
PROTOBUF_CONSTEXPR ConceptMappingJob::ConceptMappingJob(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_ids_)*/{}
  , /*decltype(_impl_.knowledge_graph_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConceptMappingJobDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConceptMappingJobDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConceptMappingJobDefaultTypeInternal() {}
  union {
    ConceptMappingJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConceptMappingJobDefaultTypeInternal _ConceptMappingJob_default_instance_;
PROTOBUF_CONSTEXPR ConceptLanguage::ConceptLanguage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.definition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConceptLanguageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConceptLanguageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConceptLanguageDefaultTypeInternal() {}
  union {
    ConceptLanguage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConceptLanguageDefaultTypeInternal _ConceptLanguage_default_instance_;
PROTOBUF_CONSTEXPR Data::Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concepts_)*/{}
  , /*decltype(_impl_.colors_)*/{}
  , /*decltype(_impl_.clusters_)*/{}
  , /*decltype(_impl_.embeddings_)*/{}
  , /*decltype(_impl_.regions_)*/{}
  , /*decltype(_impl_.frames_)*/{}
  , /*decltype(_impl_.tracks_)*/{}
  , /*decltype(_impl_.time_segments_)*/{}
  , /*decltype(_impl_.hits_)*/{}
  , /*decltype(_impl_.heatmaps_)*/{}
  , /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_.video_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.geo_)*/nullptr
  , /*decltype(_impl_.text_)*/nullptr
  , /*decltype(_impl_.audio_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataDefaultTypeInternal _Data_default_instance_;
PROTOBUF_CONSTEXPR Region::Region(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.track_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_info_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionDefaultTypeInternal() {}
  union {
    Region _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionDefaultTypeInternal _Region_default_instance_;
PROTOBUF_CONSTEXPR RegionInfo::RegionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keypoint_locations_)*/{}
  , /*decltype(_impl_.bounding_box_)*/nullptr
  , /*decltype(_impl_.mask_)*/nullptr
  , /*decltype(_impl_.polygon_)*/nullptr
  , /*decltype(_impl_.point_)*/nullptr
  , /*decltype(_impl_.span_)*/nullptr
  , /*decltype(_impl_.token_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionInfoDefaultTypeInternal() {}
  union {
    RegionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionInfoDefaultTypeInternal _RegionInfo_default_instance_;
PROTOBUF_CONSTEXPR BoundingBox::BoundingBox(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.top_row_)*/0
  , /*decltype(_impl_.left_col_)*/0
  , /*decltype(_impl_.bottom_row_)*/0
  , /*decltype(_impl_.right_col_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoundingBoxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoundingBoxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoundingBoxDefaultTypeInternal() {}
  union {
    BoundingBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;
PROTOBUF_CONSTEXPR FrameInfo::FrameInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FrameInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameInfoDefaultTypeInternal() {}
  union {
    FrameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameInfoDefaultTypeInternal _FrameInfo_default_instance_;
PROTOBUF_CONSTEXPR Frame::Frame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frame_info_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameDefaultTypeInternal() {}
  union {
    Frame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameDefaultTypeInternal _Frame_default_instance_;
PROTOBUF_CONSTEXPR Mask::Mask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaskDefaultTypeInternal() {}
  union {
    Mask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaskDefaultTypeInternal _Mask_default_instance_;
PROTOBUF_CONSTEXPR Polygon::Polygon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PolygonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolygonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolygonDefaultTypeInternal() {}
  union {
    Polygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolygonDefaultTypeInternal _Polygon_default_instance_;
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.row_)*/0
  , /*decltype(_impl_.col_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.visibility_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR Span::Span(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.raw_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.char_start_)*/0u
  , /*decltype(_impl_.char_end_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanDefaultTypeInternal() {}
  union {
    Span _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanDefaultTypeInternal _Span_default_instance_;
PROTOBUF_CONSTEXPR Token::Token(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.raw_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.char_start_)*/0u
  , /*decltype(_impl_.char_end_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenDefaultTypeInternal() {}
  union {
    Token _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenDefaultTypeInternal _Token_default_instance_;
PROTOBUF_CONSTEXPR Embedding::Embedding(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vector_)*/{}
  , /*decltype(_impl_.num_dimensions_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmbeddingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmbeddingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmbeddingDefaultTypeInternal() {}
  union {
    Embedding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmbeddingDefaultTypeInternal _Embedding_default_instance_;
PROTOBUF_CONSTEXPR GeoPoint::GeoPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GeoPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeoPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeoPointDefaultTypeInternal() {}
  union {
    GeoPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeoPointDefaultTypeInternal _GeoPoint_default_instance_;
PROTOBUF_CONSTEXPR GeoLimit::GeoLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GeoLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeoLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeoLimitDefaultTypeInternal() {}
  union {
    GeoLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeoLimitDefaultTypeInternal _GeoLimit_default_instance_;
PROTOBUF_CONSTEXPR GeoBoxedPoint::GeoBoxedPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.geo_point_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GeoBoxedPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeoBoxedPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeoBoxedPointDefaultTypeInternal() {}
  union {
    GeoBoxedPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeoBoxedPointDefaultTypeInternal _GeoBoxedPoint_default_instance_;
PROTOBUF_CONSTEXPR Geo::Geo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.geo_box_)*/{}
  , /*decltype(_impl_.geo_point_)*/nullptr
  , /*decltype(_impl_.geo_limit_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GeoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeoDefaultTypeInternal() {}
  union {
    Geo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeoDefaultTypeInternal _Geo_default_instance_;
PROTOBUF_CONSTEXPR Image::Image(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base64_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hosted_)*/nullptr
  , /*decltype(_impl_.image_info_)*/nullptr
  , /*decltype(_impl_.allow_duplicate_url_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDefaultTypeInternal _Image_default_instance_;
PROTOBUF_CONSTEXPR ImageInfo::ImageInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageInfoDefaultTypeInternal() {}
  union {
    ImageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageInfoDefaultTypeInternal _ImageInfo_default_instance_;
PROTOBUF_CONSTEXPR HostedURL::HostedURL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sizes_)*/{}
  , /*decltype(_impl_.prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.suffix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.crossorigin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HostedURLDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostedURLDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostedURLDefaultTypeInternal() {}
  union {
    HostedURL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostedURLDefaultTypeInternal _HostedURL_default_instance_;
PROTOBUF_CONSTEXPR Input::Input(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_ids_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputDefaultTypeInternal() {}
  union {
    Input _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputDefaultTypeInternal _Input_default_instance_;
PROTOBUF_CONSTEXPR InputBatch::InputBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputBatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputBatchDefaultTypeInternal() {}
  union {
    InputBatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputBatchDefaultTypeInternal _InputBatch_default_instance_;
PROTOBUF_CONSTEXPR InputCount::InputCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.processed_)*/0u
  , /*decltype(_impl_.to_process_)*/0u
  , /*decltype(_impl_.errors_)*/0u
  , /*decltype(_impl_.processing_)*/0u
  , /*decltype(_impl_.reindexed_)*/0u
  , /*decltype(_impl_.to_reindex_)*/0u
  , /*decltype(_impl_.reindex_errors_)*/0u
  , /*decltype(_impl_.reindexing_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputCountDefaultTypeInternal() {}
  union {
    InputCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputCountDefaultTypeInternal _InputCount_default_instance_;
PROTOBUF_CONSTEXPR Dataset::Dataset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_.default_annotation_filter_)*/nullptr
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.default_processing_info_)*/nullptr
  , /*decltype(_impl_.bookmark_origin_)*/nullptr
  , /*decltype(_impl_.is_starred_)*/false
  , /*decltype(_impl_.star_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatasetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetDefaultTypeInternal() {}
  union {
    Dataset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetDefaultTypeInternal _Dataset_default_instance_;
PROTOBUF_CONSTEXPR AnnotationFilter::AnnotationFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.saved_search_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnnotationFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnotationFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnotationFilterDefaultTypeInternal() {}
  union {
    AnnotationFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnotationFilterDefaultTypeInternal _AnnotationFilter_default_instance_;
PROTOBUF_CONSTEXPR DatasetInput::DatasetInput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatasetInputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetInputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetInputDefaultTypeInternal() {}
  union {
    DatasetInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetInputDefaultTypeInternal _DatasetInput_default_instance_;
PROTOBUF_CONSTEXPR DatasetVersion_MetricsEntry_DoNotUse::DatasetVersion_MetricsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DatasetVersion_MetricsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetVersion_MetricsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetVersion_MetricsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DatasetVersion_MetricsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetVersion_MetricsEntry_DoNotUseDefaultTypeInternal _DatasetVersion_MetricsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR DatasetVersion::DatasetVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.embed_model_version_ids_)*/{}
  , /*decltype(_impl_.metrics_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_.export_info_)*/nullptr
  , /*decltype(_impl_.processing_info_)*/nullptr
  , /*decltype(_impl_.data_config_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DatasetVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetVersionDefaultTypeInternal() {}
  union {
    DatasetVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetVersionDefaultTypeInternal _DatasetVersion_default_instance_;
PROTOBUF_CONSTEXPR AnnotationFilterConfig::AnnotationFilterConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.annotation_filter_)*/nullptr
  , /*decltype(_impl_.ignore_empty_inputs_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnnotationFilterConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnotationFilterConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnotationFilterConfigDefaultTypeInternal() {}
  union {
    AnnotationFilterConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnotationFilterConfigDefaultTypeInternal _AnnotationFilterConfig_default_instance_;
PROTOBUF_CONSTEXPR ModelPredictConfig::ModelPredictConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelPredictConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelPredictConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelPredictConfigDefaultTypeInternal() {}
  union {
    ModelPredictConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelPredictConfigDefaultTypeInternal _ModelPredictConfig_default_instance_;
PROTOBUF_CONSTEXPR DatasetVersionMetrics::DatasetVersionMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_count_)*/nullptr
  , /*decltype(_impl_.unlabeled_inputs_count_)*/nullptr
  , /*decltype(_impl_.inputs_with_metadata_count_)*/nullptr
  , /*decltype(_impl_.inputs_with_geo_count_)*/nullptr
  , /*decltype(_impl_.regions_count_)*/nullptr
  , /*decltype(_impl_.region_location_matrix_)*/nullptr
  , /*decltype(_impl_.bounding_boxes_count_)*/nullptr
  , /*decltype(_impl_.polygons_count_)*/nullptr
  , /*decltype(_impl_.points_count_)*/nullptr
  , /*decltype(_impl_.masks_count_)*/nullptr
  , /*decltype(_impl_.frames_count_)*/nullptr
  , /*decltype(_impl_.embeddings_count_)*/nullptr
  , /*decltype(_impl_.positive_input_tags_count_)*/nullptr
  , /*decltype(_impl_.positive_region_tags_count_)*/nullptr
  , /*decltype(_impl_.positive_frame_tags_count_)*/nullptr
  , /*decltype(_impl_.region_inputs_count_)*/nullptr
  , /*decltype(_impl_.region_frames_count_)*/nullptr
  , /*decltype(_impl_.frame_inputs_count_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatasetVersionMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetVersionMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetVersionMetricsDefaultTypeInternal() {}
  union {
    DatasetVersionMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetVersionMetricsDefaultTypeInternal _DatasetVersionMetrics_default_instance_;
PROTOBUF_CONSTEXPR DatasetVersionMetricsGroup::DatasetVersionMetricsGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parent_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.metrics_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatasetVersionMetricsGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetVersionMetricsGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetVersionMetricsGroupDefaultTypeInternal() {}
  union {
    DatasetVersionMetricsGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetVersionMetricsGroupDefaultTypeInternal _DatasetVersionMetricsGroup_default_instance_;
PROTOBUF_CONSTEXPR DatasetVersionExportInfo::DatasetVersionExportInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clarifai_data_protobuf_)*/nullptr
  , /*decltype(_impl_.coco_)*/nullptr
  , /*decltype(_impl_.clarifai_data_json_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatasetVersionExportInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetVersionExportInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetVersionExportInfoDefaultTypeInternal() {}
  union {
    DatasetVersionExportInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetVersionExportInfoDefaultTypeInternal _DatasetVersionExportInfo_default_instance_;
PROTOBUF_CONSTEXPR DatasetVersionExport::DatasetVersionExport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.format_)*/0
  , /*decltype(_impl_.include_embeddings_)*/false
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatasetVersionExportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetVersionExportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetVersionExportDefaultTypeInternal() {}
  union {
    DatasetVersionExport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetVersionExportDefaultTypeInternal _DatasetVersionExport_default_instance_;
PROTOBUF_CONSTEXPR DatasetVersionProcessingInfo::DatasetVersionProcessingInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.frame_interpolation_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatasetVersionProcessingInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetVersionProcessingInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetVersionProcessingInfoDefaultTypeInternal() {}
  union {
    DatasetVersionProcessingInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetVersionProcessingInfoDefaultTypeInternal _DatasetVersionProcessingInfo_default_instance_;
PROTOBUF_CONSTEXPR FrameInterpolationInfo::FrameInterpolationInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sample_ms_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FrameInterpolationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameInterpolationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameInterpolationInfoDefaultTypeInternal() {}
  union {
    FrameInterpolationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameInterpolationInfoDefaultTypeInternal _FrameInterpolationInfo_default_instance_;
PROTOBUF_CONSTEXPR WorkflowResultsSimilarity::WorkflowResultsSimilarity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pool_results_)*/{}
  , /*decltype(_impl_.probe_input_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkflowResultsSimilarityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkflowResultsSimilarityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkflowResultsSimilarityDefaultTypeInternal() {}
  union {
    WorkflowResultsSimilarity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkflowResultsSimilarityDefaultTypeInternal _WorkflowResultsSimilarity_default_instance_;
PROTOBUF_CONSTEXPR Key::Key(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scopes_)*/{}
  , /*decltype(_impl_.apps_)*/{}
  , /*decltype(_impl_.endpoints_)*/{}
  , /*decltype(_impl_.authorized_idp_ids_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.expires_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyDefaultTypeInternal() {}
  union {
    Key _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyDefaultTypeInternal _Key_default_instance_;
PROTOBUF_CONSTEXPR Model::Model(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.toolkits_)*/{}
  , /*decltype(_impl_.use_cases_)*/{}
  , /*decltype(_impl_.languages_)*/{}
  , /*decltype(_impl_.languages_full_)*/{}
  , /*decltype(_impl_.check_consents_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_type_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.task_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.output_info_)*/nullptr
  , /*decltype(_impl_.model_version_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.presets_)*/nullptr
  , /*decltype(_impl_.workflow_recommended_)*/nullptr
  , /*decltype(_impl_.default_eval_info_)*/nullptr
  , /*decltype(_impl_.bookmark_origin_)*/nullptr
  , /*decltype(_impl_.is_starred_)*/false
  , /*decltype(_impl_.star_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelDefaultTypeInternal() {}
  union {
    Model _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelDefaultTypeInternal _Model_default_instance_;
PROTOBUF_CONSTEXPR ModelReference::ModelReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelReferenceDefaultTypeInternal() {}
  union {
    ModelReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelReferenceDefaultTypeInternal _ModelReference_default_instance_;
PROTOBUF_CONSTEXPR ModelVersionInputExample::ModelVersionInputExample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelVersionInputExampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelVersionInputExampleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelVersionInputExampleDefaultTypeInternal() {}
  union {
    ModelVersionInputExample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelVersionInputExampleDefaultTypeInternal _ModelVersionInputExample_default_instance_;
PROTOBUF_CONSTEXPR OutputInfo::OutputInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.output_config_)*/nullptr
  , /*decltype(_impl_.fields_map_)*/nullptr
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OutputInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputInfoDefaultTypeInternal() {}
  union {
    OutputInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputInfoDefaultTypeInternal _OutputInfo_default_instance_;
PROTOBUF_CONSTEXPR InputInfo::InputInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_map_)*/nullptr
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_.base_embed_model_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputInfoDefaultTypeInternal() {}
  union {
    InputInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputInfoDefaultTypeInternal _InputInfo_default_instance_;
PROTOBUF_CONSTEXPR TrainInfo::TrainInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrainInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrainInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrainInfoDefaultTypeInternal() {}
  union {
    TrainInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrainInfoDefaultTypeInternal _TrainInfo_default_instance_;
PROTOBUF_CONSTEXPR EvalInfo::EvalInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EvalInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EvalInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EvalInfoDefaultTypeInternal() {}
  union {
    EvalInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvalInfoDefaultTypeInternal _EvalInfo_default_instance_;
PROTOBUF_CONSTEXPR ImportInfo::ImportInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImportInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportInfoDefaultTypeInternal() {}
  union {
    ImportInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportInfoDefaultTypeInternal _ImportInfo_default_instance_;
PROTOBUF_CONSTEXPR OutputConfig::OutputConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.select_concepts_)*/{}
  , /*decltype(_impl_.existing_model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hyper_parameters_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.embed_model_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hyper_params_)*/nullptr
  , /*decltype(_impl_.model_metadata_)*/nullptr
  , /*decltype(_impl_.max_concepts_)*/0u
  , /*decltype(_impl_.min_value_)*/0
  , /*decltype(_impl_.concepts_mutually_exclusive_)*/false
  , /*decltype(_impl_.fail_on_missing_positive_examples_)*/false
  , /*decltype(_impl_.training_timeout_)*/0u
  , /*decltype(_impl_.sample_ms_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OutputConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputConfigDefaultTypeInternal() {}
  union {
    OutputConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputConfigDefaultTypeInternal _OutputConfig_default_instance_;
PROTOBUF_CONSTEXPR ModelType::ModelType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_fields_)*/{}
  , /*decltype(_impl_.output_fields_)*/{}
  , /*decltype(_impl_.model_type_fields_)*/{}
  , /*decltype(_impl_.expected_input_layers_)*/{}
  , /*decltype(_impl_.expected_output_layers_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trainable_)*/false
  , /*decltype(_impl_.creatable_)*/false
  , /*decltype(_impl_.internal_only_)*/false
  , /*decltype(_impl_.requires_sequential_frames_)*/false
  , /*decltype(_impl_.evaluation_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelTypeDefaultTypeInternal() {}
  union {
    ModelType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelTypeDefaultTypeInternal _ModelType_default_instance_;
PROTOBUF_CONSTEXPR ModelLayerInfo::ModelLayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shapes_)*/{}
  , /*decltype(_impl_.data_field_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requires_label_filename_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelLayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelLayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelLayerInfoDefaultTypeInternal() {}
  union {
    ModelLayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelLayerInfoDefaultTypeInternal _ModelLayerInfo_default_instance_;
PROTOBUF_CONSTEXPR TritonCondaEnvInfo::TritonCondaEnvInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conda_pack_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.conda_yaml_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TritonCondaEnvInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TritonCondaEnvInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TritonCondaEnvInfoDefaultTypeInternal() {}
  union {
    TritonCondaEnvInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TritonCondaEnvInfoDefaultTypeInternal _TritonCondaEnvInfo_default_instance_;
PROTOBUF_CONSTEXPR LayerShape::LayerShape(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dims_)*/{}
  , /*decltype(_impl_._dims_cached_byte_size_)*/{0}
  , /*decltype(_impl_.max_dims_)*/{}
  , /*decltype(_impl_._max_dims_cached_byte_size_)*/{0}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LayerShapeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerShapeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerShapeDefaultTypeInternal() {}
  union {
    LayerShape _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerShapeDefaultTypeInternal _LayerShape_default_instance_;
PROTOBUF_CONSTEXPR ModelTypeField::ModelTypeField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_type_enum_options_)*/{}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.placeholder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.default_value_)*/nullptr
  , /*decltype(_impl_.model_type_range_info_)*/nullptr
  , /*decltype(_impl_.field_type_)*/0
  , /*decltype(_impl_.internal_only_)*/false
  , /*decltype(_impl_.required_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelTypeFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelTypeFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelTypeFieldDefaultTypeInternal() {}
  union {
    ModelTypeField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelTypeFieldDefaultTypeInternal _ModelTypeField_default_instance_;
PROTOBUF_CONSTEXPR ModelTypeRangeInfo::ModelTypeRangeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.min_)*/0
  , /*decltype(_impl_.max_)*/0
  , /*decltype(_impl_.step_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelTypeRangeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelTypeRangeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelTypeRangeInfoDefaultTypeInternal() {}
  union {
    ModelTypeRangeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelTypeRangeInfoDefaultTypeInternal _ModelTypeRangeInfo_default_instance_;
PROTOBUF_CONSTEXPR ModelTypeEnumOption::ModelTypeEnumOption(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_type_fields_)*/{}
  , /*decltype(_impl_.aliases_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.internal_only_)*/false
  , /*decltype(_impl_.recommended_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelTypeEnumOptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelTypeEnumOptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelTypeEnumOptionDefaultTypeInternal() {}
  union {
    ModelTypeEnumOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelTypeEnumOptionDefaultTypeInternal _ModelTypeEnumOption_default_instance_;
PROTOBUF_CONSTEXPR ModelTypeEnumOptionAlias::ModelTypeEnumOptionAlias(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wildcard_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_int_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelTypeEnumOptionAliasDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelTypeEnumOptionAliasDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelTypeEnumOptionAliasDefaultTypeInternal() {}
  union {
    ModelTypeEnumOptionAlias _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelTypeEnumOptionAliasDefaultTypeInternal _ModelTypeEnumOptionAlias_default_instance_;
PROTOBUF_CONSTEXPR ModelQuery::ModelQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_type_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelQueryDefaultTypeInternal() {}
  union {
    ModelQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelQueryDefaultTypeInternal _ModelQuery_default_instance_;
PROTOBUF_CONSTEXPR ModelVersion::ModelVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.license_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.train_log_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.metrics_)*/nullptr
  , /*decltype(_impl_.pretrained_model_config_)*/nullptr
  , /*decltype(_impl_.completed_at_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.output_info_)*/nullptr
  , /*decltype(_impl_.input_info_)*/nullptr
  , /*decltype(_impl_.train_info_)*/nullptr
  , /*decltype(_impl_.import_info_)*/nullptr
  , /*decltype(_impl_.active_concept_count_)*/0u
  , /*decltype(_impl_.total_input_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelVersionDefaultTypeInternal() {}
  union {
    ModelVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelVersionDefaultTypeInternal _ModelVersion_default_instance_;
PROTOBUF_CONSTEXPR PretrainedModelConfig::PretrainedModelConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_zip_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_fields_map_)*/nullptr
  , /*decltype(_impl_.output_fields_map_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PretrainedModelConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PretrainedModelConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PretrainedModelConfigDefaultTypeInternal() {}
  union {
    PretrainedModelConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PretrainedModelConfigDefaultTypeInternal _PretrainedModelConfig_default_instance_;
PROTOBUF_CONSTEXPR TrainStats::TrainStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.loss_curve_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrainStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrainStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrainStatsDefaultTypeInternal() {}
  union {
    TrainStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrainStatsDefaultTypeInternal _TrainStats_default_instance_;
PROTOBUF_CONSTEXPR LossCurveEntry::LossCurveEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.epoch_)*/0u
  , /*decltype(_impl_.global_step_)*/0u
  , /*decltype(_impl_.cost_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LossCurveEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LossCurveEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LossCurveEntryDefaultTypeInternal() {}
  union {
    LossCurveEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LossCurveEntryDefaultTypeInternal _LossCurveEntry_default_instance_;
PROTOBUF_CONSTEXPR LabelCount::LabelCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.concept_)*/nullptr
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LabelCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelCountDefaultTypeInternal() {}
  union {
    LabelCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelCountDefaultTypeInternal _LabelCount_default_instance_;
PROTOBUF_CONSTEXPR LabelDistribution::LabelDistribution(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.positive_label_counts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LabelDistributionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelDistributionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelDistributionDefaultTypeInternal() {}
  union {
    LabelDistribution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelDistributionDefaultTypeInternal _LabelDistribution_default_instance_;
PROTOBUF_CONSTEXPR CooccurrenceMatrixEntry::CooccurrenceMatrixEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.row_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CooccurrenceMatrixEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CooccurrenceMatrixEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CooccurrenceMatrixEntryDefaultTypeInternal() {}
  union {
    CooccurrenceMatrixEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CooccurrenceMatrixEntryDefaultTypeInternal _CooccurrenceMatrixEntry_default_instance_;
PROTOBUF_CONSTEXPR CooccurrenceMatrix::CooccurrenceMatrix(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.matrix_)*/{}
  , /*decltype(_impl_.concept_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CooccurrenceMatrixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CooccurrenceMatrixDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CooccurrenceMatrixDefaultTypeInternal() {}
  union {
    CooccurrenceMatrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CooccurrenceMatrixDefaultTypeInternal _CooccurrenceMatrix_default_instance_;
PROTOBUF_CONSTEXPR ConfusionMatrixEntry::ConfusionMatrixEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.predicted_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.actual_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.predicted_concept_)*/nullptr
  , /*decltype(_impl_.actual_concept_)*/nullptr
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfusionMatrixEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfusionMatrixEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfusionMatrixEntryDefaultTypeInternal() {}
  union {
    ConfusionMatrixEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfusionMatrixEntryDefaultTypeInternal _ConfusionMatrixEntry_default_instance_;
PROTOBUF_CONSTEXPR ConfusionMatrix::ConfusionMatrix(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.matrix_)*/{}
  , /*decltype(_impl_.concept_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfusionMatrixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfusionMatrixDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfusionMatrixDefaultTypeInternal() {}
  union {
    ConfusionMatrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfusionMatrixDefaultTypeInternal _ConfusionMatrix_default_instance_;
PROTOBUF_CONSTEXPR ROC::ROC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fpr_)*/{}
  , /*decltype(_impl_.tpr_)*/{}
  , /*decltype(_impl_.thresholds_)*/{}
  , /*decltype(_impl_.fpr_per_image_)*/{}
  , /*decltype(_impl_.fpr_per_object_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ROCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ROCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ROCDefaultTypeInternal() {}
  union {
    ROC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ROCDefaultTypeInternal _ROC_default_instance_;
PROTOBUF_CONSTEXPR PrecisionRecallCurve::PrecisionRecallCurve(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.recall_)*/{}
  , /*decltype(_impl_.precision_)*/{}
  , /*decltype(_impl_.thresholds_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrecisionRecallCurveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrecisionRecallCurveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrecisionRecallCurveDefaultTypeInternal() {}
  union {
    PrecisionRecallCurve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrecisionRecallCurveDefaultTypeInternal _PrecisionRecallCurve_default_instance_;
PROTOBUF_CONSTEXPR BinaryMetrics::BinaryMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.area_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.concept_)*/nullptr
  , /*decltype(_impl_.roc_curve_)*/nullptr
  , /*decltype(_impl_.precision_recall_curve_)*/nullptr
  , /*decltype(_impl_.num_pos_)*/0u
  , /*decltype(_impl_.num_neg_)*/0u
  , /*decltype(_impl_.num_tot_)*/0u
  , /*decltype(_impl_.roc_auc_)*/0
  , /*decltype(_impl_.f1_)*/0
  , /*decltype(_impl_.avg_precision_)*/0
  , /*decltype(_impl_.area_min_)*/0
  , /*decltype(_impl_.area_max_)*/0
  , /*decltype(_impl_.iou_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BinaryMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryMetricsDefaultTypeInternal() {}
  union {
    BinaryMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryMetricsDefaultTypeInternal _BinaryMetrics_default_instance_;
PROTOBUF_CONSTEXPR TrackerMetrics::TrackerMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aiid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mot_mota_)*/0
  , /*decltype(_impl_.mot_num_switches_)*/0
  , /*decltype(_impl_.morse_frag_)*/0
  , /*decltype(_impl_.avg_precision_)*/0
  , /*decltype(_impl_.unique_switch_rate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrackerMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackerMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackerMetricsDefaultTypeInternal() {}
  union {
    TrackerMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackerMetricsDefaultTypeInternal _TrackerMetrics_default_instance_;
PROTOBUF_CONSTEXPR EvalTestSetEntry::EvalTestSetEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.predicted_concepts_)*/{}
  , /*decltype(_impl_.ground_truth_concepts_)*/{}
  , /*decltype(_impl_.annotation_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EvalTestSetEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EvalTestSetEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EvalTestSetEntryDefaultTypeInternal() {}
  union {
    EvalTestSetEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvalTestSetEntryDefaultTypeInternal _EvalTestSetEntry_default_instance_;
PROTOBUF_CONSTEXPR LOPQEvalResult::LOPQEvalResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.k_)*/0
  , /*decltype(_impl_.recall_vs_brute_force_)*/0
  , /*decltype(_impl_.kendall_tau_vs_brute_force_)*/0
  , /*decltype(_impl_.most_frequent_code_percent_)*/0
  , /*decltype(_impl_.lopq_ndcg_)*/0
  , /*decltype(_impl_.brute_force_ndcg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LOPQEvalResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LOPQEvalResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LOPQEvalResultDefaultTypeInternal() {}
  union {
    LOPQEvalResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LOPQEvalResultDefaultTypeInternal _LOPQEvalResult_default_instance_;
PROTOBUF_CONSTEXPR MetricsSummary::MetricsSummary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lopq_metrics_)*/{}
  , /*decltype(_impl_.top1_accuracy_)*/0
  , /*decltype(_impl_.top5_accuracy_)*/0
  , /*decltype(_impl_.macro_avg_roc_auc_)*/0
  , /*decltype(_impl_.macro_std_roc_auc_)*/0
  , /*decltype(_impl_.macro_avg_f1_score_)*/0
  , /*decltype(_impl_.macro_std_f1_score_)*/0
  , /*decltype(_impl_.macro_avg_precision_)*/0
  , /*decltype(_impl_.macro_avg_recall_)*/0
  , /*decltype(_impl_.mean_avg_precision_iou_50_)*/0
  , /*decltype(_impl_.mean_avg_precision_iou_range_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricsSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricsSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricsSummaryDefaultTypeInternal() {}
  union {
    MetricsSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricsSummaryDefaultTypeInternal _MetricsSummary_default_instance_;
PROTOBUF_CONSTEXPR EvalMetrics::EvalMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.binary_metrics_)*/{}
  , /*decltype(_impl_.test_set_)*/{}
  , /*decltype(_impl_.metrics_by_area_)*/{}
  , /*decltype(_impl_.metrics_by_class_)*/{}
  , /*decltype(_impl_.tracker_metrics_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.summary_)*/nullptr
  , /*decltype(_impl_.confusion_matrix_)*/nullptr
  , /*decltype(_impl_.cooccurrence_matrix_)*/nullptr
  , /*decltype(_impl_.label_counts_)*/nullptr
  , /*decltype(_impl_.eval_info_)*/nullptr
  , /*decltype(_impl_.model_)*/nullptr
  , /*decltype(_impl_.ground_truth_dataset_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EvalMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EvalMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EvalMetricsDefaultTypeInternal() {}
  union {
    EvalMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvalMetricsDefaultTypeInternal _EvalMetrics_default_instance_;
PROTOBUF_CONSTEXPR FieldsValue::FieldsValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.confusion_matrix_)*/false
  , /*decltype(_impl_.cooccurrence_matrix_)*/false
  , /*decltype(_impl_.label_counts_)*/false
  , /*decltype(_impl_.binary_metrics_)*/false
  , /*decltype(_impl_.test_set_)*/false
  , /*decltype(_impl_.metrics_by_area_)*/false
  , /*decltype(_impl_.metrics_by_class_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FieldsValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldsValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldsValueDefaultTypeInternal() {}
  union {
    FieldsValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldsValueDefaultTypeInternal _FieldsValue_default_instance_;
PROTOBUF_CONSTEXPR Output::Output(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.model_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputDefaultTypeInternal() {}
  union {
    Output _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputDefaultTypeInternal _Output_default_instance_;
PROTOBUF_CONSTEXPR ScopeDeps::ScopeDeps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.depending_scopes_)*/{}
  , /*decltype(_impl_.scope_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScopeDepsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScopeDepsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScopeDepsDefaultTypeInternal() {}
  union {
    ScopeDeps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScopeDepsDefaultTypeInternal _ScopeDeps_default_instance_;
PROTOBUF_CONSTEXPR EndpointDeps::EndpointDeps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.depending_scopes_)*/{}
  , /*decltype(_impl_.endpoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EndpointDepsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndpointDepsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndpointDepsDefaultTypeInternal() {}
  union {
    EndpointDeps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndpointDepsDefaultTypeInternal _EndpointDeps_default_instance_;
PROTOBUF_CONSTEXPR Hit::Hit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.annotation_)*/nullptr
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HitDefaultTypeInternal() {}
  union {
    Hit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HitDefaultTypeInternal _Hit_default_instance_;
PROTOBUF_CONSTEXPR HitCount::HitCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.estimated_total_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HitCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HitCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HitCountDefaultTypeInternal() {}
  union {
    HitCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HitCountDefaultTypeInternal _HitCount_default_instance_;
PROTOBUF_CONSTEXPR And::And(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.output_)*/nullptr
  , /*decltype(_impl_.annotation_)*/nullptr
  , /*decltype(_impl_.negate_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndDefaultTypeInternal() {}
  union {
    And _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndDefaultTypeInternal _And_default_instance_;
PROTOBUF_CONSTEXPR Query::Query(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ands_)*/{}
  , /*decltype(_impl_.filters_)*/{}
  , /*decltype(_impl_.ranks_)*/{}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDefaultTypeInternal() {}
  union {
    Query _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDefaultTypeInternal _Query_default_instance_;
PROTOBUF_CONSTEXPR Search::Search(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.application_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.git_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.algorithm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.query_)*/nullptr
  , /*decltype(_impl_.as_of_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_.save_)*/false
  , /*decltype(_impl_.min_value_)*/0
  , /*decltype(_impl_.metric_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchDefaultTypeInternal() {}
  union {
    Search _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchDefaultTypeInternal _Search_default_instance_;
PROTOBUF_CONSTEXPR Filter::Filter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.annotation_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.last_updated_time_range_)*/nullptr
  , /*decltype(_impl_.negate_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterDefaultTypeInternal() {}
  union {
    Filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterDefaultTypeInternal _Filter_default_instance_;
PROTOBUF_CONSTEXPR TimeRange::TimeRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeRangeDefaultTypeInternal() {}
  union {
    TimeRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
PROTOBUF_CONSTEXPR Rank::Rank(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.annotation_)*/nullptr
  , /*decltype(_impl_.negate_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RankDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RankDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RankDefaultTypeInternal() {}
  union {
    Rank _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RankDefaultTypeInternal _Rank_default_instance_;
PROTOBUF_CONSTEXPR AnnotationSearchMetrics::AnnotationSearchMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ground_truth_)*/nullptr
  , /*decltype(_impl_.search_to_eval_)*/nullptr
  , /*decltype(_impl_.metrics_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_.active_concept_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnnotationSearchMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnotationSearchMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnotationSearchMetricsDefaultTypeInternal() {}
  union {
    AnnotationSearchMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnotationSearchMetricsDefaultTypeInternal _AnnotationSearchMetrics_default_instance_;
PROTOBUF_CONSTEXPR Text::Text(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.raw_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hosted_)*/nullptr
  , /*decltype(_impl_.text_info_)*/nullptr
  , /*decltype(_impl_.allow_duplicate_url_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextDefaultTypeInternal() {}
  union {
    Text _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextDefaultTypeInternal _Text_default_instance_;
PROTOBUF_CONSTEXPR TextInfo::TextInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encoding_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.char_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TextInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextInfoDefaultTypeInternal() {}
  union {
    TextInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextInfoDefaultTypeInternal _TextInfo_default_instance_;
PROTOBUF_CONSTEXPR User::User(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.email_addresses_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.primary_email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.first_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.company_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bill_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.job_title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.job_role_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.date_gdpr_consent_)*/nullptr
  , /*decltype(_impl_.date_tos_consent_)*/nullptr
  , /*decltype(_impl_.date_marketing_consent_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_.user_detail_)*/nullptr
  , /*decltype(_impl_.date_pii_consent_)*/nullptr
  , /*decltype(_impl_.teams_count_)*/0u
  , /*decltype(_impl_.two_factor_auth_enabled_)*/false
  , /*decltype(_impl_.is_starred_)*/false
  , /*decltype(_impl_.star_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserDefaultTypeInternal() {}
  union {
    User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserDefaultTypeInternal _User_default_instance_;
PROTOBUF_CONSTEXPR UserDetail::UserDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.email_addresses_)*/{}
  , /*decltype(_impl_.primary_email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bill_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.date_gdpr_consent_)*/nullptr
  , /*decltype(_impl_.date_tos_consent_)*/nullptr
  , /*decltype(_impl_.date_marketing_consent_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.date_pii_consent_)*/nullptr
  , /*decltype(_impl_.two_factor_auth_enabled_)*/false
  , /*decltype(_impl_.teams_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserDetailDefaultTypeInternal() {}
  union {
    UserDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserDetailDefaultTypeInternal _UserDetail_default_instance_;
PROTOBUF_CONSTEXPR EmailAddress::EmailAddress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.primary_)*/false
  , /*decltype(_impl_.verified_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailAddressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailAddressDefaultTypeInternal() {}
  union {
    EmailAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailAddressDefaultTypeInternal _EmailAddress_default_instance_;
PROTOBUF_CONSTEXPR Password::Password(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.plaintext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PasswordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PasswordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PasswordDefaultTypeInternal() {}
  union {
    Password _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PasswordDefaultTypeInternal _Password_default_instance_;
PROTOBUF_CONSTEXPR PasswordViolations::PasswordViolations(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.minimum_length_)*/false
  , /*decltype(_impl_.maximum_length_)*/false
  , /*decltype(_impl_.upper_case_needed_)*/false
  , /*decltype(_impl_.lower_case_needed_)*/false
  , /*decltype(_impl_.numeric_needed_)*/false
  , /*decltype(_impl_.non_alphanumeric_needed_)*/false
  , /*decltype(_impl_.password_reuse_)*/false
  , /*decltype(_impl_.exclude_names_)*/false
  , /*decltype(_impl_.exclude_email_)*/false
  , /*decltype(_impl_.no_confusing_letters_)*/false
  , /*decltype(_impl_.no_simple_passwords_)*/false
  , /*decltype(_impl_.no_common_vocabs_)*/false
  , /*decltype(_impl_.no_overlap_with_old_)*/false
  , /*decltype(_impl_.password_lifespan_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PasswordViolationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PasswordViolationsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PasswordViolationsDefaultTypeInternal() {}
  union {
    PasswordViolations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PasswordViolationsDefaultTypeInternal _PasswordViolations_default_instance_;
PROTOBUF_CONSTEXPR Video::Video(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base64_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnail_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hosted_)*/nullptr
  , /*decltype(_impl_.video_info_)*/nullptr
  , /*decltype(_impl_.allow_duplicate_url_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoDefaultTypeInternal() {}
  union {
    Video _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoDefaultTypeInternal _Video_default_instance_;
PROTOBUF_CONSTEXPR VideoInfo::VideoInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.video_format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.fps_)*/0
  , /*decltype(_impl_.bit_rate_)*/0
  , /*decltype(_impl_.frame_count_)*/0
  , /*decltype(_impl_.duration_seconds_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoInfoDefaultTypeInternal() {}
  union {
    VideoInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoInfoDefaultTypeInternal _VideoInfo_default_instance_;
PROTOBUF_CONSTEXPR Workflow::Workflow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_.use_cases_)*/{}
  , /*decltype(_impl_.check_consents_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.bookmark_origin_)*/nullptr
  , /*decltype(_impl_.is_starred_)*/false
  , /*decltype(_impl_.star_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkflowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkflowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkflowDefaultTypeInternal() {}
  union {
    Workflow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkflowDefaultTypeInternal _Workflow_default_instance_;
PROTOBUF_CONSTEXPR WorkflowVersion::WorkflowVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.license_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkflowVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkflowVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkflowVersionDefaultTypeInternal() {}
  union {
    WorkflowVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkflowVersionDefaultTypeInternal _WorkflowVersion_default_instance_;
PROTOBUF_CONSTEXPR WorkflowNode::WorkflowNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_inputs_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_)*/nullptr
  , /*decltype(_impl_.output_info_override_)*/nullptr
  , /*decltype(_impl_.suppress_output_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkflowNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkflowNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkflowNodeDefaultTypeInternal() {}
  union {
    WorkflowNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkflowNodeDefaultTypeInternal _WorkflowNode_default_instance_;
PROTOBUF_CONSTEXPR NodeInput::NodeInput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeInputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeInputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeInputDefaultTypeInternal() {}
  union {
    NodeInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeInputDefaultTypeInternal _NodeInput_default_instance_;
PROTOBUF_CONSTEXPR WorkflowResult::WorkflowResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.outputs_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.model_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.suppress_output_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkflowResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkflowResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkflowResultDefaultTypeInternal() {}
  union {
    WorkflowResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkflowResultDefaultTypeInternal _WorkflowResult_default_instance_;
PROTOBUF_CONSTEXPR WorkflowState::WorkflowState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkflowStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkflowStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkflowStateDefaultTypeInternal() {}
  union {
    WorkflowState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkflowStateDefaultTypeInternal _WorkflowState_default_instance_;
PROTOBUF_CONSTEXPR AppDuplication::AppDuplication(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.progress_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_app_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.existing_app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.last_modified_at_)*/nullptr
  , /*decltype(_impl_.filter_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppDuplicationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppDuplicationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppDuplicationDefaultTypeInternal() {}
  union {
    AppDuplication _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppDuplicationDefaultTypeInternal _AppDuplication_default_instance_;
PROTOBUF_CONSTEXPR AppCopyProgress::AppCopyProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppCopyProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppCopyProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppCopyProgressDefaultTypeInternal() {}
  union {
    AppCopyProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppCopyProgressDefaultTypeInternal _AppCopyProgress_default_instance_;
PROTOBUF_CONSTEXPR AppDuplicationFilters::AppDuplicationFilters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.copy_inputs_)*/false
  , /*decltype(_impl_.copy_concepts_)*/false
  , /*decltype(_impl_.copy_annotations_)*/false
  , /*decltype(_impl_.copy_models_)*/false
  , /*decltype(_impl_.copy_workflows_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppDuplicationFiltersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppDuplicationFiltersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppDuplicationFiltersDefaultTypeInternal() {}
  union {
    AppDuplicationFilters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppDuplicationFiltersDefaultTypeInternal _AppDuplicationFilters_default_instance_;
PROTOBUF_CONSTEXPR LabelOrder::LabelOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.desired_fulfill_time_)*/nullptr
  , /*decltype(_impl_.estimate_fulfill_time_)*/nullptr
  , /*decltype(_impl_.task_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.auto_release_)*/false
  , /*decltype(_impl_.allow_empty_tag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LabelOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelOrderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelOrderDefaultTypeInternal() {}
  union {
    LabelOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelOrderDefaultTypeInternal _LabelOrder_default_instance_;
PROTOBUF_CONSTEXPR Task::Task(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_ids_)*/{}
  , /*decltype(_impl_.concepts_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.label_order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.worker_)*/nullptr
  , /*decltype(_impl_.input_source_)*/nullptr
  , /*decltype(_impl_.ai_assistant_)*/nullptr
  , /*decltype(_impl_.review_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.ai_assist_params_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.sample_ms_)*/0u
  , /*decltype(_impl_.delete_previous_annotations_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskDefaultTypeInternal _Task_default_instance_;
PROTOBUF_CONSTEXPR AiAssistParameters::AiAssistParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_relation_ids_)*/{}
  , /*decltype(_impl_.min_threshold_)*/0
  , /*decltype(_impl_.max_threshold_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AiAssistParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiAssistParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiAssistParametersDefaultTypeInternal() {}
  union {
    AiAssistParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiAssistParametersDefaultTypeInternal _AiAssistParameters_default_instance_;
PROTOBUF_CONSTEXPR TaskWorker::TaskWorker(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_ids_)*/{}
  , /*decltype(_impl_.users_)*/{}
  , /*decltype(_impl_.models_)*/{}
  , /*decltype(_impl_.workflows_)*/{}
  , /*decltype(_impl_.strategy_)*/0
  , /*decltype(_impl_.strategy_info_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TaskWorkerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskWorkerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskWorkerDefaultTypeInternal() {}
  union {
    TaskWorker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskWorkerDefaultTypeInternal _TaskWorker_default_instance_;
PROTOBUF_CONSTEXPR TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weights_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.workers_per_input_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskWorkerPartitionedStrategyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskWorkerPartitionedStrategyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskWorkerPartitionedStrategyInfoDefaultTypeInternal() {}
  union {
    TaskWorkerPartitionedStrategyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskWorkerPartitionedStrategyInfoDefaultTypeInternal _TaskWorkerPartitionedStrategyInfo_default_instance_;
PROTOBUF_CONSTEXPR TaskInputSource::TaskInputSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskInputSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskInputSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskInputSourceDefaultTypeInternal() {}
  union {
    TaskInputSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskInputSourceDefaultTypeInternal _TaskInputSource_default_instance_;
PROTOBUF_CONSTEXPR TaskReview::TaskReview(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_ids_)*/{}
  , /*decltype(_impl_.users_)*/{}
  , /*decltype(_impl_.strategy_)*/0
  , /*decltype(_impl_.strategy_info_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TaskReviewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskReviewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskReviewDefaultTypeInternal() {}
  union {
    TaskReview _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskReviewDefaultTypeInternal _TaskReview_default_instance_;
PROTOBUF_CONSTEXPR TaskReviewManualStrategyInfo::TaskReviewManualStrategyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sample_percentage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskReviewManualStrategyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskReviewManualStrategyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskReviewManualStrategyInfoDefaultTypeInternal() {}
  union {
    TaskReviewManualStrategyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskReviewManualStrategyInfoDefaultTypeInternal _TaskReviewManualStrategyInfo_default_instance_;
PROTOBUF_CONSTEXPR TaskReviewConsensusStrategyInfo::TaskReviewConsensusStrategyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.approval_threshold_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskReviewConsensusStrategyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskReviewConsensusStrategyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskReviewConsensusStrategyInfoDefaultTypeInternal() {}
  union {
    TaskReviewConsensusStrategyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskReviewConsensusStrategyInfoDefaultTypeInternal _TaskReviewConsensusStrategyInfo_default_instance_;
PROTOBUF_CONSTEXPR TaskAIAssistant::TaskAIAssistant(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskAIAssistantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskAIAssistantDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskAIAssistantDefaultTypeInternal() {}
  union {
    TaskAIAssistant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskAIAssistantDefaultTypeInternal _TaskAIAssistant_default_instance_;
PROTOBUF_CONSTEXPR TaskStatusCountPerUser::TaskStatusCountPerUser(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pending_)*/0u
  , /*decltype(_impl_.awaiting_review_)*/0u
  , /*decltype(_impl_.success_)*/0u
  , /*decltype(_impl_.review_denied_)*/0u
  , /*decltype(_impl_.awaiting_consensus_review_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskStatusCountPerUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskStatusCountPerUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskStatusCountPerUserDefaultTypeInternal() {}
  union {
    TaskStatusCountPerUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskStatusCountPerUserDefaultTypeInternal _TaskStatusCountPerUser_default_instance_;
PROTOBUF_CONSTEXPR ThresholdRange::ThresholdRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.is_lower_inclusive_)*/false
  , /*decltype(_impl_.is_upper_inclusive_)*/false
  , /*decltype(_impl_.lower_)*/0
  , /*decltype(_impl_.upper_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ThresholdRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThresholdRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThresholdRangeDefaultTypeInternal() {}
  union {
    ThresholdRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThresholdRangeDefaultTypeInternal _ThresholdRange_default_instance_;
PROTOBUF_CONSTEXPR TaskConceptAutoAnnotationConfig::TaskConceptAutoAnnotationConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.threshold_range_)*/nullptr
  , /*decltype(_impl_.annotation_data_types_)*/0u
  , /*decltype(_impl_.status_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskConceptAutoAnnotationConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskConceptAutoAnnotationConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskConceptAutoAnnotationConfigDefaultTypeInternal() {}
  union {
    TaskConceptAutoAnnotationConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskConceptAutoAnnotationConfigDefaultTypeInternal _TaskConceptAutoAnnotationConfig_default_instance_;
PROTOBUF_CONSTEXPR TaskConcept::TaskConcept(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_)*/nullptr
  , /*decltype(_impl_.auto_annotation_config_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskConceptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskConceptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskConceptDefaultTypeInternal() {}
  union {
    TaskConcept _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskConceptDefaultTypeInternal _TaskConcept_default_instance_;
PROTOBUF_CONSTEXPR Collector::Collector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pre_queue_workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.post_queue_workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.collector_source_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectorDefaultTypeInternal() {}
  union {
    Collector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectorDefaultTypeInternal _Collector_default_instance_;
PROTOBUF_CONSTEXPR CollectorSource::CollectorSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.api_post_model_outputs_collector_source_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollectorSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectorSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectorSourceDefaultTypeInternal() {}
  union {
    CollectorSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectorSourceDefaultTypeInternal _CollectorSource_default_instance_;
PROTOBUF_CONSTEXPR APIPostModelOutputsCollectorSource::APIPostModelOutputsCollectorSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.post_inputs_key_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APIPostModelOutputsCollectorSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APIPostModelOutputsCollectorSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APIPostModelOutputsCollectorSourceDefaultTypeInternal() {}
  union {
    APIPostModelOutputsCollectorSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APIPostModelOutputsCollectorSourceDefaultTypeInternal _APIPostModelOutputsCollectorSource_default_instance_;
PROTOBUF_CONSTEXPR StatValue::StatValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatValueDefaultTypeInternal() {}
  union {
    StatValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatValueDefaultTypeInternal _StatValue_default_instance_;
PROTOBUF_CONSTEXPR StatValueAggregateResult::StatValueAggregateResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stat_value_aggregates_)*/{}
  , /*decltype(_impl_.stat_value_aggregate_query_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatValueAggregateResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatValueAggregateResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatValueAggregateResultDefaultTypeInternal() {}
  union {
    StatValueAggregateResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatValueAggregateResultDefaultTypeInternal _StatValueAggregateResult_default_instance_;
PROTOBUF_CONSTEXPR StatValueAggregate::StatValueAggregate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.count_)*/uint64_t{0u}
  , /*decltype(_impl_.aggregate_value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatValueAggregateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatValueAggregateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatValueAggregateDefaultTypeInternal() {}
  union {
    StatValueAggregate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatValueAggregateDefaultTypeInternal _StatValueAggregate_default_instance_;
PROTOBUF_CONSTEXPR StatValueAggregateQuery::StatValueAggregateQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.tag_groups_)*/{}
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr
  , /*decltype(_impl_.stat_value_agg_type_)*/0
  , /*decltype(_impl_.stat_time_agg_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatValueAggregateQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatValueAggregateQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatValueAggregateQueryDefaultTypeInternal() {}
  union {
    StatValueAggregateQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatValueAggregateQueryDefaultTypeInternal _StatValueAggregateQuery_default_instance_;
PROTOBUF_CONSTEXPR DatasetInputsSearchAddJob::DatasetInputsSearchAddJob(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.search_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatasetInputsSearchAddJobDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetInputsSearchAddJobDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetInputsSearchAddJobDefaultTypeInternal() {}
  union {
    DatasetInputsSearchAddJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetInputsSearchAddJobDefaultTypeInternal _DatasetInputsSearchAddJob_default_instance_;
PROTOBUF_CONSTEXPR PCAProjectionComparator::PCAProjectionComparator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.distance_threshold_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PCAProjectionComparatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PCAProjectionComparatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PCAProjectionComparatorDefaultTypeInternal() {}
  union {
    PCAProjectionComparator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PCAProjectionComparatorDefaultTypeInternal _PCAProjectionComparator_default_instance_;
PROTOBUF_CONSTEXPR DuplicateAnnotationsResults::DuplicateAnnotationsResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.duplicate_cfid_)*/{}
  , /*decltype(_impl_.unique_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DuplicateAnnotationsResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DuplicateAnnotationsResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DuplicateAnnotationsResultsDefaultTypeInternal() {}
  union {
    DuplicateAnnotationsResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DuplicateAnnotationsResultsDefaultTypeInternal _DuplicateAnnotationsResults_default_instance_;
PROTOBUF_CONSTEXPR Visibility::Visibility(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gettable_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VisibilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisibilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisibilityDefaultTypeInternal() {}
  union {
    Visibility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisibilityDefaultTypeInternal _Visibility_default_instance_;
PROTOBUF_CONSTEXPR TrendingMetric::TrendingMetric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.view_count_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrendingMetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrendingMetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrendingMetricDefaultTypeInternal() {}
  union {
    TrendingMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrendingMetricDefaultTypeInternal _TrendingMetric_default_instance_;
PROTOBUF_CONSTEXPR FullTag::FullTag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FullTagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FullTagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FullTagDefaultTypeInternal() {}
  union {
    FullTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FullTagDefaultTypeInternal _FullTag_default_instance_;
PROTOBUF_CONSTEXPR TimeSegment::TimeSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.time_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeSegmentDefaultTypeInternal() {}
  union {
    TimeSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeSegmentDefaultTypeInternal _TimeSegment_default_instance_;
PROTOBUF_CONSTEXPR TimeInfo::TimeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_frames_)*/0u
  , /*decltype(_impl_.begin_time_)*/0u
  , /*decltype(_impl_.end_time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeInfoDefaultTypeInternal() {}
  union {
    TimeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeInfoDefaultTypeInternal _TimeInfo_default_instance_;
PROTOBUF_CONSTEXPR DatasetStar::DatasetStar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatasetStarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetStarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetStarDefaultTypeInternal() {}
  union {
    DatasetStar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetStarDefaultTypeInternal _DatasetStar_default_instance_;
PROTOBUF_CONSTEXPR ModuleStar::ModuleStar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.module_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModuleStarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleStarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleStarDefaultTypeInternal() {}
  union {
    ModuleStar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleStarDefaultTypeInternal _ModuleStar_default_instance_;
PROTOBUF_CONSTEXPR Module::Module(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.module_version_)*/nullptr
  , /*decltype(_impl_.bookmark_origin_)*/nullptr
  , /*decltype(_impl_.is_starred_)*/false
  , /*decltype(_impl_.star_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleDefaultTypeInternal() {}
  union {
    Module _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleDefaultTypeInternal _Module_default_instance_;
PROTOBUF_CONSTEXPR ModuleVersion_ModuleSubNav::ModuleVersion_ModuleSubNav(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.query_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.query_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModuleVersion_ModuleSubNavDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleVersion_ModuleSubNavDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleVersion_ModuleSubNavDefaultTypeInternal() {}
  union {
    ModuleVersion_ModuleSubNav _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleVersion_ModuleSubNavDefaultTypeInternal _ModuleVersion_ModuleSubNav_default_instance_;
PROTOBUF_CONSTEXPR ModuleVersion_ModuleNav::ModuleVersion_ModuleNav(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.module_sub_navs_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModuleVersion_ModuleNavDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleVersion_ModuleNavDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleVersion_ModuleNavDefaultTypeInternal() {}
  union {
    ModuleVersion_ModuleNav _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleVersion_ModuleNavDefaultTypeInternal _ModuleVersion_ModuleNav_default_instance_;
PROTOBUF_CONSTEXPR ModuleVersion::ModuleVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.module_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.git_commit_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.module_nav_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.approved_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModuleVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleVersionDefaultTypeInternal() {}
  union {
    ModuleVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleVersionDefaultTypeInternal _ModuleVersion_default_instance_;
PROTOBUF_CONSTEXPR InstalledModuleVersion::InstalledModuleVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deploy_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.module_version_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.visibility_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstalledModuleVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstalledModuleVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstalledModuleVersionDefaultTypeInternal() {}
  union {
    InstalledModuleVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstalledModuleVersionDefaultTypeInternal _InstalledModuleVersion_default_instance_;
PROTOBUF_CONSTEXPR BulkOperation::BulkOperation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operation_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.progress_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.last_modified_at_)*/nullptr
  , /*decltype(_impl_.input_source_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct BulkOperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BulkOperationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BulkOperationDefaultTypeInternal() {}
  union {
    BulkOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BulkOperationDefaultTypeInternal _BulkOperation_default_instance_;
PROTOBUF_CONSTEXPR InputIDs::InputIDs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputIDsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputIDsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputIDsDefaultTypeInternal() {}
  union {
    InputIDs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputIDsDefaultTypeInternal _InputIDs_default_instance_;
PROTOBUF_CONSTEXPR Progress::Progress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.last_processed_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.processed_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgressDefaultTypeInternal() {}
  union {
    Progress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgressDefaultTypeInternal _Progress_default_instance_;
PROTOBUF_CONSTEXPR Operation::Operation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operation_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationDefaultTypeInternal() {}
  union {
    Operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationDefaultTypeInternal _Operation_default_instance_;
PROTOBUF_CONSTEXPR AddConcepts::AddConcepts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concepts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddConceptsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddConceptsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddConceptsDefaultTypeInternal() {}
  union {
    AddConcepts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddConceptsDefaultTypeInternal _AddConcepts_default_instance_;
PROTOBUF_CONSTEXPR DeleteConcepts::DeleteConcepts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concepts_)*/{}
  , /*decltype(_impl_.user_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteConceptsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteConceptsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteConceptsDefaultTypeInternal() {}
  union {
    DeleteConcepts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteConceptsDefaultTypeInternal _DeleteConcepts_default_instance_;
PROTOBUF_CONSTEXPR AddMetadata::AddMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddMetadataDefaultTypeInternal() {}
  union {
    AddMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddMetadataDefaultTypeInternal _AddMetadata_default_instance_;
PROTOBUF_CONSTEXPR DeleteMetadata::DeleteMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteMetadataDefaultTypeInternal() {}
  union {
    DeleteMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteMetadataDefaultTypeInternal _DeleteMetadata_default_instance_;
PROTOBUF_CONSTEXPR OverwriteGeo::OverwriteGeo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.geo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OverwriteGeoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverwriteGeoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverwriteGeoDefaultTypeInternal() {}
  union {
    OverwriteGeo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverwriteGeoDefaultTypeInternal _OverwriteGeo_default_instance_;
PROTOBUF_CONSTEXPR DeleteGeo::DeleteGeo(
    ::_pbi::ConstantInitialized) {}
struct DeleteGeoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteGeoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteGeoDefaultTypeInternal() {}
  union {
    DeleteGeo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteGeoDefaultTypeInternal _DeleteGeo_default_instance_;
PROTOBUF_CONSTEXPR AddToDataset::AddToDataset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddToDatasetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddToDatasetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddToDatasetDefaultTypeInternal() {}
  union {
    AddToDataset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddToDatasetDefaultTypeInternal _AddToDataset_default_instance_;
PROTOBUF_CONSTEXPR DeleteFromDataset::DeleteFromDataset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteFromDatasetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteFromDatasetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteFromDatasetDefaultTypeInternal() {}
  union {
    DeleteFromDataset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteFromDatasetDefaultTypeInternal _DeleteFromDataset_default_instance_;
PROTOBUF_CONSTEXPR SplitIntoDatasets::SplitIntoDatasets(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_splits_)*/{}
  , /*decltype(_impl_.method_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SplitIntoDatasetsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SplitIntoDatasetsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SplitIntoDatasetsDefaultTypeInternal() {}
  union {
    SplitIntoDatasets _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SplitIntoDatasetsDefaultTypeInternal _SplitIntoDatasets_default_instance_;
PROTOBUF_CONSTEXPR DatasetSplit::DatasetSplit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_)*/nullptr
  , /*decltype(_impl_.method_info_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DatasetSplitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetSplitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetSplitDefaultTypeInternal() {}
  union {
    DatasetSplit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetSplitDefaultTypeInternal _DatasetSplit_default_instance_;
PROTOBUF_CONSTEXPR InputsAddJob::InputsAddJob(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extraction_jobs_)*/{}
  , /*decltype(_impl_.uploads_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.call_back_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_pat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.progress_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputsAddJobDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputsAddJobDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputsAddJobDefaultTypeInternal() {}
  union {
    InputsAddJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputsAddJobDefaultTypeInternal _InputsAddJob_default_instance_;
PROTOBUF_CONSTEXPR InputsAddJobProgress::InputsAddJobProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pending_count_)*/uint64_t{0u}
  , /*decltype(_impl_.in_progress_count_)*/uint64_t{0u}
  , /*decltype(_impl_.success_count_)*/uint64_t{0u}
  , /*decltype(_impl_.failed_count_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputsAddJobProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputsAddJobProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputsAddJobProgressDefaultTypeInternal() {}
  union {
    InputsAddJobProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputsAddJobProgressDefaultTypeInternal _InputsAddJobProgress_default_instance_;
PROTOBUF_CONSTEXPR Upload::Upload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.expires_at_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.content_length_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadDefaultTypeInternal() {}
  union {
    Upload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadDefaultTypeInternal _Upload_default_instance_;
PROTOBUF_CONSTEXPR UploadContentPart::UploadContentPart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.range_start_)*/uint64_t{0u}
  , /*decltype(_impl_.part_number_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadContentPartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadContentPartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadContentPartDefaultTypeInternal() {}
  union {
    UploadContentPart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadContentPartDefaultTypeInternal _UploadContentPart_default_instance_;
PROTOBUF_CONSTEXPR CustomCodeOperatorRequest::CustomCodeOperatorRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_)*/{}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomCodeOperatorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomCodeOperatorRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomCodeOperatorRequestDefaultTypeInternal() {}
  union {
    CustomCodeOperatorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomCodeOperatorRequestDefaultTypeInternal _CustomCodeOperatorRequest_default_instance_;
PROTOBUF_CONSTEXPR InputsExtractionJob::InputsExtractionJob(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.progress_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.input_id_conflict_resolution_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputsExtractionJobDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputsExtractionJobDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputsExtractionJobDefaultTypeInternal() {}
  union {
    InputsExtractionJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputsExtractionJobDefaultTypeInternal _InputsExtractionJob_default_instance_;
PROTOBUF_CONSTEXPR InputsExtractionJobProgress::InputsExtractionJobProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.audio_inputs_count_)*/uint64_t{0u}
  , /*decltype(_impl_.image_inputs_count_)*/uint64_t{0u}
  , /*decltype(_impl_.video_inputs_count_)*/uint64_t{0u}
  , /*decltype(_impl_.text_inputs_count_)*/uint64_t{0u}
  , /*decltype(_impl_.pending_archives_count_)*/uint64_t{0u}
  , /*decltype(_impl_.in_progress_archives_count_)*/uint64_t{0u}
  , /*decltype(_impl_.completed_archives_count_)*/uint64_t{0u}
  , /*decltype(_impl_.failed_archives_count_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputsExtractionJobProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputsExtractionJobProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputsExtractionJobProgressDefaultTypeInternal() {}
  union {
    InputsExtractionJobProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputsExtractionJobProgressDefaultTypeInternal _InputsExtractionJobProgress_default_instance_;
PROTOBUF_CONSTEXPR InputsDataSource::InputsDataSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_add_job_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/nullptr
  , /*decltype(_impl_.input_id_conflict_resolution_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputsDataSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputsDataSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputsDataSourceDefaultTypeInternal() {}
  union {
    InputsDataSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputsDataSourceDefaultTypeInternal _InputsDataSource_default_instance_;
PROTOBUF_CONSTEXPR DataSourceURL::DataSourceURL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.credentials_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataSourceURLDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataSourceURLDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataSourceURLDefaultTypeInternal() {}
  union {
    DataSourceURL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataSourceURLDefaultTypeInternal _DataSourceURL_default_instance_;
PROTOBUF_CONSTEXPR DataSourceCredentials::DataSourceCredentials(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.credentials_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DataSourceCredentialsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataSourceCredentialsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataSourceCredentialsDefaultTypeInternal() {}
  union {
    DataSourceCredentials _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataSourceCredentialsDefaultTypeInternal _DataSourceCredentials_default_instance_;
PROTOBUF_CONSTEXPR AWSCreds::AWSCreds(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AWSCredsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AWSCredsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AWSCredsDefaultTypeInternal() {}
  union {
    AWSCreds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AWSCredsDefaultTypeInternal _AWSCreds_default_instance_;
PROTOBUF_CONSTEXPR AzureBlobCreds::AzureBlobCreds(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AzureBlobCredsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AzureBlobCredsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AzureBlobCredsDefaultTypeInternal() {}
  union {
    AzureBlobCreds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AzureBlobCredsDefaultTypeInternal _AzureBlobCreds_default_instance_;
PROTOBUF_CONSTEXPR InputsUpload::InputsUpload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_add_job_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_pat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.upload_)*/nullptr
  , /*decltype(_impl_.input_id_conflict_resolution_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputsUploadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputsUploadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputsUploadDefaultTypeInternal() {}
  union {
    InputsUpload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputsUploadDefaultTypeInternal _InputsUpload_default_instance_;
PROTOBUF_CONSTEXPR BookmarkOrigin::BookmarkOrigin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BookmarkOriginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BookmarkOriginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BookmarkOriginDefaultTypeInternal() {}
  union {
    BookmarkOrigin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BookmarkOriginDefaultTypeInternal _BookmarkOrigin_default_instance_;
PROTOBUF_CONSTEXPR Runner::Runner(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.labels_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.modified_at_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RunnerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunnerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunnerDefaultTypeInternal() {}
  union {
    Runner _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunnerDefaultTypeInternal _Runner_default_instance_;
}  // namespace api
}  // namespace clarifai
static ::_pb::Metadata file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[194];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[26];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto = nullptr;

const uint32_t TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _impl_.input_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _impl_.annotation_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _impl_.model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _impl_.embed_model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _impl_.trusted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _impl_.input_level_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _impl_.consensus_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _impl_.workflow_version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.default_language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.default_workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.default_workflow_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.legal_consent_status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.sample_ms_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.data_tier_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.is_starred_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.star_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.notes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _impl_.image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppQuery, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, _impl_.app_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, _impl_.scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, _impl_.endpoints_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, _impl_.deleted_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, _impl_.app_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, _impl_.app_owner_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, _impl_.scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, _impl_.endpoints_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, _impl_.created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, _impl_.base64_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, _impl_.allow_duplicate_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, _impl_.hosted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, _impl_.audio_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AudioInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AudioInfo, _impl_.audio_format_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AudioInfo, _impl_.sample_rate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AudioInfo, _impl_.duration_seconds_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AudioInfo, _impl_.bit_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Track, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Track, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Track, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Track, _impl_.time_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Track, _impl_.quality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, _impl_.hits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, _impl_.projection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Color, _impl_.raw_hex_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Color, _impl_.w3c_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Color, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::W3C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::W3C, _impl_.hex_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::W3C, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserAppIDSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserAppIDSet, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserAppIDSet, _impl_.app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAction, _impl_.op_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAction, _impl_.merge_conflict_resolution_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAction, _impl_.path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, _impl_.definition_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, _impl_.vocab_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, _impl_.keypoint_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, _impl_.extra_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KeypointInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KeypointInfo, _impl_.keypoint_names_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KeypointInfo, _impl_.skeleton_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KeypointEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KeypointEdge, _impl_.k1_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KeypointEdge, _impl_.k2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptExtraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptExtraInfo, _impl_.is_rankable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptCount, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptCount, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptCount, _impl_.concept_type_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptCount, _impl_.detail_concept_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptTypeCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptTypeCount, _impl_.positive_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptTypeCount, _impl_.negative_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DetailConceptCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DetailConceptCount, _impl_.processed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DetailConceptCount, _impl_.to_process_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DetailConceptCount, _impl_.errors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DetailConceptCount, _impl_.processing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptQuery, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptQuery, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptQuery, _impl_.workflow_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, _impl_.subject_concept_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, _impl_.object_concept_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, _impl_.predicate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, _impl_.knowledge_graph_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, _impl_.visibility_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, _impl_.examples_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, _impl_.sampled_examples_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptMappingJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptMappingJob, _impl_.knowledge_graph_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptMappingJob, _impl_.concept_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptLanguage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptLanguage, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptLanguage, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptLanguage, _impl_.definition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.video_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.geo_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.colors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.clusters_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.embeddings_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.regions_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.frames_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.audio_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.tracks_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.time_segments_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.hits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _impl_.heatmaps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, _impl_.region_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, _impl_.track_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, _impl_.bounding_box_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, _impl_.mask_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, _impl_.polygon_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, _impl_.point_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, _impl_.span_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, _impl_.keypoint_locations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BoundingBox, _impl_.top_row_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BoundingBox, _impl_.left_col_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BoundingBox, _impl_.bottom_row_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BoundingBox, _impl_.right_col_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FrameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FrameInfo, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FrameInfo, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Frame, _impl_.frame_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Frame, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Frame, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Mask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Mask, _impl_.image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Polygon, _impl_.points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Point, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Point, _impl_.col_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Point, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Point, _impl_.visibility_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Span, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Span, _impl_.char_start_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Span, _impl_.char_end_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Span, _impl_.raw_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Token, _impl_.char_start_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Token, _impl_.char_end_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Token, _impl_.raw_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Embedding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Embedding, _impl_.vector_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Embedding, _impl_.num_dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoPoint, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoPoint, _impl_.latitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoLimit, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoLimit, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoBoxedPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoBoxedPoint, _impl_.geo_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Geo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Geo, _impl_.geo_point_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Geo, _impl_.geo_limit_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Geo, _impl_.geo_box_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, _impl_.base64_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, _impl_.allow_duplicate_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, _impl_.hosted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, _impl_.image_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImageInfo, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImageInfo, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImageInfo, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImageInfo, _impl_.color_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HostedURL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HostedURL, _impl_.prefix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HostedURL, _impl_.suffix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HostedURL, _impl_.sizes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HostedURL, _impl_.crossorigin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, _impl_.dataset_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputBatch, _impl_.inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, _impl_.processed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, _impl_.to_process_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, _impl_.errors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, _impl_.processing_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, _impl_.reindexed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, _impl_.to_reindex_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, _impl_.reindex_errors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, _impl_.reindexing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _impl_.default_annotation_filter_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _impl_.default_processing_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _impl_.notes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _impl_.is_starred_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _impl_.star_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _impl_.bookmark_origin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, _impl_.saved_search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInput, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInput, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_.dataset_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_.processing_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_.metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_.export_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_.embed_model_version_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _impl_.data_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilterConfig, _impl_.annotation_filter_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilterConfig, _impl_.ignore_empty_inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelPredictConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelPredictConfig, _impl_.model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.unlabeled_inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.inputs_with_metadata_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.inputs_with_geo_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.regions_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.region_location_matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.bounding_boxes_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.polygons_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.points_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.masks_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.region_inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.region_frames_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.frames_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.frame_inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.embeddings_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.positive_input_tags_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.positive_region_tags_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _impl_.positive_frame_tags_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetricsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetricsGroup, _impl_.parent_path_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetricsGroup, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetricsGroup, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetricsGroup, _impl_.metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionExportInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionExportInfo, _impl_.clarifai_data_protobuf_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionExportInfo, _impl_.clarifai_data_json_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionExportInfo, _impl_.coco_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionExport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionExport, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionExport, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionExport, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionExport, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionExport, _impl_.include_embeddings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionProcessingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionProcessingInfo, _impl_.frame_interpolation_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FrameInterpolationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FrameInterpolationInfo, _impl_.sample_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResultsSimilarity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResultsSimilarity, _impl_.probe_input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResultsSimilarity, _impl_.pool_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, _impl_.scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, _impl_.endpoints_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, _impl_.apps_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, _impl_.expires_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, _impl_.authorized_idp_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.output_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.model_version_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.default_eval_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.model_type_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.task_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.presets_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.notes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.toolkits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.use_cases_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.languages_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.languages_full_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.check_consents_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.is_starred_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.star_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.workflow_recommended_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _impl_.bookmark_origin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, _impl_.model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, _impl_.description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, _impl_.output_config_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, _impl_.fields_map_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputInfo, _impl_.fields_map_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputInfo, _impl_.params_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputInfo, _impl_.base_embed_model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainInfo, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalInfo, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImportInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImportInfo, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _impl_.concepts_mutually_exclusive_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _impl_.existing_model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _impl_.hyper_parameters_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _impl_.max_concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _impl_.min_value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _impl_.select_concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _impl_.training_timeout_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _impl_.sample_ms_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _impl_.hyper_params_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _impl_.embed_model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _impl_.fail_on_missing_positive_examples_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _impl_.model_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _impl_.input_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _impl_.output_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _impl_.trainable_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _impl_.creatable_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _impl_.internal_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _impl_.model_type_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _impl_.requires_sequential_frames_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _impl_.expected_input_layers_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _impl_.expected_output_layers_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _impl_.evaluation_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelLayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelLayerInfo, _impl_.data_field_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelLayerInfo, _impl_.shapes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelLayerInfo, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelLayerInfo, _impl_.requires_label_filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TritonCondaEnvInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TritonCondaEnvInfo, _impl_.conda_pack_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TritonCondaEnvInfo, _impl_.conda_yaml_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LayerShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LayerShape, _impl_.dims_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LayerShape, _impl_.max_dims_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LayerShape, _impl_.data_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LayerShape, _impl_.description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, _impl_.field_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, _impl_.default_value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, _impl_.placeholder_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, _impl_.model_type_enum_options_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, _impl_.internal_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, _impl_.required_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, _impl_.model_type_range_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeRangeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeRangeInfo, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeRangeInfo, _impl_.max_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeRangeInfo, _impl_.step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, _impl_.aliases_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, _impl_.model_type_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, _impl_.internal_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, _impl_.recommended_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOptionAlias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOptionAlias, _impl_.id_int_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOptionAlias, _impl_.wildcard_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelQuery, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelQuery, _impl_.model_type_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.active_concept_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.total_input_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.pretrained_model_config_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.completed_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.license_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.output_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.input_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.train_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.import_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _impl_.train_log_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, _impl_.input_fields_map_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, _impl_.output_fields_map_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, _impl_.model_zip_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainStats, _impl_.loss_curve_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LossCurveEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LossCurveEntry, _impl_.epoch_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LossCurveEntry, _impl_.global_step_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LossCurveEntry, _impl_.cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelCount, _impl_.concept_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelCount, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelCount, _impl_.concept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelDistribution, _impl_.positive_label_counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrixEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrixEntry, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrixEntry, _impl_.col_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrixEntry, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrix, _impl_.matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrix, _impl_.concept_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrixEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrixEntry, _impl_.predicted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrixEntry, _impl_.actual_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrixEntry, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrixEntry, _impl_.predicted_concept_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrixEntry, _impl_.actual_concept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrix, _impl_.matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrix, _impl_.concept_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, _impl_.fpr_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, _impl_.tpr_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, _impl_.thresholds_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, _impl_.fpr_per_image_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, _impl_.fpr_per_object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PrecisionRecallCurve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PrecisionRecallCurve, _impl_.recall_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PrecisionRecallCurve, _impl_.precision_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PrecisionRecallCurve, _impl_.thresholds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _impl_.num_pos_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _impl_.num_neg_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _impl_.num_tot_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _impl_.roc_auc_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _impl_.f1_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _impl_.concept_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _impl_.roc_curve_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _impl_.precision_recall_curve_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _impl_.avg_precision_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _impl_.area_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _impl_.area_min_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _impl_.area_max_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _impl_.iou_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, _impl_.mot_mota_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, _impl_.mot_num_switches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, _impl_.morse_frag_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, _impl_.avg_precision_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, _impl_.aiid_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, _impl_.unique_switch_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, _impl_.predicted_concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, _impl_.ground_truth_concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, _impl_.annotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, _impl_.recall_vs_brute_force_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, _impl_.kendall_tau_vs_brute_force_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, _impl_.most_frequent_code_percent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, _impl_.lopq_ndcg_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, _impl_.brute_force_ndcg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, _impl_.top1_accuracy_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, _impl_.top5_accuracy_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, _impl_.macro_avg_roc_auc_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, _impl_.macro_std_roc_auc_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, _impl_.macro_avg_f1_score_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, _impl_.macro_std_f1_score_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, _impl_.macro_avg_precision_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, _impl_.macro_avg_recall_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, _impl_.mean_avg_precision_iou_50_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, _impl_.mean_avg_precision_iou_range_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, _impl_.lopq_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.ground_truth_dataset_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.summary_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.confusion_matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.cooccurrence_matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.label_counts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.binary_metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.test_set_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.metrics_by_area_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.metrics_by_class_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.tracker_metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _impl_.eval_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, _impl_.confusion_matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, _impl_.cooccurrence_matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, _impl_.label_counts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, _impl_.binary_metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, _impl_.test_set_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, _impl_.metrics_by_area_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, _impl_.metrics_by_class_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ScopeDeps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ScopeDeps, _impl_.scope_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ScopeDeps, _impl_.depending_scopes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EndpointDeps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EndpointDeps, _impl_.endpoint_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EndpointDeps, _impl_.depending_scopes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, _impl_.annotation_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, _impl_.app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HitCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HitCount, _impl_.estimated_total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::And, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::And, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::And, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::And, _impl_.negate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::And, _impl_.annotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Query, _impl_.ands_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Query, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Query, _impl_.filters_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Query, _impl_.ranks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _impl_.application_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _impl_.as_of_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _impl_.git_hash_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _impl_.algorithm_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _impl_.save_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _impl_.min_value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _impl_.metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Filter, _impl_.negate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Filter, _impl_.annotation_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Filter, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Filter, _impl_.last_updated_time_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeRange, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeRange, _impl_.end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Rank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Rank, _impl_.negate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Rank, _impl_.annotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, _impl_.ground_truth_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, _impl_.search_to_eval_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, _impl_.metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, _impl_.active_concept_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, _impl_.visibility_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, _impl_.raw_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, _impl_.allow_duplicate_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, _impl_.hosted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, _impl_.text_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TextInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TextInfo, _impl_.char_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TextInfo, _impl_.encoding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.primary_email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.first_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.last_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.company_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.job_title_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.job_role_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.bill_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.date_gdpr_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.date_tos_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.date_marketing_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.date_pii_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.email_addresses_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.two_factor_auth_enabled_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.teams_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.is_starred_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.star_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _impl_.user_detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, _impl_.primary_email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, _impl_.bill_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, _impl_.date_gdpr_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, _impl_.date_tos_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, _impl_.date_marketing_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, _impl_.date_pii_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, _impl_.email_addresses_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, _impl_.two_factor_auth_enabled_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, _impl_.teams_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EmailAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EmailAddress, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EmailAddress, _impl_.primary_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EmailAddress, _impl_.verified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Password, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Password, _impl_.plaintext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _impl_.minimum_length_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _impl_.maximum_length_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _impl_.upper_case_needed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _impl_.lower_case_needed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _impl_.numeric_needed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _impl_.non_alphanumeric_needed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _impl_.password_reuse_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _impl_.exclude_names_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _impl_.exclude_email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _impl_.no_confusing_letters_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _impl_.no_simple_passwords_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _impl_.no_common_vocabs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _impl_.no_overlap_with_old_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _impl_.password_lifespan_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, _impl_.base64_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, _impl_.allow_duplicate_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, _impl_.thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, _impl_.hosted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, _impl_.video_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, _impl_.fps_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, _impl_.video_format_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, _impl_.bit_rate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, _impl_.frame_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, _impl_.duration_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.nodes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.is_starred_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.star_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.notes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.use_cases_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.check_consents_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _impl_.bookmark_origin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, _impl_.workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, _impl_.nodes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, _impl_.license_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, _impl_.node_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, _impl_.suppress_output_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, _impl_.output_info_override_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::NodeInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::NodeInput, _impl_.node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, _impl_.outputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, _impl_.suppress_output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowState, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, _impl_.new_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, _impl_.new_app_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, _impl_.last_modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, _impl_.filter_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, _impl_.existing_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, _impl_.progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppCopyProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppCopyProgress, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppCopyProgress, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, _impl_.copy_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, _impl_.copy_concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, _impl_.copy_annotations_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, _impl_.copy_models_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, _impl_.copy_workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, _impl_.auto_release_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, _impl_.allow_empty_tag_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, _impl_.desired_fulfill_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, _impl_.estimate_fulfill_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, _impl_.task_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, _impl_.modified_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.worker_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.concept_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.input_source_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.sample_ms_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.ai_assistant_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.review_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.ai_assist_params_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.label_order_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _impl_.delete_previous_annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AiAssistParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AiAssistParameters, _impl_.min_threshold_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AiAssistParameters, _impl_.max_threshold_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AiAssistParameters, _impl_.concept_relation_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, _impl_.strategy_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, _impl_.user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, _impl_.users_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, _impl_.models_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, _impl_.workflows_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, _impl_.strategy_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorkerPartitionedStrategyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorkerPartitionedStrategyInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorkerPartitionedStrategyInfo, _impl_.workers_per_input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorkerPartitionedStrategyInfo, _impl_.weights_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskInputSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskInputSource, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskInputSource, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, _impl_.strategy_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, _impl_.user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, _impl_.users_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, _impl_.strategy_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReviewManualStrategyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReviewManualStrategyInfo, _impl_.sample_percentage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReviewConsensusStrategyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReviewConsensusStrategyInfo, _impl_.approval_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskAIAssistant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskAIAssistant, _impl_.workflow_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, _impl_.pending_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, _impl_.awaiting_review_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, _impl_.review_denied_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, _impl_.awaiting_consensus_review_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ThresholdRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ThresholdRange, _impl_.is_lower_inclusive_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ThresholdRange, _impl_.is_upper_inclusive_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ThresholdRange, _impl_.lower_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ThresholdRange, _impl_.upper_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskConceptAutoAnnotationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskConceptAutoAnnotationConfig, _impl_.annotation_data_types_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskConceptAutoAnnotationConfig, _impl_.threshold_range_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskConceptAutoAnnotationConfig, _impl_.status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskConcept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskConcept, _impl_.concept_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskConcept, _impl_.auto_annotation_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, _impl_.pre_queue_workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, _impl_.post_queue_workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, _impl_.collector_source_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CollectorSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CollectorSource, _impl_.api_post_model_outputs_collector_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, _impl_.model_user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, _impl_.model_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, _impl_.model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, _impl_.post_inputs_key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValue, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValue, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValue, _impl_.tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateResult, _impl_.stat_value_aggregates_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateResult, _impl_.stat_value_aggregate_query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregate, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregate, _impl_.aggregate_value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregate, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregate, _impl_.tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, _impl_.tag_groups_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, _impl_.stat_value_agg_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, _impl_.stat_time_agg_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, _impl_.end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInputsSearchAddJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInputsSearchAddJob, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInputsSearchAddJob, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInputsSearchAddJob, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInputsSearchAddJob, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInputsSearchAddJob, _impl_.dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInputsSearchAddJob, _impl_.search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PCAProjectionComparator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PCAProjectionComparator, _impl_.distance_threshold_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PCAProjectionComparator, _impl_.model_version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DuplicateAnnotationsResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DuplicateAnnotationsResults, _impl_.duplicate_cfid_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DuplicateAnnotationsResults, _impl_.unique_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Visibility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Visibility, _impl_.gettable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrendingMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrendingMetric, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrendingMetric, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrendingMetric, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrendingMetric, _impl_.view_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FullTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FullTag, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FullTag, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeSegment, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeSegment, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeSegment, _impl_.time_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeInfo, _impl_.num_frames_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeInfo, _impl_.begin_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeInfo, _impl_.end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetStar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetStar, _impl_.dataset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleStar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleStar, _impl_.module_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Module, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Module, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Module, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Module, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Module, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Module, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Module, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Module, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Module, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Module, _impl_.module_version_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Module, _impl_.is_starred_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Module, _impl_.star_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Module, _impl_.bookmark_origin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion_ModuleSubNav, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion_ModuleSubNav, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion_ModuleSubNav, _impl_.query_key_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion_ModuleSubNav, _impl_.query_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion_ModuleNav, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion_ModuleNav, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion_ModuleNav, _impl_.module_sub_navs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion, _impl_.module_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion, _impl_.notes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion, _impl_.git_commit_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion, _impl_.module_nav_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion, _impl_.approved_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModuleVersion, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InstalledModuleVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InstalledModuleVersion, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InstalledModuleVersion, _impl_.module_version_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InstalledModuleVersion, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InstalledModuleVersion, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InstalledModuleVersion, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InstalledModuleVersion, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InstalledModuleVersion, _impl_.deploy_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InstalledModuleVersion, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InstalledModuleVersion, _impl_.key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BulkOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BulkOperation, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BulkOperation, _impl_.id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BulkOperation, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BulkOperation, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BulkOperation, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BulkOperation, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BulkOperation, _impl_.created_by_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BulkOperation, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BulkOperation, _impl_.last_modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BulkOperation, _impl_.input_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputIDs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputIDs, _impl_.input_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Progress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Progress, _impl_.processed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Progress, _impl_.last_processed_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Operation, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Operation, _impl_.operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AddConcepts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AddConcepts, _impl_.concepts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConcepts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConcepts, _impl_.concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConcepts, _impl_.user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AddMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AddMetadata, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteMetadata, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OverwriteGeo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OverwriteGeo, _impl_.geo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteGeo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AddToDataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AddToDataset, _impl_.dataset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteFromDataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteFromDataset, _impl_.dataset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SplitIntoDatasets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SplitIntoDatasets, _impl_.dataset_splits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SplitIntoDatasets, _impl_.method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetSplit, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetSplit, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetSplit, _impl_.dataset_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetSplit, _impl_.method_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsAddJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsAddJob, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsAddJob, _impl_.call_back_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsAddJob, _impl_.app_pat_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsAddJob, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsAddJob, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsAddJob, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsAddJob, _impl_.extraction_jobs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsAddJob, _impl_.uploads_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsAddJob, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsAddJobProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsAddJobProgress, _impl_.pending_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsAddJobProgress, _impl_.in_progress_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsAddJobProgress, _impl_.success_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsAddJobProgress, _impl_.failed_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Upload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Upload, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Upload, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Upload, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Upload, _impl_.expires_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Upload, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Upload, _impl_.content_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Upload, _impl_.content_length_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Upload, _impl_.content_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UploadContentPart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UploadContentPart, _impl_.range_start_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UploadContentPart, _impl_.part_number_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UploadContentPart, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CustomCodeOperatorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CustomCodeOperatorRequest, _impl_.inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CustomCodeOperatorRequest, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJob, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJob, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJob, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJob, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJob, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJob, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJob, _impl_.input_id_conflict_resolution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJobProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJobProgress, _impl_.audio_inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJobProgress, _impl_.image_inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJobProgress, _impl_.video_inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJobProgress, _impl_.text_inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJobProgress, _impl_.pending_archives_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJobProgress, _impl_.in_progress_archives_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJobProgress, _impl_.completed_archives_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsExtractionJobProgress, _impl_.failed_archives_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsDataSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsDataSource, _impl_.inputs_add_job_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsDataSource, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsDataSource, _impl_.input_id_conflict_resolution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DataSourceURL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DataSourceURL, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DataSourceURL, _impl_.credentials_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DataSourceCredentials, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DataSourceCredentials, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DataSourceCredentials, _impl_.credentials_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AWSCreds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AWSCreds, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AWSCreds, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AWSCreds, _impl_.secret_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AWSCreds, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AzureBlobCreds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AzureBlobCreds, _impl_.account_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AzureBlobCreds, _impl_.account_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsUpload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsUpload, _impl_.inputs_add_job_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsUpload, _impl_.app_pat_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsUpload, _impl_.upload_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputsUpload, _impl_.input_id_conflict_resolution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BookmarkOrigin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BookmarkOrigin, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BookmarkOrigin, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BookmarkOrigin, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BookmarkOrigin, _impl_.resource_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Runner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Runner, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Runner, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Runner, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Runner, _impl_.modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Runner, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Runner, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Runner, _impl_.labels_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::clarifai::api::Annotation)},
  { 21, -1, -1, sizeof(::clarifai::api::App)},
  { 45, -1, -1, sizeof(::clarifai::api::AppQuery)},
  { 52, -1, -1, sizeof(::clarifai::api::Collaborator)},
  { 66, -1, -1, sizeof(::clarifai::api::Collaboration)},
  { 77, -1, -1, sizeof(::clarifai::api::Audio)},
  { 88, -1, -1, sizeof(::clarifai::api::AudioInfo)},
  { 98, -1, -1, sizeof(::clarifai::api::Track)},
  { 108, -1, -1, sizeof(::clarifai::api::Cluster)},
  { 119, -1, -1, sizeof(::clarifai::api::Color)},
  { 128, -1, -1, sizeof(::clarifai::api::W3C)},
  { 136, -1, -1, sizeof(::clarifai::api::UserAppIDSet)},
  { 144, -1, -1, sizeof(::clarifai::api::PatchAction)},
  { 153, -1, -1, sizeof(::clarifai::api::Concept)},
  { 171, -1, -1, sizeof(::clarifai::api::KeypointInfo)},
  { 179, -1, -1, sizeof(::clarifai::api::KeypointEdge)},
  { 187, -1, -1, sizeof(::clarifai::api::ConceptExtraInfo)},
  { 194, -1, -1, sizeof(::clarifai::api::ConceptCount)},
  { 204, -1, -1, sizeof(::clarifai::api::ConceptTypeCount)},
  { 212, -1, -1, sizeof(::clarifai::api::DetailConceptCount)},
  { 222, -1, -1, sizeof(::clarifai::api::ConceptQuery)},
  { 231, -1, -1, sizeof(::clarifai::api::ConceptRelation)},
  { 243, -1, -1, sizeof(::clarifai::api::KnowledgeGraph)},
  { 254, -1, -1, sizeof(::clarifai::api::ConceptMappingJob)},
  { 262, -1, -1, sizeof(::clarifai::api::ConceptLanguage)},
  { 271, -1, -1, sizeof(::clarifai::api::Data)},
  { 293, -1, -1, sizeof(::clarifai::api::Region)},
  { 304, -1, -1, sizeof(::clarifai::api::RegionInfo)},
  { 317, -1, -1, sizeof(::clarifai::api::BoundingBox)},
  { 327, -1, -1, sizeof(::clarifai::api::FrameInfo)},
  { 335, -1, -1, sizeof(::clarifai::api::Frame)},
  { 344, -1, -1, sizeof(::clarifai::api::Mask)},
  { 351, -1, -1, sizeof(::clarifai::api::Polygon)},
  { 358, -1, -1, sizeof(::clarifai::api::Point)},
  { 368, -1, -1, sizeof(::clarifai::api::Span)},
  { 377, -1, -1, sizeof(::clarifai::api::Token)},
  { 386, -1, -1, sizeof(::clarifai::api::Embedding)},
  { 394, -1, -1, sizeof(::clarifai::api::GeoPoint)},
  { 402, -1, -1, sizeof(::clarifai::api::GeoLimit)},
  { 410, -1, -1, sizeof(::clarifai::api::GeoBoxedPoint)},
  { 417, -1, -1, sizeof(::clarifai::api::Geo)},
  { 426, -1, -1, sizeof(::clarifai::api::Image)},
  { 437, -1, -1, sizeof(::clarifai::api::ImageInfo)},
  { 447, -1, -1, sizeof(::clarifai::api::HostedURL)},
  { 457, -1, -1, sizeof(::clarifai::api::Input)},
  { 469, -1, -1, sizeof(::clarifai::api::InputBatch)},
  { 476, -1, -1, sizeof(::clarifai::api::InputCount)},
  { 490, -1, -1, sizeof(::clarifai::api::Dataset)},
  { 511, -1, -1, sizeof(::clarifai::api::AnnotationFilter)},
  { 523, -1, -1, sizeof(::clarifai::api::DatasetInput)},
  { 531, 539, -1, sizeof(::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse)},
  { 541, -1, -1, sizeof(::clarifai::api::DatasetVersion)},
  { 564, -1, -1, sizeof(::clarifai::api::AnnotationFilterConfig)},
  { 572, -1, -1, sizeof(::clarifai::api::ModelPredictConfig)},
  { 579, -1, -1, sizeof(::clarifai::api::DatasetVersionMetrics)},
  { 603, -1, -1, sizeof(::clarifai::api::DatasetVersionMetricsGroup)},
  { 613, -1, -1, sizeof(::clarifai::api::DatasetVersionExportInfo)},
  { 622, -1, -1, sizeof(::clarifai::api::DatasetVersionExport)},
  { 633, -1, -1, sizeof(::clarifai::api::DatasetVersionProcessingInfo)},
  { 640, -1, -1, sizeof(::clarifai::api::FrameInterpolationInfo)},
  { 647, -1, -1, sizeof(::clarifai::api::WorkflowResultsSimilarity)},
  { 655, -1, -1, sizeof(::clarifai::api::Key)},
  { 670, -1, -1, sizeof(::clarifai::api::Model)},
  { 702, -1, -1, sizeof(::clarifai::api::ModelReference)},
  { 713, -1, -1, sizeof(::clarifai::api::ModelVersionInputExample)},
  { 725, -1, -1, sizeof(::clarifai::api::OutputInfo)},
  { 736, -1, -1, sizeof(::clarifai::api::InputInfo)},
  { 745, -1, -1, sizeof(::clarifai::api::TrainInfo)},
  { 752, -1, -1, sizeof(::clarifai::api::EvalInfo)},
  { 759, -1, -1, sizeof(::clarifai::api::ImportInfo)},
  { 766, -1, -1, sizeof(::clarifai::api::OutputConfig)},
  { 785, -1, -1, sizeof(::clarifai::api::ModelType)},
  { 804, -1, -1, sizeof(::clarifai::api::ModelLayerInfo)},
  { 814, -1, -1, sizeof(::clarifai::api::TritonCondaEnvInfo)},
  { 822, -1, -1, sizeof(::clarifai::api::LayerShape)},
  { 832, -1, -1, sizeof(::clarifai::api::ModelTypeField)},
  { 847, -1, -1, sizeof(::clarifai::api::ModelTypeRangeInfo)},
  { 856, -1, -1, sizeof(::clarifai::api::ModelTypeEnumOption)},
  { 868, -1, -1, sizeof(::clarifai::api::ModelTypeEnumOptionAlias)},
  { 876, -1, -1, sizeof(::clarifai::api::ModelQuery)},
  { 884, -1, -1, sizeof(::clarifai::api::ModelVersion)},
  { 910, -1, -1, sizeof(::clarifai::api::PretrainedModelConfig)},
  { 919, -1, -1, sizeof(::clarifai::api::TrainStats)},
  { 926, -1, -1, sizeof(::clarifai::api::LossCurveEntry)},
  { 935, -1, -1, sizeof(::clarifai::api::LabelCount)},
  { 944, -1, -1, sizeof(::clarifai::api::LabelDistribution)},
  { 951, -1, -1, sizeof(::clarifai::api::CooccurrenceMatrixEntry)},
  { 960, -1, -1, sizeof(::clarifai::api::CooccurrenceMatrix)},
  { 968, -1, -1, sizeof(::clarifai::api::ConfusionMatrixEntry)},
  { 979, -1, -1, sizeof(::clarifai::api::ConfusionMatrix)},
  { 987, -1, -1, sizeof(::clarifai::api::ROC)},
  { 998, -1, -1, sizeof(::clarifai::api::PrecisionRecallCurve)},
  { 1007, -1, -1, sizeof(::clarifai::api::BinaryMetrics)},
  { 1026, -1, -1, sizeof(::clarifai::api::TrackerMetrics)},
  { 1038, -1, -1, sizeof(::clarifai::api::EvalTestSetEntry)},
  { 1048, -1, -1, sizeof(::clarifai::api::LOPQEvalResult)},
  { 1060, -1, -1, sizeof(::clarifai::api::MetricsSummary)},
  { 1077, -1, -1, sizeof(::clarifai::api::EvalMetrics)},
  { 1099, -1, -1, sizeof(::clarifai::api::FieldsValue)},
  { 1112, -1, -1, sizeof(::clarifai::api::Output)},
  { 1124, -1, -1, sizeof(::clarifai::api::ScopeDeps)},
  { 1132, -1, -1, sizeof(::clarifai::api::EndpointDeps)},
  { 1140, -1, -1, sizeof(::clarifai::api::Hit)},
  { 1151, -1, -1, sizeof(::clarifai::api::HitCount)},
  { 1158, -1, -1, sizeof(::clarifai::api::And)},
  { 1168, -1, -1, sizeof(::clarifai::api::Query)},
  { 1178, -1, -1, sizeof(::clarifai::api::Search)},
  { 1197, -1, -1, sizeof(::clarifai::api::Filter)},
  { 1207, -1, -1, sizeof(::clarifai::api::TimeRange)},
  { 1215, -1, -1, sizeof(::clarifai::api::Rank)},
  { 1223, -1, -1, sizeof(::clarifai::api::AnnotationSearchMetrics)},
  { 1235, -1, -1, sizeof(::clarifai::api::Text)},
  { 1246, -1, -1, sizeof(::clarifai::api::TextInfo)},
  { 1254, -1, -1, sizeof(::clarifai::api::User)},
  { 1281, -1, -1, sizeof(::clarifai::api::UserDetail)},
  { 1299, -1, -1, sizeof(::clarifai::api::EmailAddress)},
  { 1308, -1, -1, sizeof(::clarifai::api::Password)},
  { 1315, -1, -1, sizeof(::clarifai::api::PasswordViolations)},
  { 1335, -1, -1, sizeof(::clarifai::api::Video)},
  { 1347, -1, -1, sizeof(::clarifai::api::VideoInfo)},
  { 1360, -1, -1, sizeof(::clarifai::api::Workflow)},
  { 1382, -1, -1, sizeof(::clarifai::api::WorkflowVersion)},
  { 1399, -1, -1, sizeof(::clarifai::api::WorkflowNode)},
  { 1410, -1, -1, sizeof(::clarifai::api::NodeInput)},
  { 1417, -1, -1, sizeof(::clarifai::api::WorkflowResult)},
  { 1430, -1, -1, sizeof(::clarifai::api::WorkflowState)},
  { 1437, -1, -1, sizeof(::clarifai::api::AppDuplication)},
  { 1452, -1, -1, sizeof(::clarifai::api::AppCopyProgress)},
  { 1460, -1, -1, sizeof(::clarifai::api::AppDuplicationFilters)},
  { 1471, -1, -1, sizeof(::clarifai::api::LabelOrder)},
  { 1487, -1, -1, sizeof(::clarifai::api::Task)},
  { 1513, -1, -1, sizeof(::clarifai::api::AiAssistParameters)},
  { 1522, -1, -1, sizeof(::clarifai::api::TaskWorker)},
  { 1535, -1, -1, sizeof(::clarifai::api::TaskWorkerPartitionedStrategyInfo)},
  { 1544, -1, -1, sizeof(::clarifai::api::TaskInputSource)},
  { 1552, -1, -1, sizeof(::clarifai::api::TaskReview)},
  { 1564, -1, -1, sizeof(::clarifai::api::TaskReviewManualStrategyInfo)},
  { 1571, -1, -1, sizeof(::clarifai::api::TaskReviewConsensusStrategyInfo)},
  { 1578, -1, -1, sizeof(::clarifai::api::TaskAIAssistant)},
  { 1585, -1, -1, sizeof(::clarifai::api::TaskStatusCountPerUser)},
  { 1597, -1, -1, sizeof(::clarifai::api::ThresholdRange)},
  { 1607, -1, -1, sizeof(::clarifai::api::TaskConceptAutoAnnotationConfig)},
  { 1616, -1, -1, sizeof(::clarifai::api::TaskConcept)},
  { 1624, -1, -1, sizeof(::clarifai::api::Collector)},
  { 1637, -1, -1, sizeof(::clarifai::api::CollectorSource)},
  { 1644, -1, -1, sizeof(::clarifai::api::APIPostModelOutputsCollectorSource)},
  { 1655, -1, -1, sizeof(::clarifai::api::StatValue)},
  { 1664, -1, -1, sizeof(::clarifai::api::StatValueAggregateResult)},
  { 1672, -1, -1, sizeof(::clarifai::api::StatValueAggregate)},
  { 1682, -1, -1, sizeof(::clarifai::api::StatValueAggregateQuery)},
  { 1694, -1, -1, sizeof(::clarifai::api::DatasetInputsSearchAddJob)},
  { 1706, -1, -1, sizeof(::clarifai::api::PCAProjectionComparator)},
  { 1714, -1, -1, sizeof(::clarifai::api::DuplicateAnnotationsResults)},
  { 1722, -1, -1, sizeof(::clarifai::api::Visibility)},
  { 1729, -1, -1, sizeof(::clarifai::api::TrendingMetric)},
  { 1739, -1, -1, sizeof(::clarifai::api::FullTag)},
  { 1747, -1, -1, sizeof(::clarifai::api::TimeSegment)},
  { 1756, -1, -1, sizeof(::clarifai::api::TimeInfo)},
  { 1765, -1, -1, sizeof(::clarifai::api::DatasetStar)},
  { 1772, -1, -1, sizeof(::clarifai::api::ModuleStar)},
  { 1779, -1, -1, sizeof(::clarifai::api::Module)},
  { 1797, -1, -1, sizeof(::clarifai::api::ModuleVersion_ModuleSubNav)},
  { 1806, -1, -1, sizeof(::clarifai::api::ModuleVersion_ModuleNav)},
  { 1814, -1, -1, sizeof(::clarifai::api::ModuleVersion)},
  { 1833, -1, -1, sizeof(::clarifai::api::InstalledModuleVersion)},
  { 1848, -1, -1, sizeof(::clarifai::api::BulkOperation)},
  { 1866, -1, -1, sizeof(::clarifai::api::InputIDs)},
  { 1873, -1, -1, sizeof(::clarifai::api::Progress)},
  { 1881, -1, -1, sizeof(::clarifai::api::Operation)},
  { 1897, -1, -1, sizeof(::clarifai::api::AddConcepts)},
  { 1904, -1, -1, sizeof(::clarifai::api::DeleteConcepts)},
  { 1912, -1, -1, sizeof(::clarifai::api::AddMetadata)},
  { 1919, -1, -1, sizeof(::clarifai::api::DeleteMetadata)},
  { 1926, -1, -1, sizeof(::clarifai::api::OverwriteGeo)},
  { 1933, -1, -1, sizeof(::clarifai::api::DeleteGeo)},
  { 1939, -1, -1, sizeof(::clarifai::api::AddToDataset)},
  { 1946, -1, -1, sizeof(::clarifai::api::DeleteFromDataset)},
  { 1953, -1, -1, sizeof(::clarifai::api::SplitIntoDatasets)},
  { 1961, -1, -1, sizeof(::clarifai::api::DatasetSplit)},
  { 1970, -1, -1, sizeof(::clarifai::api::InputsAddJob)},
  { 1985, -1, -1, sizeof(::clarifai::api::InputsAddJobProgress)},
  { 1995, -1, -1, sizeof(::clarifai::api::Upload)},
  { 2009, -1, -1, sizeof(::clarifai::api::UploadContentPart)},
  { 2018, -1, -1, sizeof(::clarifai::api::CustomCodeOperatorRequest)},
  { 2026, -1, -1, sizeof(::clarifai::api::InputsExtractionJob)},
  { 2039, -1, -1, sizeof(::clarifai::api::InputsExtractionJobProgress)},
  { 2053, -1, -1, sizeof(::clarifai::api::InputsDataSource)},
  { 2062, -1, -1, sizeof(::clarifai::api::DataSourceURL)},
  { 2070, -1, -1, sizeof(::clarifai::api::DataSourceCredentials)},
  { 2080, -1, -1, sizeof(::clarifai::api::AWSCreds)},
  { 2090, -1, -1, sizeof(::clarifai::api::AzureBlobCreds)},
  { 2098, -1, -1, sizeof(::clarifai::api::InputsUpload)},
  { 2108, -1, -1, sizeof(::clarifai::api::BookmarkOrigin)},
  { 2118, -1, -1, sizeof(::clarifai::api::Runner)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::clarifai::api::_Annotation_default_instance_._instance,
  &::clarifai::api::_App_default_instance_._instance,
  &::clarifai::api::_AppQuery_default_instance_._instance,
  &::clarifai::api::_Collaborator_default_instance_._instance,
  &::clarifai::api::_Collaboration_default_instance_._instance,
  &::clarifai::api::_Audio_default_instance_._instance,
  &::clarifai::api::_AudioInfo_default_instance_._instance,
  &::clarifai::api::_Track_default_instance_._instance,
  &::clarifai::api::_Cluster_default_instance_._instance,
  &::clarifai::api::_Color_default_instance_._instance,
  &::clarifai::api::_W3C_default_instance_._instance,
  &::clarifai::api::_UserAppIDSet_default_instance_._instance,
  &::clarifai::api::_PatchAction_default_instance_._instance,
  &::clarifai::api::_Concept_default_instance_._instance,
  &::clarifai::api::_KeypointInfo_default_instance_._instance,
  &::clarifai::api::_KeypointEdge_default_instance_._instance,
  &::clarifai::api::_ConceptExtraInfo_default_instance_._instance,
  &::clarifai::api::_ConceptCount_default_instance_._instance,
  &::clarifai::api::_ConceptTypeCount_default_instance_._instance,
  &::clarifai::api::_DetailConceptCount_default_instance_._instance,
  &::clarifai::api::_ConceptQuery_default_instance_._instance,
  &::clarifai::api::_ConceptRelation_default_instance_._instance,
  &::clarifai::api::_KnowledgeGraph_default_instance_._instance,
  &::clarifai::api::_ConceptMappingJob_default_instance_._instance,
  &::clarifai::api::_ConceptLanguage_default_instance_._instance,
  &::clarifai::api::_Data_default_instance_._instance,
  &::clarifai::api::_Region_default_instance_._instance,
  &::clarifai::api::_RegionInfo_default_instance_._instance,
  &::clarifai::api::_BoundingBox_default_instance_._instance,
  &::clarifai::api::_FrameInfo_default_instance_._instance,
  &::clarifai::api::_Frame_default_instance_._instance,
  &::clarifai::api::_Mask_default_instance_._instance,
  &::clarifai::api::_Polygon_default_instance_._instance,
  &::clarifai::api::_Point_default_instance_._instance,
  &::clarifai::api::_Span_default_instance_._instance,
  &::clarifai::api::_Token_default_instance_._instance,
  &::clarifai::api::_Embedding_default_instance_._instance,
  &::clarifai::api::_GeoPoint_default_instance_._instance,
  &::clarifai::api::_GeoLimit_default_instance_._instance,
  &::clarifai::api::_GeoBoxedPoint_default_instance_._instance,
  &::clarifai::api::_Geo_default_instance_._instance,
  &::clarifai::api::_Image_default_instance_._instance,
  &::clarifai::api::_ImageInfo_default_instance_._instance,
  &::clarifai::api::_HostedURL_default_instance_._instance,
  &::clarifai::api::_Input_default_instance_._instance,
  &::clarifai::api::_InputBatch_default_instance_._instance,
  &::clarifai::api::_InputCount_default_instance_._instance,
  &::clarifai::api::_Dataset_default_instance_._instance,
  &::clarifai::api::_AnnotationFilter_default_instance_._instance,
  &::clarifai::api::_DatasetInput_default_instance_._instance,
  &::clarifai::api::_DatasetVersion_MetricsEntry_DoNotUse_default_instance_._instance,
  &::clarifai::api::_DatasetVersion_default_instance_._instance,
  &::clarifai::api::_AnnotationFilterConfig_default_instance_._instance,
  &::clarifai::api::_ModelPredictConfig_default_instance_._instance,
  &::clarifai::api::_DatasetVersionMetrics_default_instance_._instance,
  &::clarifai::api::_DatasetVersionMetricsGroup_default_instance_._instance,
  &::clarifai::api::_DatasetVersionExportInfo_default_instance_._instance,
  &::clarifai::api::_DatasetVersionExport_default_instance_._instance,
  &::clarifai::api::_DatasetVersionProcessingInfo_default_instance_._instance,
  &::clarifai::api::_FrameInterpolationInfo_default_instance_._instance,
  &::clarifai::api::_WorkflowResultsSimilarity_default_instance_._instance,
  &::clarifai::api::_Key_default_instance_._instance,
  &::clarifai::api::_Model_default_instance_._instance,
  &::clarifai::api::_ModelReference_default_instance_._instance,
  &::clarifai::api::_ModelVersionInputExample_default_instance_._instance,
  &::clarifai::api::_OutputInfo_default_instance_._instance,
  &::clarifai::api::_InputInfo_default_instance_._instance,
  &::clarifai::api::_TrainInfo_default_instance_._instance,
  &::clarifai::api::_EvalInfo_default_instance_._instance,
  &::clarifai::api::_ImportInfo_default_instance_._instance,
  &::clarifai::api::_OutputConfig_default_instance_._instance,
  &::clarifai::api::_ModelType_default_instance_._instance,
  &::clarifai::api::_ModelLayerInfo_default_instance_._instance,
  &::clarifai::api::_TritonCondaEnvInfo_default_instance_._instance,
  &::clarifai::api::_LayerShape_default_instance_._instance,
  &::clarifai::api::_ModelTypeField_default_instance_._instance,
  &::clarifai::api::_ModelTypeRangeInfo_default_instance_._instance,
  &::clarifai::api::_ModelTypeEnumOption_default_instance_._instance,
  &::clarifai::api::_ModelTypeEnumOptionAlias_default_instance_._instance,
  &::clarifai::api::_ModelQuery_default_instance_._instance,
  &::clarifai::api::_ModelVersion_default_instance_._instance,
  &::clarifai::api::_PretrainedModelConfig_default_instance_._instance,
  &::clarifai::api::_TrainStats_default_instance_._instance,
  &::clarifai::api::_LossCurveEntry_default_instance_._instance,
  &::clarifai::api::_LabelCount_default_instance_._instance,
  &::clarifai::api::_LabelDistribution_default_instance_._instance,
  &::clarifai::api::_CooccurrenceMatrixEntry_default_instance_._instance,
  &::clarifai::api::_CooccurrenceMatrix_default_instance_._instance,
  &::clarifai::api::_ConfusionMatrixEntry_default_instance_._instance,
  &::clarifai::api::_ConfusionMatrix_default_instance_._instance,
  &::clarifai::api::_ROC_default_instance_._instance,
  &::clarifai::api::_PrecisionRecallCurve_default_instance_._instance,
  &::clarifai::api::_BinaryMetrics_default_instance_._instance,
  &::clarifai::api::_TrackerMetrics_default_instance_._instance,
  &::clarifai::api::_EvalTestSetEntry_default_instance_._instance,
  &::clarifai::api::_LOPQEvalResult_default_instance_._instance,
  &::clarifai::api::_MetricsSummary_default_instance_._instance,
  &::clarifai::api::_EvalMetrics_default_instance_._instance,
  &::clarifai::api::_FieldsValue_default_instance_._instance,
  &::clarifai::api::_Output_default_instance_._instance,
  &::clarifai::api::_ScopeDeps_default_instance_._instance,
  &::clarifai::api::_EndpointDeps_default_instance_._instance,
  &::clarifai::api::_Hit_default_instance_._instance,
  &::clarifai::api::_HitCount_default_instance_._instance,
  &::clarifai::api::_And_default_instance_._instance,
  &::clarifai::api::_Query_default_instance_._instance,
  &::clarifai::api::_Search_default_instance_._instance,
  &::clarifai::api::_Filter_default_instance_._instance,
  &::clarifai::api::_TimeRange_default_instance_._instance,
  &::clarifai::api::_Rank_default_instance_._instance,
  &::clarifai::api::_AnnotationSearchMetrics_default_instance_._instance,
  &::clarifai::api::_Text_default_instance_._instance,
  &::clarifai::api::_TextInfo_default_instance_._instance,
  &::clarifai::api::_User_default_instance_._instance,
  &::clarifai::api::_UserDetail_default_instance_._instance,
  &::clarifai::api::_EmailAddress_default_instance_._instance,
  &::clarifai::api::_Password_default_instance_._instance,
  &::clarifai::api::_PasswordViolations_default_instance_._instance,
  &::clarifai::api::_Video_default_instance_._instance,
  &::clarifai::api::_VideoInfo_default_instance_._instance,
  &::clarifai::api::_Workflow_default_instance_._instance,
  &::clarifai::api::_WorkflowVersion_default_instance_._instance,
  &::clarifai::api::_WorkflowNode_default_instance_._instance,
  &::clarifai::api::_NodeInput_default_instance_._instance,
  &::clarifai::api::_WorkflowResult_default_instance_._instance,
  &::clarifai::api::_WorkflowState_default_instance_._instance,
  &::clarifai::api::_AppDuplication_default_instance_._instance,
  &::clarifai::api::_AppCopyProgress_default_instance_._instance,
  &::clarifai::api::_AppDuplicationFilters_default_instance_._instance,
  &::clarifai::api::_LabelOrder_default_instance_._instance,
  &::clarifai::api::_Task_default_instance_._instance,
  &::clarifai::api::_AiAssistParameters_default_instance_._instance,
  &::clarifai::api::_TaskWorker_default_instance_._instance,
  &::clarifai::api::_TaskWorkerPartitionedStrategyInfo_default_instance_._instance,
  &::clarifai::api::_TaskInputSource_default_instance_._instance,
  &::clarifai::api::_TaskReview_default_instance_._instance,
  &::clarifai::api::_TaskReviewManualStrategyInfo_default_instance_._instance,
  &::clarifai::api::_TaskReviewConsensusStrategyInfo_default_instance_._instance,
  &::clarifai::api::_TaskAIAssistant_default_instance_._instance,
  &::clarifai::api::_TaskStatusCountPerUser_default_instance_._instance,
  &::clarifai::api::_ThresholdRange_default_instance_._instance,
  &::clarifai::api::_TaskConceptAutoAnnotationConfig_default_instance_._instance,
  &::clarifai::api::_TaskConcept_default_instance_._instance,
  &::clarifai::api::_Collector_default_instance_._instance,
  &::clarifai::api::_CollectorSource_default_instance_._instance,
  &::clarifai::api::_APIPostModelOutputsCollectorSource_default_instance_._instance,
  &::clarifai::api::_StatValue_default_instance_._instance,
  &::clarifai::api::_StatValueAggregateResult_default_instance_._instance,
  &::clarifai::api::_StatValueAggregate_default_instance_._instance,
  &::clarifai::api::_StatValueAggregateQuery_default_instance_._instance,
  &::clarifai::api::_DatasetInputsSearchAddJob_default_instance_._instance,
  &::clarifai::api::_PCAProjectionComparator_default_instance_._instance,
  &::clarifai::api::_DuplicateAnnotationsResults_default_instance_._instance,
  &::clarifai::api::_Visibility_default_instance_._instance,
  &::clarifai::api::_TrendingMetric_default_instance_._instance,
  &::clarifai::api::_FullTag_default_instance_._instance,
  &::clarifai::api::_TimeSegment_default_instance_._instance,
  &::clarifai::api::_TimeInfo_default_instance_._instance,
  &::clarifai::api::_DatasetStar_default_instance_._instance,
  &::clarifai::api::_ModuleStar_default_instance_._instance,
  &::clarifai::api::_Module_default_instance_._instance,
  &::clarifai::api::_ModuleVersion_ModuleSubNav_default_instance_._instance,
  &::clarifai::api::_ModuleVersion_ModuleNav_default_instance_._instance,
  &::clarifai::api::_ModuleVersion_default_instance_._instance,
  &::clarifai::api::_InstalledModuleVersion_default_instance_._instance,
  &::clarifai::api::_BulkOperation_default_instance_._instance,
  &::clarifai::api::_InputIDs_default_instance_._instance,
  &::clarifai::api::_Progress_default_instance_._instance,
  &::clarifai::api::_Operation_default_instance_._instance,
  &::clarifai::api::_AddConcepts_default_instance_._instance,
  &::clarifai::api::_DeleteConcepts_default_instance_._instance,
  &::clarifai::api::_AddMetadata_default_instance_._instance,
  &::clarifai::api::_DeleteMetadata_default_instance_._instance,
  &::clarifai::api::_OverwriteGeo_default_instance_._instance,
  &::clarifai::api::_DeleteGeo_default_instance_._instance,
  &::clarifai::api::_AddToDataset_default_instance_._instance,
  &::clarifai::api::_DeleteFromDataset_default_instance_._instance,
  &::clarifai::api::_SplitIntoDatasets_default_instance_._instance,
  &::clarifai::api::_DatasetSplit_default_instance_._instance,
  &::clarifai::api::_InputsAddJob_default_instance_._instance,
  &::clarifai::api::_InputsAddJobProgress_default_instance_._instance,
  &::clarifai::api::_Upload_default_instance_._instance,
  &::clarifai::api::_UploadContentPart_default_instance_._instance,
  &::clarifai::api::_CustomCodeOperatorRequest_default_instance_._instance,
  &::clarifai::api::_InputsExtractionJob_default_instance_._instance,
  &::clarifai::api::_InputsExtractionJobProgress_default_instance_._instance,
  &::clarifai::api::_InputsDataSource_default_instance_._instance,
  &::clarifai::api::_DataSourceURL_default_instance_._instance,
  &::clarifai::api::_DataSourceCredentials_default_instance_._instance,
  &::clarifai::api::_AWSCreds_default_instance_._instance,
  &::clarifai::api::_AzureBlobCreds_default_instance_._instance,
  &::clarifai::api::_InputsUpload_default_instance_._instance,
  &::clarifai::api::_BookmarkOrigin_default_instance_._instance,
  &::clarifai::api::_Runner_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fclarifai_2fapi_2fresources_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"proto/clarifai/api/resources.proto\022\014cl"
  "arifai.api\032&proto/clarifai/api/status/st"
  "atus.proto\032+proto/clarifai/api/status/st"
  "atus_code.proto\032)proto/clarifai/api/util"
  "s/extensions.proto\032%proto/clarifai/api/u"
  "tils/matrix.proto\032(proto/clarifai/auth/u"
  "til/extension.proto\032\034google/protobuf/str"
  "uct.proto\032\037google/protobuf/timestamp.pro"
  "to\032\036google/protobuf/wrappers.proto\"\202\004\n\nA"
  "nnotation\022\n\n\002id\030\001 \001(\t\022\020\n\010input_id\030\002 \001(\t\022"
  " \n\004data\030\003 \001(\0132\022.clarifai.api.Data\0220\n\017ann"
  "otation_info\030\r \001(\0132\027.google.protobuf.Str"
  "uct\022\017\n\007user_id\030\017 \001(\t\022\030\n\020model_version_id"
  "\030\020 \001(\t\022\"\n\026embed_model_version_id\030\016 \001(\tB\002"
  "\030\001\022+\n\006status\030\007 \001(\0132\033.clarifai.api.status"
  ".Status\022.\n\ncreated_at\030\010 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022/\n\013modified_at\030\t \001(\0132\032.g"
  "oogle.protobuf.Timestamp\022\023\n\007trusted\030\n \001("
  "\010B\002\030\001\022\023\n\013input_level\030\021 \001(\010\022/\n\016consensus_"
  "info\030\022 \001(\0132\027.google.protobuf.Struct\022\017\n\007t"
  "ask_id\030\023 \001(\t\022\033\n\023workflow_version_id\030\024 \001("
  "\tJ\004\010\004\020\005J\004\010\005\020\006J\004\010\006\020\007J\004\010\013\020\014J\004\010\014\020\r\"\234\004\n\003App\022"
  "\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\030\n\020default_lan"
  "guage\030\003 \001(\t\022\033\n\023default_workflow_id\030\004 \001(\t"
  "\0220\n\020default_workflow\030\027 \001(\0132\026.clarifai.ap"
  "i.Workflow\022\017\n\007user_id\030\005 \001(\t\022.\n\ncreated_a"
  "t\030\006 \001(\0132\032.google.protobuf.Timestamp\022/\n\013m"
  "odified_at\030\021 \001(\0132\032.google.protobuf.Times"
  "tamp\022\034\n\024legal_consent_status\030\007 \001(\r\022)\n\010me"
  "tadata\030\r \001(\0132\027.google.protobuf.Struct\022\023\n"
  "\013description\030\016 \001(\t\022\021\n\tsample_ms\030\017 \001(\r\022,\n"
  "\nvisibility\030\020 \001(\0132\030.clarifai.api.Visibil"
  "ity\022\024\n\014data_tier_id\030\022 \001(\t\022\022\n\nis_starred\030"
  "\023 \001(\010\022\022\n\nstar_count\030\024 \001(\005\022\r\n\005notes\030\025 \001(\t"
  "\022\"\n\005image\030\026 \001(\0132\023.clarifai.api.ImageJ\004\010\n"
  "\020\013J\004\010\013\020\014J\004\010\014\020\r\"\030\n\010AppQuery\022\014\n\004name\030\001 \001(\t"
  "\"\220\002\n\014Collaborator\022\n\n\002id\030\001 \001(\t\022\036\n\003app\030\002 \001"
  "(\0132\021.clarifai.api.App\022 \n\004user\030\003 \001(\0132\022.cl"
  "arifai.api.User\022\016\n\006scopes\030\004 \003(\t\022\021\n\tendpo"
  "ints\030\005 \003(\t\022.\n\ncreated_at\030\006 \001(\0132\032.google."
  "protobuf.Timestamp\022/\n\013modified_at\030\007 \001(\0132"
  "\032.google.protobuf.Timestamp\022.\n\ndeleted_a"
  "t\030\010 \001(\0132\032.google.protobuf.Timestamp\"\251\001\n\r"
  "Collaboration\022\036\n\003app\030\001 \001(\0132\021.clarifai.ap"
  "i.App\022%\n\tapp_owner\030\002 \001(\0132\022.clarifai.api."
  "User\022\016\n\006scopes\030\003 \003(\t\022\021\n\tendpoints\030\004 \003(\t\022"
  ".\n\ncreated_at\030\005 \001(\0132\032.google.protobuf.Ti"
  "mestamp\"\227\001\n\005Audio\022\013\n\003url\030\001 \001(\t\022\016\n\006base64"
  "\030\002 \001(\014\022\033\n\023allow_duplicate_url\030\004 \001(\010\022\'\n\006h"
  "osted\030\005 \001(\0132\027.clarifai.api.HostedURL\022+\n\n"
  "audio_info\030\006 \001(\0132\027.clarifai.api.AudioInf"
  "o\"b\n\tAudioInfo\022\024\n\014audio_format\030\001 \001(\t\022\023\n\013"
  "sample_rate\030\002 \001(\005\022\030\n\020duration_seconds\030\003 "
  "\001(\002\022\020\n\010bit_rate\030\004 \001(\005\"w\n\005Track\022\n\n\002id\030\001 \001"
  "(\t\022 \n\004data\030\002 \001(\0132\022.clarifai.api.Data\022)\n\t"
  "time_info\030\004 \001(\0132\026.clarifai.api.TimeInfo\022"
  "\017\n\007quality\030\005 \001(\002J\004\010\003\020\004\"h\n\007Cluster\022\n\n\002id\030"
  "\001 \001(\t\022\r\n\005count\030\002 \001(\r\022\r\n\005score\030\003 \001(\002\022\037\n\004h"
  "its\030\004 \003(\0132\021.clarifai.api.Hit\022\022\n\nprojecti"
  "on\030\005 \003(\002\"M\n\005Color\022\017\n\007raw_hex\030\001 \001(\t\022\036\n\003w3"
  "c\030\002 \001(\0132\021.clarifai.api.W3C\022\023\n\005value\030\003 \001("
  "\002B\004\200\265\030\001\" \n\003W3C\022\013\n\003hex\030\001 \001(\t\022\014\n\004name\030\002 \001("
  "\t\"/\n\014UserAppIDSet\022\017\n\007user_id\030\001 \001(\t\022\016\n\006ap"
  "p_id\030\002 \001(\t\"J\n\013PatchAction\022\n\n\002op\030\001 \001(\t\022!\n"
  "\031merge_conflict_resolution\030\002 \001(\t\022\014\n\004path"
  "\030\003 \001(\t\"\335\002\n\007Concept\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002"
  " \001(\t\022\032\n\005value\030\003 \001(\002B\013\325\265\030\000\000\200\?\200\265\030\001\022.\n\ncrea"
  "ted_at\030\004 \001(\0132\032.google.protobuf.Timestamp"
  "\022\020\n\010language\030\005 \001(\t\022\016\n\006app_id\030\006 \001(\t\022\022\n\nde"
  "finition\030\007 \001(\t\022\020\n\010vocab_id\030\010 \001(\t\022,\n\nvisi"
  "bility\030\t \001(\0132\030.clarifai.api.Visibility\022\017"
  "\n\007user_id\030\n \001(\t\0221\n\rkeypoint_info\030\013 \001(\0132\032"
  ".clarifai.api.KeypointInfo\0222\n\nextra_info"
  "\030\014 \001(\0132\036.clarifai.api.ConceptExtraInfo\"T"
  "\n\014KeypointInfo\022\026\n\016keypoint_names\030\001 \003(\t\022,"
  "\n\010skeleton\030\002 \003(\0132\032.clarifai.api.Keypoint"
  "Edge\"&\n\014KeypointEdge\022\n\n\002k1\030\001 \001(\r\022\n\n\002k2\030\002"
  " \001(\r\"\'\n\020ConceptExtraInfo\022\023\n\013is_rankable\030"
  "\001 \001(\010\"\244\001\n\014ConceptCount\022\n\n\002id\030\001 \001(\t\022\014\n\004na"
  "me\030\002 \001(\t\022:\n\022concept_type_count\030\003 \001(\0132\036.c"
  "larifai.api.ConceptTypeCount\022>\n\024detail_c"
  "oncept_count\030\004 \001(\0132 .clarifai.api.Detail"
  "ConceptCount\"B\n\020ConceptTypeCount\022\026\n\010posi"
  "tive\030\001 \001(\rB\004\200\265\030\001\022\026\n\010negative\030\002 \001(\rB\004\200\265\030\001"
  "\"\337\001\n\022DetailConceptCount\0221\n\tprocessed\030\001 \001"
  "(\0132\036.clarifai.api.ConceptTypeCount\0222\n\nto"
  "_process\030\002 \001(\0132\036.clarifai.api.ConceptTyp"
  "eCount\022.\n\006errors\030\003 \001(\0132\036.clarifai.api.Co"
  "nceptTypeCount\0222\n\nprocessing\030\004 \001(\0132\036.cla"
  "rifai.api.ConceptTypeCount\"C\n\014ConceptQue"
  "ry\022\014\n\004name\030\001 \001(\t\022\020\n\010language\030\002 \001(\t\022\023\n\013wo"
  "rkflow_id\030\003 \001(\t\"\331\001\n\017ConceptRelation\022\n\n\002i"
  "d\030\001 \001(\t\022.\n\017subject_concept\030\002 \001(\0132\025.clari"
  "fai.api.Concept\022-\n\016object_concept\030\003 \001(\0132"
  "\025.clarifai.api.Concept\022\021\n\tpredicate\030\004 \001("
  "\t\022\032\n\022knowledge_graph_id\030\005 \001(\t\022,\n\nvisibil"
  "ity\030\006 \001(\0132\030.clarifai.api.Visibility\"y\n\016K"
  "nowledgeGraph\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022"
  "\023\n\013description\030\003 \001(\t\022\027\n\017examples_app_id\030"
  "\004 \001(\t\022\037\n\027sampled_examples_app_id\030\005 \001(\t\"D"
  "\n\021ConceptMappingJob\022\032\n\022knowledge_graph_i"
  "d\030\001 \001(\t\022\023\n\013concept_ids\030\002 \003(\t\"\?\n\017ConceptL"
  "anguage\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\022\n\ndef"
  "inition\030\003 \001(\t\"\372\004\n\004Data\022\"\n\005image\030\001 \001(\0132\023."
  "clarifai.api.Image\022\"\n\005video\030\002 \001(\0132\023.clar"
  "ifai.api.Video\022\'\n\010concepts\030\003 \003(\0132\025.clari"
  "fai.api.Concept\022)\n\010metadata\030\005 \001(\0132\027.goog"
  "le.protobuf.Struct\022\036\n\003geo\030\006 \001(\0132\021.clarif"
  "ai.api.Geo\022#\n\006colors\030\007 \003(\0132\023.clarifai.ap"
  "i.Color\022\'\n\010clusters\030\010 \003(\0132\025.clarifai.api"
  ".Cluster\022+\n\nembeddings\030\t \003(\0132\027.clarifai."
  "api.Embedding\022%\n\007regions\030\013 \003(\0132\024.clarifa"
  "i.api.Region\022#\n\006frames\030\014 \003(\0132\023.clarifai."
  "api.Frame\022 \n\004text\030\r \001(\0132\022.clarifai.api.T"
  "ext\022\"\n\005audio\030\016 \001(\0132\023.clarifai.api.Audio\022"
  "#\n\006tracks\030\017 \003(\0132\023.clarifai.api.Track\0220\n\r"
  "time_segments\030\020 \003(\0132\031.clarifai.api.TimeS"
  "egment\022\037\n\004hits\030\021 \003(\0132\021.clarifai.api.Hit\022"
  "%\n\010heatmaps\030\022 \003(\0132\023.clarifai.api.ImageJ\004"
  "\010\004\020\005J\004\010\n\020\013\"\206\001\n\006Region\022\n\n\002id\030\001 \001(\t\022-\n\013reg"
  "ion_info\030\002 \001(\0132\030.clarifai.api.RegionInfo"
  "\022 \n\004data\030\003 \001(\0132\022.clarifai.api.Data\022\r\n\005va"
  "lue\030\004 \001(\002\022\020\n\010track_id\030\005 \001(\t\"\256\002\n\nRegionIn"
  "fo\022/\n\014bounding_box\030\001 \001(\0132\031.clarifai.api."
  "BoundingBox\022 \n\004mask\030\004 \001(\0132\022.clarifai.api"
  ".Mask\022&\n\007polygon\030\005 \001(\0132\025.clarifai.api.Po"
  "lygon\022\"\n\005point\030\006 \001(\0132\023.clarifai.api.Poin"
  "t\022 \n\004span\030\007 \001(\0132\022.clarifai.api.Span\022\"\n\005t"
  "oken\030\010 \001(\0132\023.clarifai.api.Token\022/\n\022keypo"
  "int_locations\030\t \003(\0132\023.clarifai.api.Point"
  "J\004\010\002\020\003J\004\010\003\020\004\"o\n\013BoundingBox\022\025\n\007top_row\030\001"
  " \001(\002B\004\200\265\030\001\022\026\n\010left_col\030\002 \001(\002B\004\200\265\030\001\022\030\n\nbo"
  "ttom_row\030\003 \001(\002B\004\200\265\030\001\022\027\n\tright_col\030\004 \001(\002B"
  "\004\200\265\030\001\"4\n\tFrameInfo\022\023\n\005index\030\001 \001(\rB\004\200\265\030\001\022"
  "\022\n\004time\030\002 \001(\rB\004\200\265\030\001\"b\n\005Frame\022+\n\nframe_in"
  "fo\030\001 \001(\0132\027.clarifai.api.FrameInfo\022 \n\004dat"
  "a\030\002 \001(\0132\022.clarifai.api.Data\022\n\n\002id\030\003 \001(\t\""
  "0\n\004Mask\022\"\n\005image\030\002 \001(\0132\023.clarifai.api.Im"
  "ageJ\004\010\001\020\002\".\n\007Polygon\022#\n\006points\030\001 \003(\0132\023.c"
  "larifai.api.Point\"\266\001\n\005Point\022\021\n\003row\030\001 \001(\002"
  "B\004\200\265\030\001\022\021\n\003col\030\002 \001(\002B\004\200\265\030\001\022\t\n\001z\030\003 \001(\002\0222\n\n"
  "visibility\030\004 \001(\0162\036.clarifai.api.Point.Vi"
  "sibility\"H\n\nVisibility\022\013\n\007NOT_SET\020\000\022\013\n\007V"
  "ISIBLE\020\001\022\017\n\013NOT_VISIBLE\020\002\022\017\n\013NOT_PRESENT"
  "\020\003\"J\n\004Span\022\030\n\nchar_start\030\001 \001(\rB\004\200\265\030\001\022\026\n\010"
  "char_end\030\002 \001(\rB\004\200\265\030\001\022\020\n\010raw_text\030\003 \001(\t\"K"
  "\n\005Token\022\030\n\nchar_start\030\001 \001(\rB\004\200\265\030\001\022\026\n\010cha"
  "r_end\030\002 \001(\rB\004\200\265\030\001\022\020\n\010raw_text\030\003 \001(\t\"7\n\tE"
  "mbedding\022\022\n\006vector\030\001 \003(\002B\002\020\001\022\026\n\016num_dime"
  "nsions\030\002 \001(\r\";\n\010GeoPoint\022\027\n\tlongitude\030\001 "
  "\001(\002B\004\200\265\030\001\022\026\n\010latitude\030\002 \001(\002B\004\200\265\030\001\"-\n\010Geo"
  "Limit\022\014\n\004type\030\001 \001(\t\022\023\n\005value\030\002 \001(\002B\004\200\265\030\001"
  "\":\n\rGeoBoxedPoint\022)\n\tgeo_point\030\001 \001(\0132\026.c"
  "larifai.api.GeoPoint\"\211\001\n\003Geo\022)\n\tgeo_poin"
  "t\030\001 \001(\0132\026.clarifai.api.GeoPoint\022)\n\tgeo_l"
  "imit\030\002 \001(\0132\026.clarifai.api.GeoLimit\022,\n\007ge"
  "o_box\030\003 \003(\0132\033.clarifai.api.GeoBoxedPoint"
  "\"\235\001\n\005Image\022\013\n\003url\030\001 \001(\t\022\016\n\006base64\030\002 \001(\014\022"
  "\033\n\023allow_duplicate_url\030\004 \001(\010\022\'\n\006hosted\030\005"
  " \001(\0132\027.clarifai.api.HostedURL\022+\n\nimage_i"
  "nfo\030\006 \001(\0132\027.clarifai.api.ImageInfoJ\004\010\003\020\004"
  "\"N\n\tImageInfo\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002"
  " \001(\005\022\016\n\006format\030\003 \001(\t\022\022\n\ncolor_mode\030\004 \001(\t"
  "\"O\n\tHostedURL\022\016\n\006prefix\030\001 \001(\t\022\016\n\006suffix\030"
  "\002 \001(\t\022\r\n\005sizes\030\003 \003(\t\022\023\n\013crossorigin\030\004 \001("
  "\t\"\336\001\n\005Input\022\n\n\002id\030\001 \001(\t\022 \n\004data\030\002 \001(\0132\022."
  "clarifai.api.Data\022.\n\ncreated_at\030\004 \001(\0132\032."
  "google.protobuf.Timestamp\022/\n\013modified_at"
  "\030\005 \001(\0132\032.google.protobuf.Timestamp\022+\n\006st"
  "atus\030\006 \001(\0132\033.clarifai.api.status.Status\022"
  "\023\n\013dataset_ids\030\007 \003(\tJ\004\010\003\020\004\"1\n\nInputBatch"
  "\022#\n\006inputs\030\001 \003(\0132\023.clarifai.api.Input\"\332\001"
  "\n\nInputCount\022\027\n\tprocessed\030\001 \001(\rB\004\200\265\030\001\022\030\n"
  "\nto_process\030\002 \001(\rB\004\200\265\030\001\022\024\n\006errors\030\003 \001(\rB"
  "\004\200\265\030\001\022\030\n\nprocessing\030\004 \001(\rB\004\200\265\030\001\022\027\n\treind"
  "exed\030\005 \001(\rB\004\200\265\030\001\022\030\n\nto_reindex\030\006 \001(\rB\004\200\265"
  "\030\001\022\034\n\016reindex_errors\030\007 \001(\rB\004\200\265\030\001\022\030\n\nrein"
  "dexing\030\010 \001(\rB\004\200\265\030\001\"\276\004\n\007Dataset\022\n\n\002id\030\001 \001"
  "(\t\022.\n\ncreated_at\030\002 \001(\0132\032.google.protobuf"
  ".Timestamp\022/\n\013modified_at\030\003 \001(\0132\032.google"
  ".protobuf.Timestamp\022\016\n\006app_id\030\004 \001(\t\022\017\n\007u"
  "ser_id\030\005 \001(\t\022\023\n\013description\030\007 \001(\t\022)\n\010met"
  "adata\030\010 \001(\0132\027.google.protobuf.Struct\022,\n\n"
  "visibility\030\t \001(\0132\030.clarifai.api.Visibili"
  "ty\022A\n\031default_annotation_filter\030\014 \001(\0132\036."
  "clarifai.api.AnnotationFilter\022K\n\027default"
  "_processing_info\030\020 \001(\0132*.clarifai.api.Da"
  "tasetVersionProcessingInfo\022\r\n\005notes\030\013 \001("
  "\t\022-\n\007version\030\r \001(\0132\034.clarifai.api.Datase"
  "tVersion\022\022\n\nis_starred\030\016 \001(\010\022\022\n\nstar_cou"
  "nt\030\017 \001(\005\0225\n\017bookmark_origin\030\021 \001(\0132\034.clar"
  "ifai.api.BookmarkOriginJ\004\010\006\020\007J\004\010\n\020\013\"\330\001\n\020"
  "AnnotationFilter\022\n\n\002id\030\001 \001(\t\022.\n\ncreated_"
  "at\030\002 \001(\0132\032.google.protobuf.Timestamp\022/\n\013"
  "modified_at\030\003 \001(\0132\032.google.protobuf.Time"
  "stamp\022\017\n\007user_id\030\004 \001(\t\022\016\n\006app_id\030\005 \001(\t\022*"
  "\n\014saved_search\030\010 \001(\0132\024.clarifai.api.Sear"
  "chJ\004\010\006\020\007J\004\010\007\020\010\"b\n\014DatasetInput\022.\n\ncreate"
  "d_at\030\001 \001(\0132\032.google.protobuf.Timestamp\022\""
  "\n\005input\030\002 \001(\0132\023.clarifai.api.Input\"\256\006\n\016D"
  "atasetVersion\022\n\n\002id\030\001 \001(\t\022.\n\ncreated_at\030"
  "\002 \001(\0132\032.google.protobuf.Timestamp\022/\n\013mod"
  "ified_at\030\003 \001(\0132\032.google.protobuf.Timesta"
  "mp\022\016\n\006app_id\030\004 \001(\t\022\017\n\007user_id\030\005 \001(\t\022\022\n\nd"
  "ataset_id\030\006 \001(\t\022H\n\030annotation_filter_con"
  "fig\030\017 \001(\0132$.clarifai.api.AnnotationFilte"
  "rConfigH\000\022@\n\024model_predict_config\030\022 \001(\0132"
  " .clarifai.api.ModelPredictConfigH\000\022+\n\006s"
  "tatus\030\010 \001(\0132\033.clarifai.api.status.Status"
  "\022\023\n\013description\030\n \001(\t\022C\n\017processing_info"
  "\030\023 \001(\0132*.clarifai.api.DatasetVersionProc"
  "essingInfo\022:\n\007metrics\030\020 \003(\0132).clarifai.a"
  "pi.DatasetVersion.MetricsEntry\022;\n\013export"
  "_info\030\021 \001(\0132&.clarifai.api.DatasetVersio"
  "nExportInfo\022)\n\010metadata\030\014 \001(\0132\027.google.p"
  "rotobuf.Struct\022,\n\nvisibility\030\r \001(\0132\030.cla"
  "rifai.api.Visibility\022\037\n\027embed_model_vers"
  "ion_ids\030\016 \003(\t\032S\n\014MetricsEntry\022\013\n\003key\030\001 \001"
  "(\t\0222\n\005value\030\002 \001(\0132#.clarifai.api.Dataset"
  "VersionMetrics:\0028\001B\r\n\013data_configJ\004\010\007\020\010J"
  "\004\010\t\020\nJ\004\010\013\020\014\"p\n\026AnnotationFilterConfig\0229\n"
  "\021annotation_filter\030\001 \001(\0132\036.clarifai.api."
  "AnnotationFilter\022\033\n\023ignore_empty_inputs\030"
  "\002 \001(\010\"8\n\022ModelPredictConfig\022\"\n\005model\030\001 \001"
  "(\0132\023.clarifai.api.Model\"\303\010\n\025DatasetVersi"
  "onMetrics\0222\n\014inputs_count\030\001 \001(\0132\034.google"
  ".protobuf.UInt64Value\022<\n\026unlabeled_input"
  "s_count\030\006 \001(\0132\034.google.protobuf.UInt64Va"
  "lue\022@\n\032inputs_with_metadata_count\030\010 \001(\0132"
  "\034.google.protobuf.UInt64Value\022;\n\025inputs_"
  "with_geo_count\030\t \001(\0132\034.google.protobuf.U"
  "Int64Value\0223\n\rregions_count\030\024 \001(\0132\034.goog"
  "le.protobuf.UInt64Value\022-\n\026region_locati"
  "on_matrix\030\025 \001(\0132\r.MatrixUint64\022:\n\024boundi"
  "ng_boxes_count\030\026 \001(\0132\034.google.protobuf.U"
  "Int64Value\0224\n\016polygons_count\030\027 \001(\0132\034.goo"
  "gle.protobuf.UInt64Value\0222\n\014points_count"
  "\030\030 \001(\0132\034.google.protobuf.UInt64Value\0221\n\013"
  "masks_count\030\031 \001(\0132\034.google.protobuf.UInt"
  "64Value\0229\n\023region_inputs_count\030< \001(\0132\034.g"
  "oogle.protobuf.UInt64Value\0229\n\023region_fra"
  "mes_count\030= \001(\0132\034.google.protobuf.UInt64"
  "Value\0222\n\014frames_count\030\036 \001(\0132\034.google.pro"
  "tobuf.UInt64Value\0228\n\022frame_inputs_count\030"
  "F \001(\0132\034.google.protobuf.UInt64Value\0226\n\020e"
  "mbeddings_count\030( \001(\0132\034.google.protobuf."
  "UInt64Value\022\?\n\031positive_input_tags_count"
  "\0302 \001(\0132\034.google.protobuf.UInt64Value\022@\n\032"
  "positive_region_tags_count\0303 \001(\0132\034.googl"
  "e.protobuf.UInt64Value\022\?\n\031positive_frame"
  "_tags_count\0304 \001(\0132\034.google.protobuf.UInt"
  "64ValueJ\004\010\002\020\003J\004\010\003\020\004J\004\010\004\020\005J\004\010\005\020\006J\004\010\007\020\010\"\312\001"
  "\n\032DatasetVersionMetricsGroup\022\023\n\013parent_p"
  "ath\030\001 \001(\t\022:\n\004type\030\002 \001(\0162,.clarifai.api.D"
  "atasetVersionMetricsGroupType\022%\n\005value\030\003"
  " \001(\0132\026.google.protobuf.Value\0224\n\007metrics\030"
  "\004 \001(\0132#.clarifai.api.DatasetVersionMetri"
  "cs\"\320\001\n\030DatasetVersionExportInfo\022B\n\026clari"
  "fai_data_protobuf\030\001 \001(\0132\".clarifai.api.D"
  "atasetVersionExport\022>\n\022clarifai_data_jso"
  "n\030\003 \001(\0132\".clarifai.api.DatasetVersionExp"
  "ort\0220\n\004coco\030\002 \001(\0132\".clarifai.api.Dataset"
  "VersionExport\"\264\001\n\024DatasetVersionExport\0228"
  "\n\006format\030\001 \001(\0162(.clarifai.api.DatasetVer"
  "sionExportFormat\022+\n\006status\030\002 \001(\0132\033.clari"
  "fai.api.status.Status\022\013\n\003url\030\003 \001(\t\022\014\n\004si"
  "ze\030\004 \001(\004\022\032\n\022include_embeddings\030\005 \001(\010\"f\n\034"
  "DatasetVersionProcessingInfo\022F\n\030frame_in"
  "terpolation_info\030\001 \001(\0132$.clarifai.api.Fr"
  "ameInterpolationInfo\"+\n\026FrameInterpolati"
  "onInfo\022\021\n\tsample_ms\030\001 \001(\r\"n\n\031WorkflowRes"
  "ultsSimilarity\022(\n\013probe_input\030\001 \001(\0132\023.cl"
  "arifai.api.Input\022\'\n\014pool_results\030\002 \003(\0132\021"
  ".clarifai.api.Hit\"\364\001\n\003Key\022\n\n\002id\030\001 \001(\t\022\014\n"
  "\004type\030\010 \001(\t\022\023\n\013description\030\002 \001(\t\022\016\n\006scop"
  "es\030\003 \003(\t\022\021\n\tendpoints\030\007 \003(\t\022\037\n\004apps\030\004 \003("
  "\0132\021.clarifai.api.App\022.\n\ncreated_at\030\005 \001(\013"
  "2\032.google.protobuf.Timestamp\022.\n\nexpires_"
  "at\030\006 \001(\0132\032.google.protobuf.Timestamp\022\032\n\022"
  "authorized_idp_ids\030\t \003(\t\"\214\007\n\005Model\022\n\n\002id"
  "\030\001 \001(\t\022\020\n\004name\030\002 \001(\tB\002\030\001\022.\n\ncreated_at\030\003"
  " \001(\0132\032.google.protobuf.Timestamp\022/\n\013modi"
  "fied_at\030\023 \001(\0132\032.google.protobuf.Timestam"
  "p\022\024\n\006app_id\030\004 \001(\tB\004\200\265\030\001\0221\n\013output_info\030\005"
  " \001(\0132\030.clarifai.api.OutputInfoB\002\030\001\0221\n\rmo"
  "del_version\030\006 \001(\0132\032.clarifai.api.ModelVe"
  "rsion\022\030\n\014display_name\030\007 \001(\tB\002\030\001\022\017\n\007user_"
  "id\030\t \001(\t\0221\n\021default_eval_info\030\036 \001(\0132\026.cl"
  "arifai.api.EvalInfo\022\025\n\rmodel_type_id\030\016 \001"
  "(\t\022\014\n\004task\030\032 \001(\t\022,\n\nvisibility\030\017 \001(\0132\030.c"
  "larifai.api.Visibility\022\023\n\013description\030\020 "
  "\001(\t\022)\n\010metadata\030\021 \001(\0132\027.google.protobuf."
  "Struct\022(\n\007presets\030\033 \001(\0132\027.google.protobu"
  "f.Struct\022\r\n\005notes\030\022 \001(\t\022\026\n\010toolkits\030\024 \003("
  "\tB\004\200\265\030\001\022\027\n\tuse_cases\030\025 \003(\tB\004\200\265\030\001\022\027\n\tlang"
  "uages\030\031 \003(\tB\004\200\265\030\001\0223\n\016languages_full\030\037 \003("
  "\0132\025.clarifai.api.FullTagB\004\200\265\030\001\022\034\n\016check_"
  "consents\030  \003(\tB\004\200\265\030\001\022\022\n\nis_starred\030\026 \001(\010"
  "\022\022\n\nstar_count\030\027 \001(\005\0228\n\024workflow_recomme"
  "nded\030\035 \001(\0132\032.google.protobuf.BoolValue\0225"
  "\n\017bookmark_origin\030! \001(\0132\034.clarifai.api.B"
  "ookmarkOriginJ\004\010\010\020\tJ\004\010\n\020\013J\004\010\013\020\014J\004\010\014\020\rJ\004\010"
  "\r\020\016J\004\010\030\020\031J\004\010\034\020\035\"t\n\016ModelReference\022\n\n\002id\030"
  "\001 \001(\t\022\020\n\010model_id\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022\014\n\004"
  "name\030\004 \001(\t\022)\n\010metadata\030\005 \001(\0132\027.google.pr"
  "otobuf.Struct\"\227\001\n\030ModelVersionInputExamp"
  "le\022\n\n\002id\030\001 \001(\t\022\020\n\010model_id\030\002 \001(\t\022\030\n\020mode"
  "l_version_id\030\003 \001(\t\022 \n\004data\030\004 \001(\0132\022.clari"
  "fai.api.Data\022\014\n\004name\030\005 \001(\t\022\023\n\013descriptio"
  "n\030\006 \001(\t\"\324\001\n\nOutputInfo\022 \n\004data\030\001 \001(\0132\022.c"
  "larifai.api.Data\0221\n\routput_config\030\002 \001(\0132"
  "\032.clarifai.api.OutputConfig\022\017\n\007message\030\003"
  " \001(\t\022+\n\nfields_map\030\006 \001(\0132\027.google.protob"
  "uf.Struct\022\'\n\006params\030\007 \001(\0132\027.google.proto"
  "buf.StructJ\004\010\004\020\005J\004\010\005\020\006\"\220\001\n\tInputInfo\022+\n\n"
  "fields_map\030\001 \001(\0132\027.google.protobuf.Struc"
  "t\022\'\n\006params\030\002 \001(\0132\027.google.protobuf.Stru"
  "ct\022-\n\020base_embed_model\030\003 \001(\0132\023.clarifai."
  "api.Model\"4\n\tTrainInfo\022\'\n\006params\030\001 \001(\0132\027"
  ".google.protobuf.Struct\"3\n\010EvalInfo\022\'\n\006p"
  "arams\030\001 \001(\0132\027.google.protobuf.Struct\"5\n\n"
  "ImportInfo\022\'\n\006params\030\001 \001(\0132\027.google.prot"
  "obuf.Struct\"\343\003\n\014OutputConfig\022\'\n\033concepts"
  "_mutually_exclusive\030\001 \001(\010B\002\030\001\022\035\n\021existin"
  "g_model_id\030\003 \001(\tB\002\030\001\022\020\n\010language\030\004 \001(\t\022\034"
  "\n\020hyper_parameters\030\005 \001(\tB\002\030\001\022\032\n\014max_conc"
  "epts\030\006 \001(\rB\004\200\265\030\001\022\027\n\tmin_value\030\007 \001(\002B\004\200\265\030"
  "\001\022.\n\017select_concepts\030\010 \003(\0132\025.clarifai.ap"
  "i.Concept\022\030\n\020training_timeout\030\t \001(\r\022\021\n\ts"
  "ample_ms\030\n \001(\r\022-\n\014hyper_params\030\r \001(\0132\027.g"
  "oogle.protobuf.Struct\022\"\n\026embed_model_ver"
  "sion_id\030\016 \001(\tB\002\030\001\022)\n!fail_on_missing_pos"
  "itive_examples\030\017 \001(\010\0223\n\016model_metadata\030\021"
  " \001(\0132\027.google.protobuf.StructB\002\030\001J\004\010\013\020\014J"
  "\004\010\014\020\rJ\004\010\020\020\021J\004\010\022\020\023\"\322\003\n\tModelType\022\n\n\002id\030\001 "
  "\001(\t\022\r\n\005title\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022"
  "\024\n\014input_fields\030\005 \003(\t\022\025\n\routput_fields\030\006"
  " \003(\t\022\021\n\ttrainable\030\010 \001(\010\022\021\n\tcreatable\030\t \001"
  "(\010\022\025\n\rinternal_only\030\n \001(\010\0227\n\021model_type_"
  "fields\030\013 \003(\0132\034.clarifai.api.ModelTypeFie"
  "ld\022\"\n\032requires_sequential_frames\030\014 \001(\010\022;"
  "\n\025expected_input_layers\030\020 \003(\0132\034.clarifai"
  ".api.ModelLayerInfo\022<\n\026expected_output_l"
  "ayers\030\021 \003(\0132\034.clarifai.api.ModelLayerInf"
  "o\0225\n\017evaluation_type\030\022 \001(\0162\034.clarifai.ap"
  "i.EvaluationTypeJ\004\010\007\020\010J\004\010\004\020\005J\004\010\r\020\016J\004\010\016\020\017"
  "J\004\010\017\020\020\"\211\001\n\016ModelLayerInfo\022\027\n\017data_field_"
  "name\030\001 \001(\t\022(\n\006shapes\030\002 \003(\0132\030.clarifai.ap"
  "i.LayerShape\022\023\n\013description\030\003 \001(\t\022\037\n\027req"
  "uires_label_filename\030\004 \001(\010\"D\n\022TritonCond"
  "aEnvInfo\022\026\n\016conda_pack_url\030\001 \001(\t\022\026\n\016cond"
  "a_yaml_url\030\002 \001(\t\"l\n\nLayerShape\022\014\n\004dims\030\001"
  " \003(\005\022\020\n\010max_dims\030\002 \003(\005\022)\n\tdata_type\030\003 \001("
  "\0162\026.clarifai.api.DataType\022\023\n\013description"
  "\030\004 \001(\t\"\357\005\n\016ModelTypeField\022\014\n\004path\030\001 \001(\t\022"
  "C\n\nfield_type\030\002 \001(\0162/.clarifai.api.Model"
  "TypeField.ModelTypeFieldType\022-\n\rdefault_"
  "value\030\003 \001(\0132\026.google.protobuf.Value\022\023\n\013d"
  "escription\030\004 \001(\t\022\023\n\013placeholder\030\005 \001(\t\022B\n"
  "\027model_type_enum_options\030\006 \003(\0132!.clarifa"
  "i.api.ModelTypeEnumOption\022\025\n\rinternal_on"
  "ly\030\007 \001(\010\022\020\n\010required\030\010 \001(\010\022\?\n\025model_type"
  "_range_info\030\t \001(\0132 .clarifai.api.ModelTy"
  "peRangeInfo\"\202\003\n\022ModelTypeFieldType\022!\n\035IN"
  "VALID_MODEL_TYPE_FIELD_TYPE\020\000\022\013\n\007BOOLEAN"
  "\020\001\022\n\n\006STRING\020\002\022\n\n\006NUMBER\020\003\022\025\n\021ARRAY_OF_C"
  "ONCEPTS\020\004\022$\n ARRAY_OF_CONCEPTS_WITH_THRE"
  "SHOLD\020\005\022\t\n\005RANGE\020\007\022\010\n\004ENUM\020\010\022\021\n\rCOLLABOR"
  "ATORS\020\t\022\010\n\004JSON\020\n\022\024\n\020ARRAY_OF_NUMBERS\020\013\022"
  "\031\n\025WORKFLOW_EMBED_MODELS\020\014\022\024\n\020ARRAY_OF_S"
  "TRINGS\020\r\022\022\n\016RECURSIVE_ENUM\020\016\022\017\n\013PYTHON_C"
  "ODE\020\017\022\016\n\nDATASET_ID\020\020\022\026\n\022DATASET_VERSION"
  "_ID\020\021\022\033\n\027ARRAY_OF_MODEL_CONCEPTS\020\022\"\004\010\006\020\006"
  "\"<\n\022ModelTypeRangeInfo\022\013\n\003min\030\001 \001(\002\022\013\n\003m"
  "ax\030\002 \001(\002\022\014\n\004step\030\003 \001(\002\"\324\001\n\023ModelTypeEnum"
  "Option\022\n\n\002id\030\001 \001(\t\0227\n\007aliases\030\005 \003(\0132&.cl"
  "arifai.api.ModelTypeEnumOptionAlias\022\023\n\013d"
  "escription\030\002 \001(\t\0227\n\021model_type_fields\030\003 "
  "\003(\0132\034.clarifai.api.ModelTypeField\022\025\n\rint"
  "ernal_only\030\004 \001(\010\022\023\n\013recommended\030\006 \001(\010\"C\n"
  "\030ModelTypeEnumOptionAlias\022\016\n\006id_int\030\001 \001("
  "\003\022\027\n\017wildcard_string\030\002 \001(\t\"7\n\nModelQuery"
  "\022\014\n\004name\030\001 \001(\t\022\025\n\rmodel_type_id\030\003 \001(\tJ\004\010"
  "\002\020\003\"\374\005\n\014ModelVersion\022\n\n\002id\030\001 \001(\t\022.\n\ncrea"
  "ted_at\030\002 \001(\0132\032.google.protobuf.Timestamp"
  "\022+\n\006status\030\003 \001(\0132\033.clarifai.api.status.S"
  "tatus\022\034\n\024active_concept_count\030\004 \001(\r\022*\n\007m"
  "etrics\030\005 \001(\0132\031.clarifai.api.EvalMetrics\022"
  "\031\n\021total_input_count\030\006 \001(\r\022D\n\027pretrained"
  "_model_config\030\007 \001(\0132#.clarifai.api.Pretr"
  "ainedModelConfig\0220\n\014completed_at\030\n \001(\0132\032"
  ".google.protobuf.Timestamp\022\023\n\013descriptio"
  "n\030\013 \001(\t\022,\n\nvisibility\030\014 \001(\0132\030.clarifai.a"
  "pi.Visibility\022\016\n\006app_id\030\r \001(\t\022\017\n\007user_id"
  "\030\016 \001(\t\022/\n\013modified_at\030\017 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022)\n\010metadata\030\020 \001(\0132\027.goog"
  "le.protobuf.Struct\022\017\n\007license\030\021 \001(\t\022-\n\013o"
  "utput_info\030\023 \001(\0132\030.clarifai.api.OutputIn"
  "fo\022+\n\ninput_info\030\024 \001(\0132\027.clarifai.api.In"
  "putInfo\022+\n\ntrain_info\030\025 \001(\0132\027.clarifai.a"
  "pi.TrainInfo\022-\n\013import_info\030\026 \001(\0132\030.clar"
  "ifai.api.ImportInfo\022\021\n\ttrain_log\030\027 \001(\tJ\004"
  "\010\t\020\nJ\004\010\022\020\023\"\241\001\n\025PretrainedModelConfig\0221\n\020"
  "input_fields_map\030\003 \001(\0132\027.google.protobuf"
  ".Struct\0222\n\021output_fields_map\030\004 \001(\0132\027.goo"
  "gle.protobuf.Struct\022\025\n\rmodel_zip_url\030\006 \001"
  "(\tJ\004\010\002\020\003J\004\010\005\020\006\">\n\nTrainStats\0220\n\nloss_cur"
  "ve\030\001 \003(\0132\034.clarifai.api.LossCurveEntry\"B"
  "\n\016LossCurveEntry\022\r\n\005epoch\030\001 \001(\r\022\023\n\013globa"
  "l_step\030\002 \001(\r\022\014\n\004cost\030\003 \001(\002\"]\n\nLabelCount"
  "\022\030\n\014concept_name\030\001 \001(\tB\002\030\001\022\r\n\005count\030\002 \001("
  "\r\022&\n\007concept\030\003 \001(\0132\025.clarifai.api.Concep"
  "t\"L\n\021LabelDistribution\0227\n\025positive_label"
  "_counts\030\001 \003(\0132\030.clarifai.api.LabelCount\""
  "B\n\027CooccurrenceMatrixEntry\022\013\n\003row\030\001 \001(\t\022"
  "\013\n\003col\030\002 \001(\t\022\r\n\005count\030\003 \001(\r\"`\n\022Cooccurre"
  "nceMatrix\0225\n\006matrix\030\001 \003(\0132%.clarifai.api"
  ".CooccurrenceMatrixEntry\022\023\n\013concept_ids\030"
  "\002 \003(\t\"\257\001\n\024ConfusionMatrixEntry\022\021\n\tpredic"
  "ted\030\001 \001(\t\022\016\n\006actual\030\002 \001(\t\022\023\n\005value\030\004 \001(\002"
  "B\004\200\265\030\001\0220\n\021predicted_concept\030\005 \001(\0132\025.clar"
  "ifai.api.Concept\022-\n\016actual_concept\030\006 \001(\013"
  "2\025.clarifai.api.Concept\"Z\n\017ConfusionMatr"
  "ix\0222\n\006matrix\030\001 \003(\0132\".clarifai.api.Confus"
  "ionMatrixEntry\022\023\n\013concept_ids\030\002 \003(\t\"t\n\003R"
  "OC\022\021\n\003fpr\030\001 \003(\002B\004\200\265\030\001\022\021\n\003tpr\030\002 \003(\002B\004\200\265\030\001"
  "\022\030\n\nthresholds\030\003 \003(\002B\004\200\265\030\001\022\025\n\rfpr_per_im"
  "age\030\004 \003(\002\022\026\n\016fpr_per_object\030\005 \003(\002\"_\n\024Pre"
  "cisionRecallCurve\022\024\n\006recall\030\001 \003(\002B\004\200\265\030\001\022"
  "\027\n\tprecision\030\002 \003(\002B\004\200\265\030\001\022\030\n\nthresholds\030\003"
  " \003(\002B\004\200\265\030\001\"\352\002\n\rBinaryMetrics\022\025\n\007num_pos\030"
  "\001 \001(\rB\004\200\265\030\001\022\025\n\007num_neg\030\002 \001(\rB\004\200\265\030\001\022\025\n\007nu"
  "m_tot\030\003 \001(\rB\004\200\265\030\001\022\025\n\007roc_auc\030\004 \001(\002B\004\200\265\030\001"
  "\022\020\n\002f1\030\005 \001(\002B\004\200\265\030\001\022&\n\007concept\030\006 \001(\0132\025.cl"
  "arifai.api.Concept\022$\n\troc_curve\030\007 \001(\0132\021."
  "clarifai.api.ROC\022B\n\026precision_recall_cur"
  "ve\030\010 \001(\0132\".clarifai.api.PrecisionRecallC"
  "urve\022\025\n\ravg_precision\030\t \001(\002\022\021\n\tarea_name"
  "\030\n \001(\t\022\020\n\010area_min\030\013 \001(\001\022\020\n\010area_max\030\014 \001"
  "(\001\022\013\n\003iou\030\r \001(\002\"\221\001\n\016TrackerMetrics\022\020\n\010mo"
  "t_mota\030\001 \001(\002\022\030\n\020mot_num_switches\030\002 \001(\005\022\022"
  "\n\nmorse_frag\030\003 \001(\002\022\025\n\ravg_precision\030\004 \001("
  "\002\022\014\n\004aiid\030\005 \001(\t\022\032\n\022unique_switch_rate\030\006 "
  "\001(\002\"\331\001\n\020EvalTestSetEntry\022\"\n\005input\030\006 \001(\0132"
  "\023.clarifai.api.Input\0221\n\022predicted_concep"
  "ts\030\003 \003(\0132\025.clarifai.api.Concept\0224\n\025groun"
  "d_truth_concepts\030\004 \003(\0132\025.clarifai.api.Co"
  "ncept\022,\n\nannotation\030\005 \001(\0132\030.clarifai.api"
  ".AnnotationJ\004\010\001\020\002J\004\010\002\020\003\"\315\001\n\016LOPQEvalResu"
  "lt\022\t\n\001k\030\001 \001(\005\022#\n\025recall_vs_brute_force\030\002"
  " \001(\002B\004\200\265\030\001\022(\n\032kendall_tau_vs_brute_force"
  "\030\003 \001(\002B\004\200\265\030\001\022(\n\032most_frequent_code_perce"
  "nt\030\004 \001(\002B\004\200\265\030\001\022\027\n\tlopq_ndcg\030\005 \001(\002B\004\200\265\030\001\022"
  "\036\n\020brute_force_ndcg\030\006 \001(\002B\004\200\265\030\001\"\214\003\n\016Metr"
  "icsSummary\022\031\n\rtop1_accuracy\030\001 \001(\002B\002\030\001\022\031\n"
  "\rtop5_accuracy\030\002 \001(\002B\002\030\001\022\037\n\021macro_avg_ro"
  "c_auc\030\003 \001(\002B\004\200\265\030\001\022\037\n\021macro_std_roc_auc\030\004"
  " \001(\002B\004\200\265\030\001\022 \n\022macro_avg_f1_score\030\005 \001(\002B\004"
  "\200\265\030\001\022 \n\022macro_std_f1_score\030\006 \001(\002B\004\200\265\030\001\022!"
  "\n\023macro_avg_precision\030\007 \001(\002B\004\200\265\030\001\022\036\n\020mac"
  "ro_avg_recall\030\010 \001(\002B\004\200\265\030\001\022!\n\031mean_avg_pr"
  "ecision_iou_50\030\n \001(\002\022$\n\034mean_avg_precisi"
  "on_iou_range\030\013 \001(\002\0222\n\014lopq_metrics\030\t \003(\013"
  "2\034.clarifai.api.LOPQEvalResult\"\324\005\n\013EvalM"
  "etrics\022+\n\006status\030\001 \001(\0132\033.clarifai.api.st"
  "atus.Status\022\017\n\007user_id\030\017 \001(\t\022\016\n\006app_id\030\020"
  " \001(\t\022\n\n\002id\030\n \001(\t\022\"\n\005model\030\r \001(\0132\023.clarif"
  "ai.api.Model\0223\n\024ground_truth_dataset\030\016 \001"
  "(\0132\025.clarifai.api.Dataset\022-\n\007summary\030\002 \001"
  "(\0132\034.clarifai.api.MetricsSummary\0227\n\020conf"
  "usion_matrix\030\003 \001(\0132\035.clarifai.api.Confus"
  "ionMatrix\022=\n\023cooccurrence_matrix\030\004 \001(\0132 "
  ".clarifai.api.CooccurrenceMatrix\0225\n\014labe"
  "l_counts\030\005 \001(\0132\037.clarifai.api.LabelDistr"
  "ibution\0223\n\016binary_metrics\030\006 \003(\0132\033.clarif"
  "ai.api.BinaryMetrics\0220\n\010test_set\030\007 \003(\0132\036"
  ".clarifai.api.EvalTestSetEntry\0224\n\017metric"
  "s_by_area\030\010 \003(\0132\033.clarifai.api.BinaryMet"
  "rics\0225\n\020metrics_by_class\030\t \003(\0132\033.clarifa"
  "i.api.BinaryMetrics\0225\n\017tracker_metrics\030\013"
  " \003(\0132\034.clarifai.api.TrackerMetrics\022)\n\tev"
  "al_info\030\014 \001(\0132\026.clarifai.api.EvalInfo\"\267\001"
  "\n\013FieldsValue\022\030\n\020confusion_matrix\030\001 \001(\010\022"
  "\033\n\023cooccurrence_matrix\030\002 \001(\010\022\024\n\014label_co"
  "unts\030\003 \001(\010\022\026\n\016binary_metrics\030\004 \001(\010\022\020\n\010te"
  "st_set\030\005 \001(\010\022\027\n\017metrics_by_area\030\006 \001(\010\022\030\n"
  "\020metrics_by_class\030\007 \001(\010\"\333\001\n\006Output\022\n\n\002id"
  "\030\001 \001(\t\022+\n\006status\030\002 \001(\0132\033.clarifai.api.st"
  "atus.Status\022.\n\ncreated_at\030\003 \001(\0132\032.google"
  ".protobuf.Timestamp\022\"\n\005model\030\004 \001(\0132\023.cla"
  "rifai.api.Model\022\"\n\005input\030\005 \001(\0132\023.clarifa"
  "i.api.Input\022 \n\004data\030\006 \001(\0132\022.clarifai.api"
  ".Data\"4\n\tScopeDeps\022\r\n\005scope\030\001 \001(\t\022\030\n\020dep"
  "ending_scopes\030\002 \003(\t\":\n\014EndpointDeps\022\020\n\010e"
  "ndpoint\030\001 \001(\t\022\030\n\020depending_scopes\030\002 \003(\t\""
  "\215\001\n\003Hit\022\023\n\005score\030\001 \001(\002B\004\200\265\030\001\022\"\n\005input\030\002 "
  "\001(\0132\023.clarifai.api.Input\022,\n\nannotation\030\003"
  " \001(\0132\030.clarifai.api.Annotation\022\017\n\007user_i"
  "d\030\004 \001(\t\022\016\n\006app_id\030\005 \001(\t\"#\n\010HitCount\022\027\n\017e"
  "stimated_total\030\001 \001(\004\"\215\001\n\003And\022\"\n\005input\030\001 "
  "\001(\0132\023.clarifai.api.Input\022$\n\006output\030\002 \001(\013"
  "2\024.clarifai.api.Output\022\016\n\006negate\030\003 \001(\010\022,"
  "\n\nannotation\030\004 \001(\0132\030.clarifai.api.Annota"
  "tion\"\210\001\n\005Query\022#\n\004ands\030\001 \003(\0132\021.clarifai."
  "api.AndB\002\030\001\022\020\n\010language\030\002 \001(\t\022%\n\007filters"
  "\030\003 \003(\0132\024.clarifai.api.Filter\022!\n\005ranks\030\004 "
  "\003(\0132\022.clarifai.api.Rank\"\326\003\n\006Search\022\"\n\005qu"
  "ery\030\001 \001(\0132\023.clarifai.api.Query\022\n\n\002id\030\002 \001"
  "(\t\022\026\n\016application_id\030\003 \001(\t\022\014\n\004name\030\004 \001(\t"
  "\022)\n\005as_of\030\005 \001(\0132\032.google.protobuf.Timest"
  "amp\022\020\n\010git_hash\030\006 \001(\t\022.\n\ncreated_at\030\007 \001("
  "\0132\032.google.protobuf.Timestamp\022/\n\013modifie"
  "d_at\030\010 \001(\0132\032.google.protobuf.Timestamp\022\021"
  "\n\talgorithm\030\t \001(\t\022\014\n\004save\030\n \001(\010\022\021\n\tmin_v"
  "alue\030\013 \001(\002\022,\n\nvisibility\030\014 \001(\0132\030.clarifa"
  "i.api.Visibility\022+\n\006metric\030\r \001(\0162\033.clari"
  "fai.api.Search.Metric\"I\n\006Metric\022\022\n\016METRI"
  "C_NOT_SET\020\000\022\026\n\022EUCLIDEAN_DISTANCE\020\001\022\023\n\017C"
  "OSINE_DISTANCE\020\002\"\244\001\n\006Filter\022\016\n\006negate\030\003 "
  "\001(\010\022,\n\nannotation\030\004 \001(\0132\030.clarifai.api.A"
  "nnotation\022\"\n\005input\030\005 \001(\0132\023.clarifai.api."
  "Input\0228\n\027last_updated_time_range\030\006 \001(\0132\027"
  ".clarifai.api.TimeRange\"i\n\tTimeRange\022.\n\n"
  "start_time\030\001 \001(\0132\032.google.protobuf.Times"
  "tamp\022,\n\010end_time\030\002 \001(\0132\032.google.protobuf"
  ".Timestamp\"D\n\004Rank\022\016\n\006negate\030\003 \001(\010\022,\n\nan"
  "notation\030\004 \001(\0132\030.clarifai.api.Annotation"
  "\"\215\002\n\027AnnotationSearchMetrics\022*\n\014ground_t"
  "ruth\030\001 \001(\0132\024.clarifai.api.Search\022,\n\016sear"
  "ch_to_eval\030\002 \001(\0132\024.clarifai.api.Search\022*"
  "\n\007metrics\030\003 \001(\0132\031.clarifai.api.EvalMetri"
  "cs\022 \n\004data\030\004 \001(\0132\022.clarifai.api.Data\022\034\n\024"
  "active_concept_count\030\005 \001(\r\022,\n\nvisibility"
  "\030\006 \001(\0132\030.clarifai.api.Visibility\"\221\001\n\004Tex"
  "t\022\013\n\003raw\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\022\033\n\023allow_dup"
  "licate_url\030\003 \001(\010\022\'\n\006hosted\030\004 \001(\0132\027.clari"
  "fai.api.HostedURL\022)\n\ttext_info\030\005 \001(\0132\026.c"
  "larifai.api.TextInfo\"0\n\010TextInfo\022\022\n\nchar"
  "_count\030\001 \001(\005\022\020\n\010encoding\030\002 \001(\t\"\374\005\n\004User\022"
  "\n\n\002id\030\001 \001(\t\022\031\n\rprimary_email\030\002 \001(\tB\002\030\001\022\022"
  "\n\nfirst_name\030\003 \001(\t\022\021\n\tlast_name\030\004 \001(\t\022\024\n"
  "\014company_name\030\005 \001(\t\022\021\n\tjob_title\030\023 \001(\t\022\020"
  "\n\010job_role\030\024 \001(\t\022\025\n\tbill_type\030\007 \001(\tB\002\030\001\022"
  ".\n\ncreated_at\030\006 \001(\0132\032.google.protobuf.Ti"
  "mestamp\0229\n\021date_gdpr_consent\030\010 \001(\0132\032.goo"
  "gle.protobuf.TimestampB\002\030\001\0228\n\020date_tos_c"
  "onsent\030\t \001(\0132\032.google.protobuf.Timestamp"
  "B\002\030\001\022>\n\026date_marketing_consent\030\n \001(\0132\032.g"
  "oogle.protobuf.TimestampB\002\030\001\0228\n\020date_pii"
  "_consent\030\027 \001(\0132\032.google.protobuf.Timesta"
  "mpB\002\030\001\022-\n\010metadata\030\013 \001(\0132\027.google.protob"
  "uf.StructB\002\030\001\0227\n\017email_addresses\030\014 \003(\0132\032"
  ".clarifai.api.EmailAddressB\002\030\001\022#\n\027two_fa"
  "ctor_auth_enabled\030\017 \001(\010B\002\030\001\022\027\n\013teams_cou"
  "nt\030\020 \001(\rB\002\030\001\022\022\n\nis_starred\030\025 \001(\010\022\022\n\nstar"
  "_count\030\026 \001(\005\022,\n\nvisibility\030\021 \001(\0132\030.clari"
  "fai.api.Visibility\022-\n\013user_detail\030\022 \001(\0132"
  "\030.clarifai.api.UserDetailJ\004\010\r\020\016J\004\010\016\020\017\"\321\003"
  "\n\nUserDetail\022\025\n\rprimary_email\030\001 \001(\t\022\021\n\tb"
  "ill_type\030\002 \001(\t\0225\n\021date_gdpr_consent\030\003 \001("
  "\0132\032.google.protobuf.Timestamp\0224\n\020date_to"
  "s_consent\030\004 \001(\0132\032.google.protobuf.Timest"
  "amp\022:\n\026date_marketing_consent\030\005 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\0224\n\020date_pii_cons"
  "ent\030\r \001(\0132\032.google.protobuf.Timestamp\022)\n"
  "\010metadata\030\006 \001(\0132\027.google.protobuf.Struct"
  "\0223\n\017email_addresses\030\007 \003(\0132\032.clarifai.api"
  ".EmailAddress\022\037\n\027two_factor_auth_enabled"
  "\030\t \001(\010\022\023\n\013teams_count\030\n \001(\r\022\017\n\007country\030\013"
  " \001(\t\022\r\n\005state\030\014 \001(\tJ\004\010\010\020\t\"R\n\014EmailAddres"
  "s\022\023\n\005email\030\001 \001(\tB\004\200\265\030\001\022\025\n\007primary\030\002 \001(\010B"
  "\004\200\265\030\001\022\026\n\010verified\030\003 \001(\010B\004\200\265\030\001\"\035\n\010Passwor"
  "d\022\021\n\tplaintext\030\001 \001(\t\"\206\003\n\022PasswordViolati"
  "ons\022\026\n\016minimum_length\030\001 \001(\010\022\026\n\016maximum_l"
  "ength\030\002 \001(\010\022\031\n\021upper_case_needed\030\003 \001(\010\022\031"
  "\n\021lower_case_needed\030\004 \001(\010\022\026\n\016numeric_nee"
  "ded\030\005 \001(\010\022\037\n\027non_alphanumeric_needed\030\006 \001"
  "(\010\022\026\n\016password_reuse\030\007 \001(\010\022\025\n\rexclude_na"
  "mes\030\010 \001(\010\022\025\n\rexclude_email\030\t \001(\010\022\034\n\024no_c"
  "onfusing_letters\030\n \001(\010\022\033\n\023no_simple_pass"
  "words\030\013 \001(\010\022\030\n\020no_common_vocabs\030\014 \001(\010\022\033\n"
  "\023no_overlap_with_old\030\r \001(\010\022\031\n\021password_l"
  "ifespan\030\016 \001(\010\"\256\001\n\005Video\022\013\n\003url\030\001 \001(\t\022\016\n\006"
  "base64\030\002 \001(\014\022\033\n\023allow_duplicate_url\030\004 \001("
  "\010\022\025\n\rthumbnail_url\030\005 \001(\t\022\'\n\006hosted\030\006 \001(\013"
  "2\027.clarifai.api.HostedURL\022+\n\nvideo_info\030"
  "\007 \001(\0132\027.clarifai.api.VideoInfo\"\216\001\n\tVideo"
  "Info\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\013\n\003f"
  "ps\030\003 \001(\002\022\024\n\014video_format\030\004 \001(\t\022\020\n\010bit_ra"
  "te\030\005 \001(\005\022\023\n\013frame_count\030\006 \001(\005\022\030\n\020duratio"
  "n_seconds\030\007 \001(\002\"\206\004\n\010Workflow\022\n\n\002id\030\001 \001(\t"
  "\022\016\n\006app_id\030\002 \001(\t\022.\n\ncreated_at\030\003 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\022)\n\005nodes\030\004 \003(\0132"
  "\032.clarifai.api.WorkflowNode\022)\n\010metadata\030"
  "\005 \001(\0132\027.google.protobuf.Struct\022,\n\nvisibi"
  "lity\030\006 \001(\0132\030.clarifai.api.Visibility\022\017\n\007"
  "user_id\030\007 \001(\t\022/\n\013modified_at\030\010 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\022.\n\007version\030\t \001(\0132"
  "\035.clarifai.api.WorkflowVersion\022\022\n\nis_sta"
  "rred\030\n \001(\010\022\022\n\nstar_count\030\013 \001(\005\022\023\n\013descri"
  "ption\030\014 \001(\t\022\r\n\005notes\030\r \001(\t\022\027\n\tuse_cases\030"
  "\016 \003(\tB\004\200\265\030\001\022\034\n\016check_consents\030\017 \003(\tB\004\200\265\030"
  "\001\0225\n\017bookmark_origin\030\020 \001(\0132\034.clarifai.ap"
  "i.BookmarkOrigin\"\336\002\n\017WorkflowVersion\022\n\n\002"
  "id\030\001 \001(\t\022\023\n\013workflow_id\030\002 \001(\t\022.\n\ncreated"
  "_at\030\003 \001(\0132\032.google.protobuf.Timestamp\022/\n"
  "\013modified_at\030\004 \001(\0132\032.google.protobuf.Tim"
  "estamp\022,\n\nvisibility\030\005 \001(\0132\030.clarifai.ap"
  "i.Visibility\022)\n\005nodes\030\006 \003(\0132\032.clarifai.a"
  "pi.WorkflowNode\022)\n\010metadata\030\007 \001(\0132\027.goog"
  "le.protobuf.Struct\022\016\n\006app_id\030\010 \001(\t\022\017\n\007us"
  "er_id\030\t \001(\t\022\023\n\013description\030\n \001(\t\022\017\n\007lice"
  "nse\030\013 \001(\t\"\275\001\n\014WorkflowNode\022\n\n\002id\030\001 \001(\t\022\""
  "\n\005model\030\002 \001(\0132\023.clarifai.api.Model\022,\n\013no"
  "de_inputs\030\003 \003(\0132\027.clarifai.api.NodeInput"
  "\022\027\n\017suppress_output\030\004 \001(\010\0226\n\024output_info"
  "_override\030\005 \001(\0132\030.clarifai.api.OutputInf"
  "o\"\034\n\tNodeInput\022\017\n\007node_id\030\001 \001(\t\"\201\002\n\016Work"
  "flowResult\022\n\n\002id\030\001 \001(\t\022+\n\006status\030\002 \001(\0132\033"
  ".clarifai.api.status.Status\022.\n\ncreated_a"
  "t\030\003 \001(\0132\032.google.protobuf.Timestamp\022\"\n\005m"
  "odel\030\004 \001(\0132\023.clarifai.api.Model\022\"\n\005input"
  "\030\005 \001(\0132\023.clarifai.api.Input\022%\n\007outputs\030\006"
  " \003(\0132\024.clarifai.api.Output\022\027\n\017suppress_o"
  "utput\030\007 \001(\010\"\033\n\rWorkflowState\022\n\n\002id\030\001 \001(\t"
  "\"\330\002\n\016AppDuplication\022\n\n\002id\030\001 \001(\t\022\022\n\nnew_a"
  "pp_id\030\002 \001(\t\022\024\n\014new_app_name\030\003 \001(\t\022+\n\006sta"
  "tus\030\004 \001(\0132\033.clarifai.api.status.Status\022."
  "\n\ncreated_at\030\005 \001(\0132\032.google.protobuf.Tim"
  "estamp\0224\n\020last_modified_at\030\006 \001(\0132\032.googl"
  "e.protobuf.Timestamp\0223\n\006filter\030\007 \001(\0132#.c"
  "larifai.api.AppDuplicationFilters\022\027\n\017exi"
  "sting_app_id\030\010 \001(\t\022/\n\010progress\030\t \003(\0132\035.c"
  "larifai.api.AppCopyProgress\"/\n\017AppCopyPr"
  "ogress\022\r\n\005field\030\001 \001(\t\022\r\n\005value\030\002 \001(\005\"\212\001\n"
  "\025AppDuplicationFilters\022\023\n\013copy_inputs\030\001 "
  "\001(\010\022\025\n\rcopy_concepts\030\002 \001(\010\022\030\n\020copy_annot"
  "ations\030\003 \001(\010\022\023\n\013copy_models\030\004 \001(\010\022\026\n\016cop"
  "y_workflows\030\005 \001(\010\"\372\002\n\nLabelOrder\022\n\n\002id\030\001"
  " \001(\t\022\014\n\004name\030\002 \001(\t\022+\n\006status\030\003 \001(\0132\033.cla"
  "rifai.api.status.Status\022\024\n\014auto_release\030"
  "\004 \001(\010\022\027\n\017allow_empty_tag\030\005 \001(\010\0228\n\024desire"
  "d_fulfill_time\030\006 \001(\0132\032.google.protobuf.T"
  "imestamp\0229\n\025estimate_fulfill_time\030\007 \001(\0132"
  "\032.google.protobuf.Timestamp\022 \n\004task\030\010 \001("
  "\0132\022.clarifai.api.Task\022.\n\ncreated_at\030\t \001("
  "\0132\032.google.protobuf.Timestamp\022/\n\013modifie"
  "d_at\030\n \001(\0132\032.google.protobuf.Timestamp\"\273"
  "\006\n\004Task\022\n\n\002id\030\001 \001(\t\022.\n\ncreated_at\030\002 \001(\0132"
  "\032.google.protobuf.Timestamp\022/\n\013modified_"
  "at\030\003 \001(\0132\032.google.protobuf.Timestamp\022)\n\004"
  "type\030\004 \001(\0162\033.clarifai.api.Task.TaskType\022"
  "\023\n\013description\030\005 \001(\t\022(\n\006worker\030\006 \001(\0132\030.c"
  "larifai.api.TaskWorker\022\027\n\013concept_ids\030\007 "
  "\003(\tB\002\030\001\0223\n\014input_source\030\010 \001(\0132\035.clarifai"
  ".api.TaskInputSource\022\021\n\tsample_ms\030\t \001(\r\022"
  "3\n\014ai_assistant\030\n \001(\0132\035.clarifai.api.Tas"
  "kAIAssistant\022(\n\006review\030\013 \001(\0132\030.clarifai."
  "api.TaskReview\022+\n\006status\030\014 \001(\0132\033.clarifa"
  "i.api.status.Status\022\014\n\004name\030\r \001(\t\022:\n\020ai_"
  "assist_params\030\016 \001(\0132 .clarifai.api.AiAss"
  "istParameters\022,\n\nvisibility\030\017 \001(\0132\030.clar"
  "ifai.api.Visibility\022\016\n\006app_id\030\020 \001(\t\022\017\n\007u"
  "ser_id\030\021 \001(\t\022\026\n\016label_order_id\030\022 \001(\t\022+\n\010"
  "concepts\030\023 \003(\0132\031.clarifai.api.TaskConcep"
  "t\022#\n\033delete_previous_annotations\030\024 \001(\010\"l"
  "\n\010TaskType\022\020\n\014TYPE_NOT_SET\020\000\022\033\n\027CONCEPTS"
  "_CLASSIFICATION\020\001\022\032\n\026BOUNDING_BOX_DETECT"
  "ION\020\002\022\025\n\021POLYGON_DETECTION\020\003\"`\n\022AiAssist"
  "Parameters\022\025\n\rmin_threshold\030\001 \001(\002\022\025\n\rmax"
  "_threshold\030\002 \001(\002\022\034\n\024concept_relation_ids"
  "\030\003 \003(\t\"\217\003\n\nTaskWorker\022=\n\010strategy\030\001 \001(\0162"
  "+.clarifai.api.TaskWorker.TaskWorkerStra"
  "tegy\022\024\n\010user_ids\030\002 \003(\tB\002\030\001\022!\n\005users\030\004 \003("
  "\0132\022.clarifai.api.User\022#\n\006models\030\005 \003(\0132\023."
  "clarifai.api.Model\022)\n\tworkflows\030\006 \003(\0132\026."
  "clarifai.api.Workflow\022T\n\031partitioned_str"
  "ategy_info\030\003 \001(\0132/.clarifai.api.TaskWork"
  "erPartitionedStrategyInfoH\000\"R\n\022TaskWorke"
  "rStrategy\022\033\n\027WORKER_STRATEGY_NOT_SET\020\000\022\017"
  "\n\013PARTITIONED\020\002\022\010\n\004FULL\020\003\"\004\010\001\020\001B\017\n\rstrat"
  "egy_info\"\251\002\n!TaskWorkerPartitionedStrate"
  "gyInfo\022[\n\004type\030\001 \001(\0162M.clarifai.api.Task"
  "WorkerPartitionedStrategyInfo.TaskWorker"
  "PartitionedStrategy\022\031\n\021workers_per_input"
  "\030\002 \001(\005\022(\n\007weights\030\003 \001(\0132\027.google.protobu"
  "f.Struct\"b\n\035TaskWorkerPartitionedStrateg"
  "y\022\'\n#PARTITIONED_WORKER_STRATEGY_NOT_SET"
  "\020\000\022\n\n\006EVENLY\020\001\022\014\n\010WEIGHTED\020\002\"\303\001\n\017TaskInp"
  "utSource\022\?\n\004type\030\001 \001(\01621.clarifai.api.Ta"
  "skInputSource.TaskInputSourceType\022\n\n\002id\030"
  "\002 \001(\t\"c\n\023TaskInputSourceType\022\035\n\031INPUT_SO"
  "URCE_TYPE_NOT_SET\020\000\022\016\n\nALL_INPUTS\020\001\022\020\n\014S"
  "AVED_SEARCH\020\002\022\013\n\007DATASET\020\003\"\220\003\n\nTaskRevie"
  "w\022=\n\010strategy\030\001 \001(\0162+.clarifai.api.TaskR"
  "eview.TaskReviewStrategy\022\024\n\010user_ids\030\002 \003"
  "(\tB\002\030\001\022!\n\005users\030\005 \003(\0132\022.clarifai.api.Use"
  "r\022J\n\024manual_strategy_info\030\003 \001(\0132*.clarif"
  "ai.api.TaskReviewManualStrategyInfoH\000\022P\n"
  "\027consensus_strategy_info\030\004 \001(\0132-.clarifa"
  "i.api.TaskReviewConsensusStrategyInfoH\000\""
  "[\n\022TaskReviewStrategy\022 \n\034TASK_REVIEW_STR"
  "ATEGY_NOT_SET\020\000\022\010\n\004NONE\020\001\022\n\n\006MANUAL\020\002\022\r\n"
  "\tCONSENSUS\020\003B\017\n\rstrategy_info\"9\n\034TaskRev"
  "iewManualStrategyInfo\022\031\n\021sample_percenta"
  "ge\030\001 \001(\002\"C\n\037TaskReviewConsensusStrategyI"
  "nfo\022\032\n\022approval_threshold\030\002 \001(\rJ\004\010\001\020\002\"&\n"
  "\017TaskAIAssistant\022\023\n\013workflow_id\030\001 \001(\t\"\274\001"
  "\n\026TaskStatusCountPerUser\022\017\n\007user_id\030\001 \001("
  "\t\022\025\n\007pending\030\002 \001(\rB\004\200\265\030\001\022\035\n\017awaiting_rev"
  "iew\030\003 \001(\rB\004\200\265\030\001\022\025\n\007success\030\004 \001(\rB\004\200\265\030\001\022\033"
  "\n\rreview_denied\030\005 \001(\rB\004\200\265\030\001\022\'\n\031awaiting_"
  "consensus_review\030\006 \001(\rB\004\200\265\030\001\"f\n\016Threshol"
  "dRange\022\032\n\022is_lower_inclusive\030\001 \001(\010\022\032\n\022is"
  "_upper_inclusive\030\002 \001(\010\022\r\n\005lower\030\003 \001(\002\022\r\n"
  "\005upper\030\004 \001(\002\"\255\001\n\037TaskConceptAutoAnnotati"
  "onConfig\022\035\n\025annotation_data_types\030\001 \001(\r\022"
  "5\n\017threshold_range\030\002 \001(\0132\034.clarifai.api."
  "ThresholdRange\0224\n\013status_code\030\003 \001(\0162\037.cl"
  "arifai.api.status.StatusCode\"\204\001\n\013TaskCon"
  "cept\022&\n\007concept\030\001 \001(\0132\025.clarifai.api.Con"
  "cept\022M\n\026auto_annotation_config\030\002 \001(\0132-.c"
  "larifai.api.TaskConceptAutoAnnotationCon"
  "fig\"\201\002\n\tCollector\022\n\n\002id\030\001 \001(\t\022\023\n\013descrip"
  "tion\030\002 \001(\t\022.\n\ncreated_at\030\003 \001(\0132\032.google."
  "protobuf.Timestamp\022\035\n\025pre_queue_workflow"
  "_id\030\004 \001(\t\022\036\n\026post_queue_workflow_id\030\005 \001("
  "\t\0227\n\020collector_source\030\006 \001(\0132\035.clarifai.a"
  "pi.CollectorSource\022+\n\006status\030\007 \001(\0132\033.cla"
  "rifai.api.status.Status\"t\n\017CollectorSour"
  "ce\022a\n\'api_post_model_outputs_collector_s"
  "ource\030\002 \001(\01320.clarifai.api.APIPostModelO"
  "utputsCollectorSource\"\231\001\n\"APIPostModelOu"
  "tputsCollectorSource\022\025\n\rmodel_user_id\030\001 "
  "\001(\t\022\024\n\014model_app_id\030\002 \001(\t\022\020\n\010model_id\030\003 "
  "\001(\t\022\030\n\020model_version_id\030\004 \001(\t\022\032\n\022post_in"
  "puts_key_id\030\005 \001(\t\"R\n\tStatValue\022(\n\004time\030\001"
  " \001(\0132\032.google.protobuf.Timestamp\022\r\n\005valu"
  "e\030\002 \001(\002\022\014\n\004tags\030\003 \003(\t\"\246\001\n\030StatValueAggre"
  "gateResult\022\?\n\025stat_value_aggregates\030\001 \003("
  "\0132 .clarifai.api.StatValueAggregate\022I\n\032s"
  "tat_value_aggregate_query\030\002 \001(\0132%.clarif"
  "ai.api.StatValueAggregateQuery\"t\n\022StatVa"
  "lueAggregate\022(\n\004time\030\001 \001(\0132\032.google.prot"
  "obuf.Timestamp\022\027\n\017aggregate_value\030\002 \001(\002\022"
  "\r\n\005count\030\003 \001(\004\022\014\n\004tags\030\004 \003(\t\"\221\002\n\027StatVal"
  "ueAggregateQuery\022\014\n\004tags\030\001 \003(\t\022\022\n\ntag_gr"
  "oups\030\002 \003(\t\022;\n\023stat_value_agg_type\030\003 \001(\0162"
  "\036.clarifai.api.StatValueAggType\0229\n\022stat_"
  "time_agg_type\030\004 \001(\0162\035.clarifai.api.StatT"
  "imeAggType\022.\n\nstart_time\030\005 \001(\0132\032.google."
  "protobuf.Timestamp\022,\n\010end_time\030\006 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\"\357\001\n\031DatasetInpu"
  "tsSearchAddJob\022\n\n\002id\030\001 \001(\t\022.\n\ncreated_at"
  "\030\002 \001(\0132\032.google.protobuf.Timestamp\022/\n\013mo"
  "dified_at\030\003 \001(\0132\032.google.protobuf.Timest"
  "amp\022+\n\006status\030\004 \001(\0132\033.clarifai.api.statu"
  "s.Status\022\022\n\ndataset_id\030\005 \001(\t\022$\n\006search\030\006"
  " \001(\0132\024.clarifai.api.Search\"O\n\027PCAProject"
  "ionComparator\022\032\n\022distance_threshold\030\001 \001("
  "\002\022\030\n\020model_version_id\030\002 \001(\t\"K\n\033Duplicate"
  "AnnotationsResults\022\026\n\016duplicate_cfid\030\001 \003"
  "(\t\022\024\n\014unique_count\030\002 \001(\005\"\207\001\n\nVisibility\022"
  "3\n\010gettable\030\001 \001(\0162!.clarifai.api.Visibil"
  "ity.Gettable\"D\n\010Gettable\022\026\n\022UNKNOWN_VISI"
  "BILITY\020\000\022\013\n\007PRIVATE\020\n\022\007\n\003ORG\020\036\022\n\n\006PUBLIC"
  "\0202\"X\n\016TrendingMetric\022\017\n\007user_id\030\001 \001(\t\022\016\n"
  "\006app_id\030\002 \001(\t\022\021\n\tobject_id\030\003 \001(\t\022\022\n\nview"
  "_count\030\004 \001(\004\"#\n\007FullTag\022\014\n\004name\030\001 \001(\t\022\n\n"
  "\002id\030\002 \001(\t\"f\n\013TimeSegment\022\n\n\002id\030\001 \001(\t\022 \n\004"
  "data\030\002 \001(\0132\022.clarifai.api.Data\022)\n\ttime_i"
  "nfo\030\003 \001(\0132\026.clarifai.api.TimeInfo\"D\n\010Tim"
  "eInfo\022\022\n\nnum_frames\030\001 \001(\r\022\022\n\nbegin_time\030"
  "\002 \001(\r\022\020\n\010end_time\030\003 \001(\r\"!\n\013DatasetStar\022\022"
  "\n\ndataset_id\030\001 \001(\t\"\037\n\nModuleStar\022\021\n\tmodu"
  "le_id\030\001 \001(\t\"\236\003\n\006Module\022\n\n\002id\030\001 \001(\t\022\023\n\013de"
  "scription\030\003 \001(\t\022.\n\ncreated_at\030\004 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022/\n\013modified_at\030\005"
  " \001(\0132\032.google.protobuf.Timestamp\022,\n\nvisi"
  "bility\030\007 \001(\0132\030.clarifai.api.Visibility\022)"
  "\n\010metadata\030\010 \001(\0132\027.google.protobuf.Struc"
  "t\022\017\n\007user_id\030\t \001(\t\022\016\n\006app_id\030\n \001(\t\0223\n\016mo"
  "dule_version\030\013 \001(\0132\033.clarifai.api.Module"
  "Version\022\022\n\nis_starred\030\014 \001(\010\022\022\n\nstar_coun"
  "t\030\r \001(\005\0225\n\017bookmark_origin\030\016 \001(\0132\034.clari"
  "fai.api.BookmarkOriginJ\004\010\002\020\003\"\276\004\n\rModuleV"
  "ersion\022\n\n\002id\030\001 \001(\t\022\021\n\tmodule_id\030\002 \001(\t\022\016\n"
  "\006app_id\030\003 \001(\t\022\017\n\007user_id\030\004 \001(\t\022\023\n\013descri"
  "ption\030\006 \001(\t\022\r\n\005notes\030\007 \001(\t\022.\n\ncreated_at"
  "\030\010 \001(\0132\032.google.protobuf.Timestamp\022/\n\013mo"
  "dified_at\030\t \001(\0132\032.google.protobuf.Timest"
  "amp\022\026\n\016git_commit_url\030\n \001(\t\0229\n\nmodule_na"
  "v\030\013 \001(\0132%.clarifai.api.ModuleVersion.Mod"
  "uleNav\022\020\n\010approved\030\014 \001(\010\022,\n\nvisibility\030\r"
  " \001(\0132\030.clarifai.api.Visibility\022)\n\010metada"
  "ta\030\016 \001(\0132\027.google.protobuf.Struct\032E\n\014Mod"
  "uleSubNav\022\r\n\005title\030\001 \001(\t\022\021\n\tquery_key\030\002 "
  "\001(\t\022\023\n\013query_value\030\003 \001(\t\032]\n\tModuleNav\022\r\n"
  "\005title\030\001 \001(\t\022A\n\017module_sub_navs\030\002 \003(\0132(."
  "clarifai.api.ModuleVersion.ModuleSubNavJ"
  "\004\010\005\020\006\"\255\002\n\026InstalledModuleVersion\022\n\n\002id\030\001"
  " \001(\t\0223\n\016module_version\030\002 \001(\0132\033.clarifai."
  "api.ModuleVersion\022\016\n\006app_id\030\003 \001(\t\022\017\n\007use"
  "r_id\030\004 \001(\t\022.\n\ncreated_at\030\005 \001(\0132\032.google."
  "protobuf.Timestamp\022/\n\013modified_at\030\006 \001(\0132"
  "\032.google.protobuf.Timestamp\022\022\n\ndeploy_ur"
  "l\030\007 \001(\t\022,\n\nvisibility\030\010 \001(\0132\030.clarifai.a"
  "pi.Visibility\022\016\n\006key_id\030\t \001(\t\"\267\003\n\rBulkOp"
  "eration\022\n\n\002id\030\001 \001(\t\022+\n\tinput_ids\030\002 \001(\0132\026"
  ".clarifai.api.InputIDsH\000\022&\n\006search\030\n \001(\013"
  "2\024.clarifai.api.SearchH\000\022(\n\007dataset\030\013 \001("
  "\0132\025.clarifai.api.DatasetH\000\022*\n\toperation\030"
  "\003 \001(\0132\027.clarifai.api.Operation\022\016\n\006app_id"
  "\030\004 \001(\t\022+\n\006status\030\005 \001(\0132\033.clarifai.api.st"
  "atus.Status\022(\n\010progress\030\006 \001(\0132\026.clarifai"
  ".api.Progress\022\022\n\ncreated_by\030\007 \001(\t\022.\n\ncre"
  "ated_at\030\010 \001(\0132\032.google.protobuf.Timestam"
  "p\0224\n\020last_modified_at\030\t \001(\0132\032.google.pro"
  "tobuf.TimestampB\016\n\014input_source\"\035\n\010Input"
  "IDs\022\021\n\tinput_ids\030\001 \003(\t\"8\n\010Progress\022\021\n\tpr"
  "ocessed\030\001 \001(\r\022\031\n\021last_processed_id\030\002 \001(\t"
  "\"\212\004\n\tOperation\0221\n\014add_concepts\030\001 \001(\0132\031.c"
  "larifai.api.AddConceptsH\000\0227\n\017delete_conc"
  "epts\030\002 \001(\0132\034.clarifai.api.DeleteConcepts"
  "H\000\0221\n\014add_metadata\030\003 \001(\0132\031.clarifai.api."
  "AddMetadataH\000\0227\n\017delete_metadata\030\004 \001(\0132\034"
  ".clarifai.api.DeleteMetadataH\000\0223\n\roverwr"
  "ite_geo\030\005 \001(\0132\032.clarifai.api.OverwriteGe"
  "oH\000\022-\n\ndelete_geo\030\006 \001(\0132\027.clarifai.api.D"
  "eleteGeoH\000\022>\n\023delete_from_dataset\030\007 \001(\0132"
  "\037.clarifai.api.DeleteFromDatasetH\000\0224\n\016ad"
  "d_to_dataset\030\010 \001(\0132\032.clarifai.api.AddToD"
  "atasetH\000\022>\n\023split_into_datasets\030\t \001(\0132\037."
  "clarifai.api.SplitIntoDatasetsH\000B\013\n\toper"
  "ation\"6\n\013AddConcepts\022\'\n\010concepts\030\001 \003(\0132\025"
  ".clarifai.api.Concept\"K\n\016DeleteConcepts\022"
  "\'\n\010concepts\030\001 \003(\0132\025.clarifai.api.Concept"
  "\022\020\n\010user_ids\030\002 \003(\t\"8\n\013AddMetadata\022)\n\010met"
  "adata\030\001 \001(\0132\027.google.protobuf.Struct\";\n\016"
  "DeleteMetadata\022)\n\010metadata\030\001 \001(\0132\027.googl"
  "e.protobuf.Struct\".\n\014OverwriteGeo\022\036\n\003geo"
  "\030\001 \001(\0132\021.clarifai.api.Geo\"\013\n\tDeleteGeo\"\""
  "\n\014AddToDataset\022\022\n\ndataset_id\030\001 \001(\t\"\'\n\021De"
  "leteFromDataset\022\022\n\ndataset_id\030\001 \001(\t\"\313\001\n\021"
  "SplitIntoDatasets\0222\n\016dataset_splits\030\001 \003("
  "\0132\032.clarifai.api.DatasetSplit\022B\n\006method\030"
  "\002 \001(\01622.clarifai.api.SplitIntoDatasets.D"
  "atasetSplitMethod\">\n\022DatasetSplitMethod\022"
  "\013\n\007NOT_SET\020\000\022\033\n\027RANDOM_PERCENTAGE_SPLIT\020"
  "\001\"[\n\014DatasetSplit\022&\n\007dataset\030\001 \001(\0132\025.cla"
  "rifai.api.Dataset\022\024\n\npercentage\030\002 \001(\rH\000B"
  "\r\n\013method_info\"\373\002\n\014InputsAddJob\022\n\n\002id\030\001 "
  "\001(\t\022\025\n\rcall_back_url\030\003 \001(\t\022\017\n\007app_pat\030\004 "
  "\001(\t\0224\n\010progress\030\007 \001(\0132\".clarifai.api.Inp"
  "utsAddJobProgress\022.\n\ncreated_at\030\010 \001(\0132\032."
  "google.protobuf.Timestamp\022/\n\013modified_at"
  "\030\t \001(\0132\032.google.protobuf.Timestamp\022:\n\017ex"
  "traction_jobs\030\n \003(\0132!.clarifai.api.Input"
  "sExtractionJob\022%\n\007uploads\030\013 \003(\0132\024.clarif"
  "ai.api.Upload\022+\n\006status\030\014 \001(\0132\033.clarifai"
  ".api.status.StatusJ\004\010\002\020\003J\004\010\005\020\006J\004\010\006\020\007\"u\n\024"
  "InputsAddJobProgress\022\025\n\rpending_count\030\001 "
  "\001(\004\022\031\n\021in_progress_count\030\002 \001(\004\022\025\n\rsucces"
  "s_count\030\003 \001(\004\022\024\n\014failed_count\030\004 \001(\004\"\225\002\n\006"
  "Upload\022\n\n\002id\030\001 \001(\t\022.\n\ncreated_at\030\002 \001(\0132\032"
  ".google.protobuf.Timestamp\022/\n\013modified_a"
  "t\030\003 \001(\0132\032.google.protobuf.Timestamp\022.\n\ne"
  "xpires_at\030\004 \001(\0132\032.google.protobuf.Timest"
  "amp\022+\n\006status\030\005 \001(\0132\033.clarifai.api.statu"
  "s.Status\022\024\n\014content_name\030\010 \001(\t\022\026\n\016conten"
  "t_length\030\006 \001(\004\022\023\n\013content_url\030\007 \001(\t\"K\n\021U"
  "ploadContentPart\022\023\n\013range_start\030\001 \001(\004\022\023\n"
  "\013part_number\030\002 \001(\003\022\014\n\004data\030\003 \001(\014\"l\n\031Cust"
  "omCodeOperatorRequest\022#\n\006inputs\030\001 \003(\0132\023."
  "clarifai.api.Input\022*\n\010metadata\030\352\007 \001(\0132\027."
  "google.protobuf.Struct\"\310\002\n\023InputsExtract"
  "ionJob\022+\n\006status\030\001 \001(\0132\033.clarifai.api.st"
  "atus.Status\022\n\n\002id\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022;\n\010"
  "progress\030\004 \001(\0132).clarifai.api.InputsExtr"
  "actionJobProgress\022.\n\ncreated_at\030\005 \001(\0132\032."
  "google.protobuf.Timestamp\022/\n\013modified_at"
  "\030\006 \001(\0132\032.google.protobuf.Timestamp\022M\n\034in"
  "put_id_conflict_resolution\030\007 \001(\0162\'.clari"
  "fai.api.InputIDConflictResolution\"\227\002\n\033In"
  "putsExtractionJobProgress\022\032\n\022audio_input"
  "s_count\030\002 \001(\004\022\032\n\022image_inputs_count\030\003 \001("
  "\004\022\032\n\022video_inputs_count\030\004 \001(\004\022\031\n\021text_in"
  "puts_count\030\005 \001(\004\022\036\n\026pending_archives_cou"
  "nt\030\006 \001(\004\022\"\n\032in_progress_archives_count\030\007"
  " \001(\004\022 \n\030completed_archives_count\030\010 \001(\004\022\035"
  "\n\025failed_archives_count\030\t \001(\004J\004\010\001\020\002\"\246\001\n\020"
  "InputsDataSource\022\031\n\021inputs_add_job_id\030\001 "
  "\001(\t\022(\n\003url\030\002 \001(\0132\033.clarifai.api.DataSour"
  "ceURL\022M\n\034input_id_conflict_resolution\030\003 "
  "\001(\0162\'.clarifai.api.InputIDConflictResolu"
  "tion\"V\n\rDataSourceURL\022\013\n\003url\030\001 \001(\t\0228\n\013cr"
  "edentials\030\002 \001(\0132#.clarifai.api.DataSourc"
  "eCredentials\"\247\001\n\025DataSourceCredentials\022*"
  "\n\010s3_creds\030\001 \001(\0132\026.clarifai.api.AWSCreds"
  "H\000\022\023\n\tgcp_creds\030\002 \001(\014H\000\0228\n\020azure_blob_cr"
  "eds\030\004 \001(\0132\034.clarifai.api.AzureBlobCredsH"
  "\000B\r\n\013credentialsJ\004\010\003\020\004\"K\n\010AWSCreds\022\016\n\006re"
  "gion\030\002 \001(\t\022\n\n\002id\030\003 \001(\t\022\016\n\006secret\030\004 \001(\t\022\r"
  "\n\005token\030\005 \001(\tJ\004\010\001\020\002\";\n\016AzureBlobCreds\022\024\n"
  "\014account_name\030\001 \001(\t\022\023\n\013account_key\030\002 \001(\t"
  "\"\257\001\n\014InputsUpload\022\031\n\021inputs_add_job_id\030\001"
  " \001(\t\022\017\n\007app_pat\030\002 \001(\t\022$\n\006upload\030\003 \001(\0132\024."
  "clarifai.api.Upload\022M\n\034input_id_conflict"
  "_resolution\030\004 \001(\0162\'.clarifai.api.InputID"
  "ConflictResolution\"\316\001\n\016BookmarkOrigin\022\n\n"
  "\002id\030\001 \001(\t\022\016\n\006app_id\030\002 \001(\t\022\017\n\007user_id\030\003 \001"
  "(\t\022@\n\rresource_type\030\004 \001(\0162).clarifai.api"
  ".BookmarkOrigin.BookmarkType\"M\n\014Bookmark"
  "Type\022\013\n\007unknown\020\000\022\t\n\005model\020\001\022\014\n\010workflow"
  "\020\002\022\013\n\007dataset\020\003\022\n\n\006module\020\004\"\326\001\n\006Runner\022\n"
  "\n\002id\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022.\n\ncreat"
  "ed_at\030\003 \001(\0132\032.google.protobuf.Timestamp\022"
  "/\n\013modified_at\030\004 \001(\0132\032.google.protobuf.T"
  "imestamp\022)\n\010metadata\030\005 \001(\0132\027.google.prot"
  "obuf.Struct\022\017\n\007user_id\030\006 \001(\t\022\016\n\006labels\030\007"
  " \003(\t*\371\001\n\036DatasetVersionMetricsGroupType\022"
  ".\n*DATASET_VERSION_METRICS_GROUP_TYPE_NO"
  "T_SET\020\000\022\016\n\nINPUT_TYPE\020\002\022\016\n\nCONCEPT_ID\020\n\022"
  "\022\n\016CONCEPTS_COUNT\020\013\022\030\n\024BOUNDING_BOXES_CO"
  "UNT\020\024\022\022\n\016POLYGONS_COUNT\020\025\022\020\n\014POINTS_COUN"
  "T\020\026\022\017\n\013MASKS_COUNT\020\027\022\020\n\014PIXELS_COUNT\020\036\022\020"
  "\n\014ASPECT_RATIO\020\037*\205\001\n\032DatasetVersionExpor"
  "tFormat\022)\n%DATASET_VERSION_EXPORT_FORMAT"
  "_NOT_SET\020\000\022\032\n\026CLARIFAI_DATA_PROTOBUF\020\001\022\026"
  "\n\022CLARIFAI_DATA_JSON\020\003\022\010\n\004COCO\020\002*H\n\020Expi"
  "rationAction\022\035\n\031EXPIRATION_ACTION_NOT_SE"
  "T\020\000\022\t\n\005DELAY\020\001\022\n\n\006EXPIRY\020\002*M\n\014LicenseSco"
  "pe\022\031\n\025LICENSE_SCOPE_NOT_SET\020\000\022\013\n\007PREDICT"
  "\020\001\022\t\n\005TRAIN\020\002\022\n\n\006SEARCH\020\003*P\n\010DataType\022\r\n"
  "\tUNDEFINED\020\000\022\n\n\006STRING\020\001\022\t\n\005UINT8\020\002\022\t\n\005I"
  "NT32\020\003\022\t\n\005INT64\020\004\022\010\n\004FP32\020\005*\217\001\n\017ValueCom"
  "parator\022\035\n\031CONCEPT_THRESHOLD_NOT_SET\020\000\022\020"
  "\n\014GREATER_THAN\020\001\022\031\n\025GREATER_THAN_OR_EQUA"
  "L\020\002\022\r\n\tLESS_THAN\020\003\022\026\n\022LESS_THAN_OR_EQUAL"
  "\020\004\022\t\n\005EQUAL\020\005*q\n\016EvaluationType\022\r\n\tUndef"
  "ined\020\000\022\022\n\016Classification\020\001\022\r\n\tDetection\020"
  "\002\022\020\n\014Segmentation\020\003\022\016\n\nClustering\020\004\022\013\n\007T"
  "racker\020\005*f\n\014APIEventType\022\032\n\026API_EVENT_TY"
  "PE_NOT_SET\020\000\022\023\n\017ON_PREM_PREDICT\020\001\022\021\n\rON_"
  "PREM_TRAIN\020\002\022\022\n\016ON_PREM_SEARCH\020\003*<\n\021Usag"
  "eIntervalType\022\t\n\005undef\020\000\022\007\n\003day\020\001\022\t\n\005mon"
  "th\020\002\022\010\n\004year\020\003*}\n\022AnnotationDataType\022 \n\034"
  "ANNOTATION_DATA_TYPE_NOT_SET\020\000\022\007\n\003TAG\020\001\022"
  "\020\n\014BOUNDING_BOX\020\002\022\013\n\007POLYGON\020\004\022\t\n\005POINT\020"
  "\010\022\010\n\004SPAN\020\020\022\010\n\004MASK\020 *\035\n\010RoleType\022\010\n\004TEA"
  "M\020\000\022\007\n\003ORG\020\001*$\n\020StatValueAggType\022\007\n\003SUM\020"
  "\000\022\007\n\003AVG\020\001*`\n\017StatTimeAggType\022\017\n\013NO_TIME"
  "_AGG\020\000\022\010\n\004YEAR\020\001\022\t\n\005MONTH\020\002\022\010\n\004WEEK\020\003\022\007\n"
  "\003DAY\020\004\022\010\n\004HOUR\020\005\022\n\n\006MINUTE\020\006*b\n\023Validati"
  "onErrorType\022!\n\035VALIDATION_ERROR_TYPE_NOT"
  "_SET\020\000\022\016\n\nRESTRICTED\020\001\022\014\n\010DATABASE\020\002\022\n\n\006"
  "FORMAT\020\003*[\n\031InputIDConflictResolution\022(\n"
  "$INPUT_ID_CONFLICT_RESOLUTION_NOT_SET\020\000\022"
  "\010\n\004SKIP\020\001\022\n\n\006SUFFIX\020\002BY\n\025com.clarifai.gr"
  "pc.apiP\001Z7github.com/Clarifai/clarifai-g"
  "o-grpc/proto/clarifai/api\242\002\004CAIPb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_deps[8] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fstatus_2fstatus_5fcode_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2futils_2fextensions_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2futils_2fmatrix_2eproto,
  &::descriptor_table_proto_2fclarifai_2fauth_2futil_2fextension_2eproto,
};
static ::_pbi::once_flag descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto = {
    false, false, 38440, descriptor_table_protodef_proto_2fclarifai_2fapi_2fresources_2eproto,
    "proto/clarifai/api/resources.proto",
    &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once, descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_deps, 8, 194,
    schemas, file_default_instances, TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto::offsets,
    file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto, file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto,
    file_level_service_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter() {
  return &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fclarifai_2fapi_2fresources_2eproto(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
namespace clarifai {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Point_Visibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[0];
}
bool Point_Visibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Point_Visibility Point::NOT_SET;
constexpr Point_Visibility Point::VISIBLE;
constexpr Point_Visibility Point::NOT_VISIBLE;
constexpr Point_Visibility Point::NOT_PRESENT;
constexpr Point_Visibility Point::Visibility_MIN;
constexpr Point_Visibility Point::Visibility_MAX;
constexpr int Point::Visibility_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelTypeField_ModelTypeFieldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[1];
}
bool ModelTypeField_ModelTypeFieldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::INVALID_MODEL_TYPE_FIELD_TYPE;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::BOOLEAN;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::STRING;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::NUMBER;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ARRAY_OF_CONCEPTS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ARRAY_OF_CONCEPTS_WITH_THRESHOLD;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::RANGE;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ENUM;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::COLLABORATORS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::JSON;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ARRAY_OF_NUMBERS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::WORKFLOW_EMBED_MODELS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ARRAY_OF_STRINGS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::RECURSIVE_ENUM;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::PYTHON_CODE;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::DATASET_ID;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::DATASET_VERSION_ID;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ARRAY_OF_MODEL_CONCEPTS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ModelTypeFieldType_MIN;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ModelTypeFieldType_MAX;
constexpr int ModelTypeField::ModelTypeFieldType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Search_Metric_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[2];
}
bool Search_Metric_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Search_Metric Search::METRIC_NOT_SET;
constexpr Search_Metric Search::EUCLIDEAN_DISTANCE;
constexpr Search_Metric Search::COSINE_DISTANCE;
constexpr Search_Metric Search::Metric_MIN;
constexpr Search_Metric Search::Metric_MAX;
constexpr int Search::Metric_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Task_TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[3];
}
bool Task_TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Task_TaskType Task::TYPE_NOT_SET;
constexpr Task_TaskType Task::CONCEPTS_CLASSIFICATION;
constexpr Task_TaskType Task::BOUNDING_BOX_DETECTION;
constexpr Task_TaskType Task::POLYGON_DETECTION;
constexpr Task_TaskType Task::TaskType_MIN;
constexpr Task_TaskType Task::TaskType_MAX;
constexpr int Task::TaskType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskWorker_TaskWorkerStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[4];
}
bool TaskWorker_TaskWorkerStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TaskWorker_TaskWorkerStrategy TaskWorker::WORKER_STRATEGY_NOT_SET;
constexpr TaskWorker_TaskWorkerStrategy TaskWorker::PARTITIONED;
constexpr TaskWorker_TaskWorkerStrategy TaskWorker::FULL;
constexpr TaskWorker_TaskWorkerStrategy TaskWorker::TaskWorkerStrategy_MIN;
constexpr TaskWorker_TaskWorkerStrategy TaskWorker::TaskWorkerStrategy_MAX;
constexpr int TaskWorker::TaskWorkerStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[5];
}
bool TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::PARTITIONED_WORKER_STRATEGY_NOT_SET;
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::EVENLY;
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::WEIGHTED;
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategy_MIN;
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategy_MAX;
constexpr int TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskInputSource_TaskInputSourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[6];
}
bool TaskInputSource_TaskInputSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::INPUT_SOURCE_TYPE_NOT_SET;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::ALL_INPUTS;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::SAVED_SEARCH;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::DATASET;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::TaskInputSourceType_MIN;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::TaskInputSourceType_MAX;
constexpr int TaskInputSource::TaskInputSourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskReview_TaskReviewStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[7];
}
bool TaskReview_TaskReviewStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TaskReview_TaskReviewStrategy TaskReview::TASK_REVIEW_STRATEGY_NOT_SET;
constexpr TaskReview_TaskReviewStrategy TaskReview::NONE;
constexpr TaskReview_TaskReviewStrategy TaskReview::MANUAL;
constexpr TaskReview_TaskReviewStrategy TaskReview::CONSENSUS;
constexpr TaskReview_TaskReviewStrategy TaskReview::TaskReviewStrategy_MIN;
constexpr TaskReview_TaskReviewStrategy TaskReview::TaskReviewStrategy_MAX;
constexpr int TaskReview::TaskReviewStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Visibility_Gettable_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[8];
}
bool Visibility_Gettable_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 30:
    case 50:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Visibility_Gettable Visibility::UNKNOWN_VISIBILITY;
constexpr Visibility_Gettable Visibility::PRIVATE;
constexpr Visibility_Gettable Visibility::ORG;
constexpr Visibility_Gettable Visibility::PUBLIC;
constexpr Visibility_Gettable Visibility::Gettable_MIN;
constexpr Visibility_Gettable Visibility::Gettable_MAX;
constexpr int Visibility::Gettable_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SplitIntoDatasets_DatasetSplitMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[9];
}
bool SplitIntoDatasets_DatasetSplitMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SplitIntoDatasets_DatasetSplitMethod SplitIntoDatasets::NOT_SET;
constexpr SplitIntoDatasets_DatasetSplitMethod SplitIntoDatasets::RANDOM_PERCENTAGE_SPLIT;
constexpr SplitIntoDatasets_DatasetSplitMethod SplitIntoDatasets::DatasetSplitMethod_MIN;
constexpr SplitIntoDatasets_DatasetSplitMethod SplitIntoDatasets::DatasetSplitMethod_MAX;
constexpr int SplitIntoDatasets::DatasetSplitMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookmarkOrigin_BookmarkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[10];
}
bool BookmarkOrigin_BookmarkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BookmarkOrigin_BookmarkType BookmarkOrigin::unknown;
constexpr BookmarkOrigin_BookmarkType BookmarkOrigin::model;
constexpr BookmarkOrigin_BookmarkType BookmarkOrigin::workflow;
constexpr BookmarkOrigin_BookmarkType BookmarkOrigin::dataset;
constexpr BookmarkOrigin_BookmarkType BookmarkOrigin::module;
constexpr BookmarkOrigin_BookmarkType BookmarkOrigin::BookmarkType_MIN;
constexpr BookmarkOrigin_BookmarkType BookmarkOrigin::BookmarkType_MAX;
constexpr int BookmarkOrigin::BookmarkType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatasetVersionMetricsGroupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[11];
}
bool DatasetVersionMetricsGroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 10:
    case 11:
    case 20:
    case 21:
    case 22:
    case 23:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatasetVersionExportFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[12];
}
bool DatasetVersionExportFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExpirationAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[13];
}
bool ExpirationAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LicenseScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[14];
}
bool LicenseScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[15];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValueComparator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[16];
}
bool ValueComparator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EvaluationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[17];
}
bool EvaluationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APIEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[18];
}
bool APIEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UsageIntervalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[19];
}
bool UsageIntervalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnnotationDataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[20];
}
bool AnnotationDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[21];
}
bool RoleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatValueAggType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[22];
}
bool StatValueAggType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatTimeAggType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[23];
}
bool StatTimeAggType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidationErrorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[24];
}
bool ValidationErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputIDConflictResolution_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[25];
}
bool InputIDConflictResolution_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Annotation::_Internal {
 public:
  static const ::clarifai::api::Data& data(const Annotation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& annotation_info(const Annotation* msg);
  static const ::clarifai::api::status::Status& status(const Annotation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Annotation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Annotation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& consensus_info(const Annotation* msg);
};

const ::clarifai::api::Data&
Annotation::_Internal::data(const Annotation* msg) {
  return *msg->_impl_.data_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Annotation::_Internal::annotation_info(const Annotation* msg) {
  return *msg->_impl_.annotation_info_;
}
const ::clarifai::api::status::Status&
Annotation::_Internal::status(const Annotation* msg) {
  return *msg->_impl_.status_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Annotation::_Internal::created_at(const Annotation* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Annotation::_Internal::modified_at(const Annotation* msg) {
  return *msg->_impl_.modified_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Annotation::_Internal::consensus_info(const Annotation* msg) {
  return *msg->_impl_.consensus_info_;
}
void Annotation::clear_annotation_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.annotation_info_ != nullptr) {
    delete _impl_.annotation_info_;
  }
  _impl_.annotation_info_ = nullptr;
}
void Annotation::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void Annotation::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Annotation::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void Annotation::clear_consensus_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.consensus_info_ != nullptr) {
    delete _impl_.consensus_info_;
  }
  _impl_.consensus_info_ = nullptr;
}
Annotation::Annotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Annotation)
}
Annotation::Annotation(const Annotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Annotation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.input_id_){}
    , decltype(_impl_.embed_model_version_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.workflow_version_id_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.annotation_info_){nullptr}
    , decltype(_impl_.consensus_info_){nullptr}
    , decltype(_impl_.trusted_){}
    , decltype(_impl_.input_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.input_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_id().empty()) {
    _this->_impl_.input_id_.Set(from._internal_input_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.embed_model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.embed_model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_embed_model_version_id().empty()) {
    _this->_impl_.embed_model_version_id_.Set(from._internal_embed_model_version_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    _this->_impl_.model_version_id_.Set(from._internal_model_version_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.workflow_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_version_id().empty()) {
    _this->_impl_.workflow_version_id_.Set(from._internal_workflow_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::clarifai::api::Data(*from._impl_.data_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_annotation_info()) {
    _this->_impl_.annotation_info_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.annotation_info_);
  }
  if (from._internal_has_consensus_info()) {
    _this->_impl_.consensus_info_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.consensus_info_);
  }
  ::memcpy(&_impl_.trusted_, &from._impl_.trusted_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.input_level_) -
    reinterpret_cast<char*>(&_impl_.trusted_)) + sizeof(_impl_.input_level_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Annotation)
}

inline void Annotation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.input_id_){}
    , decltype(_impl_.embed_model_version_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.workflow_version_id_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.annotation_info_){nullptr}
    , decltype(_impl_.consensus_info_){nullptr}
    , decltype(_impl_.trusted_){false}
    , decltype(_impl_.input_level_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.input_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.embed_model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.embed_model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.workflow_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Annotation::~Annotation() {
  // @@protoc_insertion_point(destructor:clarifai.api.Annotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Annotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.input_id_.Destroy();
  _impl_.embed_model_version_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.model_version_id_.Destroy();
  _impl_.task_id_.Destroy();
  _impl_.workflow_version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.annotation_info_;
  if (this != internal_default_instance()) delete _impl_.consensus_info_;
}

void Annotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Annotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.input_id_.ClearToEmpty();
  _impl_.embed_model_version_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.model_version_id_.ClearToEmpty();
  _impl_.task_id_.ClearToEmpty();
  _impl_.workflow_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.annotation_info_ != nullptr) {
    delete _impl_.annotation_info_;
  }
  _impl_.annotation_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.consensus_info_ != nullptr) {
    delete _impl_.consensus_info_;
  }
  _impl_.consensus_info_ = nullptr;
  ::memset(&_impl_.trusted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.input_level_) -
      reinterpret_cast<char*>(&_impl_.trusted_)) + sizeof(_impl_.input_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Annotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Annotation.id"));
        } else
          goto handle_unusual;
        continue;
      // string input_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_input_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Annotation.input_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool trusted = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.trusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct annotation_info = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string embed_model_version_id = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_embed_model_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Annotation.embed_model_version_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Annotation.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Annotation.model_version_id"));
        } else
          goto handle_unusual;
        continue;
      // bool input_level = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.input_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct consensus_info = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Annotation.task_id"));
        } else
          goto handle_unusual;
        continue;
      // string workflow_version_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_workflow_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Annotation.workflow_version_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Annotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Annotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.input_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_id(), target);
  }

  // .clarifai.api.Data data = 3;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.status.Status status = 7;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 9;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // bool trusted = 10 [deprecated = true];
  if (this->_internal_trusted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_trusted(), target);
  }

  // .google.protobuf.Struct annotation_info = 13;
  if (this->_internal_has_annotation_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::annotation_info(this),
        _Internal::annotation_info(this).GetCachedSize(), target, stream);
  }

  // string embed_model_version_id = 14 [deprecated = true];
  if (!this->_internal_embed_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_embed_model_version_id().data(), static_cast<int>(this->_internal_embed_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.embed_model_version_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_embed_model_version_id(), target);
  }

  // string user_id = 15;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.user_id");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_user_id(), target);
  }

  // string model_version_id = 16;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.model_version_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_model_version_id(), target);
  }

  // bool input_level = 17;
  if (this->_internal_input_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_input_level(), target);
  }

  // .google.protobuf.Struct consensus_info = 18;
  if (this->_internal_has_consensus_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::consensus_info(this),
        _Internal::consensus_info(this).GetCachedSize(), target, stream);
  }

  // string task_id = 19;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.task_id");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_task_id(), target);
  }

  // string workflow_version_id = 20;
  if (!this->_internal_workflow_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_version_id().data(), static_cast<int>(this->_internal_workflow_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.workflow_version_id");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_workflow_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Annotation)
  return target;
}

size_t Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Annotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // string embed_model_version_id = 14 [deprecated = true];
  if (!this->_internal_embed_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_embed_model_version_id());
  }

  // string user_id = 15;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string model_version_id = 16;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // string task_id = 19;
  if (!this->_internal_task_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // string workflow_version_id = 20;
  if (!this->_internal_workflow_version_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_version_id());
  }

  // .clarifai.api.Data data = 3;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .clarifai.api.status.Status status = 7;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 9;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .google.protobuf.Struct annotation_info = 13;
  if (this->_internal_has_annotation_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotation_info_);
  }

  // .google.protobuf.Struct consensus_info = 18;
  if (this->_internal_has_consensus_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.consensus_info_);
  }

  // bool trusted = 10 [deprecated = true];
  if (this->_internal_trusted() != 0) {
    total_size += 1 + 1;
  }

  // bool input_level = 17;
  if (this->_internal_input_level() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Annotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Annotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Annotation::GetClassData() const { return &_class_data_; }


void Annotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Annotation*>(&to_msg);
  auto& from = static_cast<const Annotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Annotation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_input_id().empty()) {
    _this->_internal_set_input_id(from._internal_input_id());
  }
  if (!from._internal_embed_model_version_id().empty()) {
    _this->_internal_set_embed_model_version_id(from._internal_embed_model_version_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_model_version_id().empty()) {
    _this->_internal_set_model_version_id(from._internal_model_version_id());
  }
  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (!from._internal_workflow_version_id().empty()) {
    _this->_internal_set_workflow_version_id(from._internal_workflow_version_id());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::clarifai::api::Data::MergeFrom(
        from._internal_data());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_annotation_info()) {
    _this->_internal_mutable_annotation_info()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_annotation_info());
  }
  if (from._internal_has_consensus_info()) {
    _this->_internal_mutable_consensus_info()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_consensus_info());
  }
  if (from._internal_trusted() != 0) {
    _this->_internal_set_trusted(from._internal_trusted());
  }
  if (from._internal_input_level() != 0) {
    _this->_internal_set_input_level(from._internal_input_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Annotation::CopyFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotation::IsInitialized() const {
  return true;
}

void Annotation::InternalSwap(Annotation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_id_, lhs_arena,
      &other->_impl_.input_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.embed_model_version_id_, lhs_arena,
      &other->_impl_.embed_model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_version_id_, lhs_arena,
      &other->_impl_.model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_version_id_, lhs_arena,
      &other->_impl_.workflow_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Annotation, _impl_.input_level_)
      + sizeof(Annotation::_impl_.input_level_)
      - PROTOBUF_FIELD_OFFSET(Annotation, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Annotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[0]);
}

// ===================================================================

class App::_Internal {
 public:
  static const ::clarifai::api::Workflow& default_workflow(const App* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const App* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const App* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const App* msg);
  static const ::clarifai::api::Visibility& visibility(const App* msg);
  static const ::clarifai::api::Image& image(const App* msg);
};

const ::clarifai::api::Workflow&
App::_Internal::default_workflow(const App* msg) {
  return *msg->_impl_.default_workflow_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
App::_Internal::created_at(const App* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
App::_Internal::modified_at(const App* msg) {
  return *msg->_impl_.modified_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
App::_Internal::metadata(const App* msg) {
  return *msg->_impl_.metadata_;
}
const ::clarifai::api::Visibility&
App::_Internal::visibility(const App* msg) {
  return *msg->_impl_.visibility_;
}
const ::clarifai::api::Image&
App::_Internal::image(const App* msg) {
  return *msg->_impl_.image_;
}
void App::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void App::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void App::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
App::App(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.App)
}
App::App(const App& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  App* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.default_language_){}
    , decltype(_impl_.default_workflow_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.data_tier_id_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.default_workflow_){nullptr}
    , decltype(_impl_.legal_consent_status_){}
    , decltype(_impl_.sample_ms_){}
    , decltype(_impl_.is_starred_){}
    , decltype(_impl_.star_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.default_language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_default_language().empty()) {
    _this->_impl_.default_language_.Set(from._internal_default_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.default_workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_default_workflow_id().empty()) {
    _this->_impl_.default_workflow_id_.Set(from._internal_default_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_tier_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_tier_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_tier_id().empty()) {
    _this->_impl_.data_tier_id_.Set(from._internal_data_tier_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notes().empty()) {
    _this->_impl_.notes_.Set(from._internal_notes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::clarifai::api::Image(*from._impl_.image_);
  }
  if (from._internal_has_default_workflow()) {
    _this->_impl_.default_workflow_ = new ::clarifai::api::Workflow(*from._impl_.default_workflow_);
  }
  ::memcpy(&_impl_.legal_consent_status_, &from._impl_.legal_consent_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.star_count_) -
    reinterpret_cast<char*>(&_impl_.legal_consent_status_)) + sizeof(_impl_.star_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.App)
}

inline void App::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.default_language_){}
    , decltype(_impl_.default_workflow_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.data_tier_id_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.default_workflow_){nullptr}
    , decltype(_impl_.legal_consent_status_){0u}
    , decltype(_impl_.sample_ms_){0u}
    , decltype(_impl_.is_starred_){false}
    , decltype(_impl_.star_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.default_language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.default_workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_tier_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_tier_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

App::~App() {
  // @@protoc_insertion_point(destructor:clarifai.api.App)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void App::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.default_language_.Destroy();
  _impl_.default_workflow_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.description_.Destroy();
  _impl_.data_tier_id_.Destroy();
  _impl_.notes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.image_;
  if (this != internal_default_instance()) delete _impl_.default_workflow_;
}

void App::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void App::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.App)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.default_language_.ClearToEmpty();
  _impl_.default_workflow_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.data_tier_id_.ClearToEmpty();
  _impl_.notes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.default_workflow_ != nullptr) {
    delete _impl_.default_workflow_;
  }
  _impl_.default_workflow_ = nullptr;
  ::memset(&_impl_.legal_consent_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.star_count_) -
      reinterpret_cast<char*>(&_impl_.legal_consent_status_)) + sizeof(_impl_.star_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* App::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.App.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.App.name"));
        } else
          goto handle_unusual;
        continue;
      // string default_language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_default_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.App.default_language"));
        } else
          goto handle_unusual;
        continue;
      // string default_workflow_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_default_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.App.default_workflow_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.App.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 legal_consent_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.legal_consent_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.App.description"));
        } else
          goto handle_unusual;
        continue;
      // uint32 sample_ms = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.sample_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data_tier_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_data_tier_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.App.data_tier_id"));
        } else
          goto handle_unusual;
        continue;
      // bool is_starred = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 star_count = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.star_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string notes = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_notes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.App.notes"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Image image = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Workflow default_workflow = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_workflow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* App::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.App)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string default_language = 3;
  if (!this->_internal_default_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_language().data(), static_cast<int>(this->_internal_default_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.default_language");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_default_language(), target);
  }

  // string default_workflow_id = 4;
  if (!this->_internal_default_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_workflow_id().data(), static_cast<int>(this->_internal_default_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.default_workflow_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_default_workflow_id(), target);
  }

  // string user_id = 5;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // uint32 legal_consent_status = 7;
  if (this->_internal_legal_consent_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_legal_consent_status(), target);
  }

  // .google.protobuf.Struct metadata = 13;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // string description = 14;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.description");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_description(), target);
  }

  // uint32 sample_ms = 15;
  if (this->_internal_sample_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_sample_ms(), target);
  }

  // .clarifai.api.Visibility visibility = 16;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 17;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // string data_tier_id = 18;
  if (!this->_internal_data_tier_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_tier_id().data(), static_cast<int>(this->_internal_data_tier_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.data_tier_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_data_tier_id(), target);
  }

  // bool is_starred = 19;
  if (this->_internal_is_starred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_is_starred(), target);
  }

  // int32 star_count = 20;
  if (this->_internal_star_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_star_count(), target);
  }

  // string notes = 21;
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.notes");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_notes(), target);
  }

  // .clarifai.api.Image image = 22;
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Workflow default_workflow = 23;
  if (this->_internal_has_default_workflow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::default_workflow(this),
        _Internal::default_workflow(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.App)
  return target;
}

size_t App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.App)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string default_language = 3;
  if (!this->_internal_default_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_language());
  }

  // string default_workflow_id = 4;
  if (!this->_internal_default_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_workflow_id());
  }

  // string user_id = 5;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string description = 14;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string data_tier_id = 18;
  if (!this->_internal_data_tier_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_tier_id());
  }

  // string notes = 21;
  if (!this->_internal_notes().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Struct metadata = 13;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .clarifai.api.Visibility visibility = 16;
  if (this->_internal_has_visibility()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  // .google.protobuf.Timestamp modified_at = 17;
  if (this->_internal_has_modified_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .clarifai.api.Image image = 22;
  if (this->_internal_has_image()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_);
  }

  // .clarifai.api.Workflow default_workflow = 23;
  if (this->_internal_has_default_workflow()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.default_workflow_);
  }

  // uint32 legal_consent_status = 7;
  if (this->_internal_legal_consent_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_legal_consent_status());
  }

  // uint32 sample_ms = 15;
  if (this->_internal_sample_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_ms());
  }

  // bool is_starred = 19;
  if (this->_internal_is_starred() != 0) {
    total_size += 2 + 1;
  }

  // int32 star_count = 20;
  if (this->_internal_star_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_star_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData App::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    App::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*App::GetClassData() const { return &_class_data_; }


void App::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<App*>(&to_msg);
  auto& from = static_cast<const App&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.App)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_default_language().empty()) {
    _this->_internal_set_default_language(from._internal_default_language());
  }
  if (!from._internal_default_workflow_id().empty()) {
    _this->_internal_set_default_workflow_id(from._internal_default_workflow_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_data_tier_id().empty()) {
    _this->_internal_set_data_tier_id(from._internal_data_tier_id());
  }
  if (!from._internal_notes().empty()) {
    _this->_internal_set_notes(from._internal_notes());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_image()) {
    _this->_internal_mutable_image()->::clarifai::api::Image::MergeFrom(
        from._internal_image());
  }
  if (from._internal_has_default_workflow()) {
    _this->_internal_mutable_default_workflow()->::clarifai::api::Workflow::MergeFrom(
        from._internal_default_workflow());
  }
  if (from._internal_legal_consent_status() != 0) {
    _this->_internal_set_legal_consent_status(from._internal_legal_consent_status());
  }
  if (from._internal_sample_ms() != 0) {
    _this->_internal_set_sample_ms(from._internal_sample_ms());
  }
  if (from._internal_is_starred() != 0) {
    _this->_internal_set_is_starred(from._internal_is_starred());
  }
  if (from._internal_star_count() != 0) {
    _this->_internal_set_star_count(from._internal_star_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void App::CopyFrom(const App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool App::IsInitialized() const {
  return true;
}

void App::InternalSwap(App* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.default_language_, lhs_arena,
      &other->_impl_.default_language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.default_workflow_id_, lhs_arena,
      &other->_impl_.default_workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_tier_id_, lhs_arena,
      &other->_impl_.data_tier_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notes_, lhs_arena,
      &other->_impl_.notes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(App, _impl_.star_count_)
      + sizeof(App::_impl_.star_count_)
      - PROTOBUF_FIELD_OFFSET(App, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata App::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[1]);
}

// ===================================================================

class AppQuery::_Internal {
 public:
};

AppQuery::AppQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AppQuery)
}
AppQuery::AppQuery(const AppQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AppQuery)
}

inline void AppQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppQuery::~AppQuery() {
  // @@protoc_insertion_point(destructor:clarifai.api.AppQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void AppQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AppQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AppQuery.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AppQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppQuery.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AppQuery)
  return target;
}

size_t AppQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AppQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppQuery::GetClassData() const { return &_class_data_; }


void AppQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppQuery*>(&to_msg);
  auto& from = static_cast<const AppQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AppQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppQuery::CopyFrom(const AppQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AppQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppQuery::IsInitialized() const {
  return true;
}

void AppQuery::InternalSwap(AppQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AppQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[2]);
}

// ===================================================================

class Collaborator::_Internal {
 public:
  static const ::clarifai::api::App& app(const Collaborator* msg);
  static const ::clarifai::api::User& user(const Collaborator* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Collaborator* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Collaborator* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const Collaborator* msg);
};

const ::clarifai::api::App&
Collaborator::_Internal::app(const Collaborator* msg) {
  return *msg->_impl_.app_;
}
const ::clarifai::api::User&
Collaborator::_Internal::user(const Collaborator* msg) {
  return *msg->_impl_.user_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Collaborator::_Internal::created_at(const Collaborator* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Collaborator::_Internal::modified_at(const Collaborator* msg) {
  return *msg->_impl_.modified_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Collaborator::_Internal::deleted_at(const Collaborator* msg) {
  return *msg->_impl_.deleted_at_;
}
void Collaborator::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Collaborator::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void Collaborator::clear_deleted_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.deleted_at_ != nullptr) {
    delete _impl_.deleted_at_;
  }
  _impl_.deleted_at_ = nullptr;
}
Collaborator::Collaborator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Collaborator)
}
Collaborator::Collaborator(const Collaborator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Collaborator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){from._impl_.scopes_}
    , decltype(_impl_.endpoints_){from._impl_.endpoints_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.app_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_app()) {
    _this->_impl_.app_ = new ::clarifai::api::App(*from._impl_.app_);
  }
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::clarifai::api::User(*from._impl_.user_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_deleted_at()) {
    _this->_impl_.deleted_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deleted_at_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Collaborator)
}

inline void Collaborator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){arena}
    , decltype(_impl_.endpoints_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.app_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Collaborator::~Collaborator() {
  // @@protoc_insertion_point(destructor:clarifai.api.Collaborator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Collaborator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scopes_.~RepeatedPtrField();
  _impl_.endpoints_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.app_;
  if (this != internal_default_instance()) delete _impl_.user_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.deleted_at_;
}

void Collaborator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Collaborator::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Collaborator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scopes_.Clear();
  _impl_.endpoints_.Clear();
  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.app_ != nullptr) {
    delete _impl_.app_;
  }
  _impl_.app_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.deleted_at_ != nullptr) {
    delete _impl_.deleted_at_;
  }
  _impl_.deleted_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Collaborator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Collaborator.id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.App app = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.User user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string scopes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Collaborator.scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string endpoints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Collaborator.endpoints"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp deleted_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Collaborator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Collaborator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collaborator.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.App app = 2;
  if (this->_internal_has_app()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::app(this),
        _Internal::app(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.User user = 3;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // repeated string scopes = 4;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collaborator.scopes");
    target = stream->WriteString(4, s, target);
  }

  // repeated string endpoints = 5;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collaborator.endpoints");
    target = stream->WriteString(5, s, target);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 7;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp deleted_at = 8;
  if (this->_internal_has_deleted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::deleted_at(this),
        _Internal::deleted_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Collaborator)
  return target;
}

size_t Collaborator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Collaborator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.scopes_.size());
  for (int i = 0, n = _impl_.scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.scopes_.Get(i));
  }

  // repeated string endpoints = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.endpoints_.size());
  for (int i = 0, n = _impl_.endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.endpoints_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.App app = 2;
  if (this->_internal_has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.app_);
  }

  // .clarifai.api.User user = 3;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 7;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .google.protobuf.Timestamp deleted_at = 8;
  if (this->_internal_has_deleted_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deleted_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Collaborator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Collaborator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Collaborator::GetClassData() const { return &_class_data_; }


void Collaborator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Collaborator*>(&to_msg);
  auto& from = static_cast<const Collaborator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Collaborator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scopes_.MergeFrom(from._impl_.scopes_);
  _this->_impl_.endpoints_.MergeFrom(from._impl_.endpoints_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_app()) {
    _this->_internal_mutable_app()->::clarifai::api::App::MergeFrom(
        from._internal_app());
  }
  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::clarifai::api::User::MergeFrom(
        from._internal_user());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_deleted_at()) {
    _this->_internal_mutable_deleted_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_deleted_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Collaborator::CopyFrom(const Collaborator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Collaborator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collaborator::IsInitialized() const {
  return true;
}

void Collaborator::InternalSwap(Collaborator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scopes_.InternalSwap(&other->_impl_.scopes_);
  _impl_.endpoints_.InternalSwap(&other->_impl_.endpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Collaborator, _impl_.deleted_at_)
      + sizeof(Collaborator::_impl_.deleted_at_)
      - PROTOBUF_FIELD_OFFSET(Collaborator, _impl_.app_)>(
          reinterpret_cast<char*>(&_impl_.app_),
          reinterpret_cast<char*>(&other->_impl_.app_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Collaborator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[3]);
}

// ===================================================================

class Collaboration::_Internal {
 public:
  static const ::clarifai::api::App& app(const Collaboration* msg);
  static const ::clarifai::api::User& app_owner(const Collaboration* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Collaboration* msg);
};

const ::clarifai::api::App&
Collaboration::_Internal::app(const Collaboration* msg) {
  return *msg->_impl_.app_;
}
const ::clarifai::api::User&
Collaboration::_Internal::app_owner(const Collaboration* msg) {
  return *msg->_impl_.app_owner_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Collaboration::_Internal::created_at(const Collaboration* msg) {
  return *msg->_impl_.created_at_;
}
void Collaboration::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
Collaboration::Collaboration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Collaboration)
}
Collaboration::Collaboration(const Collaboration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Collaboration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){from._impl_.scopes_}
    , decltype(_impl_.endpoints_){from._impl_.endpoints_}
    , decltype(_impl_.app_){nullptr}
    , decltype(_impl_.app_owner_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_app()) {
    _this->_impl_.app_ = new ::clarifai::api::App(*from._impl_.app_);
  }
  if (from._internal_has_app_owner()) {
    _this->_impl_.app_owner_ = new ::clarifai::api::User(*from._impl_.app_owner_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Collaboration)
}

inline void Collaboration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){arena}
    , decltype(_impl_.endpoints_){arena}
    , decltype(_impl_.app_){nullptr}
    , decltype(_impl_.app_owner_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Collaboration::~Collaboration() {
  // @@protoc_insertion_point(destructor:clarifai.api.Collaboration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Collaboration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scopes_.~RepeatedPtrField();
  _impl_.endpoints_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.app_;
  if (this != internal_default_instance()) delete _impl_.app_owner_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void Collaboration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Collaboration::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Collaboration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scopes_.Clear();
  _impl_.endpoints_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.app_ != nullptr) {
    delete _impl_.app_;
  }
  _impl_.app_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.app_owner_ != nullptr) {
    delete _impl_.app_owner_;
  }
  _impl_.app_owner_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Collaboration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.App app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.User app_owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string scopes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Collaboration.scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string endpoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Collaboration.endpoints"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Collaboration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Collaboration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.App app = 1;
  if (this->_internal_has_app()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::app(this),
        _Internal::app(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.User app_owner = 2;
  if (this->_internal_has_app_owner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::app_owner(this),
        _Internal::app_owner(this).GetCachedSize(), target, stream);
  }

  // repeated string scopes = 3;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collaboration.scopes");
    target = stream->WriteString(3, s, target);
  }

  // repeated string endpoints = 4;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collaboration.endpoints");
    target = stream->WriteString(4, s, target);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Collaboration)
  return target;
}

size_t Collaboration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Collaboration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.scopes_.size());
  for (int i = 0, n = _impl_.scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.scopes_.Get(i));
  }

  // repeated string endpoints = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.endpoints_.size());
  for (int i = 0, n = _impl_.endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.endpoints_.Get(i));
  }

  // .clarifai.api.App app = 1;
  if (this->_internal_has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.app_);
  }

  // .clarifai.api.User app_owner = 2;
  if (this->_internal_has_app_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.app_owner_);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Collaboration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Collaboration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Collaboration::GetClassData() const { return &_class_data_; }


void Collaboration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Collaboration*>(&to_msg);
  auto& from = static_cast<const Collaboration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Collaboration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scopes_.MergeFrom(from._impl_.scopes_);
  _this->_impl_.endpoints_.MergeFrom(from._impl_.endpoints_);
  if (from._internal_has_app()) {
    _this->_internal_mutable_app()->::clarifai::api::App::MergeFrom(
        from._internal_app());
  }
  if (from._internal_has_app_owner()) {
    _this->_internal_mutable_app_owner()->::clarifai::api::User::MergeFrom(
        from._internal_app_owner());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Collaboration::CopyFrom(const Collaboration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Collaboration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collaboration::IsInitialized() const {
  return true;
}

void Collaboration::InternalSwap(Collaboration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scopes_.InternalSwap(&other->_impl_.scopes_);
  _impl_.endpoints_.InternalSwap(&other->_impl_.endpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Collaboration, _impl_.created_at_)
      + sizeof(Collaboration::_impl_.created_at_)
      - PROTOBUF_FIELD_OFFSET(Collaboration, _impl_.app_)>(
          reinterpret_cast<char*>(&_impl_.app_),
          reinterpret_cast<char*>(&other->_impl_.app_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Collaboration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[4]);
}

// ===================================================================

class Audio::_Internal {
 public:
  static const ::clarifai::api::HostedURL& hosted(const Audio* msg);
  static const ::clarifai::api::AudioInfo& audio_info(const Audio* msg);
};

const ::clarifai::api::HostedURL&
Audio::_Internal::hosted(const Audio* msg) {
  return *msg->_impl_.hosted_;
}
const ::clarifai::api::AudioInfo&
Audio::_Internal::audio_info(const Audio* msg) {
  return *msg->_impl_.audio_info_;
}
Audio::Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Audio)
}
Audio::Audio(const Audio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Audio* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.base64_){}
    , decltype(_impl_.hosted_){nullptr}
    , decltype(_impl_.audio_info_){nullptr}
    , decltype(_impl_.allow_duplicate_url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.base64_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base64_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base64().empty()) {
    _this->_impl_.base64_.Set(from._internal_base64(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_hosted()) {
    _this->_impl_.hosted_ = new ::clarifai::api::HostedURL(*from._impl_.hosted_);
  }
  if (from._internal_has_audio_info()) {
    _this->_impl_.audio_info_ = new ::clarifai::api::AudioInfo(*from._impl_.audio_info_);
  }
  _this->_impl_.allow_duplicate_url_ = from._impl_.allow_duplicate_url_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Audio)
}

inline void Audio::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.base64_){}
    , decltype(_impl_.hosted_){nullptr}
    , decltype(_impl_.audio_info_){nullptr}
    , decltype(_impl_.allow_duplicate_url_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base64_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base64_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Audio::~Audio() {
  // @@protoc_insertion_point(destructor:clarifai.api.Audio)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Audio::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.base64_.Destroy();
  if (this != internal_default_instance()) delete _impl_.hosted_;
  if (this != internal_default_instance()) delete _impl_.audio_info_;
}

void Audio::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Audio::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Audio)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.base64_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.hosted_ != nullptr) {
    delete _impl_.hosted_;
  }
  _impl_.hosted_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.audio_info_ != nullptr) {
    delete _impl_.audio_info_;
  }
  _impl_.audio_info_ = nullptr;
  _impl_.allow_duplicate_url_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Audio::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Audio.url"));
        } else
          goto handle_unusual;
        continue;
      // bytes base64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_base64();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_duplicate_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.allow_duplicate_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.HostedURL hosted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hosted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AudioInfo audio_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Audio::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Audio)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Audio.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // bytes base64 = 2;
  if (!this->_internal_base64().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_base64(), target);
  }

  // bool allow_duplicate_url = 4;
  if (this->_internal_allow_duplicate_url() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_duplicate_url(), target);
  }

  // .clarifai.api.HostedURL hosted = 5;
  if (this->_internal_has_hosted()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::hosted(this),
        _Internal::hosted(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.AudioInfo audio_info = 6;
  if (this->_internal_has_audio_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::audio_info(this),
        _Internal::audio_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Audio)
  return target;
}

size_t Audio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Audio)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // bytes base64 = 2;
  if (!this->_internal_base64().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_base64());
  }

  // .clarifai.api.HostedURL hosted = 5;
  if (this->_internal_has_hosted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hosted_);
  }

  // .clarifai.api.AudioInfo audio_info = 6;
  if (this->_internal_has_audio_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.audio_info_);
  }

  // bool allow_duplicate_url = 4;
  if (this->_internal_allow_duplicate_url() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Audio::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Audio::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Audio::GetClassData() const { return &_class_data_; }


void Audio::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Audio*>(&to_msg);
  auto& from = static_cast<const Audio&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Audio)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_base64().empty()) {
    _this->_internal_set_base64(from._internal_base64());
  }
  if (from._internal_has_hosted()) {
    _this->_internal_mutable_hosted()->::clarifai::api::HostedURL::MergeFrom(
        from._internal_hosted());
  }
  if (from._internal_has_audio_info()) {
    _this->_internal_mutable_audio_info()->::clarifai::api::AudioInfo::MergeFrom(
        from._internal_audio_info());
  }
  if (from._internal_allow_duplicate_url() != 0) {
    _this->_internal_set_allow_duplicate_url(from._internal_allow_duplicate_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Audio::CopyFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Audio::IsInitialized() const {
  return true;
}

void Audio::InternalSwap(Audio* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.base64_, lhs_arena,
      &other->_impl_.base64_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Audio, _impl_.allow_duplicate_url_)
      + sizeof(Audio::_impl_.allow_duplicate_url_)
      - PROTOBUF_FIELD_OFFSET(Audio, _impl_.hosted_)>(
          reinterpret_cast<char*>(&_impl_.hosted_),
          reinterpret_cast<char*>(&other->_impl_.hosted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Audio::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[5]);
}

// ===================================================================

class AudioInfo::_Internal {
 public:
};

AudioInfo::AudioInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AudioInfo)
}
AudioInfo::AudioInfo(const AudioInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.audio_format_){}
    , decltype(_impl_.sample_rate_){}
    , decltype(_impl_.duration_seconds_){}
    , decltype(_impl_.bit_rate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.audio_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audio_format().empty()) {
    _this->_impl_.audio_format_.Set(from._internal_audio_format(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sample_rate_, &from._impl_.sample_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bit_rate_) -
    reinterpret_cast<char*>(&_impl_.sample_rate_)) + sizeof(_impl_.bit_rate_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AudioInfo)
}

inline void AudioInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.audio_format_){}
    , decltype(_impl_.sample_rate_){0}
    , decltype(_impl_.duration_seconds_){0}
    , decltype(_impl_.bit_rate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.audio_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AudioInfo::~AudioInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.AudioInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.audio_format_.Destroy();
}

void AudioInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AudioInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audio_format_.ClearToEmpty();
  ::memset(&_impl_.sample_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bit_rate_) -
      reinterpret_cast<char*>(&_impl_.sample_rate_)) + sizeof(_impl_.bit_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string audio_format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_audio_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AudioInfo.audio_format"));
        } else
          goto handle_unusual;
        continue;
      // int32 sample_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float duration_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 bit_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bit_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AudioInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string audio_format = 1;
  if (!this->_internal_audio_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_format().data(), static_cast<int>(this->_internal_audio_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AudioInfo.audio_format");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_audio_format(), target);
  }

  // int32 sample_rate = 2;
  if (this->_internal_sample_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_sample_rate(), target);
  }

  // float duration_seconds = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = this->_internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_duration_seconds(), target);
  }

  // int32 bit_rate = 4;
  if (this->_internal_bit_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_bit_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AudioInfo)
  return target;
}

size_t AudioInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AudioInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string audio_format = 1;
  if (!this->_internal_audio_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_format());
  }

  // int32 sample_rate = 2;
  if (this->_internal_sample_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sample_rate());
  }

  // float duration_seconds = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = this->_internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    total_size += 1 + 4;
  }

  // int32 bit_rate = 4;
  if (this->_internal_bit_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bit_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioInfo::GetClassData() const { return &_class_data_; }


void AudioInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioInfo*>(&to_msg);
  auto& from = static_cast<const AudioInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AudioInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_audio_format().empty()) {
    _this->_internal_set_audio_format(from._internal_audio_format());
  }
  if (from._internal_sample_rate() != 0) {
    _this->_internal_set_sample_rate(from._internal_sample_rate());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = from._internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    _this->_internal_set_duration_seconds(from._internal_duration_seconds());
  }
  if (from._internal_bit_rate() != 0) {
    _this->_internal_set_bit_rate(from._internal_bit_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioInfo::CopyFrom(const AudioInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AudioInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioInfo::IsInitialized() const {
  return true;
}

void AudioInfo::InternalSwap(AudioInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.audio_format_, lhs_arena,
      &other->_impl_.audio_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioInfo, _impl_.bit_rate_)
      + sizeof(AudioInfo::_impl_.bit_rate_)
      - PROTOBUF_FIELD_OFFSET(AudioInfo, _impl_.sample_rate_)>(
          reinterpret_cast<char*>(&_impl_.sample_rate_),
          reinterpret_cast<char*>(&other->_impl_.sample_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[6]);
}

// ===================================================================

class Track::_Internal {
 public:
  static const ::clarifai::api::Data& data(const Track* msg);
  static const ::clarifai::api::TimeInfo& time_info(const Track* msg);
};

const ::clarifai::api::Data&
Track::_Internal::data(const Track* msg) {
  return *msg->_impl_.data_;
}
const ::clarifai::api::TimeInfo&
Track::_Internal::time_info(const Track* msg) {
  return *msg->_impl_.time_info_;
}
Track::Track(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Track)
}
Track::Track(const Track& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Track* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.time_info_){nullptr}
    , decltype(_impl_.quality_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::clarifai::api::Data(*from._impl_.data_);
  }
  if (from._internal_has_time_info()) {
    _this->_impl_.time_info_ = new ::clarifai::api::TimeInfo(*from._impl_.time_info_);
  }
  _this->_impl_.quality_ = from._impl_.quality_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Track)
}

inline void Track::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.time_info_){nullptr}
    , decltype(_impl_.quality_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Track::~Track() {
  // @@protoc_insertion_point(destructor:clarifai.api.Track)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Track::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.time_info_;
}

void Track::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Track::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Track)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_info_ != nullptr) {
    delete _impl_.time_info_;
  }
  _impl_.time_info_ = nullptr;
  _impl_.quality_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Track::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Track.id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TimeInfo time_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float quality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Track::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Track)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Track.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.TimeInfo time_info = 4;
  if (this->_internal_has_time_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time_info(this),
        _Internal::time_info(this).GetCachedSize(), target, stream);
  }

  // float quality = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_quality = this->_internal_quality();
  uint32_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Track)
  return target;
}

size_t Track::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Track)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .clarifai.api.TimeInfo time_info = 4;
  if (this->_internal_has_time_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_info_);
  }

  // float quality = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_quality = this->_internal_quality();
  uint32_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Track::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Track::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Track::GetClassData() const { return &_class_data_; }


void Track::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Track*>(&to_msg);
  auto& from = static_cast<const Track&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Track)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::clarifai::api::Data::MergeFrom(
        from._internal_data());
  }
  if (from._internal_has_time_info()) {
    _this->_internal_mutable_time_info()->::clarifai::api::TimeInfo::MergeFrom(
        from._internal_time_info());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_quality = from._internal_quality();
  uint32_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Track::CopyFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {
  return true;
}

void Track::InternalSwap(Track* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Track, _impl_.quality_)
      + sizeof(Track::_impl_.quality_)
      - PROTOBUF_FIELD_OFFSET(Track, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Track::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[7]);
}

// ===================================================================

class Cluster::_Internal {
 public:
};

Cluster::Cluster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Cluster)
}
Cluster::Cluster(const Cluster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cluster* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hits_){from._impl_.hits_}
    , decltype(_impl_.projection_){from._impl_.projection_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.count_, &from._impl_.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.score_) -
    reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.score_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Cluster)
}

inline void Cluster::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hits_){arena}
    , decltype(_impl_.projection_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.count_){0u}
    , decltype(_impl_.score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Cluster::~Cluster() {
  // @@protoc_insertion_point(destructor:clarifai.api.Cluster)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cluster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hits_.~RepeatedPtrField();
  _impl_.projection_.~RepeatedField();
  _impl_.id_.Destroy();
}

void Cluster::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cluster::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Cluster)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hits_.Clear();
  _impl_.projection_.Clear();
  _impl_.id_.ClearToEmpty();
  ::memset(&_impl_.count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.score_) -
      reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cluster::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Cluster.id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit hits = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float projection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_projection(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_projection(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cluster::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Cluster)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Cluster.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // float score = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_score(), target);
  }

  // repeated .clarifai.api.Hit hits = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hits_size()); i < n; i++) {
    const auto& repfield = this->_internal_hits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float projection = 5;
  if (this->_internal_projection_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_projection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Cluster)
  return target;
}

size_t Cluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Cluster)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Hit hits = 4;
  total_size += 1UL * this->_internal_hits_size();
  for (const auto& msg : this->_impl_.hits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float projection = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_projection_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  // float score = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cluster::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cluster::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cluster::GetClassData() const { return &_class_data_; }


void Cluster::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cluster*>(&to_msg);
  auto& from = static_cast<const Cluster&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Cluster)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hits_.MergeFrom(from._impl_.hits_);
  _this->_impl_.projection_.MergeFrom(from._impl_.projection_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cluster::CopyFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster::IsInitialized() const {
  return true;
}

void Cluster::InternalSwap(Cluster* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hits_.InternalSwap(&other->_impl_.hits_);
  _impl_.projection_.InternalSwap(&other->_impl_.projection_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cluster, _impl_.score_)
      + sizeof(Cluster::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(Cluster, _impl_.count_)>(
          reinterpret_cast<char*>(&_impl_.count_),
          reinterpret_cast<char*>(&other->_impl_.count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cluster::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[8]);
}

// ===================================================================

class Color::_Internal {
 public:
  static const ::clarifai::api::W3C& w3c(const Color* msg);
};

const ::clarifai::api::W3C&
Color::_Internal::w3c(const Color* msg) {
  return *msg->_impl_.w3c_;
}
Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Color* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.raw_hex_){}
    , decltype(_impl_.w3c_){nullptr}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.raw_hex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_hex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw_hex().empty()) {
    _this->_impl_.raw_hex_.Set(from._internal_raw_hex(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_w3c()) {
    _this->_impl_.w3c_ = new ::clarifai::api::W3C(*from._impl_.w3c_);
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Color)
}

inline void Color::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.raw_hex_){}
    , decltype(_impl_.w3c_){nullptr}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.raw_hex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_hex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:clarifai.api.Color)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.raw_hex_.Destroy();
  if (this != internal_default_instance()) delete _impl_.w3c_;
}

void Color::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Color)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.raw_hex_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.w3c_ != nullptr) {
    delete _impl_.w3c_;
  }
  _impl_.w3c_ = nullptr;
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string raw_hex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_raw_hex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Color.raw_hex"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.W3C w3c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_w3c(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Color::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Color)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string raw_hex = 1;
  if (!this->_internal_raw_hex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_hex().data(), static_cast<int>(this->_internal_raw_hex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Color.raw_hex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_raw_hex(), target);
  }

  // .clarifai.api.W3C w3c = 2;
  if (this->_internal_has_w3c()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::w3c(this),
        _Internal::w3c(this).GetCachedSize(), target, stream);
  }

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Color)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string raw_hex = 1;
  if (!this->_internal_raw_hex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_hex());
  }

  // .clarifai.api.W3C w3c = 2;
  if (this->_internal_has_w3c()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.w3c_);
  }

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Color::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Color::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Color::GetClassData() const { return &_class_data_; }


void Color::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Color*>(&to_msg);
  auto& from = static_cast<const Color&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Color)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_raw_hex().empty()) {
    _this->_internal_set_raw_hex(from._internal_raw_hex());
  }
  if (from._internal_has_w3c()) {
    _this->_internal_mutable_w3c()->::clarifai::api::W3C::MergeFrom(
        from._internal_w3c());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.raw_hex_, lhs_arena,
      &other->_impl_.raw_hex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, _impl_.value_)
      + sizeof(Color::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(Color, _impl_.w3c_)>(
          reinterpret_cast<char*>(&_impl_.w3c_),
          reinterpret_cast<char*>(&other->_impl_.w3c_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[9]);
}

// ===================================================================

class W3C::_Internal {
 public:
};

W3C::W3C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.W3C)
}
W3C::W3C(const W3C& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  W3C* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hex_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hex().empty()) {
    _this->_impl_.hex_.Set(from._internal_hex(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.W3C)
}

inline void W3C::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hex_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

W3C::~W3C() {
  // @@protoc_insertion_point(destructor:clarifai.api.W3C)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void W3C::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hex_.Destroy();
  _impl_.name_.Destroy();
}

void W3C::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void W3C::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.W3C)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hex_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* W3C::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.W3C.hex"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.W3C.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* W3C::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.W3C)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hex = 1;
  if (!this->_internal_hex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hex().data(), static_cast<int>(this->_internal_hex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.W3C.hex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hex(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.W3C.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.W3C)
  return target;
}

size_t W3C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.W3C)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hex = 1;
  if (!this->_internal_hex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hex());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData W3C::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    W3C::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*W3C::GetClassData() const { return &_class_data_; }


void W3C::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<W3C*>(&to_msg);
  auto& from = static_cast<const W3C&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.W3C)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hex().empty()) {
    _this->_internal_set_hex(from._internal_hex());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void W3C::CopyFrom(const W3C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.W3C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool W3C::IsInitialized() const {
  return true;
}

void W3C::InternalSwap(W3C* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hex_, lhs_arena,
      &other->_impl_.hex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata W3C::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[10]);
}

// ===================================================================

class UserAppIDSet::_Internal {
 public:
};

UserAppIDSet::UserAppIDSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.UserAppIDSet)
}
UserAppIDSet::UserAppIDSet(const UserAppIDSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserAppIDSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.app_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.UserAppIDSet)
}

inline void UserAppIDSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.app_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserAppIDSet::~UserAppIDSet() {
  // @@protoc_insertion_point(destructor:clarifai.api.UserAppIDSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserAppIDSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.app_id_.Destroy();
}

void UserAppIDSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserAppIDSet::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.UserAppIDSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserAppIDSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.UserAppIDSet.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.UserAppIDSet.app_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserAppIDSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.UserAppIDSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserAppIDSet.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserAppIDSet.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.UserAppIDSet)
  return target;
}

size_t UserAppIDSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.UserAppIDSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserAppIDSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserAppIDSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserAppIDSet::GetClassData() const { return &_class_data_; }


void UserAppIDSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserAppIDSet*>(&to_msg);
  auto& from = static_cast<const UserAppIDSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.UserAppIDSet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserAppIDSet::CopyFrom(const UserAppIDSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.UserAppIDSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAppIDSet::IsInitialized() const {
  return true;
}

void UserAppIDSet::InternalSwap(UserAppIDSet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAppIDSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[11]);
}

// ===================================================================

class PatchAction::_Internal {
 public:
};

PatchAction::PatchAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAction)
}
PatchAction::PatchAction(const PatchAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.op_){}
    , decltype(_impl_.merge_conflict_resolution_){}
    , decltype(_impl_.path_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.op_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_op().empty()) {
    _this->_impl_.op_.Set(from._internal_op(), 
      _this->GetArenaForAllocation());
  }
  _impl_.merge_conflict_resolution_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.merge_conflict_resolution_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_merge_conflict_resolution().empty()) {
    _this->_impl_.merge_conflict_resolution_.Set(from._internal_merge_conflict_resolution(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAction)
}

inline void PatchAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.op_){}
    , decltype(_impl_.merge_conflict_resolution_){}
    , decltype(_impl_.path_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.op_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.merge_conflict_resolution_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.merge_conflict_resolution_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchAction::~PatchAction() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.op_.Destroy();
  _impl_.merge_conflict_resolution_.Destroy();
  _impl_.path_.Destroy();
}

void PatchAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchAction::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.op_.ClearToEmpty();
  _impl_.merge_conflict_resolution_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_op();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchAction.op"));
        } else
          goto handle_unusual;
        continue;
      // string merge_conflict_resolution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_merge_conflict_resolution();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchAction.merge_conflict_resolution"));
        } else
          goto handle_unusual;
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchAction.path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string op = 1;
  if (!this->_internal_op().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op().data(), static_cast<int>(this->_internal_op().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAction.op");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_op(), target);
  }

  // string merge_conflict_resolution = 2;
  if (!this->_internal_merge_conflict_resolution().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_merge_conflict_resolution().data(), static_cast<int>(this->_internal_merge_conflict_resolution().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAction.merge_conflict_resolution");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_merge_conflict_resolution(), target);
  }

  // string path = 3;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAction.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAction)
  return target;
}

size_t PatchAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string op = 1;
  if (!this->_internal_op().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op());
  }

  // string merge_conflict_resolution = 2;
  if (!this->_internal_merge_conflict_resolution().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_merge_conflict_resolution());
  }

  // string path = 3;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAction::GetClassData() const { return &_class_data_; }


void PatchAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchAction*>(&to_msg);
  auto& from = static_cast<const PatchAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_op().empty()) {
    _this->_internal_set_op(from._internal_op());
  }
  if (!from._internal_merge_conflict_resolution().empty()) {
    _this->_internal_set_merge_conflict_resolution(from._internal_merge_conflict_resolution());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAction::CopyFrom(const PatchAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAction::IsInitialized() const {
  return true;
}

void PatchAction::InternalSwap(PatchAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.op_, lhs_arena,
      &other->_impl_.op_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.merge_conflict_resolution_, lhs_arena,
      &other->_impl_.merge_conflict_resolution_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[12]);
}

// ===================================================================

class Concept::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Concept* msg);
  static const ::clarifai::api::Visibility& visibility(const Concept* msg);
  static const ::clarifai::api::KeypointInfo& keypoint_info(const Concept* msg);
  static const ::clarifai::api::ConceptExtraInfo& extra_info(const Concept* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Concept::_Internal::created_at(const Concept* msg) {
  return *msg->_impl_.created_at_;
}
const ::clarifai::api::Visibility&
Concept::_Internal::visibility(const Concept* msg) {
  return *msg->_impl_.visibility_;
}
const ::clarifai::api::KeypointInfo&
Concept::_Internal::keypoint_info(const Concept* msg) {
  return *msg->_impl_.keypoint_info_;
}
const ::clarifai::api::ConceptExtraInfo&
Concept::_Internal::extra_info(const Concept* msg) {
  return *msg->_impl_.extra_info_;
}
void Concept::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
Concept::Concept(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Concept)
}
Concept::Concept(const Concept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Concept* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.definition_){}
    , decltype(_impl_.vocab_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.keypoint_info_){nullptr}
    , decltype(_impl_.extra_info_){nullptr}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.definition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.definition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_definition().empty()) {
    _this->_impl_.definition_.Set(from._internal_definition(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vocab_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vocab_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vocab_id().empty()) {
    _this->_impl_.vocab_id_.Set(from._internal_vocab_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  if (from._internal_has_keypoint_info()) {
    _this->_impl_.keypoint_info_ = new ::clarifai::api::KeypointInfo(*from._impl_.keypoint_info_);
  }
  if (from._internal_has_extra_info()) {
    _this->_impl_.extra_info_ = new ::clarifai::api::ConceptExtraInfo(*from._impl_.extra_info_);
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Concept)
}

inline void Concept::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.definition_){}
    , decltype(_impl_.vocab_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.keypoint_info_){nullptr}
    , decltype(_impl_.extra_info_){nullptr}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.definition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.definition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vocab_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vocab_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Concept::~Concept() {
  // @@protoc_insertion_point(destructor:clarifai.api.Concept)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Concept::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.language_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.definition_.Destroy();
  _impl_.vocab_id_.Destroy();
  _impl_.user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
  if (this != internal_default_instance()) delete _impl_.keypoint_info_;
  if (this != internal_default_instance()) delete _impl_.extra_info_;
}

void Concept::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Concept::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Concept)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.definition_.ClearToEmpty();
  _impl_.vocab_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.keypoint_info_ != nullptr) {
    delete _impl_.keypoint_info_;
  }
  _impl_.keypoint_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.extra_info_ != nullptr) {
    delete _impl_.extra_info_;
  }
  _impl_.extra_info_ = nullptr;
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Concept::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Concept.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Concept.name"));
        } else
          goto handle_unusual;
        continue;
      // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_default_float) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string language = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Concept.language"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Concept.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string definition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_definition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Concept.definition"));
        } else
          goto handle_unusual;
        continue;
      // string vocab_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_vocab_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Concept.vocab_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Concept.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.KeypointInfo keypoint_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_keypoint_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ConceptExtraInfo extra_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Concept::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Concept)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_default_float) = 1];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_value(), target);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // string language = 5;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.language");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language(), target);
  }

  // string app_id = 6;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.app_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_app_id(), target);
  }

  // string definition = 7;
  if (!this->_internal_definition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_definition().data(), static_cast<int>(this->_internal_definition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.definition");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_definition(), target);
  }

  // string vocab_id = 8;
  if (!this->_internal_vocab_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vocab_id().data(), static_cast<int>(this->_internal_vocab_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.vocab_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_vocab_id(), target);
  }

  // .clarifai.api.Visibility visibility = 9;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  // string user_id = 10;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.user_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_user_id(), target);
  }

  // .clarifai.api.KeypointInfo keypoint_info = 11;
  if (this->_internal_has_keypoint_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::keypoint_info(this),
        _Internal::keypoint_info(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ConceptExtraInfo extra_info = 12;
  if (this->_internal_has_extra_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::extra_info(this),
        _Internal::extra_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Concept)
  return target;
}

size_t Concept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Concept)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string language = 5;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string app_id = 6;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string definition = 7;
  if (!this->_internal_definition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_definition());
  }

  // string vocab_id = 8;
  if (!this->_internal_vocab_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vocab_id());
  }

  // string user_id = 10;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .clarifai.api.Visibility visibility = 9;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  // .clarifai.api.KeypointInfo keypoint_info = 11;
  if (this->_internal_has_keypoint_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.keypoint_info_);
  }

  // .clarifai.api.ConceptExtraInfo extra_info = 12;
  if (this->_internal_has_extra_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extra_info_);
  }

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_default_float) = 1];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Concept::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Concept::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Concept::GetClassData() const { return &_class_data_; }


void Concept::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Concept*>(&to_msg);
  auto& from = static_cast<const Concept&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Concept)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_definition().empty()) {
    _this->_internal_set_definition(from._internal_definition());
  }
  if (!from._internal_vocab_id().empty()) {
    _this->_internal_set_vocab_id(from._internal_vocab_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  if (from._internal_has_keypoint_info()) {
    _this->_internal_mutable_keypoint_info()->::clarifai::api::KeypointInfo::MergeFrom(
        from._internal_keypoint_info());
  }
  if (from._internal_has_extra_info()) {
    _this->_internal_mutable_extra_info()->::clarifai::api::ConceptExtraInfo::MergeFrom(
        from._internal_extra_info());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Concept::CopyFrom(const Concept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Concept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Concept::IsInitialized() const {
  return true;
}

void Concept::InternalSwap(Concept* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.definition_, lhs_arena,
      &other->_impl_.definition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vocab_id_, lhs_arena,
      &other->_impl_.vocab_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Concept, _impl_.value_)
      + sizeof(Concept::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(Concept, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Concept::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[13]);
}

// ===================================================================

class KeypointInfo::_Internal {
 public:
};

KeypointInfo::KeypointInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.KeypointInfo)
}
KeypointInfo::KeypointInfo(const KeypointInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeypointInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keypoint_names_){from._impl_.keypoint_names_}
    , decltype(_impl_.skeleton_){from._impl_.skeleton_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.KeypointInfo)
}

inline void KeypointInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keypoint_names_){arena}
    , decltype(_impl_.skeleton_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KeypointInfo::~KeypointInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.KeypointInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeypointInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keypoint_names_.~RepeatedPtrField();
  _impl_.skeleton_.~RepeatedPtrField();
}

void KeypointInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeypointInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.KeypointInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keypoint_names_.Clear();
  _impl_.skeleton_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeypointInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string keypoint_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keypoint_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.KeypointInfo.keypoint_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.KeypointEdge skeleton = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skeleton(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeypointInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.KeypointInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keypoint_names = 1;
  for (int i = 0, n = this->_internal_keypoint_names_size(); i < n; i++) {
    const auto& s = this->_internal_keypoint_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KeypointInfo.keypoint_names");
    target = stream->WriteString(1, s, target);
  }

  // repeated .clarifai.api.KeypointEdge skeleton = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skeleton_size()); i < n; i++) {
    const auto& repfield = this->_internal_skeleton(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.KeypointInfo)
  return target;
}

size_t KeypointInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.KeypointInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keypoint_names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.keypoint_names_.size());
  for (int i = 0, n = _impl_.keypoint_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.keypoint_names_.Get(i));
  }

  // repeated .clarifai.api.KeypointEdge skeleton = 2;
  total_size += 1UL * this->_internal_skeleton_size();
  for (const auto& msg : this->_impl_.skeleton_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeypointInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeypointInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeypointInfo::GetClassData() const { return &_class_data_; }


void KeypointInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeypointInfo*>(&to_msg);
  auto& from = static_cast<const KeypointInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.KeypointInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keypoint_names_.MergeFrom(from._impl_.keypoint_names_);
  _this->_impl_.skeleton_.MergeFrom(from._impl_.skeleton_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeypointInfo::CopyFrom(const KeypointInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.KeypointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeypointInfo::IsInitialized() const {
  return true;
}

void KeypointInfo::InternalSwap(KeypointInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keypoint_names_.InternalSwap(&other->_impl_.keypoint_names_);
  _impl_.skeleton_.InternalSwap(&other->_impl_.skeleton_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeypointInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[14]);
}

// ===================================================================

class KeypointEdge::_Internal {
 public:
};

KeypointEdge::KeypointEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.KeypointEdge)
}
KeypointEdge::KeypointEdge(const KeypointEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeypointEdge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.k1_){}
    , decltype(_impl_.k2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.k1_, &from._impl_.k1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.k2_) -
    reinterpret_cast<char*>(&_impl_.k1_)) + sizeof(_impl_.k2_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.KeypointEdge)
}

inline void KeypointEdge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.k1_){0u}
    , decltype(_impl_.k2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KeypointEdge::~KeypointEdge() {
  // @@protoc_insertion_point(destructor:clarifai.api.KeypointEdge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeypointEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeypointEdge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeypointEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.KeypointEdge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.k1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.k2_) -
      reinterpret_cast<char*>(&_impl_.k1_)) + sizeof(_impl_.k2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeypointEdge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 k1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.k1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 k2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.k2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeypointEdge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.KeypointEdge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 k1 = 1;
  if (this->_internal_k1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_k1(), target);
  }

  // uint32 k2 = 2;
  if (this->_internal_k2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_k2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.KeypointEdge)
  return target;
}

size_t KeypointEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.KeypointEdge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 k1 = 1;
  if (this->_internal_k1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_k1());
  }

  // uint32 k2 = 2;
  if (this->_internal_k2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_k2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeypointEdge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeypointEdge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeypointEdge::GetClassData() const { return &_class_data_; }


void KeypointEdge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeypointEdge*>(&to_msg);
  auto& from = static_cast<const KeypointEdge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.KeypointEdge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_k1() != 0) {
    _this->_internal_set_k1(from._internal_k1());
  }
  if (from._internal_k2() != 0) {
    _this->_internal_set_k2(from._internal_k2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeypointEdge::CopyFrom(const KeypointEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.KeypointEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeypointEdge::IsInitialized() const {
  return true;
}

void KeypointEdge::InternalSwap(KeypointEdge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeypointEdge, _impl_.k2_)
      + sizeof(KeypointEdge::_impl_.k2_)
      - PROTOBUF_FIELD_OFFSET(KeypointEdge, _impl_.k1_)>(
          reinterpret_cast<char*>(&_impl_.k1_),
          reinterpret_cast<char*>(&other->_impl_.k1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeypointEdge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[15]);
}

// ===================================================================

class ConceptExtraInfo::_Internal {
 public:
};

ConceptExtraInfo::ConceptExtraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConceptExtraInfo)
}
ConceptExtraInfo::ConceptExtraInfo(const ConceptExtraInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConceptExtraInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.is_rankable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.is_rankable_ = from._impl_.is_rankable_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptExtraInfo)
}

inline void ConceptExtraInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.is_rankable_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConceptExtraInfo::~ConceptExtraInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptExtraInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConceptExtraInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConceptExtraInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConceptExtraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptExtraInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.is_rankable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptExtraInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_rankable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_rankable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConceptExtraInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptExtraInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_rankable = 1;
  if (this->_internal_is_rankable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_rankable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptExtraInfo)
  return target;
}

size_t ConceptExtraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptExtraInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_rankable = 1;
  if (this->_internal_is_rankable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConceptExtraInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConceptExtraInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConceptExtraInfo::GetClassData() const { return &_class_data_; }


void ConceptExtraInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConceptExtraInfo*>(&to_msg);
  auto& from = static_cast<const ConceptExtraInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptExtraInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_rankable() != 0) {
    _this->_internal_set_is_rankable(from._internal_is_rankable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConceptExtraInfo::CopyFrom(const ConceptExtraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptExtraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptExtraInfo::IsInitialized() const {
  return true;
}

void ConceptExtraInfo::InternalSwap(ConceptExtraInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.is_rankable_, other->_impl_.is_rankable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptExtraInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[16]);
}

// ===================================================================

class ConceptCount::_Internal {
 public:
  static const ::clarifai::api::ConceptTypeCount& concept_type_count(const ConceptCount* msg);
  static const ::clarifai::api::DetailConceptCount& detail_concept_count(const ConceptCount* msg);
};

const ::clarifai::api::ConceptTypeCount&
ConceptCount::_Internal::concept_type_count(const ConceptCount* msg) {
  return *msg->_impl_.concept_type_count_;
}
const ::clarifai::api::DetailConceptCount&
ConceptCount::_Internal::detail_concept_count(const ConceptCount* msg) {
  return *msg->_impl_.detail_concept_count_;
}
ConceptCount::ConceptCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConceptCount)
}
ConceptCount::ConceptCount(const ConceptCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConceptCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.concept_type_count_){nullptr}
    , decltype(_impl_.detail_concept_count_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_concept_type_count()) {
    _this->_impl_.concept_type_count_ = new ::clarifai::api::ConceptTypeCount(*from._impl_.concept_type_count_);
  }
  if (from._internal_has_detail_concept_count()) {
    _this->_impl_.detail_concept_count_ = new ::clarifai::api::DetailConceptCount(*from._impl_.detail_concept_count_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptCount)
}

inline void ConceptCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.concept_type_count_){nullptr}
    , decltype(_impl_.detail_concept_count_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConceptCount::~ConceptCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConceptCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.concept_type_count_;
  if (this != internal_default_instance()) delete _impl_.detail_concept_count_;
}

void ConceptCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConceptCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.concept_type_count_ != nullptr) {
    delete _impl_.concept_type_count_;
  }
  _impl_.concept_type_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.detail_concept_count_ != nullptr) {
    delete _impl_.detail_concept_count_;
  }
  _impl_.detail_concept_count_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConceptCount.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConceptCount.name"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ConceptTypeCount concept_type_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept_type_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DetailConceptCount detail_concept_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail_concept_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConceptCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptCount.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptCount.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .clarifai.api.ConceptTypeCount concept_type_count = 3;
  if (this->_internal_has_concept_type_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::concept_type_count(this),
        _Internal::concept_type_count(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.DetailConceptCount detail_concept_count = 4;
  if (this->_internal_has_detail_concept_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::detail_concept_count(this),
        _Internal::detail_concept_count(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptCount)
  return target;
}

size_t ConceptCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .clarifai.api.ConceptTypeCount concept_type_count = 3;
  if (this->_internal_has_concept_type_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.concept_type_count_);
  }

  // .clarifai.api.DetailConceptCount detail_concept_count = 4;
  if (this->_internal_has_detail_concept_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.detail_concept_count_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConceptCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConceptCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConceptCount::GetClassData() const { return &_class_data_; }


void ConceptCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConceptCount*>(&to_msg);
  auto& from = static_cast<const ConceptCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_concept_type_count()) {
    _this->_internal_mutable_concept_type_count()->::clarifai::api::ConceptTypeCount::MergeFrom(
        from._internal_concept_type_count());
  }
  if (from._internal_has_detail_concept_count()) {
    _this->_internal_mutable_detail_concept_count()->::clarifai::api::DetailConceptCount::MergeFrom(
        from._internal_detail_concept_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConceptCount::CopyFrom(const ConceptCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptCount::IsInitialized() const {
  return true;
}

void ConceptCount::InternalSwap(ConceptCount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConceptCount, _impl_.detail_concept_count_)
      + sizeof(ConceptCount::_impl_.detail_concept_count_)
      - PROTOBUF_FIELD_OFFSET(ConceptCount, _impl_.concept_type_count_)>(
          reinterpret_cast<char*>(&_impl_.concept_type_count_),
          reinterpret_cast<char*>(&other->_impl_.concept_type_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[17]);
}

// ===================================================================

class ConceptTypeCount::_Internal {
 public:
};

ConceptTypeCount::ConceptTypeCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConceptTypeCount)
}
ConceptTypeCount::ConceptTypeCount(const ConceptTypeCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConceptTypeCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.positive_){}
    , decltype(_impl_.negative_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.positive_, &from._impl_.positive_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.negative_) -
    reinterpret_cast<char*>(&_impl_.positive_)) + sizeof(_impl_.negative_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptTypeCount)
}

inline void ConceptTypeCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.positive_){0u}
    , decltype(_impl_.negative_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConceptTypeCount::~ConceptTypeCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptTypeCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConceptTypeCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConceptTypeCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConceptTypeCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptTypeCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.positive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.negative_) -
      reinterpret_cast<char*>(&_impl_.positive_)) + sizeof(_impl_.negative_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptTypeCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 positive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.positive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 negative = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConceptTypeCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptTypeCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 positive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_positive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_positive(), target);
  }

  // uint32 negative = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_negative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_negative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptTypeCount)
  return target;
}

size_t ConceptTypeCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptTypeCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 positive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_positive() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_positive());
  }

  // uint32 negative = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_negative() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_negative());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConceptTypeCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConceptTypeCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConceptTypeCount::GetClassData() const { return &_class_data_; }


void ConceptTypeCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConceptTypeCount*>(&to_msg);
  auto& from = static_cast<const ConceptTypeCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptTypeCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_positive() != 0) {
    _this->_internal_set_positive(from._internal_positive());
  }
  if (from._internal_negative() != 0) {
    _this->_internal_set_negative(from._internal_negative());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConceptTypeCount::CopyFrom(const ConceptTypeCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptTypeCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptTypeCount::IsInitialized() const {
  return true;
}

void ConceptTypeCount::InternalSwap(ConceptTypeCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConceptTypeCount, _impl_.negative_)
      + sizeof(ConceptTypeCount::_impl_.negative_)
      - PROTOBUF_FIELD_OFFSET(ConceptTypeCount, _impl_.positive_)>(
          reinterpret_cast<char*>(&_impl_.positive_),
          reinterpret_cast<char*>(&other->_impl_.positive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptTypeCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[18]);
}

// ===================================================================

class DetailConceptCount::_Internal {
 public:
  static const ::clarifai::api::ConceptTypeCount& processed(const DetailConceptCount* msg);
  static const ::clarifai::api::ConceptTypeCount& to_process(const DetailConceptCount* msg);
  static const ::clarifai::api::ConceptTypeCount& errors(const DetailConceptCount* msg);
  static const ::clarifai::api::ConceptTypeCount& processing(const DetailConceptCount* msg);
};

const ::clarifai::api::ConceptTypeCount&
DetailConceptCount::_Internal::processed(const DetailConceptCount* msg) {
  return *msg->_impl_.processed_;
}
const ::clarifai::api::ConceptTypeCount&
DetailConceptCount::_Internal::to_process(const DetailConceptCount* msg) {
  return *msg->_impl_.to_process_;
}
const ::clarifai::api::ConceptTypeCount&
DetailConceptCount::_Internal::errors(const DetailConceptCount* msg) {
  return *msg->_impl_.errors_;
}
const ::clarifai::api::ConceptTypeCount&
DetailConceptCount::_Internal::processing(const DetailConceptCount* msg) {
  return *msg->_impl_.processing_;
}
DetailConceptCount::DetailConceptCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DetailConceptCount)
}
DetailConceptCount::DetailConceptCount(const DetailConceptCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetailConceptCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.processed_){nullptr}
    , decltype(_impl_.to_process_){nullptr}
    , decltype(_impl_.errors_){nullptr}
    , decltype(_impl_.processing_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_processed()) {
    _this->_impl_.processed_ = new ::clarifai::api::ConceptTypeCount(*from._impl_.processed_);
  }
  if (from._internal_has_to_process()) {
    _this->_impl_.to_process_ = new ::clarifai::api::ConceptTypeCount(*from._impl_.to_process_);
  }
  if (from._internal_has_errors()) {
    _this->_impl_.errors_ = new ::clarifai::api::ConceptTypeCount(*from._impl_.errors_);
  }
  if (from._internal_has_processing()) {
    _this->_impl_.processing_ = new ::clarifai::api::ConceptTypeCount(*from._impl_.processing_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DetailConceptCount)
}

inline void DetailConceptCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.processed_){nullptr}
    , decltype(_impl_.to_process_){nullptr}
    , decltype(_impl_.errors_){nullptr}
    , decltype(_impl_.processing_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DetailConceptCount::~DetailConceptCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.DetailConceptCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetailConceptCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.processed_;
  if (this != internal_default_instance()) delete _impl_.to_process_;
  if (this != internal_default_instance()) delete _impl_.errors_;
  if (this != internal_default_instance()) delete _impl_.processing_;
}

void DetailConceptCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetailConceptCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DetailConceptCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.processed_ != nullptr) {
    delete _impl_.processed_;
  }
  _impl_.processed_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.to_process_ != nullptr) {
    delete _impl_.to_process_;
  }
  _impl_.to_process_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.errors_ != nullptr) {
    delete _impl_.errors_;
  }
  _impl_.errors_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.processing_ != nullptr) {
    delete _impl_.processing_;
  }
  _impl_.processing_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailConceptCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.ConceptTypeCount processed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_processed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ConceptTypeCount to_process = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_process(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ConceptTypeCount errors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_errors(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ConceptTypeCount processing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetailConceptCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DetailConceptCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.ConceptTypeCount processed = 1;
  if (this->_internal_has_processed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::processed(this),
        _Internal::processed(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ConceptTypeCount to_process = 2;
  if (this->_internal_has_to_process()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::to_process(this),
        _Internal::to_process(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ConceptTypeCount errors = 3;
  if (this->_internal_has_errors()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::errors(this),
        _Internal::errors(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ConceptTypeCount processing = 4;
  if (this->_internal_has_processing()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::processing(this),
        _Internal::processing(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DetailConceptCount)
  return target;
}

size_t DetailConceptCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DetailConceptCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.ConceptTypeCount processed = 1;
  if (this->_internal_has_processed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.processed_);
  }

  // .clarifai.api.ConceptTypeCount to_process = 2;
  if (this->_internal_has_to_process()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_process_);
  }

  // .clarifai.api.ConceptTypeCount errors = 3;
  if (this->_internal_has_errors()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.errors_);
  }

  // .clarifai.api.ConceptTypeCount processing = 4;
  if (this->_internal_has_processing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.processing_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetailConceptCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetailConceptCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetailConceptCount::GetClassData() const { return &_class_data_; }


void DetailConceptCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetailConceptCount*>(&to_msg);
  auto& from = static_cast<const DetailConceptCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DetailConceptCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_processed()) {
    _this->_internal_mutable_processed()->::clarifai::api::ConceptTypeCount::MergeFrom(
        from._internal_processed());
  }
  if (from._internal_has_to_process()) {
    _this->_internal_mutable_to_process()->::clarifai::api::ConceptTypeCount::MergeFrom(
        from._internal_to_process());
  }
  if (from._internal_has_errors()) {
    _this->_internal_mutable_errors()->::clarifai::api::ConceptTypeCount::MergeFrom(
        from._internal_errors());
  }
  if (from._internal_has_processing()) {
    _this->_internal_mutable_processing()->::clarifai::api::ConceptTypeCount::MergeFrom(
        from._internal_processing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetailConceptCount::CopyFrom(const DetailConceptCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DetailConceptCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailConceptCount::IsInitialized() const {
  return true;
}

void DetailConceptCount::InternalSwap(DetailConceptCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetailConceptCount, _impl_.processing_)
      + sizeof(DetailConceptCount::_impl_.processing_)
      - PROTOBUF_FIELD_OFFSET(DetailConceptCount, _impl_.processed_)>(
          reinterpret_cast<char*>(&_impl_.processed_),
          reinterpret_cast<char*>(&other->_impl_.processed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailConceptCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[19]);
}

// ===================================================================

class ConceptQuery::_Internal {
 public:
};

ConceptQuery::ConceptQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConceptQuery)
}
ConceptQuery::ConceptQuery(const ConceptQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConceptQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.workflow_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    _this->_impl_.workflow_id_.Set(from._internal_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptQuery)
}

inline void ConceptQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.workflow_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConceptQuery::~ConceptQuery() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConceptQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.language_.Destroy();
  _impl_.workflow_id_.Destroy();
}

void ConceptQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConceptQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  _impl_.workflow_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConceptQuery.name"));
        } else
          goto handle_unusual;
        continue;
      // string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConceptQuery.language"));
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConceptQuery.workflow_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConceptQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptQuery.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptQuery.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  // string workflow_id = 3;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptQuery.workflow_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_workflow_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptQuery)
  return target;
}

size_t ConceptQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string workflow_id = 3;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConceptQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConceptQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConceptQuery::GetClassData() const { return &_class_data_; }


void ConceptQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConceptQuery*>(&to_msg);
  auto& from = static_cast<const ConceptQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (!from._internal_workflow_id().empty()) {
    _this->_internal_set_workflow_id(from._internal_workflow_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConceptQuery::CopyFrom(const ConceptQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptQuery::IsInitialized() const {
  return true;
}

void ConceptQuery::InternalSwap(ConceptQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_id_, lhs_arena,
      &other->_impl_.workflow_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[20]);
}

// ===================================================================

class ConceptRelation::_Internal {
 public:
  static const ::clarifai::api::Concept& subject_concept(const ConceptRelation* msg);
  static const ::clarifai::api::Concept& object_concept(const ConceptRelation* msg);
  static const ::clarifai::api::Visibility& visibility(const ConceptRelation* msg);
};

const ::clarifai::api::Concept&
ConceptRelation::_Internal::subject_concept(const ConceptRelation* msg) {
  return *msg->_impl_.subject_concept_;
}
const ::clarifai::api::Concept&
ConceptRelation::_Internal::object_concept(const ConceptRelation* msg) {
  return *msg->_impl_.object_concept_;
}
const ::clarifai::api::Visibility&
ConceptRelation::_Internal::visibility(const ConceptRelation* msg) {
  return *msg->_impl_.visibility_;
}
ConceptRelation::ConceptRelation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConceptRelation)
}
ConceptRelation::ConceptRelation(const ConceptRelation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConceptRelation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.predicate_){}
    , decltype(_impl_.knowledge_graph_id_){}
    , decltype(_impl_.subject_concept_){nullptr}
    , decltype(_impl_.object_concept_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.predicate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.predicate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_predicate().empty()) {
    _this->_impl_.predicate_.Set(from._internal_predicate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.knowledge_graph_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.knowledge_graph_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_knowledge_graph_id().empty()) {
    _this->_impl_.knowledge_graph_id_.Set(from._internal_knowledge_graph_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_subject_concept()) {
    _this->_impl_.subject_concept_ = new ::clarifai::api::Concept(*from._impl_.subject_concept_);
  }
  if (from._internal_has_object_concept()) {
    _this->_impl_.object_concept_ = new ::clarifai::api::Concept(*from._impl_.object_concept_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptRelation)
}

inline void ConceptRelation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.predicate_){}
    , decltype(_impl_.knowledge_graph_id_){}
    , decltype(_impl_.subject_concept_){nullptr}
    , decltype(_impl_.object_concept_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.predicate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.predicate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.knowledge_graph_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.knowledge_graph_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConceptRelation::~ConceptRelation() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptRelation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConceptRelation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.predicate_.Destroy();
  _impl_.knowledge_graph_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.subject_concept_;
  if (this != internal_default_instance()) delete _impl_.object_concept_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
}

void ConceptRelation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConceptRelation::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptRelation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.predicate_.ClearToEmpty();
  _impl_.knowledge_graph_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.subject_concept_ != nullptr) {
    delete _impl_.subject_concept_;
  }
  _impl_.subject_concept_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.object_concept_ != nullptr) {
    delete _impl_.object_concept_;
  }
  _impl_.object_concept_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptRelation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConceptRelation.id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Concept subject_concept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject_concept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Concept object_concept = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_concept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string predicate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_predicate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConceptRelation.predicate"));
        } else
          goto handle_unusual;
        continue;
      // string knowledge_graph_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_knowledge_graph_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConceptRelation.knowledge_graph_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConceptRelation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptRelation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptRelation.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.Concept subject_concept = 2;
  if (this->_internal_has_subject_concept()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::subject_concept(this),
        _Internal::subject_concept(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Concept object_concept = 3;
  if (this->_internal_has_object_concept()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::object_concept(this),
        _Internal::object_concept(this).GetCachedSize(), target, stream);
  }

  // string predicate = 4;
  if (!this->_internal_predicate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_predicate().data(), static_cast<int>(this->_internal_predicate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptRelation.predicate");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_predicate(), target);
  }

  // string knowledge_graph_id = 5;
  if (!this->_internal_knowledge_graph_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_knowledge_graph_id().data(), static_cast<int>(this->_internal_knowledge_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptRelation.knowledge_graph_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_knowledge_graph_id(), target);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptRelation)
  return target;
}

size_t ConceptRelation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptRelation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string predicate = 4;
  if (!this->_internal_predicate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_predicate());
  }

  // string knowledge_graph_id = 5;
  if (!this->_internal_knowledge_graph_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_knowledge_graph_id());
  }

  // .clarifai.api.Concept subject_concept = 2;
  if (this->_internal_has_subject_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subject_concept_);
  }

  // .clarifai.api.Concept object_concept = 3;
  if (this->_internal_has_object_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_concept_);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConceptRelation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConceptRelation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConceptRelation::GetClassData() const { return &_class_data_; }


void ConceptRelation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConceptRelation*>(&to_msg);
  auto& from = static_cast<const ConceptRelation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptRelation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_predicate().empty()) {
    _this->_internal_set_predicate(from._internal_predicate());
  }
  if (!from._internal_knowledge_graph_id().empty()) {
    _this->_internal_set_knowledge_graph_id(from._internal_knowledge_graph_id());
  }
  if (from._internal_has_subject_concept()) {
    _this->_internal_mutable_subject_concept()->::clarifai::api::Concept::MergeFrom(
        from._internal_subject_concept());
  }
  if (from._internal_has_object_concept()) {
    _this->_internal_mutable_object_concept()->::clarifai::api::Concept::MergeFrom(
        from._internal_object_concept());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConceptRelation::CopyFrom(const ConceptRelation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptRelation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptRelation::IsInitialized() const {
  return true;
}

void ConceptRelation::InternalSwap(ConceptRelation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.predicate_, lhs_arena,
      &other->_impl_.predicate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.knowledge_graph_id_, lhs_arena,
      &other->_impl_.knowledge_graph_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConceptRelation, _impl_.visibility_)
      + sizeof(ConceptRelation::_impl_.visibility_)
      - PROTOBUF_FIELD_OFFSET(ConceptRelation, _impl_.subject_concept_)>(
          reinterpret_cast<char*>(&_impl_.subject_concept_),
          reinterpret_cast<char*>(&other->_impl_.subject_concept_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptRelation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[21]);
}

// ===================================================================

class KnowledgeGraph::_Internal {
 public:
};

KnowledgeGraph::KnowledgeGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.KnowledgeGraph)
}
KnowledgeGraph::KnowledgeGraph(const KnowledgeGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KnowledgeGraph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.examples_app_id_){}
    , decltype(_impl_.sampled_examples_app_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.examples_app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.examples_app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_examples_app_id().empty()) {
    _this->_impl_.examples_app_id_.Set(from._internal_examples_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sampled_examples_app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sampled_examples_app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sampled_examples_app_id().empty()) {
    _this->_impl_.sampled_examples_app_id_.Set(from._internal_sampled_examples_app_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.KnowledgeGraph)
}

inline void KnowledgeGraph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.examples_app_id_){}
    , decltype(_impl_.sampled_examples_app_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.examples_app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.examples_app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sampled_examples_app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sampled_examples_app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KnowledgeGraph::~KnowledgeGraph() {
  // @@protoc_insertion_point(destructor:clarifai.api.KnowledgeGraph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KnowledgeGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.examples_app_id_.Destroy();
  _impl_.sampled_examples_app_id_.Destroy();
}

void KnowledgeGraph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KnowledgeGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.KnowledgeGraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.examples_app_id_.ClearToEmpty();
  _impl_.sampled_examples_app_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KnowledgeGraph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.KnowledgeGraph.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.KnowledgeGraph.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.KnowledgeGraph.description"));
        } else
          goto handle_unusual;
        continue;
      // string examples_app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_examples_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.KnowledgeGraph.examples_app_id"));
        } else
          goto handle_unusual;
        continue;
      // string sampled_examples_app_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sampled_examples_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.KnowledgeGraph.sampled_examples_app_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KnowledgeGraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.KnowledgeGraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KnowledgeGraph.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KnowledgeGraph.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KnowledgeGraph.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string examples_app_id = 4;
  if (!this->_internal_examples_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_examples_app_id().data(), static_cast<int>(this->_internal_examples_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KnowledgeGraph.examples_app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_examples_app_id(), target);
  }

  // string sampled_examples_app_id = 5;
  if (!this->_internal_sampled_examples_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sampled_examples_app_id().data(), static_cast<int>(this->_internal_sampled_examples_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KnowledgeGraph.sampled_examples_app_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sampled_examples_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.KnowledgeGraph)
  return target;
}

size_t KnowledgeGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.KnowledgeGraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string examples_app_id = 4;
  if (!this->_internal_examples_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_examples_app_id());
  }

  // string sampled_examples_app_id = 5;
  if (!this->_internal_sampled_examples_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sampled_examples_app_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KnowledgeGraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KnowledgeGraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KnowledgeGraph::GetClassData() const { return &_class_data_; }


void KnowledgeGraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KnowledgeGraph*>(&to_msg);
  auto& from = static_cast<const KnowledgeGraph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.KnowledgeGraph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_examples_app_id().empty()) {
    _this->_internal_set_examples_app_id(from._internal_examples_app_id());
  }
  if (!from._internal_sampled_examples_app_id().empty()) {
    _this->_internal_set_sampled_examples_app_id(from._internal_sampled_examples_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KnowledgeGraph::CopyFrom(const KnowledgeGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.KnowledgeGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KnowledgeGraph::IsInitialized() const {
  return true;
}

void KnowledgeGraph::InternalSwap(KnowledgeGraph* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.examples_app_id_, lhs_arena,
      &other->_impl_.examples_app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sampled_examples_app_id_, lhs_arena,
      &other->_impl_.sampled_examples_app_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KnowledgeGraph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[22]);
}

// ===================================================================

class ConceptMappingJob::_Internal {
 public:
};

ConceptMappingJob::ConceptMappingJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConceptMappingJob)
}
ConceptMappingJob::ConceptMappingJob(const ConceptMappingJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConceptMappingJob* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_ids_){from._impl_.concept_ids_}
    , decltype(_impl_.knowledge_graph_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.knowledge_graph_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.knowledge_graph_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_knowledge_graph_id().empty()) {
    _this->_impl_.knowledge_graph_id_.Set(from._internal_knowledge_graph_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptMappingJob)
}

inline void ConceptMappingJob::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_ids_){arena}
    , decltype(_impl_.knowledge_graph_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.knowledge_graph_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.knowledge_graph_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConceptMappingJob::~ConceptMappingJob() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptMappingJob)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConceptMappingJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_ids_.~RepeatedPtrField();
  _impl_.knowledge_graph_id_.Destroy();
}

void ConceptMappingJob::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConceptMappingJob::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptMappingJob)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_ids_.Clear();
  _impl_.knowledge_graph_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptMappingJob::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string knowledge_graph_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_knowledge_graph_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConceptMappingJob.knowledge_graph_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string concept_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConceptMappingJob.concept_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConceptMappingJob::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptMappingJob)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string knowledge_graph_id = 1;
  if (!this->_internal_knowledge_graph_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_knowledge_graph_id().data(), static_cast<int>(this->_internal_knowledge_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptMappingJob.knowledge_graph_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_knowledge_graph_id(), target);
  }

  // repeated string concept_ids = 2;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptMappingJob.concept_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptMappingJob)
  return target;
}

size_t ConceptMappingJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptMappingJob)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string concept_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.concept_ids_.size());
  for (int i = 0, n = _impl_.concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.concept_ids_.Get(i));
  }

  // string knowledge_graph_id = 1;
  if (!this->_internal_knowledge_graph_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_knowledge_graph_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConceptMappingJob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConceptMappingJob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConceptMappingJob::GetClassData() const { return &_class_data_; }


void ConceptMappingJob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConceptMappingJob*>(&to_msg);
  auto& from = static_cast<const ConceptMappingJob&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptMappingJob)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concept_ids_.MergeFrom(from._impl_.concept_ids_);
  if (!from._internal_knowledge_graph_id().empty()) {
    _this->_internal_set_knowledge_graph_id(from._internal_knowledge_graph_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConceptMappingJob::CopyFrom(const ConceptMappingJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptMappingJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptMappingJob::IsInitialized() const {
  return true;
}

void ConceptMappingJob::InternalSwap(ConceptMappingJob* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concept_ids_.InternalSwap(&other->_impl_.concept_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.knowledge_graph_id_, lhs_arena,
      &other->_impl_.knowledge_graph_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptMappingJob::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[23]);
}

// ===================================================================

class ConceptLanguage::_Internal {
 public:
};

ConceptLanguage::ConceptLanguage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConceptLanguage)
}
ConceptLanguage::ConceptLanguage(const ConceptLanguage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConceptLanguage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.definition_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.definition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.definition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_definition().empty()) {
    _this->_impl_.definition_.Set(from._internal_definition(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptLanguage)
}

inline void ConceptLanguage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.definition_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.definition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.definition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConceptLanguage::~ConceptLanguage() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptLanguage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConceptLanguage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.definition_.Destroy();
}

void ConceptLanguage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConceptLanguage::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptLanguage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.definition_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptLanguage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConceptLanguage.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConceptLanguage.name"));
        } else
          goto handle_unusual;
        continue;
      // string definition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_definition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConceptLanguage.definition"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConceptLanguage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptLanguage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptLanguage.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptLanguage.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string definition = 3;
  if (!this->_internal_definition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_definition().data(), static_cast<int>(this->_internal_definition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptLanguage.definition");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_definition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptLanguage)
  return target;
}

size_t ConceptLanguage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptLanguage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string definition = 3;
  if (!this->_internal_definition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_definition());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConceptLanguage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConceptLanguage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConceptLanguage::GetClassData() const { return &_class_data_; }


void ConceptLanguage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConceptLanguage*>(&to_msg);
  auto& from = static_cast<const ConceptLanguage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptLanguage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_definition().empty()) {
    _this->_internal_set_definition(from._internal_definition());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConceptLanguage::CopyFrom(const ConceptLanguage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptLanguage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptLanguage::IsInitialized() const {
  return true;
}

void ConceptLanguage::InternalSwap(ConceptLanguage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.definition_, lhs_arena,
      &other->_impl_.definition_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptLanguage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[24]);
}

// ===================================================================

class Data::_Internal {
 public:
  static const ::clarifai::api::Image& image(const Data* msg);
  static const ::clarifai::api::Video& video(const Data* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const Data* msg);
  static const ::clarifai::api::Geo& geo(const Data* msg);
  static const ::clarifai::api::Text& text(const Data* msg);
  static const ::clarifai::api::Audio& audio(const Data* msg);
};

const ::clarifai::api::Image&
Data::_Internal::image(const Data* msg) {
  return *msg->_impl_.image_;
}
const ::clarifai::api::Video&
Data::_Internal::video(const Data* msg) {
  return *msg->_impl_.video_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Data::_Internal::metadata(const Data* msg) {
  return *msg->_impl_.metadata_;
}
const ::clarifai::api::Geo&
Data::_Internal::geo(const Data* msg) {
  return *msg->_impl_.geo_;
}
const ::clarifai::api::Text&
Data::_Internal::text(const Data* msg) {
  return *msg->_impl_.text_;
}
const ::clarifai::api::Audio&
Data::_Internal::audio(const Data* msg) {
  return *msg->_impl_.audio_;
}
void Data::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concepts_){from._impl_.concepts_}
    , decltype(_impl_.colors_){from._impl_.colors_}
    , decltype(_impl_.clusters_){from._impl_.clusters_}
    , decltype(_impl_.embeddings_){from._impl_.embeddings_}
    , decltype(_impl_.regions_){from._impl_.regions_}
    , decltype(_impl_.frames_){from._impl_.frames_}
    , decltype(_impl_.tracks_){from._impl_.tracks_}
    , decltype(_impl_.time_segments_){from._impl_.time_segments_}
    , decltype(_impl_.hits_){from._impl_.hits_}
    , decltype(_impl_.heatmaps_){from._impl_.heatmaps_}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.video_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.geo_){nullptr}
    , decltype(_impl_.text_){nullptr}
    , decltype(_impl_.audio_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::clarifai::api::Image(*from._impl_.image_);
  }
  if (from._internal_has_video()) {
    _this->_impl_.video_ = new ::clarifai::api::Video(*from._impl_.video_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_geo()) {
    _this->_impl_.geo_ = new ::clarifai::api::Geo(*from._impl_.geo_);
  }
  if (from._internal_has_text()) {
    _this->_impl_.text_ = new ::clarifai::api::Text(*from._impl_.text_);
  }
  if (from._internal_has_audio()) {
    _this->_impl_.audio_ = new ::clarifai::api::Audio(*from._impl_.audio_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Data)
}

inline void Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concepts_){arena}
    , decltype(_impl_.colors_){arena}
    , decltype(_impl_.clusters_){arena}
    , decltype(_impl_.embeddings_){arena}
    , decltype(_impl_.regions_){arena}
    , decltype(_impl_.frames_){arena}
    , decltype(_impl_.tracks_){arena}
    , decltype(_impl_.time_segments_){arena}
    , decltype(_impl_.hits_){arena}
    , decltype(_impl_.heatmaps_){arena}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.video_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.geo_){nullptr}
    , decltype(_impl_.text_){nullptr}
    , decltype(_impl_.audio_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:clarifai.api.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concepts_.~RepeatedPtrField();
  _impl_.colors_.~RepeatedPtrField();
  _impl_.clusters_.~RepeatedPtrField();
  _impl_.embeddings_.~RepeatedPtrField();
  _impl_.regions_.~RepeatedPtrField();
  _impl_.frames_.~RepeatedPtrField();
  _impl_.tracks_.~RepeatedPtrField();
  _impl_.time_segments_.~RepeatedPtrField();
  _impl_.hits_.~RepeatedPtrField();
  _impl_.heatmaps_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.image_;
  if (this != internal_default_instance()) delete _impl_.video_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.geo_;
  if (this != internal_default_instance()) delete _impl_.text_;
  if (this != internal_default_instance()) delete _impl_.audio_;
}

void Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concepts_.Clear();
  _impl_.colors_.Clear();
  _impl_.clusters_.Clear();
  _impl_.embeddings_.Clear();
  _impl_.regions_.Clear();
  _impl_.frames_.Clear();
  _impl_.tracks_.Clear();
  _impl_.time_segments_.Clear();
  _impl_.hits_.Clear();
  _impl_.heatmaps_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.video_ != nullptr) {
    delete _impl_.video_;
  }
  _impl_.video_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.geo_ != nullptr) {
    delete _impl_.geo_;
  }
  _impl_.geo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.text_ != nullptr) {
    delete _impl_.text_;
  }
  _impl_.text_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.audio_ != nullptr) {
    delete _impl_.audio_;
  }
  _impl_.audio_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Video video = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Geo geo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Color colors = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Cluster clusters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clusters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Embedding embeddings = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_embeddings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Region regions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Frame frames = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Text text = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Audio audio = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Track tracks = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.TimeSegment time_segments = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_time_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit hits = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Image heatmaps = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_heatmaps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Image image = 1;
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Video video = 2;
  if (this->_internal_has_video()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::video(this),
        _Internal::video(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Concept concepts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_concepts_size()); i < n; i++) {
    const auto& repfield = this->_internal_concepts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Geo geo = 6;
  if (this->_internal_has_geo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::geo(this),
        _Internal::geo(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Color colors = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_colors_size()); i < n; i++) {
    const auto& repfield = this->_internal_colors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Cluster clusters = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_clusters_size()); i < n; i++) {
    const auto& repfield = this->_internal_clusters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Embedding embeddings = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_embeddings_size()); i < n; i++) {
    const auto& repfield = this->_internal_embeddings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Region regions = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_regions_size()); i < n; i++) {
    const auto& repfield = this->_internal_regions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Frame frames = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_frames_size()); i < n; i++) {
    const auto& repfield = this->_internal_frames(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.Text text = 13;
  if (this->_internal_has_text()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::text(this),
        _Internal::text(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Audio audio = 14;
  if (this->_internal_has_audio()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::audio(this),
        _Internal::audio(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Track tracks = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tracks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tracks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.TimeSegment time_segments = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_time_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_time_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Hit hits = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hits_size()); i < n; i++) {
    const auto& repfield = this->_internal_hits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Image heatmaps = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_heatmaps_size()); i < n; i++) {
    const auto& repfield = this->_internal_heatmaps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 3;
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->_impl_.concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Color colors = 7;
  total_size += 1UL * this->_internal_colors_size();
  for (const auto& msg : this->_impl_.colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Cluster clusters = 8;
  total_size += 1UL * this->_internal_clusters_size();
  for (const auto& msg : this->_impl_.clusters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Embedding embeddings = 9;
  total_size += 1UL * this->_internal_embeddings_size();
  for (const auto& msg : this->_impl_.embeddings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Region regions = 11;
  total_size += 1UL * this->_internal_regions_size();
  for (const auto& msg : this->_impl_.regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Frame frames = 12;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->_impl_.frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Track tracks = 15;
  total_size += 1UL * this->_internal_tracks_size();
  for (const auto& msg : this->_impl_.tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.TimeSegment time_segments = 16;
  total_size += 2UL * this->_internal_time_segments_size();
  for (const auto& msg : this->_impl_.time_segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Hit hits = 17;
  total_size += 2UL * this->_internal_hits_size();
  for (const auto& msg : this->_impl_.hits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Image heatmaps = 18;
  total_size += 2UL * this->_internal_heatmaps_size();
  for (const auto& msg : this->_impl_.heatmaps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.Image image = 1;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_);
  }

  // .clarifai.api.Video video = 2;
  if (this->_internal_has_video()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.video_);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .clarifai.api.Geo geo = 6;
  if (this->_internal_has_geo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.geo_);
  }

  // .clarifai.api.Text text = 13;
  if (this->_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_);
  }

  // .clarifai.api.Audio audio = 14;
  if (this->_internal_has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.audio_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Data::GetClassData() const { return &_class_data_; }


void Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Data*>(&to_msg);
  auto& from = static_cast<const Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concepts_.MergeFrom(from._impl_.concepts_);
  _this->_impl_.colors_.MergeFrom(from._impl_.colors_);
  _this->_impl_.clusters_.MergeFrom(from._impl_.clusters_);
  _this->_impl_.embeddings_.MergeFrom(from._impl_.embeddings_);
  _this->_impl_.regions_.MergeFrom(from._impl_.regions_);
  _this->_impl_.frames_.MergeFrom(from._impl_.frames_);
  _this->_impl_.tracks_.MergeFrom(from._impl_.tracks_);
  _this->_impl_.time_segments_.MergeFrom(from._impl_.time_segments_);
  _this->_impl_.hits_.MergeFrom(from._impl_.hits_);
  _this->_impl_.heatmaps_.MergeFrom(from._impl_.heatmaps_);
  if (from._internal_has_image()) {
    _this->_internal_mutable_image()->::clarifai::api::Image::MergeFrom(
        from._internal_image());
  }
  if (from._internal_has_video()) {
    _this->_internal_mutable_video()->::clarifai::api::Video::MergeFrom(
        from._internal_video());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_geo()) {
    _this->_internal_mutable_geo()->::clarifai::api::Geo::MergeFrom(
        from._internal_geo());
  }
  if (from._internal_has_text()) {
    _this->_internal_mutable_text()->::clarifai::api::Text::MergeFrom(
        from._internal_text());
  }
  if (from._internal_has_audio()) {
    _this->_internal_mutable_audio()->::clarifai::api::Audio::MergeFrom(
        from._internal_audio());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concepts_.InternalSwap(&other->_impl_.concepts_);
  _impl_.colors_.InternalSwap(&other->_impl_.colors_);
  _impl_.clusters_.InternalSwap(&other->_impl_.clusters_);
  _impl_.embeddings_.InternalSwap(&other->_impl_.embeddings_);
  _impl_.regions_.InternalSwap(&other->_impl_.regions_);
  _impl_.frames_.InternalSwap(&other->_impl_.frames_);
  _impl_.tracks_.InternalSwap(&other->_impl_.tracks_);
  _impl_.time_segments_.InternalSwap(&other->_impl_.time_segments_);
  _impl_.hits_.InternalSwap(&other->_impl_.hits_);
  _impl_.heatmaps_.InternalSwap(&other->_impl_.heatmaps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Data, _impl_.audio_)
      + sizeof(Data::_impl_.audio_)
      - PROTOBUF_FIELD_OFFSET(Data, _impl_.image_)>(
          reinterpret_cast<char*>(&_impl_.image_),
          reinterpret_cast<char*>(&other->_impl_.image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[25]);
}

// ===================================================================

class Region::_Internal {
 public:
  static const ::clarifai::api::RegionInfo& region_info(const Region* msg);
  static const ::clarifai::api::Data& data(const Region* msg);
};

const ::clarifai::api::RegionInfo&
Region::_Internal::region_info(const Region* msg) {
  return *msg->_impl_.region_info_;
}
const ::clarifai::api::Data&
Region::_Internal::data(const Region* msg) {
  return *msg->_impl_.data_;
}
Region::Region(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Region)
}
Region::Region(const Region& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Region* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.track_id_){}
    , decltype(_impl_.region_info_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.track_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_id().empty()) {
    _this->_impl_.track_id_.Set(from._internal_track_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_region_info()) {
    _this->_impl_.region_info_ = new ::clarifai::api::RegionInfo(*from._impl_.region_info_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::clarifai::api::Data(*from._impl_.data_);
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Region)
}

inline void Region::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.track_id_){}
    , decltype(_impl_.region_info_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.track_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Region::~Region() {
  // @@protoc_insertion_point(destructor:clarifai.api.Region)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Region::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.track_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.region_info_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void Region::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Region::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Region)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.track_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.region_info_ != nullptr) {
    delete _impl_.region_info_;
  }
  _impl_.region_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Region::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Region.id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.RegionInfo region_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string track_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_track_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Region.track_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Region::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Region)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Region.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.RegionInfo region_info = 2;
  if (this->_internal_has_region_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::region_info(this),
        _Internal::region_info(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Data data = 3;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // float value = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_value(), target);
  }

  // string track_id = 5;
  if (!this->_internal_track_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_id().data(), static_cast<int>(this->_internal_track_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Region.track_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_track_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Region)
  return target;
}

size_t Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Region)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string track_id = 5;
  if (!this->_internal_track_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_id());
  }

  // .clarifai.api.RegionInfo region_info = 2;
  if (this->_internal_has_region_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.region_info_);
  }

  // .clarifai.api.Data data = 3;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // float value = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Region::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Region::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Region::GetClassData() const { return &_class_data_; }


void Region::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Region*>(&to_msg);
  auto& from = static_cast<const Region&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Region)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_track_id().empty()) {
    _this->_internal_set_track_id(from._internal_track_id());
  }
  if (from._internal_has_region_info()) {
    _this->_internal_mutable_region_info()->::clarifai::api::RegionInfo::MergeFrom(
        from._internal_region_info());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::clarifai::api::Data::MergeFrom(
        from._internal_data());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Region::CopyFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Region::IsInitialized() const {
  return true;
}

void Region::InternalSwap(Region* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_id_, lhs_arena,
      &other->_impl_.track_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Region, _impl_.value_)
      + sizeof(Region::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(Region, _impl_.region_info_)>(
          reinterpret_cast<char*>(&_impl_.region_info_),
          reinterpret_cast<char*>(&other->_impl_.region_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Region::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[26]);
}

// ===================================================================

class RegionInfo::_Internal {
 public:
  static const ::clarifai::api::BoundingBox& bounding_box(const RegionInfo* msg);
  static const ::clarifai::api::Mask& mask(const RegionInfo* msg);
  static const ::clarifai::api::Polygon& polygon(const RegionInfo* msg);
  static const ::clarifai::api::Point& point(const RegionInfo* msg);
  static const ::clarifai::api::Span& span(const RegionInfo* msg);
  static const ::clarifai::api::Token& token(const RegionInfo* msg);
};

const ::clarifai::api::BoundingBox&
RegionInfo::_Internal::bounding_box(const RegionInfo* msg) {
  return *msg->_impl_.bounding_box_;
}
const ::clarifai::api::Mask&
RegionInfo::_Internal::mask(const RegionInfo* msg) {
  return *msg->_impl_.mask_;
}
const ::clarifai::api::Polygon&
RegionInfo::_Internal::polygon(const RegionInfo* msg) {
  return *msg->_impl_.polygon_;
}
const ::clarifai::api::Point&
RegionInfo::_Internal::point(const RegionInfo* msg) {
  return *msg->_impl_.point_;
}
const ::clarifai::api::Span&
RegionInfo::_Internal::span(const RegionInfo* msg) {
  return *msg->_impl_.span_;
}
const ::clarifai::api::Token&
RegionInfo::_Internal::token(const RegionInfo* msg) {
  return *msg->_impl_.token_;
}
RegionInfo::RegionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.RegionInfo)
}
RegionInfo::RegionInfo(const RegionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keypoint_locations_){from._impl_.keypoint_locations_}
    , decltype(_impl_.bounding_box_){nullptr}
    , decltype(_impl_.mask_){nullptr}
    , decltype(_impl_.polygon_){nullptr}
    , decltype(_impl_.point_){nullptr}
    , decltype(_impl_.span_){nullptr}
    , decltype(_impl_.token_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bounding_box()) {
    _this->_impl_.bounding_box_ = new ::clarifai::api::BoundingBox(*from._impl_.bounding_box_);
  }
  if (from._internal_has_mask()) {
    _this->_impl_.mask_ = new ::clarifai::api::Mask(*from._impl_.mask_);
  }
  if (from._internal_has_polygon()) {
    _this->_impl_.polygon_ = new ::clarifai::api::Polygon(*from._impl_.polygon_);
  }
  if (from._internal_has_point()) {
    _this->_impl_.point_ = new ::clarifai::api::Point(*from._impl_.point_);
  }
  if (from._internal_has_span()) {
    _this->_impl_.span_ = new ::clarifai::api::Span(*from._impl_.span_);
  }
  if (from._internal_has_token()) {
    _this->_impl_.token_ = new ::clarifai::api::Token(*from._impl_.token_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.RegionInfo)
}

inline void RegionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keypoint_locations_){arena}
    , decltype(_impl_.bounding_box_){nullptr}
    , decltype(_impl_.mask_){nullptr}
    , decltype(_impl_.polygon_){nullptr}
    , decltype(_impl_.point_){nullptr}
    , decltype(_impl_.span_){nullptr}
    , decltype(_impl_.token_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegionInfo::~RegionInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.RegionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keypoint_locations_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.bounding_box_;
  if (this != internal_default_instance()) delete _impl_.mask_;
  if (this != internal_default_instance()) delete _impl_.polygon_;
  if (this != internal_default_instance()) delete _impl_.point_;
  if (this != internal_default_instance()) delete _impl_.span_;
  if (this != internal_default_instance()) delete _impl_.token_;
}

void RegionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.RegionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keypoint_locations_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.bounding_box_ != nullptr) {
    delete _impl_.bounding_box_;
  }
  _impl_.bounding_box_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mask_ != nullptr) {
    delete _impl_.mask_;
  }
  _impl_.mask_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.polygon_ != nullptr) {
    delete _impl_.polygon_;
  }
  _impl_.polygon_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.point_ != nullptr) {
    delete _impl_.point_;
  }
  _impl_.point_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.span_ != nullptr) {
    delete _impl_.span_;
  }
  _impl_.span_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.token_ != nullptr) {
    delete _impl_.token_;
  }
  _impl_.token_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.BoundingBox bounding_box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounding_box(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Mask mask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Polygon polygon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Point point = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Span span = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_span(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Token token = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Point keypoint_locations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keypoint_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.RegionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.BoundingBox bounding_box = 1;
  if (this->_internal_has_bounding_box()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bounding_box(this),
        _Internal::bounding_box(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Mask mask = 4;
  if (this->_internal_has_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::mask(this),
        _Internal::mask(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Polygon polygon = 5;
  if (this->_internal_has_polygon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::polygon(this),
        _Internal::polygon(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Point point = 6;
  if (this->_internal_has_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::point(this),
        _Internal::point(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Span span = 7;
  if (this->_internal_has_span()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::span(this),
        _Internal::span(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Token token = 8;
  if (this->_internal_has_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::token(this),
        _Internal::token(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Point keypoint_locations = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keypoint_locations_size()); i < n; i++) {
    const auto& repfield = this->_internal_keypoint_locations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.RegionInfo)
  return target;
}

size_t RegionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.RegionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Point keypoint_locations = 9;
  total_size += 1UL * this->_internal_keypoint_locations_size();
  for (const auto& msg : this->_impl_.keypoint_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.BoundingBox bounding_box = 1;
  if (this->_internal_has_bounding_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bounding_box_);
  }

  // .clarifai.api.Mask mask = 4;
  if (this->_internal_has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mask_);
  }

  // .clarifai.api.Polygon polygon = 5;
  if (this->_internal_has_polygon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.polygon_);
  }

  // .clarifai.api.Point point = 6;
  if (this->_internal_has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.point_);
  }

  // .clarifai.api.Span span = 7;
  if (this->_internal_has_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.span_);
  }

  // .clarifai.api.Token token = 8;
  if (this->_internal_has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.token_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegionInfo::GetClassData() const { return &_class_data_; }


void RegionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegionInfo*>(&to_msg);
  auto& from = static_cast<const RegionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.RegionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keypoint_locations_.MergeFrom(from._impl_.keypoint_locations_);
  if (from._internal_has_bounding_box()) {
    _this->_internal_mutable_bounding_box()->::clarifai::api::BoundingBox::MergeFrom(
        from._internal_bounding_box());
  }
  if (from._internal_has_mask()) {
    _this->_internal_mutable_mask()->::clarifai::api::Mask::MergeFrom(
        from._internal_mask());
  }
  if (from._internal_has_polygon()) {
    _this->_internal_mutable_polygon()->::clarifai::api::Polygon::MergeFrom(
        from._internal_polygon());
  }
  if (from._internal_has_point()) {
    _this->_internal_mutable_point()->::clarifai::api::Point::MergeFrom(
        from._internal_point());
  }
  if (from._internal_has_span()) {
    _this->_internal_mutable_span()->::clarifai::api::Span::MergeFrom(
        from._internal_span());
  }
  if (from._internal_has_token()) {
    _this->_internal_mutable_token()->::clarifai::api::Token::MergeFrom(
        from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegionInfo::CopyFrom(const RegionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.RegionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionInfo::IsInitialized() const {
  return true;
}

void RegionInfo::InternalSwap(RegionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keypoint_locations_.InternalSwap(&other->_impl_.keypoint_locations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionInfo, _impl_.token_)
      + sizeof(RegionInfo::_impl_.token_)
      - PROTOBUF_FIELD_OFFSET(RegionInfo, _impl_.bounding_box_)>(
          reinterpret_cast<char*>(&_impl_.bounding_box_),
          reinterpret_cast<char*>(&other->_impl_.bounding_box_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[27]);
}

// ===================================================================

class BoundingBox::_Internal {
 public:
};

BoundingBox::BoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.BoundingBox)
}
BoundingBox::BoundingBox(const BoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BoundingBox* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.top_row_){}
    , decltype(_impl_.left_col_){}
    , decltype(_impl_.bottom_row_){}
    , decltype(_impl_.right_col_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.top_row_, &from._impl_.top_row_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.right_col_) -
    reinterpret_cast<char*>(&_impl_.top_row_)) + sizeof(_impl_.right_col_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.BoundingBox)
}

inline void BoundingBox::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.top_row_){0}
    , decltype(_impl_.left_col_){0}
    , decltype(_impl_.bottom_row_){0}
    , decltype(_impl_.right_col_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:clarifai.api.BoundingBox)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoundingBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoundingBox::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.BoundingBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.top_row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.right_col_) -
      reinterpret_cast<char*>(&_impl_.top_row_)) + sizeof(_impl_.right_col_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundingBox::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float top_row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.top_row_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float left_col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.left_col_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float bottom_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.bottom_row_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float right_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.right_col_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoundingBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.BoundingBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float top_row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top_row = this->_internal_top_row();
  uint32_t raw_top_row;
  memcpy(&raw_top_row, &tmp_top_row, sizeof(tmp_top_row));
  if (raw_top_row != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_top_row(), target);
  }

  // float left_col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_left_col = this->_internal_left_col();
  uint32_t raw_left_col;
  memcpy(&raw_left_col, &tmp_left_col, sizeof(tmp_left_col));
  if (raw_left_col != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_left_col(), target);
  }

  // float bottom_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bottom_row = this->_internal_bottom_row();
  uint32_t raw_bottom_row;
  memcpy(&raw_bottom_row, &tmp_bottom_row, sizeof(tmp_bottom_row));
  if (raw_bottom_row != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_bottom_row(), target);
  }

  // float right_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_right_col = this->_internal_right_col();
  uint32_t raw_right_col;
  memcpy(&raw_right_col, &tmp_right_col, sizeof(tmp_right_col));
  if (raw_right_col != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_right_col(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.BoundingBox)
  return target;
}

size_t BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.BoundingBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float top_row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top_row = this->_internal_top_row();
  uint32_t raw_top_row;
  memcpy(&raw_top_row, &tmp_top_row, sizeof(tmp_top_row));
  if (raw_top_row != 0) {
    total_size += 1 + 4;
  }

  // float left_col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_left_col = this->_internal_left_col();
  uint32_t raw_left_col;
  memcpy(&raw_left_col, &tmp_left_col, sizeof(tmp_left_col));
  if (raw_left_col != 0) {
    total_size += 1 + 4;
  }

  // float bottom_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bottom_row = this->_internal_bottom_row();
  uint32_t raw_bottom_row;
  memcpy(&raw_bottom_row, &tmp_bottom_row, sizeof(tmp_bottom_row));
  if (raw_bottom_row != 0) {
    total_size += 1 + 4;
  }

  // float right_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_right_col = this->_internal_right_col();
  uint32_t raw_right_col;
  memcpy(&raw_right_col, &tmp_right_col, sizeof(tmp_right_col));
  if (raw_right_col != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoundingBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BoundingBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoundingBox::GetClassData() const { return &_class_data_; }


void BoundingBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BoundingBox*>(&to_msg);
  auto& from = static_cast<const BoundingBox&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.BoundingBox)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top_row = from._internal_top_row();
  uint32_t raw_top_row;
  memcpy(&raw_top_row, &tmp_top_row, sizeof(tmp_top_row));
  if (raw_top_row != 0) {
    _this->_internal_set_top_row(from._internal_top_row());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_left_col = from._internal_left_col();
  uint32_t raw_left_col;
  memcpy(&raw_left_col, &tmp_left_col, sizeof(tmp_left_col));
  if (raw_left_col != 0) {
    _this->_internal_set_left_col(from._internal_left_col());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bottom_row = from._internal_bottom_row();
  uint32_t raw_bottom_row;
  memcpy(&raw_bottom_row, &tmp_bottom_row, sizeof(tmp_bottom_row));
  if (raw_bottom_row != 0) {
    _this->_internal_set_bottom_row(from._internal_bottom_row());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_right_col = from._internal_right_col();
  uint32_t raw_right_col;
  memcpy(&raw_right_col, &tmp_right_col, sizeof(tmp_right_col));
  if (raw_right_col != 0) {
    _this->_internal_set_right_col(from._internal_right_col());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  return true;
}

void BoundingBox::InternalSwap(BoundingBox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox, _impl_.right_col_)
      + sizeof(BoundingBox::_impl_.right_col_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox, _impl_.top_row_)>(
          reinterpret_cast<char*>(&_impl_.top_row_),
          reinterpret_cast<char*>(&other->_impl_.top_row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[28]);
}

// ===================================================================

class FrameInfo::_Internal {
 public:
};

FrameInfo::FrameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.FrameInfo)
}
FrameInfo::FrameInfo(const FrameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.FrameInfo)
}

inline void FrameInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , decltype(_impl_.time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FrameInfo::~FrameInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.FrameInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FrameInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.FrameInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.FrameInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // uint32 time = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.FrameInfo)
  return target;
}

size_t FrameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.FrameInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 time = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameInfo::GetClassData() const { return &_class_data_; }


void FrameInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameInfo*>(&to_msg);
  auto& from = static_cast<const FrameInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.FrameInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameInfo::CopyFrom(const FrameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.FrameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameInfo::IsInitialized() const {
  return true;
}

void FrameInfo::InternalSwap(FrameInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameInfo, _impl_.time_)
      + sizeof(FrameInfo::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(FrameInfo, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[29]);
}

// ===================================================================

class Frame::_Internal {
 public:
  static const ::clarifai::api::FrameInfo& frame_info(const Frame* msg);
  static const ::clarifai::api::Data& data(const Frame* msg);
};

const ::clarifai::api::FrameInfo&
Frame::_Internal::frame_info(const Frame* msg) {
  return *msg->_impl_.frame_info_;
}
const ::clarifai::api::Data&
Frame::_Internal::data(const Frame* msg) {
  return *msg->_impl_.data_;
}
Frame::Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Frame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.frame_info_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_frame_info()) {
    _this->_impl_.frame_info_ = new ::clarifai::api::FrameInfo(*from._impl_.frame_info_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::clarifai::api::Data(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Frame)
}

inline void Frame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.frame_info_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:clarifai.api.Frame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.frame_info_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void Frame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Frame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.frame_info_ != nullptr) {
    delete _impl_.frame_info_;
  }
  _impl_.frame_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.FrameInfo frame_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Frame.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Frame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Frame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.FrameInfo frame_info = 1;
  if (this->_internal_has_frame_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::frame_info(this),
        _Internal::frame_info(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Frame.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Frame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 3;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.FrameInfo frame_info = 1;
  if (this->_internal_has_frame_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.frame_info_);
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Frame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frame::GetClassData() const { return &_class_data_; }


void Frame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Frame*>(&to_msg);
  auto& from = static_cast<const Frame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Frame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_frame_info()) {
    _this->_internal_mutable_frame_info()->::clarifai::api::FrameInfo::MergeFrom(
        from._internal_frame_info());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::clarifai::api::Data::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frame, _impl_.data_)
      + sizeof(Frame::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(Frame, _impl_.frame_info_)>(
          reinterpret_cast<char*>(&_impl_.frame_info_),
          reinterpret_cast<char*>(&other->_impl_.frame_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[30]);
}

// ===================================================================

class Mask::_Internal {
 public:
  static const ::clarifai::api::Image& image(const Mask* msg);
};

const ::clarifai::api::Image&
Mask::_Internal::image(const Mask* msg) {
  return *msg->_impl_.image_;
}
Mask::Mask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Mask)
}
Mask::Mask(const Mask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::clarifai::api::Image(*from._impl_.image_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Mask)
}

inline void Mask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mask::~Mask() {
  // @@protoc_insertion_point(destructor:clarifai.api.Mask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.image_;
}

void Mask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mask::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Mask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Image image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Mask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Image image = 2;
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Mask)
  return target;
}

size_t Mask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Mask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Image image = 2;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mask::GetClassData() const { return &_class_data_; }


void Mask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mask*>(&to_msg);
  auto& from = static_cast<const Mask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Mask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _this->_internal_mutable_image()->::clarifai::api::Image::MergeFrom(
        from._internal_image());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mask::CopyFrom(const Mask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Mask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mask::IsInitialized() const {
  return true;
}

void Mask::InternalSwap(Mask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.image_, other->_impl_.image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[31]);
}

// ===================================================================

class Polygon::_Internal {
 public:
};

Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Polygon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Polygon)
}

inline void Polygon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:clarifai.api.Polygon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
}

void Polygon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Polygon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.Point points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Polygon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Polygon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.Point points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Polygon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Point points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Polygon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Polygon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Polygon::GetClassData() const { return &_class_data_; }


void Polygon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Polygon*>(&to_msg);
  auto& from = static_cast<const Polygon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Polygon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[32]);
}

// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.visibility_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.row_, &from._impl_.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.visibility_) -
    reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.visibility_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.row_){0}
    , decltype(_impl_.col_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.visibility_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:clarifai.api.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.visibility_) -
      reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.visibility_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.col_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Point.Visibility visibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::clarifai::api::Point_Visibility>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_row = this->_internal_row();
  uint32_t raw_row;
  memcpy(&raw_row, &tmp_row, sizeof(tmp_row));
  if (raw_row != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_row(), target);
  }

  // float col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_col = this->_internal_col();
  uint32_t raw_col;
  memcpy(&raw_col, &tmp_col, sizeof(tmp_col));
  if (raw_col != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_col(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // .clarifai.api.Point.Visibility visibility = 4;
  if (this->_internal_visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_visibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_row = this->_internal_row();
  uint32_t raw_row;
  memcpy(&raw_row, &tmp_row, sizeof(tmp_row));
  if (raw_row != 0) {
    total_size += 1 + 4;
  }

  // float col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_col = this->_internal_col();
  uint32_t raw_col;
  memcpy(&raw_col, &tmp_col, sizeof(tmp_col));
  if (raw_col != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // .clarifai.api.Point.Visibility visibility = 4;
  if (this->_internal_visibility() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }


void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_row = from._internal_row();
  uint32_t raw_row;
  memcpy(&raw_row, &tmp_row, sizeof(tmp_row));
  if (raw_row != 0) {
    _this->_internal_set_row(from._internal_row());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_col = from._internal_col();
  uint32_t raw_col;
  memcpy(&raw_col, &tmp_col, sizeof(tmp_col));
  if (raw_col != 0) {
    _this->_internal_set_col(from._internal_col());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  if (from._internal_visibility() != 0) {
    _this->_internal_set_visibility(from._internal_visibility());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.visibility_)
      + sizeof(Point::_impl_.visibility_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.row_)>(
          reinterpret_cast<char*>(&_impl_.row_),
          reinterpret_cast<char*>(&other->_impl_.row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[33]);
}

// ===================================================================

class Span::_Internal {
 public:
};

Span::Span(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Span)
}
Span::Span(const Span& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Span* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.raw_text_){}
    , decltype(_impl_.char_start_){}
    , decltype(_impl_.char_end_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.raw_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw_text().empty()) {
    _this->_impl_.raw_text_.Set(from._internal_raw_text(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.char_start_, &from._impl_.char_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.char_end_) -
    reinterpret_cast<char*>(&_impl_.char_start_)) + sizeof(_impl_.char_end_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Span)
}

inline void Span::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.raw_text_){}
    , decltype(_impl_.char_start_){0u}
    , decltype(_impl_.char_end_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.raw_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:clarifai.api.Span)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Span::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.raw_text_.Destroy();
}

void Span::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Span::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Span)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.raw_text_.ClearToEmpty();
  ::memset(&_impl_.char_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.char_end_) -
      reinterpret_cast<char*>(&_impl_.char_start_)) + sizeof(_impl_.char_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Span::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.char_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.char_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string raw_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_raw_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Span.raw_text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Span::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Span)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_char_start(), target);
  }

  // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_char_end(), target);
  }

  // string raw_text = 3;
  if (!this->_internal_raw_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_text().data(), static_cast<int>(this->_internal_raw_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Span.raw_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_raw_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Span)
  return target;
}

size_t Span::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Span)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string raw_text = 3;
  if (!this->_internal_raw_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_text());
  }

  // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_char_start());
  }

  // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_end() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_char_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Span::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Span::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Span::GetClassData() const { return &_class_data_; }


void Span::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Span*>(&to_msg);
  auto& from = static_cast<const Span&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Span)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_raw_text().empty()) {
    _this->_internal_set_raw_text(from._internal_raw_text());
  }
  if (from._internal_char_start() != 0) {
    _this->_internal_set_char_start(from._internal_char_start());
  }
  if (from._internal_char_end() != 0) {
    _this->_internal_set_char_end(from._internal_char_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Span::CopyFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {
  return true;
}

void Span::InternalSwap(Span* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.raw_text_, lhs_arena,
      &other->_impl_.raw_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Span, _impl_.char_end_)
      + sizeof(Span::_impl_.char_end_)
      - PROTOBUF_FIELD_OFFSET(Span, _impl_.char_start_)>(
          reinterpret_cast<char*>(&_impl_.char_start_),
          reinterpret_cast<char*>(&other->_impl_.char_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Span::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[34]);
}

// ===================================================================

class Token::_Internal {
 public:
};

Token::Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Token)
}
Token::Token(const Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Token* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.raw_text_){}
    , decltype(_impl_.char_start_){}
    , decltype(_impl_.char_end_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.raw_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw_text().empty()) {
    _this->_impl_.raw_text_.Set(from._internal_raw_text(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.char_start_, &from._impl_.char_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.char_end_) -
    reinterpret_cast<char*>(&_impl_.char_start_)) + sizeof(_impl_.char_end_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Token)
}

inline void Token::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.raw_text_){}
    , decltype(_impl_.char_start_){0u}
    , decltype(_impl_.char_end_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.raw_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:clarifai.api.Token)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Token::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.raw_text_.Destroy();
}

void Token::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Token)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.raw_text_.ClearToEmpty();
  ::memset(&_impl_.char_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.char_end_) -
      reinterpret_cast<char*>(&_impl_.char_start_)) + sizeof(_impl_.char_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Token::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.char_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.char_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string raw_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_raw_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Token.raw_text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Token::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Token)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_char_start(), target);
  }

  // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_char_end(), target);
  }

  // string raw_text = 3;
  if (!this->_internal_raw_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_text().data(), static_cast<int>(this->_internal_raw_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Token.raw_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_raw_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Token)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string raw_text = 3;
  if (!this->_internal_raw_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_text());
  }

  // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_char_start());
  }

  // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_end() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_char_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Token::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Token::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Token::GetClassData() const { return &_class_data_; }


void Token::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Token*>(&to_msg);
  auto& from = static_cast<const Token&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Token)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_raw_text().empty()) {
    _this->_internal_set_raw_text(from._internal_raw_text());
  }
  if (from._internal_char_start() != 0) {
    _this->_internal_set_char_start(from._internal_char_start());
  }
  if (from._internal_char_end() != 0) {
    _this->_internal_set_char_end(from._internal_char_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::InternalSwap(Token* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.raw_text_, lhs_arena,
      &other->_impl_.raw_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Token, _impl_.char_end_)
      + sizeof(Token::_impl_.char_end_)
      - PROTOBUF_FIELD_OFFSET(Token, _impl_.char_start_)>(
          reinterpret_cast<char*>(&_impl_.char_start_),
          reinterpret_cast<char*>(&other->_impl_.char_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Token::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[35]);
}

// ===================================================================

class Embedding::_Internal {
 public:
};

Embedding::Embedding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Embedding)
}
Embedding::Embedding(const Embedding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Embedding* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vector_){from._impl_.vector_}
    , decltype(_impl_.num_dimensions_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.num_dimensions_ = from._impl_.num_dimensions_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Embedding)
}

inline void Embedding::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vector_){arena}
    , decltype(_impl_.num_dimensions_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Embedding::~Embedding() {
  // @@protoc_insertion_point(destructor:clarifai.api.Embedding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Embedding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vector_.~RepeatedField();
}

void Embedding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Embedding::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Embedding)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vector_.Clear();
  _impl_.num_dimensions_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Embedding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float vector = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_vector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_dimensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_dimensions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Embedding::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Embedding)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float vector = 1 [packed = true];
  if (this->_internal_vector_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vector(), target);
  }

  // uint32 num_dimensions = 2;
  if (this->_internal_num_dimensions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_dimensions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Embedding)
  return target;
}

size_t Embedding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Embedding)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vector = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vector_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // uint32 num_dimensions = 2;
  if (this->_internal_num_dimensions() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_dimensions());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Embedding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Embedding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Embedding::GetClassData() const { return &_class_data_; }


void Embedding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Embedding*>(&to_msg);
  auto& from = static_cast<const Embedding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Embedding)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vector_.MergeFrom(from._impl_.vector_);
  if (from._internal_num_dimensions() != 0) {
    _this->_internal_set_num_dimensions(from._internal_num_dimensions());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Embedding::CopyFrom(const Embedding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Embedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Embedding::IsInitialized() const {
  return true;
}

void Embedding::InternalSwap(Embedding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vector_.InternalSwap(&other->_impl_.vector_);
  swap(_impl_.num_dimensions_, other->_impl_.num_dimensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Embedding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[36]);
}

// ===================================================================

class GeoPoint::_Internal {
 public:
};

GeoPoint::GeoPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GeoPoint)
}
GeoPoint::GeoPoint(const GeoPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GeoPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.longitude_){}
    , decltype(_impl_.latitude_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.longitude_, &from._impl_.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.latitude_) -
    reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.latitude_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GeoPoint)
}

inline void GeoPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.longitude_){0}
    , decltype(_impl_.latitude_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GeoPoint::~GeoPoint() {
  // @@protoc_insertion_point(destructor:clarifai.api.GeoPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GeoPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GeoPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GeoPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GeoPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.latitude_) -
      reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.latitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float longitude = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float latitude = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GeoPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GeoPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float longitude = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_longitude(), target);
  }

  // float latitude = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_latitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GeoPoint)
  return target;
}

size_t GeoPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GeoPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float longitude = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 4;
  }

  // float latitude = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GeoPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GeoPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GeoPoint::GetClassData() const { return &_class_data_; }


void GeoPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GeoPoint*>(&to_msg);
  auto& from = static_cast<const GeoPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GeoPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = from._internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = from._internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GeoPoint::CopyFrom(const GeoPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GeoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPoint::IsInitialized() const {
  return true;
}

void GeoPoint::InternalSwap(GeoPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoPoint, _impl_.latitude_)
      + sizeof(GeoPoint::_impl_.latitude_)
      - PROTOBUF_FIELD_OFFSET(GeoPoint, _impl_.longitude_)>(
          reinterpret_cast<char*>(&_impl_.longitude_),
          reinterpret_cast<char*>(&other->_impl_.longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[37]);
}

// ===================================================================

class GeoLimit::_Internal {
 public:
};

GeoLimit::GeoLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GeoLimit)
}
GeoLimit::GeoLimit(const GeoLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GeoLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GeoLimit)
}

inline void GeoLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GeoLimit::~GeoLimit() {
  // @@protoc_insertion_point(destructor:clarifai.api.GeoLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GeoLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
}

void GeoLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GeoLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GeoLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GeoLimit.type"));
        } else
          goto handle_unusual;
        continue;
      // float value = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GeoLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GeoLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GeoLimit.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // float value = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GeoLimit)
  return target;
}

size_t GeoLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GeoLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // float value = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GeoLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GeoLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GeoLimit::GetClassData() const { return &_class_data_; }


void GeoLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GeoLimit*>(&to_msg);
  auto& from = static_cast<const GeoLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GeoLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GeoLimit::CopyFrom(const GeoLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GeoLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoLimit::IsInitialized() const {
  return true;
}

void GeoLimit::InternalSwap(GeoLimit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[38]);
}

// ===================================================================

class GeoBoxedPoint::_Internal {
 public:
  static const ::clarifai::api::GeoPoint& geo_point(const GeoBoxedPoint* msg);
};

const ::clarifai::api::GeoPoint&
GeoBoxedPoint::_Internal::geo_point(const GeoBoxedPoint* msg) {
  return *msg->_impl_.geo_point_;
}
GeoBoxedPoint::GeoBoxedPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GeoBoxedPoint)
}
GeoBoxedPoint::GeoBoxedPoint(const GeoBoxedPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GeoBoxedPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.geo_point_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_geo_point()) {
    _this->_impl_.geo_point_ = new ::clarifai::api::GeoPoint(*from._impl_.geo_point_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GeoBoxedPoint)
}

inline void GeoBoxedPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.geo_point_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GeoBoxedPoint::~GeoBoxedPoint() {
  // @@protoc_insertion_point(destructor:clarifai.api.GeoBoxedPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GeoBoxedPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.geo_point_;
}

void GeoBoxedPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GeoBoxedPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GeoBoxedPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.geo_point_ != nullptr) {
    delete _impl_.geo_point_;
  }
  _impl_.geo_point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoBoxedPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.GeoPoint geo_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GeoBoxedPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GeoBoxedPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.GeoPoint geo_point = 1;
  if (this->_internal_has_geo_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::geo_point(this),
        _Internal::geo_point(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GeoBoxedPoint)
  return target;
}

size_t GeoBoxedPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GeoBoxedPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.GeoPoint geo_point = 1;
  if (this->_internal_has_geo_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.geo_point_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GeoBoxedPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GeoBoxedPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GeoBoxedPoint::GetClassData() const { return &_class_data_; }


void GeoBoxedPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GeoBoxedPoint*>(&to_msg);
  auto& from = static_cast<const GeoBoxedPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GeoBoxedPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_geo_point()) {
    _this->_internal_mutable_geo_point()->::clarifai::api::GeoPoint::MergeFrom(
        from._internal_geo_point());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GeoBoxedPoint::CopyFrom(const GeoBoxedPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GeoBoxedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoBoxedPoint::IsInitialized() const {
  return true;
}

void GeoBoxedPoint::InternalSwap(GeoBoxedPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.geo_point_, other->_impl_.geo_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoBoxedPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[39]);
}

// ===================================================================

class Geo::_Internal {
 public:
  static const ::clarifai::api::GeoPoint& geo_point(const Geo* msg);
  static const ::clarifai::api::GeoLimit& geo_limit(const Geo* msg);
};

const ::clarifai::api::GeoPoint&
Geo::_Internal::geo_point(const Geo* msg) {
  return *msg->_impl_.geo_point_;
}
const ::clarifai::api::GeoLimit&
Geo::_Internal::geo_limit(const Geo* msg) {
  return *msg->_impl_.geo_limit_;
}
Geo::Geo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Geo)
}
Geo::Geo(const Geo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Geo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.geo_box_){from._impl_.geo_box_}
    , decltype(_impl_.geo_point_){nullptr}
    , decltype(_impl_.geo_limit_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_geo_point()) {
    _this->_impl_.geo_point_ = new ::clarifai::api::GeoPoint(*from._impl_.geo_point_);
  }
  if (from._internal_has_geo_limit()) {
    _this->_impl_.geo_limit_ = new ::clarifai::api::GeoLimit(*from._impl_.geo_limit_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Geo)
}

inline void Geo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.geo_box_){arena}
    , decltype(_impl_.geo_point_){nullptr}
    , decltype(_impl_.geo_limit_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Geo::~Geo() {
  // @@protoc_insertion_point(destructor:clarifai.api.Geo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Geo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.geo_box_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.geo_point_;
  if (this != internal_default_instance()) delete _impl_.geo_limit_;
}

void Geo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Geo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Geo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.geo_box_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.geo_point_ != nullptr) {
    delete _impl_.geo_point_;
  }
  _impl_.geo_point_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.geo_limit_ != nullptr) {
    delete _impl_.geo_limit_;
  }
  _impl_.geo_limit_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Geo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.GeoPoint geo_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.GeoLimit geo_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_limit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.GeoBoxedPoint geo_box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geo_box(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Geo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Geo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.GeoPoint geo_point = 1;
  if (this->_internal_has_geo_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::geo_point(this),
        _Internal::geo_point(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.GeoLimit geo_limit = 2;
  if (this->_internal_has_geo_limit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::geo_limit(this),
        _Internal::geo_limit(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.GeoBoxedPoint geo_box = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_geo_box_size()); i < n; i++) {
    const auto& repfield = this->_internal_geo_box(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Geo)
  return target;
}

size_t Geo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Geo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.GeoBoxedPoint geo_box = 3;
  total_size += 1UL * this->_internal_geo_box_size();
  for (const auto& msg : this->_impl_.geo_box_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.GeoPoint geo_point = 1;
  if (this->_internal_has_geo_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.geo_point_);
  }

  // .clarifai.api.GeoLimit geo_limit = 2;
  if (this->_internal_has_geo_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.geo_limit_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Geo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Geo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Geo::GetClassData() const { return &_class_data_; }


void Geo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Geo*>(&to_msg);
  auto& from = static_cast<const Geo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Geo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.geo_box_.MergeFrom(from._impl_.geo_box_);
  if (from._internal_has_geo_point()) {
    _this->_internal_mutable_geo_point()->::clarifai::api::GeoPoint::MergeFrom(
        from._internal_geo_point());
  }
  if (from._internal_has_geo_limit()) {
    _this->_internal_mutable_geo_limit()->::clarifai::api::GeoLimit::MergeFrom(
        from._internal_geo_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Geo::CopyFrom(const Geo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geo::IsInitialized() const {
  return true;
}

void Geo::InternalSwap(Geo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.geo_box_.InternalSwap(&other->_impl_.geo_box_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Geo, _impl_.geo_limit_)
      + sizeof(Geo::_impl_.geo_limit_)
      - PROTOBUF_FIELD_OFFSET(Geo, _impl_.geo_point_)>(
          reinterpret_cast<char*>(&_impl_.geo_point_),
          reinterpret_cast<char*>(&other->_impl_.geo_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Geo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[40]);
}

// ===================================================================

class Image::_Internal {
 public:
  static const ::clarifai::api::HostedURL& hosted(const Image* msg);
  static const ::clarifai::api::ImageInfo& image_info(const Image* msg);
};

const ::clarifai::api::HostedURL&
Image::_Internal::hosted(const Image* msg) {
  return *msg->_impl_.hosted_;
}
const ::clarifai::api::ImageInfo&
Image::_Internal::image_info(const Image* msg) {
  return *msg->_impl_.image_info_;
}
Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Image* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.base64_){}
    , decltype(_impl_.hosted_){nullptr}
    , decltype(_impl_.image_info_){nullptr}
    , decltype(_impl_.allow_duplicate_url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.base64_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base64_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base64().empty()) {
    _this->_impl_.base64_.Set(from._internal_base64(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_hosted()) {
    _this->_impl_.hosted_ = new ::clarifai::api::HostedURL(*from._impl_.hosted_);
  }
  if (from._internal_has_image_info()) {
    _this->_impl_.image_info_ = new ::clarifai::api::ImageInfo(*from._impl_.image_info_);
  }
  _this->_impl_.allow_duplicate_url_ = from._impl_.allow_duplicate_url_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Image)
}

inline void Image::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.base64_){}
    , decltype(_impl_.hosted_){nullptr}
    , decltype(_impl_.image_info_){nullptr}
    , decltype(_impl_.allow_duplicate_url_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base64_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base64_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:clarifai.api.Image)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.base64_.Destroy();
  if (this != internal_default_instance()) delete _impl_.hosted_;
  if (this != internal_default_instance()) delete _impl_.image_info_;
}

void Image::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.base64_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.hosted_ != nullptr) {
    delete _impl_.hosted_;
  }
  _impl_.hosted_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.image_info_ != nullptr) {
    delete _impl_.image_info_;
  }
  _impl_.image_info_ = nullptr;
  _impl_.allow_duplicate_url_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Image.url"));
        } else
          goto handle_unusual;
        continue;
      // bytes base64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_base64();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_duplicate_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.allow_duplicate_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.HostedURL hosted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hosted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ImageInfo image_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Image.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // bytes base64 = 2;
  if (!this->_internal_base64().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_base64(), target);
  }

  // bool allow_duplicate_url = 4;
  if (this->_internal_allow_duplicate_url() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_duplicate_url(), target);
  }

  // .clarifai.api.HostedURL hosted = 5;
  if (this->_internal_has_hosted()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::hosted(this),
        _Internal::hosted(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ImageInfo image_info = 6;
  if (this->_internal_has_image_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::image_info(this),
        _Internal::image_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // bytes base64 = 2;
  if (!this->_internal_base64().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_base64());
  }

  // .clarifai.api.HostedURL hosted = 5;
  if (this->_internal_has_hosted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hosted_);
  }

  // .clarifai.api.ImageInfo image_info = 6;
  if (this->_internal_has_image_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_info_);
  }

  // bool allow_duplicate_url = 4;
  if (this->_internal_allow_duplicate_url() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Image::GetClassData() const { return &_class_data_; }


void Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Image*>(&to_msg);
  auto& from = static_cast<const Image&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Image)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_base64().empty()) {
    _this->_internal_set_base64(from._internal_base64());
  }
  if (from._internal_has_hosted()) {
    _this->_internal_mutable_hosted()->::clarifai::api::HostedURL::MergeFrom(
        from._internal_hosted());
  }
  if (from._internal_has_image_info()) {
    _this->_internal_mutable_image_info()->::clarifai::api::ImageInfo::MergeFrom(
        from._internal_image_info());
  }
  if (from._internal_allow_duplicate_url() != 0) {
    _this->_internal_set_allow_duplicate_url(from._internal_allow_duplicate_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.base64_, lhs_arena,
      &other->_impl_.base64_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Image, _impl_.allow_duplicate_url_)
      + sizeof(Image::_impl_.allow_duplicate_url_)
      - PROTOBUF_FIELD_OFFSET(Image, _impl_.hosted_)>(
          reinterpret_cast<char*>(&_impl_.hosted_),
          reinterpret_cast<char*>(&other->_impl_.hosted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[41]);
}

// ===================================================================

class ImageInfo::_Internal {
 public:
};

ImageInfo::ImageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ImageInfo)
}
ImageInfo::ImageInfo(const ImageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.format_){}
    , decltype(_impl_.color_mode_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format().empty()) {
    _this->_impl_.format_.Set(from._internal_format(), 
      _this->GetArenaForAllocation());
  }
  _impl_.color_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.color_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_color_mode().empty()) {
    _this->_impl_.color_mode_.Set(from._internal_color_mode(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ImageInfo)
}

inline void ImageInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.format_){}
    , decltype(_impl_.color_mode_){}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.color_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.color_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImageInfo::~ImageInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.ImageInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.format_.Destroy();
  _impl_.color_mode_.Destroy();
}

void ImageInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ImageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.format_.ClearToEmpty();
  _impl_.color_mode_.ClearToEmpty();
  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ImageInfo.format"));
        } else
          goto handle_unusual;
        continue;
      // string color_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_color_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ImageInfo.color_mode"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ImageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // string format = 3;
  if (!this->_internal_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ImageInfo.format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_format(), target);
  }

  // string color_mode = 4;
  if (!this->_internal_color_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color_mode().data(), static_cast<int>(this->_internal_color_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ImageInfo.color_mode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_color_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ImageInfo)
  return target;
}

size_t ImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ImageInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string format = 3;
  if (!this->_internal_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  // string color_mode = 4;
  if (!this->_internal_color_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color_mode());
  }

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageInfo::GetClassData() const { return &_class_data_; }


void ImageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageInfo*>(&to_msg);
  auto& from = static_cast<const ImageInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ImageInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_format().empty()) {
    _this->_internal_set_format(from._internal_format());
  }
  if (!from._internal_color_mode().empty()) {
    _this->_internal_set_color_mode(from._internal_color_mode());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageInfo::CopyFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfo::IsInitialized() const {
  return true;
}

void ImageInfo::InternalSwap(ImageInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.format_, lhs_arena,
      &other->_impl_.format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.color_mode_, lhs_arena,
      &other->_impl_.color_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageInfo, _impl_.height_)
      + sizeof(ImageInfo::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(ImageInfo, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[42]);
}

// ===================================================================

class HostedURL::_Internal {
 public:
};

HostedURL::HostedURL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.HostedURL)
}
HostedURL::HostedURL(const HostedURL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostedURL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sizes_){from._impl_.sizes_}
    , decltype(_impl_.prefix_){}
    , decltype(_impl_.suffix_){}
    , decltype(_impl_.crossorigin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    _this->_impl_.prefix_.Set(from._internal_prefix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.suffix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suffix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_suffix().empty()) {
    _this->_impl_.suffix_.Set(from._internal_suffix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.crossorigin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crossorigin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_crossorigin().empty()) {
    _this->_impl_.crossorigin_.Set(from._internal_crossorigin(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.HostedURL)
}

inline void HostedURL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sizes_){arena}
    , decltype(_impl_.prefix_){}
    , decltype(_impl_.suffix_){}
    , decltype(_impl_.crossorigin_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.suffix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suffix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.crossorigin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crossorigin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HostedURL::~HostedURL() {
  // @@protoc_insertion_point(destructor:clarifai.api.HostedURL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostedURL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sizes_.~RepeatedPtrField();
  _impl_.prefix_.Destroy();
  _impl_.suffix_.Destroy();
  _impl_.crossorigin_.Destroy();
}

void HostedURL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostedURL::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.HostedURL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sizes_.Clear();
  _impl_.prefix_.ClearToEmpty();
  _impl_.suffix_.ClearToEmpty();
  _impl_.crossorigin_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostedURL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.HostedURL.prefix"));
        } else
          goto handle_unusual;
        continue;
      // string suffix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_suffix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.HostedURL.suffix"));
        } else
          goto handle_unusual;
        continue;
      // repeated string sizes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sizes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.HostedURL.sizes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string crossorigin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_crossorigin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.HostedURL.crossorigin"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostedURL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.HostedURL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (!this->_internal_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.HostedURL.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // string suffix = 2;
  if (!this->_internal_suffix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_suffix().data(), static_cast<int>(this->_internal_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.HostedURL.suffix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_suffix(), target);
  }

  // repeated string sizes = 3;
  for (int i = 0, n = this->_internal_sizes_size(); i < n; i++) {
    const auto& s = this->_internal_sizes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.HostedURL.sizes");
    target = stream->WriteString(3, s, target);
  }

  // string crossorigin = 4;
  if (!this->_internal_crossorigin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_crossorigin().data(), static_cast<int>(this->_internal_crossorigin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.HostedURL.crossorigin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_crossorigin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.HostedURL)
  return target;
}

size_t HostedURL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.HostedURL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sizes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.sizes_.size());
  for (int i = 0, n = _impl_.sizes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.sizes_.Get(i));
  }

  // string prefix = 1;
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string suffix = 2;
  if (!this->_internal_suffix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_suffix());
  }

  // string crossorigin = 4;
  if (!this->_internal_crossorigin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_crossorigin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostedURL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostedURL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostedURL::GetClassData() const { return &_class_data_; }


void HostedURL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostedURL*>(&to_msg);
  auto& from = static_cast<const HostedURL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.HostedURL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sizes_.MergeFrom(from._impl_.sizes_);
  if (!from._internal_prefix().empty()) {
    _this->_internal_set_prefix(from._internal_prefix());
  }
  if (!from._internal_suffix().empty()) {
    _this->_internal_set_suffix(from._internal_suffix());
  }
  if (!from._internal_crossorigin().empty()) {
    _this->_internal_set_crossorigin(from._internal_crossorigin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostedURL::CopyFrom(const HostedURL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.HostedURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostedURL::IsInitialized() const {
  return true;
}

void HostedURL::InternalSwap(HostedURL* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sizes_.InternalSwap(&other->_impl_.sizes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prefix_, lhs_arena,
      &other->_impl_.prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.suffix_, lhs_arena,
      &other->_impl_.suffix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.crossorigin_, lhs_arena,
      &other->_impl_.crossorigin_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HostedURL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[43]);
}

// ===================================================================

class Input::_Internal {
 public:
  static const ::clarifai::api::Data& data(const Input* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Input* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Input* msg);
  static const ::clarifai::api::status::Status& status(const Input* msg);
};

const ::clarifai::api::Data&
Input::_Internal::data(const Input* msg) {
  return *msg->_impl_.data_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Input::_Internal::created_at(const Input* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Input::_Internal::modified_at(const Input* msg) {
  return *msg->_impl_.modified_at_;
}
const ::clarifai::api::status::Status&
Input::_Internal::status(const Input* msg) {
  return *msg->_impl_.status_;
}
void Input::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Input::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void Input::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
Input::Input(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Input)
}
Input::Input(const Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Input* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_ids_){from._impl_.dataset_ids_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::clarifai::api::Data(*from._impl_.data_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Input)
}

inline void Input::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_ids_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:clarifai.api.Input)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Input::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_ids_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void Input::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Input)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_ids_.Clear();
  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Input::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Input.id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string dataset_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dataset_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Input.dataset_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Input::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Input)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Input.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 5;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.status.Status status = 6;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string dataset_ids = 7;
  for (int i = 0, n = this->_internal_dataset_ids_size(); i < n; i++) {
    const auto& s = this->_internal_dataset_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Input.dataset_ids");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Input)
  return target;
}

size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Input)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dataset_ids = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.dataset_ids_.size());
  for (int i = 0, n = _impl_.dataset_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.dataset_ids_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 5;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .clarifai.api.status.Status status = 6;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Input::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Input::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Input::GetClassData() const { return &_class_data_; }


void Input::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Input*>(&to_msg);
  auto& from = static_cast<const Input&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Input)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dataset_ids_.MergeFrom(from._impl_.dataset_ids_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::clarifai::api::Data::MergeFrom(
        from._internal_data());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  return true;
}

void Input::InternalSwap(Input* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dataset_ids_.InternalSwap(&other->_impl_.dataset_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Input, _impl_.status_)
      + sizeof(Input::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Input, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Input::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[44]);
}

// ===================================================================

class InputBatch::_Internal {
 public:
};

InputBatch::InputBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.InputBatch)
}
InputBatch::InputBatch(const InputBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){from._impl_.inputs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.InputBatch)
}

inline void InputBatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InputBatch::~InputBatch() {
  // @@protoc_insertion_point(destructor:clarifai.api.InputBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_.~RepeatedPtrField();
}

void InputBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.InputBatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.Input inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputBatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.InputBatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_inputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.InputBatch)
  return target;
}

size_t InputBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.InputBatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 1;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->_impl_.inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputBatch::GetClassData() const { return &_class_data_; }


void InputBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputBatch*>(&to_msg);
  auto& from = static_cast<const InputBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.InputBatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inputs_.MergeFrom(from._impl_.inputs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputBatch::CopyFrom(const InputBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.InputBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputBatch::IsInitialized() const {
  return true;
}

void InputBatch::InternalSwap(InputBatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inputs_.InternalSwap(&other->_impl_.inputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[45]);
}

// ===================================================================

class InputCount::_Internal {
 public:
};

InputCount::InputCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.InputCount)
}
InputCount::InputCount(const InputCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.processed_){}
    , decltype(_impl_.to_process_){}
    , decltype(_impl_.errors_){}
    , decltype(_impl_.processing_){}
    , decltype(_impl_.reindexed_){}
    , decltype(_impl_.to_reindex_){}
    , decltype(_impl_.reindex_errors_){}
    , decltype(_impl_.reindexing_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.processed_, &from._impl_.processed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reindexing_) -
    reinterpret_cast<char*>(&_impl_.processed_)) + sizeof(_impl_.reindexing_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.InputCount)
}

inline void InputCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.processed_){0u}
    , decltype(_impl_.to_process_){0u}
    , decltype(_impl_.errors_){0u}
    , decltype(_impl_.processing_){0u}
    , decltype(_impl_.reindexed_){0u}
    , decltype(_impl_.to_reindex_){0u}
    , decltype(_impl_.reindex_errors_){0u}
    , decltype(_impl_.reindexing_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InputCount::~InputCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.InputCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InputCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.InputCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.processed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reindexing_) -
      reinterpret_cast<char*>(&_impl_.processed_)) + sizeof(_impl_.reindexing_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 processed = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_process = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.to_process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 errors = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 processing = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.processing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reindexed = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.reindexed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_reindex = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.to_reindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reindex_errors = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.reindex_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reindexing = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.reindexing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.InputCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 processed = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_processed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_processed(), target);
  }

  // uint32 to_process = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_to_process() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to_process(), target);
  }

  // uint32 errors = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_errors(), target);
  }

  // uint32 processing = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_processing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_processing(), target);
  }

  // uint32 reindexed = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_reindexed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reindexed(), target);
  }

  // uint32 to_reindex = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_to_reindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_to_reindex(), target);
  }

  // uint32 reindex_errors = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_reindex_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_reindex_errors(), target);
  }

  // uint32 reindexing = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_reindexing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_reindexing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.InputCount)
  return target;
}

size_t InputCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.InputCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 processed = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_processed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_processed());
  }

  // uint32 to_process = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_to_process() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to_process());
  }

  // uint32 errors = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_errors() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errors());
  }

  // uint32 processing = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_processing() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_processing());
  }

  // uint32 reindexed = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_reindexed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reindexed());
  }

  // uint32 to_reindex = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_to_reindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to_reindex());
  }

  // uint32 reindex_errors = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_reindex_errors() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reindex_errors());
  }

  // uint32 reindexing = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_reindexing() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reindexing());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputCount::GetClassData() const { return &_class_data_; }


void InputCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputCount*>(&to_msg);
  auto& from = static_cast<const InputCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.InputCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_processed() != 0) {
    _this->_internal_set_processed(from._internal_processed());
  }
  if (from._internal_to_process() != 0) {
    _this->_internal_set_to_process(from._internal_to_process());
  }
  if (from._internal_errors() != 0) {
    _this->_internal_set_errors(from._internal_errors());
  }
  if (from._internal_processing() != 0) {
    _this->_internal_set_processing(from._internal_processing());
  }
  if (from._internal_reindexed() != 0) {
    _this->_internal_set_reindexed(from._internal_reindexed());
  }
  if (from._internal_to_reindex() != 0) {
    _this->_internal_set_to_reindex(from._internal_to_reindex());
  }
  if (from._internal_reindex_errors() != 0) {
    _this->_internal_set_reindex_errors(from._internal_reindex_errors());
  }
  if (from._internal_reindexing() != 0) {
    _this->_internal_set_reindexing(from._internal_reindexing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputCount::CopyFrom(const InputCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.InputCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputCount::IsInitialized() const {
  return true;
}

void InputCount::InternalSwap(InputCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputCount, _impl_.reindexing_)
      + sizeof(InputCount::_impl_.reindexing_)
      - PROTOBUF_FIELD_OFFSET(InputCount, _impl_.processed_)>(
          reinterpret_cast<char*>(&_impl_.processed_),
          reinterpret_cast<char*>(&other->_impl_.processed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[46]);
}

// ===================================================================

class Dataset::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Dataset* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Dataset* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const Dataset* msg);
  static const ::clarifai::api::Visibility& visibility(const Dataset* msg);
  static const ::clarifai::api::AnnotationFilter& default_annotation_filter(const Dataset* msg);
  static const ::clarifai::api::DatasetVersionProcessingInfo& default_processing_info(const Dataset* msg);
  static const ::clarifai::api::DatasetVersion& version(const Dataset* msg);
  static const ::clarifai::api::BookmarkOrigin& bookmark_origin(const Dataset* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Dataset::_Internal::created_at(const Dataset* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Dataset::_Internal::modified_at(const Dataset* msg) {
  return *msg->_impl_.modified_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Dataset::_Internal::metadata(const Dataset* msg) {
  return *msg->_impl_.metadata_;
}
const ::clarifai::api::Visibility&
Dataset::_Internal::visibility(const Dataset* msg) {
  return *msg->_impl_.visibility_;
}
const ::clarifai::api::AnnotationFilter&
Dataset::_Internal::default_annotation_filter(const Dataset* msg) {
  return *msg->_impl_.default_annotation_filter_;
}
const ::clarifai::api::DatasetVersionProcessingInfo&
Dataset::_Internal::default_processing_info(const Dataset* msg) {
  return *msg->_impl_.default_processing_info_;
}
const ::clarifai::api::DatasetVersion&
Dataset::_Internal::version(const Dataset* msg) {
  return *msg->_impl_.version_;
}
const ::clarifai::api::BookmarkOrigin&
Dataset::_Internal::bookmark_origin(const Dataset* msg) {
  return *msg->_impl_.bookmark_origin_;
}
void Dataset::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Dataset::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void Dataset::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
Dataset::Dataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Dataset)
}
Dataset::Dataset(const Dataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dataset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.default_annotation_filter_){nullptr}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.default_processing_info_){nullptr}
    , decltype(_impl_.bookmark_origin_){nullptr}
    , decltype(_impl_.is_starred_){}
    , decltype(_impl_.star_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notes().empty()) {
    _this->_impl_.notes_.Set(from._internal_notes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  if (from._internal_has_default_annotation_filter()) {
    _this->_impl_.default_annotation_filter_ = new ::clarifai::api::AnnotationFilter(*from._impl_.default_annotation_filter_);
  }
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::clarifai::api::DatasetVersion(*from._impl_.version_);
  }
  if (from._internal_has_default_processing_info()) {
    _this->_impl_.default_processing_info_ = new ::clarifai::api::DatasetVersionProcessingInfo(*from._impl_.default_processing_info_);
  }
  if (from._internal_has_bookmark_origin()) {
    _this->_impl_.bookmark_origin_ = new ::clarifai::api::BookmarkOrigin(*from._impl_.bookmark_origin_);
  }
  ::memcpy(&_impl_.is_starred_, &from._impl_.is_starred_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.star_count_) -
    reinterpret_cast<char*>(&_impl_.is_starred_)) + sizeof(_impl_.star_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Dataset)
}

inline void Dataset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.default_annotation_filter_){nullptr}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.default_processing_info_){nullptr}
    , decltype(_impl_.bookmark_origin_){nullptr}
    , decltype(_impl_.is_starred_){false}
    , decltype(_impl_.star_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Dataset::~Dataset() {
  // @@protoc_insertion_point(destructor:clarifai.api.Dataset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dataset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.description_.Destroy();
  _impl_.notes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
  if (this != internal_default_instance()) delete _impl_.default_annotation_filter_;
  if (this != internal_default_instance()) delete _impl_.version_;
  if (this != internal_default_instance()) delete _impl_.default_processing_info_;
  if (this != internal_default_instance()) delete _impl_.bookmark_origin_;
}

void Dataset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dataset::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Dataset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.notes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.default_annotation_filter_ != nullptr) {
    delete _impl_.default_annotation_filter_;
  }
  _impl_.default_annotation_filter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.version_ != nullptr) {
    delete _impl_.version_;
  }
  _impl_.version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.default_processing_info_ != nullptr) {
    delete _impl_.default_processing_info_;
  }
  _impl_.default_processing_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bookmark_origin_ != nullptr) {
    delete _impl_.bookmark_origin_;
  }
  _impl_.bookmark_origin_ = nullptr;
  ::memset(&_impl_.is_starred_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.star_count_) -
      reinterpret_cast<char*>(&_impl_.is_starred_)) + sizeof(_impl_.star_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dataset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Dataset.id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Dataset.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Dataset.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string description = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Dataset.description"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string notes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_notes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Dataset.notes"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AnnotationFilter default_annotation_filter = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_annotation_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersion version = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_starred = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 star_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.star_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersionProcessingInfo default_processing_info = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_processing_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.BookmarkOrigin bookmark_origin = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_bookmark_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dataset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Dataset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Dataset.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Dataset.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  // string user_id = 5;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Dataset.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  // string description = 7;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Dataset.description");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_description(), target);
  }

  // .google.protobuf.Struct metadata = 8;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Visibility visibility = 9;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  // string notes = 11;
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Dataset.notes");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_notes(), target);
  }

  // .clarifai.api.AnnotationFilter default_annotation_filter = 12;
  if (this->_internal_has_default_annotation_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::default_annotation_filter(this),
        _Internal::default_annotation_filter(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.DatasetVersion version = 13;
  if (this->_internal_has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // bool is_starred = 14;
  if (this->_internal_is_starred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_is_starred(), target);
  }

  // int32 star_count = 15;
  if (this->_internal_star_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_star_count(), target);
  }

  // .clarifai.api.DatasetVersionProcessingInfo default_processing_info = 16;
  if (this->_internal_has_default_processing_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::default_processing_info(this),
        _Internal::default_processing_info(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.BookmarkOrigin bookmark_origin = 17;
  if (this->_internal_has_bookmark_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::bookmark_origin(this),
        _Internal::bookmark_origin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Dataset)
  return target;
}

size_t Dataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Dataset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 5;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string description = 7;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string notes = 11;
  if (!this->_internal_notes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .google.protobuf.Struct metadata = 8;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .clarifai.api.Visibility visibility = 9;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  // .clarifai.api.AnnotationFilter default_annotation_filter = 12;
  if (this->_internal_has_default_annotation_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.default_annotation_filter_);
  }

  // .clarifai.api.DatasetVersion version = 13;
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.version_);
  }

  // .clarifai.api.DatasetVersionProcessingInfo default_processing_info = 16;
  if (this->_internal_has_default_processing_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.default_processing_info_);
  }

  // .clarifai.api.BookmarkOrigin bookmark_origin = 17;
  if (this->_internal_has_bookmark_origin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bookmark_origin_);
  }

  // bool is_starred = 14;
  if (this->_internal_is_starred() != 0) {
    total_size += 1 + 1;
  }

  // int32 star_count = 15;
  if (this->_internal_star_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_star_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dataset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dataset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dataset::GetClassData() const { return &_class_data_; }


void Dataset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dataset*>(&to_msg);
  auto& from = static_cast<const Dataset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Dataset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_notes().empty()) {
    _this->_internal_set_notes(from._internal_notes());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  if (from._internal_has_default_annotation_filter()) {
    _this->_internal_mutable_default_annotation_filter()->::clarifai::api::AnnotationFilter::MergeFrom(
        from._internal_default_annotation_filter());
  }
  if (from._internal_has_version()) {
    _this->_internal_mutable_version()->::clarifai::api::DatasetVersion::MergeFrom(
        from._internal_version());
  }
  if (from._internal_has_default_processing_info()) {
    _this->_internal_mutable_default_processing_info()->::clarifai::api::DatasetVersionProcessingInfo::MergeFrom(
        from._internal_default_processing_info());
  }
  if (from._internal_has_bookmark_origin()) {
    _this->_internal_mutable_bookmark_origin()->::clarifai::api::BookmarkOrigin::MergeFrom(
        from._internal_bookmark_origin());
  }
  if (from._internal_is_starred() != 0) {
    _this->_internal_set_is_starred(from._internal_is_starred());
  }
  if (from._internal_star_count() != 0) {
    _this->_internal_set_star_count(from._internal_star_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dataset::CopyFrom(const Dataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dataset::IsInitialized() const {
  return true;
}

void Dataset::InternalSwap(Dataset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notes_, lhs_arena,
      &other->_impl_.notes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dataset, _impl_.star_count_)
      + sizeof(Dataset::_impl_.star_count_)
      - PROTOBUF_FIELD_OFFSET(Dataset, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dataset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[47]);
}

// ===================================================================

class AnnotationFilter::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const AnnotationFilter* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const AnnotationFilter* msg);
  static const ::clarifai::api::Search& saved_search(const AnnotationFilter* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AnnotationFilter::_Internal::created_at(const AnnotationFilter* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AnnotationFilter::_Internal::modified_at(const AnnotationFilter* msg) {
  return *msg->_impl_.modified_at_;
}
const ::clarifai::api::Search&
AnnotationFilter::_Internal::saved_search(const AnnotationFilter* msg) {
  return *msg->_impl_.saved_search_;
}
void AnnotationFilter::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void AnnotationFilter::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
AnnotationFilter::AnnotationFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AnnotationFilter)
}
AnnotationFilter::AnnotationFilter(const AnnotationFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnnotationFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.saved_search_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_saved_search()) {
    _this->_impl_.saved_search_ = new ::clarifai::api::Search(*from._impl_.saved_search_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AnnotationFilter)
}

inline void AnnotationFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.saved_search_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AnnotationFilter::~AnnotationFilter() {
  // @@protoc_insertion_point(destructor:clarifai.api.AnnotationFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnnotationFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.app_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.saved_search_;
}

void AnnotationFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnnotationFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AnnotationFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.saved_search_ != nullptr) {
    delete _impl_.saved_search_;
  }
  _impl_.saved_search_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotationFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AnnotationFilter.id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AnnotationFilter.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AnnotationFilter.app_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search saved_search = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_saved_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnotationFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AnnotationFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AnnotationFilter.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // string user_id = 4;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AnnotationFilter.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  // string app_id = 5;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AnnotationFilter.app_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_app_id(), target);
  }

  // .clarifai.api.Search saved_search = 8;
  if (this->_internal_has_saved_search()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::saved_search(this),
        _Internal::saved_search(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AnnotationFilter)
  return target;
}

size_t AnnotationFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AnnotationFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string user_id = 4;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string app_id = 5;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .clarifai.api.Search saved_search = 8;
  if (this->_internal_has_saved_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.saved_search_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnotationFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnnotationFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnotationFilter::GetClassData() const { return &_class_data_; }


void AnnotationFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnnotationFilter*>(&to_msg);
  auto& from = static_cast<const AnnotationFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AnnotationFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_saved_search()) {
    _this->_internal_mutable_saved_search()->::clarifai::api::Search::MergeFrom(
        from._internal_saved_search());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnotationFilter::CopyFrom(const AnnotationFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AnnotationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationFilter::IsInitialized() const {
  return true;
}

void AnnotationFilter::InternalSwap(AnnotationFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnnotationFilter, _impl_.saved_search_)
      + sizeof(AnnotationFilter::_impl_.saved_search_)
      - PROTOBUF_FIELD_OFFSET(AnnotationFilter, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[48]);
}

// ===================================================================

class DatasetInput::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const DatasetInput* msg);
  static const ::clarifai::api::Input& input(const DatasetInput* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DatasetInput::_Internal::created_at(const DatasetInput* msg) {
  return *msg->_impl_.created_at_;
}
const ::clarifai::api::Input&
DatasetInput::_Internal::input(const DatasetInput* msg) {
  return *msg->_impl_.input_;
}
void DatasetInput::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
DatasetInput::DatasetInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DatasetInput)
}
DatasetInput::DatasetInput(const DatasetInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatasetInput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::clarifai::api::Input(*from._impl_.input_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetInput)
}

inline void DatasetInput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DatasetInput::~DatasetInput() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetInput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatasetInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.input_;
}

void DatasetInput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatasetInput::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetInput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp created_at = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp created_at = 1;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Input input = 2;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetInput)
  return target;
}

size_t DatasetInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp created_at = 1;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .clarifai.api.Input input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatasetInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetInput::GetClassData() const { return &_class_data_; }


void DatasetInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatasetInput*>(&to_msg);
  auto& from = static_cast<const DatasetInput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetInput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::clarifai::api::Input::MergeFrom(
        from._internal_input());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetInput::CopyFrom(const DatasetInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetInput::IsInitialized() const {
  return true;
}

void DatasetInput::InternalSwap(DatasetInput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetInput, _impl_.input_)
      + sizeof(DatasetInput::_impl_.input_)
      - PROTOBUF_FIELD_OFFSET(DatasetInput, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetInput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[49]);
}

// ===================================================================

DatasetVersion_MetricsEntry_DoNotUse::DatasetVersion_MetricsEntry_DoNotUse() {}
DatasetVersion_MetricsEntry_DoNotUse::DatasetVersion_MetricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DatasetVersion_MetricsEntry_DoNotUse::MergeFrom(const DatasetVersion_MetricsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DatasetVersion_MetricsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[50]);
}

// ===================================================================

class DatasetVersion::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const DatasetVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const DatasetVersion* msg);
  static const ::clarifai::api::AnnotationFilterConfig& annotation_filter_config(const DatasetVersion* msg);
  static const ::clarifai::api::ModelPredictConfig& model_predict_config(const DatasetVersion* msg);
  static const ::clarifai::api::status::Status& status(const DatasetVersion* msg);
  static const ::clarifai::api::DatasetVersionProcessingInfo& processing_info(const DatasetVersion* msg);
  static const ::clarifai::api::DatasetVersionExportInfo& export_info(const DatasetVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const DatasetVersion* msg);
  static const ::clarifai::api::Visibility& visibility(const DatasetVersion* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DatasetVersion::_Internal::created_at(const DatasetVersion* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DatasetVersion::_Internal::modified_at(const DatasetVersion* msg) {
  return *msg->_impl_.modified_at_;
}
const ::clarifai::api::AnnotationFilterConfig&
DatasetVersion::_Internal::annotation_filter_config(const DatasetVersion* msg) {
  return *msg->_impl_.data_config_.annotation_filter_config_;
}
const ::clarifai::api::ModelPredictConfig&
DatasetVersion::_Internal::model_predict_config(const DatasetVersion* msg) {
  return *msg->_impl_.data_config_.model_predict_config_;
}
const ::clarifai::api::status::Status&
DatasetVersion::_Internal::status(const DatasetVersion* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::DatasetVersionProcessingInfo&
DatasetVersion::_Internal::processing_info(const DatasetVersion* msg) {
  return *msg->_impl_.processing_info_;
}
const ::clarifai::api::DatasetVersionExportInfo&
DatasetVersion::_Internal::export_info(const DatasetVersion* msg) {
  return *msg->_impl_.export_info_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
DatasetVersion::_Internal::metadata(const DatasetVersion* msg) {
  return *msg->_impl_.metadata_;
}
const ::clarifai::api::Visibility&
DatasetVersion::_Internal::visibility(const DatasetVersion* msg) {
  return *msg->_impl_.visibility_;
}
void DatasetVersion::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void DatasetVersion::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void DatasetVersion::set_allocated_annotation_filter_config(::clarifai::api::AnnotationFilterConfig* annotation_filter_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data_config();
  if (annotation_filter_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(annotation_filter_config);
    if (message_arena != submessage_arena) {
      annotation_filter_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation_filter_config, submessage_arena);
    }
    set_has_annotation_filter_config();
    _impl_.data_config_.annotation_filter_config_ = annotation_filter_config;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DatasetVersion.annotation_filter_config)
}
void DatasetVersion::set_allocated_model_predict_config(::clarifai::api::ModelPredictConfig* model_predict_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data_config();
  if (model_predict_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(model_predict_config);
    if (message_arena != submessage_arena) {
      model_predict_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_predict_config, submessage_arena);
    }
    set_has_model_predict_config();
    _impl_.data_config_.model_predict_config_ = model_predict_config;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DatasetVersion.model_predict_config)
}
void DatasetVersion::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void DatasetVersion::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
DatasetVersion::DatasetVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &DatasetVersion::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DatasetVersion)
}
DatasetVersion::DatasetVersion(const DatasetVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatasetVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.embed_model_version_ids_){from._impl_.embed_model_version_ids_}
    , /*decltype(_impl_.metrics_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.export_info_){nullptr}
    , decltype(_impl_.processing_info_){nullptr}
    , decltype(_impl_.data_config_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.metrics_.MergeFrom(from._impl_.metrics_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  if (from._internal_has_export_info()) {
    _this->_impl_.export_info_ = new ::clarifai::api::DatasetVersionExportInfo(*from._impl_.export_info_);
  }
  if (from._internal_has_processing_info()) {
    _this->_impl_.processing_info_ = new ::clarifai::api::DatasetVersionProcessingInfo(*from._impl_.processing_info_);
  }
  clear_has_data_config();
  switch (from.data_config_case()) {
    case kAnnotationFilterConfig: {
      _this->_internal_mutable_annotation_filter_config()->::clarifai::api::AnnotationFilterConfig::MergeFrom(
          from._internal_annotation_filter_config());
      break;
    }
    case kModelPredictConfig: {
      _this->_internal_mutable_model_predict_config()->::clarifai::api::ModelPredictConfig::MergeFrom(
          from._internal_model_predict_config());
      break;
    }
    case DATA_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetVersion)
}

inline void DatasetVersion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.embed_model_version_ids_){arena}
    , /*decltype(_impl_.metrics_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.export_info_){nullptr}
    , decltype(_impl_.processing_info_){nullptr}
    , decltype(_impl_.data_config_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_data_config();
}

DatasetVersion::~DatasetVersion() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void DatasetVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.embed_model_version_ids_.~RepeatedPtrField();
  _impl_.metrics_.Destruct();
  _impl_.metrics_.~MapField();
  _impl_.id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.dataset_id_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
  if (this != internal_default_instance()) delete _impl_.export_info_;
  if (this != internal_default_instance()) delete _impl_.processing_info_;
  if (has_data_config()) {
    clear_data_config();
  }
}

void DatasetVersion::ArenaDtor(void* object) {
  DatasetVersion* _this = reinterpret_cast< DatasetVersion* >(object);
  _this->_impl_.metrics_.Destruct();
}
void DatasetVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatasetVersion::clear_data_config() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.DatasetVersion)
  switch (data_config_case()) {
    case kAnnotationFilterConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_config_.annotation_filter_config_;
      }
      break;
    }
    case kModelPredictConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_config_.model_predict_config_;
      }
      break;
    }
    case DATA_CONFIG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_CONFIG_NOT_SET;
}


void DatasetVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.embed_model_version_ids_.Clear();
  _impl_.metrics_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.dataset_id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.export_info_ != nullptr) {
    delete _impl_.export_info_;
  }
  _impl_.export_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.processing_info_ != nullptr) {
    delete _impl_.processing_info_;
  }
  _impl_.processing_info_ = nullptr;
  clear_data_config();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DatasetVersion.id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DatasetVersion.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DatasetVersion.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DatasetVersion.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DatasetVersion.description"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string embed_model_version_ids = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_embed_model_version_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DatasetVersion.embed_model_version_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AnnotationFilterConfig annotation_filter_config = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_filter_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .clarifai.api.DatasetVersionMetrics> metrics = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.metrics_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersionExportInfo export_info = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_export_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelPredictConfig model_predict_config = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_predict_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersionProcessingInfo processing_info = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  // string user_id = 5;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  // string dataset_id = 6;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.dataset_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_dataset_id(), target);
  }

  // .clarifai.api.status.Status status = 8;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string description = 10;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.description");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_description(), target);
  }

  // .google.protobuf.Struct metadata = 12;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Visibility visibility = 13;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  // repeated string embed_model_version_ids = 14;
  for (int i = 0, n = this->_internal_embed_model_version_ids_size(); i < n; i++) {
    const auto& s = this->_internal_embed_model_version_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.embed_model_version_ids");
    target = stream->WriteString(14, s, target);
  }

  // .clarifai.api.AnnotationFilterConfig annotation_filter_config = 15;
  if (_internal_has_annotation_filter_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::annotation_filter_config(this),
        _Internal::annotation_filter_config(this).GetCachedSize(), target, stream);
  }

  // map<string, .clarifai.api.DatasetVersionMetrics> metrics = 16;
  if (!this->_internal_metrics().empty()) {
    using MapType = ::_pb::Map<std::string, ::clarifai::api::DatasetVersionMetrics>;
    using WireHelper = DatasetVersion_MetricsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metrics();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "clarifai.api.DatasetVersion.MetricsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(16, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(16, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .clarifai.api.DatasetVersionExportInfo export_info = 17;
  if (this->_internal_has_export_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::export_info(this),
        _Internal::export_info(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ModelPredictConfig model_predict_config = 18;
  if (_internal_has_model_predict_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::model_predict_config(this),
        _Internal::model_predict_config(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.DatasetVersionProcessingInfo processing_info = 19;
  if (this->_internal_has_processing_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::processing_info(this),
        _Internal::processing_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetVersion)
  return target;
}

size_t DatasetVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string embed_model_version_ids = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.embed_model_version_ids_.size());
  for (int i = 0, n = _impl_.embed_model_version_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.embed_model_version_ids_.Get(i));
  }

  // map<string, .clarifai.api.DatasetVersionMetrics> metrics = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metrics_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::clarifai::api::DatasetVersionMetrics >::const_iterator
      it = this->_internal_metrics().begin();
      it != this->_internal_metrics().end(); ++it) {
    total_size += DatasetVersion_MetricsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 5;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string dataset_id = 6;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // string description = 10;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .clarifai.api.status.Status status = 8;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .google.protobuf.Struct metadata = 12;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .clarifai.api.Visibility visibility = 13;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  // .clarifai.api.DatasetVersionExportInfo export_info = 17;
  if (this->_internal_has_export_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.export_info_);
  }

  // .clarifai.api.DatasetVersionProcessingInfo processing_info = 19;
  if (this->_internal_has_processing_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.processing_info_);
  }

  switch (data_config_case()) {
    // .clarifai.api.AnnotationFilterConfig annotation_filter_config = 15;
    case kAnnotationFilterConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_config_.annotation_filter_config_);
      break;
    }
    // .clarifai.api.ModelPredictConfig model_predict_config = 18;
    case kModelPredictConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_config_.model_predict_config_);
      break;
    }
    case DATA_CONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatasetVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetVersion::GetClassData() const { return &_class_data_; }


void DatasetVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatasetVersion*>(&to_msg);
  auto& from = static_cast<const DatasetVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetVersion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.embed_model_version_ids_.MergeFrom(from._impl_.embed_model_version_ids_);
  _this->_impl_.metrics_.MergeFrom(from._impl_.metrics_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  if (from._internal_has_export_info()) {
    _this->_internal_mutable_export_info()->::clarifai::api::DatasetVersionExportInfo::MergeFrom(
        from._internal_export_info());
  }
  if (from._internal_has_processing_info()) {
    _this->_internal_mutable_processing_info()->::clarifai::api::DatasetVersionProcessingInfo::MergeFrom(
        from._internal_processing_info());
  }
  switch (from.data_config_case()) {
    case kAnnotationFilterConfig: {
      _this->_internal_mutable_annotation_filter_config()->::clarifai::api::AnnotationFilterConfig::MergeFrom(
          from._internal_annotation_filter_config());
      break;
    }
    case kModelPredictConfig: {
      _this->_internal_mutable_model_predict_config()->::clarifai::api::ModelPredictConfig::MergeFrom(
          from._internal_model_predict_config());
      break;
    }
    case DATA_CONFIG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetVersion::CopyFrom(const DatasetVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetVersion::IsInitialized() const {
  return true;
}

void DatasetVersion::InternalSwap(DatasetVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.embed_model_version_ids_.InternalSwap(&other->_impl_.embed_model_version_ids_);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetVersion, _impl_.processing_info_)
      + sizeof(DatasetVersion::_impl_.processing_info_)
      - PROTOBUF_FIELD_OFFSET(DatasetVersion, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
  swap(_impl_.data_config_, other->_impl_.data_config_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[51]);
}

// ===================================================================

class AnnotationFilterConfig::_Internal {
 public:
  static const ::clarifai::api::AnnotationFilter& annotation_filter(const AnnotationFilterConfig* msg);
};

const ::clarifai::api::AnnotationFilter&
AnnotationFilterConfig::_Internal::annotation_filter(const AnnotationFilterConfig* msg) {
  return *msg->_impl_.annotation_filter_;
}
AnnotationFilterConfig::AnnotationFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AnnotationFilterConfig)
}
AnnotationFilterConfig::AnnotationFilterConfig(const AnnotationFilterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnnotationFilterConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_filter_){nullptr}
    , decltype(_impl_.ignore_empty_inputs_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_annotation_filter()) {
    _this->_impl_.annotation_filter_ = new ::clarifai::api::AnnotationFilter(*from._impl_.annotation_filter_);
  }
  _this->_impl_.ignore_empty_inputs_ = from._impl_.ignore_empty_inputs_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AnnotationFilterConfig)
}

inline void AnnotationFilterConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_filter_){nullptr}
    , decltype(_impl_.ignore_empty_inputs_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AnnotationFilterConfig::~AnnotationFilterConfig() {
  // @@protoc_insertion_point(destructor:clarifai.api.AnnotationFilterConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnnotationFilterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.annotation_filter_;
}

void AnnotationFilterConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnnotationFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AnnotationFilterConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.annotation_filter_ != nullptr) {
    delete _impl_.annotation_filter_;
  }
  _impl_.annotation_filter_ = nullptr;
  _impl_.ignore_empty_inputs_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotationFilterConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.AnnotationFilter annotation_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ignore_empty_inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ignore_empty_inputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnotationFilterConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AnnotationFilterConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.AnnotationFilter annotation_filter = 1;
  if (this->_internal_has_annotation_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::annotation_filter(this),
        _Internal::annotation_filter(this).GetCachedSize(), target, stream);
  }

  // bool ignore_empty_inputs = 2;
  if (this->_internal_ignore_empty_inputs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ignore_empty_inputs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AnnotationFilterConfig)
  return target;
}

size_t AnnotationFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AnnotationFilterConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.AnnotationFilter annotation_filter = 1;
  if (this->_internal_has_annotation_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotation_filter_);
  }

  // bool ignore_empty_inputs = 2;
  if (this->_internal_ignore_empty_inputs() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnotationFilterConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnnotationFilterConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnotationFilterConfig::GetClassData() const { return &_class_data_; }


void AnnotationFilterConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnnotationFilterConfig*>(&to_msg);
  auto& from = static_cast<const AnnotationFilterConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AnnotationFilterConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_annotation_filter()) {
    _this->_internal_mutable_annotation_filter()->::clarifai::api::AnnotationFilter::MergeFrom(
        from._internal_annotation_filter());
  }
  if (from._internal_ignore_empty_inputs() != 0) {
    _this->_internal_set_ignore_empty_inputs(from._internal_ignore_empty_inputs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnotationFilterConfig::CopyFrom(const AnnotationFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AnnotationFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationFilterConfig::IsInitialized() const {
  return true;
}

void AnnotationFilterConfig::InternalSwap(AnnotationFilterConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnnotationFilterConfig, _impl_.ignore_empty_inputs_)
      + sizeof(AnnotationFilterConfig::_impl_.ignore_empty_inputs_)
      - PROTOBUF_FIELD_OFFSET(AnnotationFilterConfig, _impl_.annotation_filter_)>(
          reinterpret_cast<char*>(&_impl_.annotation_filter_),
          reinterpret_cast<char*>(&other->_impl_.annotation_filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationFilterConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[52]);
}

// ===================================================================

class ModelPredictConfig::_Internal {
 public:
  static const ::clarifai::api::Model& model(const ModelPredictConfig* msg);
};

const ::clarifai::api::Model&
ModelPredictConfig::_Internal::model(const ModelPredictConfig* msg) {
  return *msg->_impl_.model_;
}
ModelPredictConfig::ModelPredictConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelPredictConfig)
}
ModelPredictConfig::ModelPredictConfig(const ModelPredictConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelPredictConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_model()) {
    _this->_impl_.model_ = new ::clarifai::api::Model(*from._impl_.model_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelPredictConfig)
}

inline void ModelPredictConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ModelPredictConfig::~ModelPredictConfig() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelPredictConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelPredictConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.model_;
}

void ModelPredictConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelPredictConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelPredictConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.model_ != nullptr) {
    delete _impl_.model_;
  }
  _impl_.model_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelPredictConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Model model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelPredictConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelPredictConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Model model = 1;
  if (this->_internal_has_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::model(this),
        _Internal::model(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelPredictConfig)
  return target;
}

size_t ModelPredictConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelPredictConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Model model = 1;
  if (this->_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelPredictConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelPredictConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelPredictConfig::GetClassData() const { return &_class_data_; }


void ModelPredictConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelPredictConfig*>(&to_msg);
  auto& from = static_cast<const ModelPredictConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelPredictConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_model()) {
    _this->_internal_mutable_model()->::clarifai::api::Model::MergeFrom(
        from._internal_model());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelPredictConfig::CopyFrom(const ModelPredictConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelPredictConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelPredictConfig::IsInitialized() const {
  return true;
}

void ModelPredictConfig::InternalSwap(ModelPredictConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.model_, other->_impl_.model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelPredictConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[53]);
}

// ===================================================================

class DatasetVersionMetrics::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& inputs_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& unlabeled_inputs_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& inputs_with_metadata_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& inputs_with_geo_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& regions_count(const DatasetVersionMetrics* msg);
  static const ::MatrixUint64& region_location_matrix(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& bounding_boxes_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& polygons_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& points_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& masks_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& region_inputs_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& region_frames_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& frames_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& frame_inputs_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& embeddings_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& positive_input_tags_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& positive_region_tags_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& positive_frame_tags_count(const DatasetVersionMetrics* msg);
};

const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::inputs_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.inputs_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::unlabeled_inputs_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.unlabeled_inputs_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::inputs_with_metadata_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.inputs_with_metadata_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::inputs_with_geo_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.inputs_with_geo_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::regions_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.regions_count_;
}
const ::MatrixUint64&
DatasetVersionMetrics::_Internal::region_location_matrix(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.region_location_matrix_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::bounding_boxes_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.bounding_boxes_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::polygons_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.polygons_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::points_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.points_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::masks_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.masks_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::region_inputs_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.region_inputs_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::region_frames_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.region_frames_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::frames_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.frames_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::frame_inputs_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.frame_inputs_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::embeddings_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.embeddings_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::positive_input_tags_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.positive_input_tags_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::positive_region_tags_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.positive_region_tags_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::positive_frame_tags_count(const DatasetVersionMetrics* msg) {
  return *msg->_impl_.positive_frame_tags_count_;
}
void DatasetVersionMetrics::clear_inputs_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.inputs_count_ != nullptr) {
    delete _impl_.inputs_count_;
  }
  _impl_.inputs_count_ = nullptr;
}
void DatasetVersionMetrics::clear_unlabeled_inputs_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.unlabeled_inputs_count_ != nullptr) {
    delete _impl_.unlabeled_inputs_count_;
  }
  _impl_.unlabeled_inputs_count_ = nullptr;
}
void DatasetVersionMetrics::clear_inputs_with_metadata_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.inputs_with_metadata_count_ != nullptr) {
    delete _impl_.inputs_with_metadata_count_;
  }
  _impl_.inputs_with_metadata_count_ = nullptr;
}
void DatasetVersionMetrics::clear_inputs_with_geo_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.inputs_with_geo_count_ != nullptr) {
    delete _impl_.inputs_with_geo_count_;
  }
  _impl_.inputs_with_geo_count_ = nullptr;
}
void DatasetVersionMetrics::clear_regions_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.regions_count_ != nullptr) {
    delete _impl_.regions_count_;
  }
  _impl_.regions_count_ = nullptr;
}
void DatasetVersionMetrics::clear_region_location_matrix() {
  if (GetArenaForAllocation() == nullptr && _impl_.region_location_matrix_ != nullptr) {
    delete _impl_.region_location_matrix_;
  }
  _impl_.region_location_matrix_ = nullptr;
}
void DatasetVersionMetrics::clear_bounding_boxes_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.bounding_boxes_count_ != nullptr) {
    delete _impl_.bounding_boxes_count_;
  }
  _impl_.bounding_boxes_count_ = nullptr;
}
void DatasetVersionMetrics::clear_polygons_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.polygons_count_ != nullptr) {
    delete _impl_.polygons_count_;
  }
  _impl_.polygons_count_ = nullptr;
}
void DatasetVersionMetrics::clear_points_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.points_count_ != nullptr) {
    delete _impl_.points_count_;
  }
  _impl_.points_count_ = nullptr;
}
void DatasetVersionMetrics::clear_masks_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.masks_count_ != nullptr) {
    delete _impl_.masks_count_;
  }
  _impl_.masks_count_ = nullptr;
}
void DatasetVersionMetrics::clear_region_inputs_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.region_inputs_count_ != nullptr) {
    delete _impl_.region_inputs_count_;
  }
  _impl_.region_inputs_count_ = nullptr;
}
void DatasetVersionMetrics::clear_region_frames_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.region_frames_count_ != nullptr) {
    delete _impl_.region_frames_count_;
  }
  _impl_.region_frames_count_ = nullptr;
}
void DatasetVersionMetrics::clear_frames_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.frames_count_ != nullptr) {
    delete _impl_.frames_count_;
  }
  _impl_.frames_count_ = nullptr;
}
void DatasetVersionMetrics::clear_frame_inputs_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.frame_inputs_count_ != nullptr) {
    delete _impl_.frame_inputs_count_;
  }
  _impl_.frame_inputs_count_ = nullptr;
}
void DatasetVersionMetrics::clear_embeddings_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.embeddings_count_ != nullptr) {
    delete _impl_.embeddings_count_;
  }
  _impl_.embeddings_count_ = nullptr;
}
void DatasetVersionMetrics::clear_positive_input_tags_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.positive_input_tags_count_ != nullptr) {
    delete _impl_.positive_input_tags_count_;
  }
  _impl_.positive_input_tags_count_ = nullptr;
}
void DatasetVersionMetrics::clear_positive_region_tags_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.positive_region_tags_count_ != nullptr) {
    delete _impl_.positive_region_tags_count_;
  }
  _impl_.positive_region_tags_count_ = nullptr;
}
void DatasetVersionMetrics::clear_positive_frame_tags_count() {
  if (GetArenaForAllocation() == nullptr && _impl_.positive_frame_tags_count_ != nullptr) {
    delete _impl_.positive_frame_tags_count_;
  }
  _impl_.positive_frame_tags_count_ = nullptr;
}
DatasetVersionMetrics::DatasetVersionMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DatasetVersionMetrics)
}
DatasetVersionMetrics::DatasetVersionMetrics(const DatasetVersionMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatasetVersionMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_count_){nullptr}
    , decltype(_impl_.unlabeled_inputs_count_){nullptr}
    , decltype(_impl_.inputs_with_metadata_count_){nullptr}
    , decltype(_impl_.inputs_with_geo_count_){nullptr}
    , decltype(_impl_.regions_count_){nullptr}
    , decltype(_impl_.region_location_matrix_){nullptr}
    , decltype(_impl_.bounding_boxes_count_){nullptr}
    , decltype(_impl_.polygons_count_){nullptr}
    , decltype(_impl_.points_count_){nullptr}
    , decltype(_impl_.masks_count_){nullptr}
    , decltype(_impl_.frames_count_){nullptr}
    , decltype(_impl_.embeddings_count_){nullptr}
    , decltype(_impl_.positive_input_tags_count_){nullptr}
    , decltype(_impl_.positive_region_tags_count_){nullptr}
    , decltype(_impl_.positive_frame_tags_count_){nullptr}
    , decltype(_impl_.region_inputs_count_){nullptr}
    , decltype(_impl_.region_frames_count_){nullptr}
    , decltype(_impl_.frame_inputs_count_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inputs_count()) {
    _this->_impl_.inputs_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.inputs_count_);
  }
  if (from._internal_has_unlabeled_inputs_count()) {
    _this->_impl_.unlabeled_inputs_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.unlabeled_inputs_count_);
  }
  if (from._internal_has_inputs_with_metadata_count()) {
    _this->_impl_.inputs_with_metadata_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.inputs_with_metadata_count_);
  }
  if (from._internal_has_inputs_with_geo_count()) {
    _this->_impl_.inputs_with_geo_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.inputs_with_geo_count_);
  }
  if (from._internal_has_regions_count()) {
    _this->_impl_.regions_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.regions_count_);
  }
  if (from._internal_has_region_location_matrix()) {
    _this->_impl_.region_location_matrix_ = new ::MatrixUint64(*from._impl_.region_location_matrix_);
  }
  if (from._internal_has_bounding_boxes_count()) {
    _this->_impl_.bounding_boxes_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.bounding_boxes_count_);
  }
  if (from._internal_has_polygons_count()) {
    _this->_impl_.polygons_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.polygons_count_);
  }
  if (from._internal_has_points_count()) {
    _this->_impl_.points_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.points_count_);
  }
  if (from._internal_has_masks_count()) {
    _this->_impl_.masks_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.masks_count_);
  }
  if (from._internal_has_frames_count()) {
    _this->_impl_.frames_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.frames_count_);
  }
  if (from._internal_has_embeddings_count()) {
    _this->_impl_.embeddings_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.embeddings_count_);
  }
  if (from._internal_has_positive_input_tags_count()) {
    _this->_impl_.positive_input_tags_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.positive_input_tags_count_);
  }
  if (from._internal_has_positive_region_tags_count()) {
    _this->_impl_.positive_region_tags_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.positive_region_tags_count_);
  }
  if (from._internal_has_positive_frame_tags_count()) {
    _this->_impl_.positive_frame_tags_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.positive_frame_tags_count_);
  }
  if (from._internal_has_region_inputs_count()) {
    _this->_impl_.region_inputs_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.region_inputs_count_);
  }
  if (from._internal_has_region_frames_count()) {
    _this->_impl_.region_frames_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.region_frames_count_);
  }
  if (from._internal_has_frame_inputs_count()) {
    _this->_impl_.frame_inputs_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.frame_inputs_count_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetVersionMetrics)
}

inline void DatasetVersionMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_count_){nullptr}
    , decltype(_impl_.unlabeled_inputs_count_){nullptr}
    , decltype(_impl_.inputs_with_metadata_count_){nullptr}
    , decltype(_impl_.inputs_with_geo_count_){nullptr}
    , decltype(_impl_.regions_count_){nullptr}
    , decltype(_impl_.region_location_matrix_){nullptr}
    , decltype(_impl_.bounding_boxes_count_){nullptr}
    , decltype(_impl_.polygons_count_){nullptr}
    , decltype(_impl_.points_count_){nullptr}
    , decltype(_impl_.masks_count_){nullptr}
    , decltype(_impl_.frames_count_){nullptr}
    , decltype(_impl_.embeddings_count_){nullptr}
    , decltype(_impl_.positive_input_tags_count_){nullptr}
    , decltype(_impl_.positive_region_tags_count_){nullptr}
    , decltype(_impl_.positive_frame_tags_count_){nullptr}
    , decltype(_impl_.region_inputs_count_){nullptr}
    , decltype(_impl_.region_frames_count_){nullptr}
    , decltype(_impl_.frame_inputs_count_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DatasetVersionMetrics::~DatasetVersionMetrics() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetVersionMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatasetVersionMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.inputs_count_;
  if (this != internal_default_instance()) delete _impl_.unlabeled_inputs_count_;
  if (this != internal_default_instance()) delete _impl_.inputs_with_metadata_count_;
  if (this != internal_default_instance()) delete _impl_.inputs_with_geo_count_;
  if (this != internal_default_instance()) delete _impl_.regions_count_;
  if (this != internal_default_instance()) delete _impl_.region_location_matrix_;
  if (this != internal_default_instance()) delete _impl_.bounding_boxes_count_;
  if (this != internal_default_instance()) delete _impl_.polygons_count_;
  if (this != internal_default_instance()) delete _impl_.points_count_;
  if (this != internal_default_instance()) delete _impl_.masks_count_;
  if (this != internal_default_instance()) delete _impl_.frames_count_;
  if (this != internal_default_instance()) delete _impl_.embeddings_count_;
  if (this != internal_default_instance()) delete _impl_.positive_input_tags_count_;
  if (this != internal_default_instance()) delete _impl_.positive_region_tags_count_;
  if (this != internal_default_instance()) delete _impl_.positive_frame_tags_count_;
  if (this != internal_default_instance()) delete _impl_.region_inputs_count_;
  if (this != internal_default_instance()) delete _impl_.region_frames_count_;
  if (this != internal_default_instance()) delete _impl_.frame_inputs_count_;
}

void DatasetVersionMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatasetVersionMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetVersionMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.inputs_count_ != nullptr) {
    delete _impl_.inputs_count_;
  }
  _impl_.inputs_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unlabeled_inputs_count_ != nullptr) {
    delete _impl_.unlabeled_inputs_count_;
  }
  _impl_.unlabeled_inputs_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inputs_with_metadata_count_ != nullptr) {
    delete _impl_.inputs_with_metadata_count_;
  }
  _impl_.inputs_with_metadata_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inputs_with_geo_count_ != nullptr) {
    delete _impl_.inputs_with_geo_count_;
  }
  _impl_.inputs_with_geo_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regions_count_ != nullptr) {
    delete _impl_.regions_count_;
  }
  _impl_.regions_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.region_location_matrix_ != nullptr) {
    delete _impl_.region_location_matrix_;
  }
  _impl_.region_location_matrix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bounding_boxes_count_ != nullptr) {
    delete _impl_.bounding_boxes_count_;
  }
  _impl_.bounding_boxes_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.polygons_count_ != nullptr) {
    delete _impl_.polygons_count_;
  }
  _impl_.polygons_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.points_count_ != nullptr) {
    delete _impl_.points_count_;
  }
  _impl_.points_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.masks_count_ != nullptr) {
    delete _impl_.masks_count_;
  }
  _impl_.masks_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.frames_count_ != nullptr) {
    delete _impl_.frames_count_;
  }
  _impl_.frames_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.embeddings_count_ != nullptr) {
    delete _impl_.embeddings_count_;
  }
  _impl_.embeddings_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.positive_input_tags_count_ != nullptr) {
    delete _impl_.positive_input_tags_count_;
  }
  _impl_.positive_input_tags_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.positive_region_tags_count_ != nullptr) {
    delete _impl_.positive_region_tags_count_;
  }
  _impl_.positive_region_tags_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.positive_frame_tags_count_ != nullptr) {
    delete _impl_.positive_frame_tags_count_;
  }
  _impl_.positive_frame_tags_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.region_inputs_count_ != nullptr) {
    delete _impl_.region_inputs_count_;
  }
  _impl_.region_inputs_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.region_frames_count_ != nullptr) {
    delete _impl_.region_frames_count_;
  }
  _impl_.region_frames_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.frame_inputs_count_ != nullptr) {
    delete _impl_.frame_inputs_count_;
  }
  _impl_.frame_inputs_count_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetVersionMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.UInt64Value inputs_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputs_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value unlabeled_inputs_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_unlabeled_inputs_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value inputs_with_metadata_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputs_with_metadata_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value inputs_with_geo_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputs_with_geo_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value regions_count = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_regions_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MatrixUint64 region_location_matrix = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_location_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value bounding_boxes_count = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounding_boxes_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value polygons_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygons_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value points_count = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_points_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value masks_count = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_masks_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value frames_count = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_frames_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value embeddings_count = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_embeddings_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value positive_input_tags_count = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_positive_input_tags_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value positive_region_tags_count = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_positive_region_tags_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value positive_frame_tags_count = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_positive_frame_tags_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value region_inputs_count = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_inputs_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value region_frames_count = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_frames_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value frame_inputs_count = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_inputs_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetVersionMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetVersionMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt64Value inputs_count = 1;
  if (this->_internal_has_inputs_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::inputs_count(this),
        _Internal::inputs_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value unlabeled_inputs_count = 6;
  if (this->_internal_has_unlabeled_inputs_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::unlabeled_inputs_count(this),
        _Internal::unlabeled_inputs_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value inputs_with_metadata_count = 8;
  if (this->_internal_has_inputs_with_metadata_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::inputs_with_metadata_count(this),
        _Internal::inputs_with_metadata_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value inputs_with_geo_count = 9;
  if (this->_internal_has_inputs_with_geo_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::inputs_with_geo_count(this),
        _Internal::inputs_with_geo_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value regions_count = 20;
  if (this->_internal_has_regions_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::regions_count(this),
        _Internal::regions_count(this).GetCachedSize(), target, stream);
  }

  // .MatrixUint64 region_location_matrix = 21;
  if (this->_internal_has_region_location_matrix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::region_location_matrix(this),
        _Internal::region_location_matrix(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value bounding_boxes_count = 22;
  if (this->_internal_has_bounding_boxes_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::bounding_boxes_count(this),
        _Internal::bounding_boxes_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value polygons_count = 23;
  if (this->_internal_has_polygons_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::polygons_count(this),
        _Internal::polygons_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value points_count = 24;
  if (this->_internal_has_points_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::points_count(this),
        _Internal::points_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value masks_count = 25;
  if (this->_internal_has_masks_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::masks_count(this),
        _Internal::masks_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value frames_count = 30;
  if (this->_internal_has_frames_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::frames_count(this),
        _Internal::frames_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value embeddings_count = 40;
  if (this->_internal_has_embeddings_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::embeddings_count(this),
        _Internal::embeddings_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value positive_input_tags_count = 50;
  if (this->_internal_has_positive_input_tags_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::positive_input_tags_count(this),
        _Internal::positive_input_tags_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value positive_region_tags_count = 51;
  if (this->_internal_has_positive_region_tags_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::positive_region_tags_count(this),
        _Internal::positive_region_tags_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value positive_frame_tags_count = 52;
  if (this->_internal_has_positive_frame_tags_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::positive_frame_tags_count(this),
        _Internal::positive_frame_tags_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value region_inputs_count = 60;
  if (this->_internal_has_region_inputs_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, _Internal::region_inputs_count(this),
        _Internal::region_inputs_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value region_frames_count = 61;
  if (this->_internal_has_region_frames_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(61, _Internal::region_frames_count(this),
        _Internal::region_frames_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value frame_inputs_count = 70;
  if (this->_internal_has_frame_inputs_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, _Internal::frame_inputs_count(this),
        _Internal::frame_inputs_count(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetVersionMetrics)
  return target;
}

size_t DatasetVersionMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetVersionMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.UInt64Value inputs_count = 1;
  if (this->_internal_has_inputs_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inputs_count_);
  }

  // .google.protobuf.UInt64Value unlabeled_inputs_count = 6;
  if (this->_internal_has_unlabeled_inputs_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unlabeled_inputs_count_);
  }

  // .google.protobuf.UInt64Value inputs_with_metadata_count = 8;
  if (this->_internal_has_inputs_with_metadata_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inputs_with_metadata_count_);
  }

  // .google.protobuf.UInt64Value inputs_with_geo_count = 9;
  if (this->_internal_has_inputs_with_geo_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inputs_with_geo_count_);
  }

  // .google.protobuf.UInt64Value regions_count = 20;
  if (this->_internal_has_regions_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regions_count_);
  }

  // .MatrixUint64 region_location_matrix = 21;
  if (this->_internal_has_region_location_matrix()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.region_location_matrix_);
  }

  // .google.protobuf.UInt64Value bounding_boxes_count = 22;
  if (this->_internal_has_bounding_boxes_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bounding_boxes_count_);
  }

  // .google.protobuf.UInt64Value polygons_count = 23;
  if (this->_internal_has_polygons_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.polygons_count_);
  }

  // .google.protobuf.UInt64Value points_count = 24;
  if (this->_internal_has_points_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.points_count_);
  }

  // .google.protobuf.UInt64Value masks_count = 25;
  if (this->_internal_has_masks_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.masks_count_);
  }

  // .google.protobuf.UInt64Value frames_count = 30;
  if (this->_internal_has_frames_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.frames_count_);
  }

  // .google.protobuf.UInt64Value embeddings_count = 40;
  if (this->_internal_has_embeddings_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.embeddings_count_);
  }

  // .google.protobuf.UInt64Value positive_input_tags_count = 50;
  if (this->_internal_has_positive_input_tags_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.positive_input_tags_count_);
  }

  // .google.protobuf.UInt64Value positive_region_tags_count = 51;
  if (this->_internal_has_positive_region_tags_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.positive_region_tags_count_);
  }

  // .google.protobuf.UInt64Value positive_frame_tags_count = 52;
  if (this->_internal_has_positive_frame_tags_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.positive_frame_tags_count_);
  }

  // .google.protobuf.UInt64Value region_inputs_count = 60;
  if (this->_internal_has_region_inputs_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.region_inputs_count_);
  }

  // .google.protobuf.UInt64Value region_frames_count = 61;
  if (this->_internal_has_region_frames_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.region_frames_count_);
  }

  // .google.protobuf.UInt64Value frame_inputs_count = 70;
  if (this->_internal_has_frame_inputs_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.frame_inputs_count_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetVersionMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatasetVersionMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetVersionMetrics::GetClassData() const { return &_class_data_; }


void DatasetVersionMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatasetVersionMetrics*>(&to_msg);
  auto& from = static_cast<const DatasetVersionMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetVersionMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_inputs_count()) {
    _this->_internal_mutable_inputs_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_inputs_count());
  }
  if (from._internal_has_unlabeled_inputs_count()) {
    _this->_internal_mutable_unlabeled_inputs_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_unlabeled_inputs_count());
  }
  if (from._internal_has_inputs_with_metadata_count()) {
    _this->_internal_mutable_inputs_with_metadata_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_inputs_with_metadata_count());
  }
  if (from._internal_has_inputs_with_geo_count()) {
    _this->_internal_mutable_inputs_with_geo_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_inputs_with_geo_count());
  }
  if (from._internal_has_regions_count()) {
    _this->_internal_mutable_regions_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_regions_count());
  }
  if (from._internal_has_region_location_matrix()) {
    _this->_internal_mutable_region_location_matrix()->::MatrixUint64::MergeFrom(
        from._internal_region_location_matrix());
  }
  if (from._internal_has_bounding_boxes_count()) {
    _this->_internal_mutable_bounding_boxes_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_bounding_boxes_count());
  }
  if (from._internal_has_polygons_count()) {
    _this->_internal_mutable_polygons_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_polygons_count());
  }
  if (from._internal_has_points_count()) {
    _this->_internal_mutable_points_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_points_count());
  }
  if (from._internal_has_masks_count()) {
    _this->_internal_mutable_masks_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_masks_count());
  }
  if (from._internal_has_frames_count()) {
    _this->_internal_mutable_frames_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_frames_count());
  }
  if (from._internal_has_embeddings_count()) {
    _this->_internal_mutable_embeddings_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_embeddings_count());
  }
  if (from._internal_has_positive_input_tags_count()) {
    _this->_internal_mutable_positive_input_tags_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_positive_input_tags_count());
  }
  if (from._internal_has_positive_region_tags_count()) {
    _this->_internal_mutable_positive_region_tags_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_positive_region_tags_count());
  }
  if (from._internal_has_positive_frame_tags_count()) {
    _this->_internal_mutable_positive_frame_tags_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_positive_frame_tags_count());
  }
  if (from._internal_has_region_inputs_count()) {
    _this->_internal_mutable_region_inputs_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_region_inputs_count());
  }
  if (from._internal_has_region_frames_count()) {
    _this->_internal_mutable_region_frames_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_region_frames_count());
  }
  if (from._internal_has_frame_inputs_count()) {
    _this->_internal_mutable_frame_inputs_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_frame_inputs_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetVersionMetrics::CopyFrom(const DatasetVersionMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetVersionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetVersionMetrics::IsInitialized() const {
  return true;
}

void DatasetVersionMetrics::InternalSwap(DatasetVersionMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetVersionMetrics, _impl_.frame_inputs_count_)
      + sizeof(DatasetVersionMetrics::_impl_.frame_inputs_count_)
      - PROTOBUF_FIELD_OFFSET(DatasetVersionMetrics, _impl_.inputs_count_)>(
          reinterpret_cast<char*>(&_impl_.inputs_count_),
          reinterpret_cast<char*>(&other->_impl_.inputs_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetVersionMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[54]);
}

// ===================================================================

class DatasetVersionMetricsGroup::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Value& value(const DatasetVersionMetricsGroup* msg);
  static const ::clarifai::api::DatasetVersionMetrics& metrics(const DatasetVersionMetricsGroup* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Value&
DatasetVersionMetricsGroup::_Internal::value(const DatasetVersionMetricsGroup* msg) {
  return *msg->_impl_.value_;
}
const ::clarifai::api::DatasetVersionMetrics&
DatasetVersionMetricsGroup::_Internal::metrics(const DatasetVersionMetricsGroup* msg) {
  return *msg->_impl_.metrics_;
}
void DatasetVersionMetricsGroup::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
DatasetVersionMetricsGroup::DatasetVersionMetricsGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DatasetVersionMetricsGroup)
}
DatasetVersionMetricsGroup::DatasetVersionMetricsGroup(const DatasetVersionMetricsGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatasetVersionMetricsGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_path_){}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.metrics_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.parent_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_path().empty()) {
    _this->_impl_.parent_path_.Set(from._internal_parent_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::PROTOBUF_NAMESPACE_ID::Value(*from._impl_.value_);
  }
  if (from._internal_has_metrics()) {
    _this->_impl_.metrics_ = new ::clarifai::api::DatasetVersionMetrics(*from._impl_.metrics_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetVersionMetricsGroup)
}

inline void DatasetVersionMetricsGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_path_){}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.metrics_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.parent_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DatasetVersionMetricsGroup::~DatasetVersionMetricsGroup() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetVersionMetricsGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatasetVersionMetricsGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parent_path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
  if (this != internal_default_instance()) delete _impl_.metrics_;
}

void DatasetVersionMetricsGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatasetVersionMetricsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetVersionMetricsGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parent_path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metrics_ != nullptr) {
    delete _impl_.metrics_;
  }
  _impl_.metrics_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetVersionMetricsGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DatasetVersionMetricsGroup.parent_path"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersionMetricsGroupType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::clarifai::api::DatasetVersionMetricsGroupType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Value value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersionMetrics metrics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetVersionMetricsGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetVersionMetricsGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent_path = 1;
  if (!this->_internal_parent_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_path().data(), static_cast<int>(this->_internal_parent_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersionMetricsGroup.parent_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent_path(), target);
  }

  // .clarifai.api.DatasetVersionMetricsGroupType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .google.protobuf.Value value = 3;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.DatasetVersionMetrics metrics = 4;
  if (this->_internal_has_metrics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::metrics(this),
        _Internal::metrics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetVersionMetricsGroup)
  return target;
}

size_t DatasetVersionMetricsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetVersionMetricsGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent_path = 1;
  if (!this->_internal_parent_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_path());
  }

  // .google.protobuf.Value value = 3;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  // .clarifai.api.DatasetVersionMetrics metrics = 4;
  if (this->_internal_has_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metrics_);
  }

  // .clarifai.api.DatasetVersionMetricsGroupType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetVersionMetricsGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatasetVersionMetricsGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetVersionMetricsGroup::GetClassData() const { return &_class_data_; }


void DatasetVersionMetricsGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatasetVersionMetricsGroup*>(&to_msg);
  auto& from = static_cast<const DatasetVersionMetricsGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetVersionMetricsGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent_path().empty()) {
    _this->_internal_set_parent_path(from._internal_parent_path());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(
        from._internal_value());
  }
  if (from._internal_has_metrics()) {
    _this->_internal_mutable_metrics()->::clarifai::api::DatasetVersionMetrics::MergeFrom(
        from._internal_metrics());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetVersionMetricsGroup::CopyFrom(const DatasetVersionMetricsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetVersionMetricsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetVersionMetricsGroup::IsInitialized() const {
  return true;
}

void DatasetVersionMetricsGroup::InternalSwap(DatasetVersionMetricsGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parent_path_, lhs_arena,
      &other->_impl_.parent_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetVersionMetricsGroup, _impl_.type_)
      + sizeof(DatasetVersionMetricsGroup::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(DatasetVersionMetricsGroup, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetVersionMetricsGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[55]);
}

// ===================================================================

class DatasetVersionExportInfo::_Internal {
 public:
  static const ::clarifai::api::DatasetVersionExport& clarifai_data_protobuf(const DatasetVersionExportInfo* msg);
  static const ::clarifai::api::DatasetVersionExport& clarifai_data_json(const DatasetVersionExportInfo* msg);
  static const ::clarifai::api::DatasetVersionExport& coco(const DatasetVersionExportInfo* msg);
};

const ::clarifai::api::DatasetVersionExport&
DatasetVersionExportInfo::_Internal::clarifai_data_protobuf(const DatasetVersionExportInfo* msg) {
  return *msg->_impl_.clarifai_data_protobuf_;
}
const ::clarifai::api::DatasetVersionExport&
DatasetVersionExportInfo::_Internal::clarifai_data_json(const DatasetVersionExportInfo* msg) {
  return *msg->_impl_.clarifai_data_json_;
}
const ::clarifai::api::DatasetVersionExport&
DatasetVersionExportInfo::_Internal::coco(const DatasetVersionExportInfo* msg) {
  return *msg->_impl_.coco_;
}
DatasetVersionExportInfo::DatasetVersionExportInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DatasetVersionExportInfo)
}
DatasetVersionExportInfo::DatasetVersionExportInfo(const DatasetVersionExportInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatasetVersionExportInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clarifai_data_protobuf_){nullptr}
    , decltype(_impl_.coco_){nullptr}
    , decltype(_impl_.clarifai_data_json_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clarifai_data_protobuf()) {
    _this->_impl_.clarifai_data_protobuf_ = new ::clarifai::api::DatasetVersionExport(*from._impl_.clarifai_data_protobuf_);
  }
  if (from._internal_has_coco()) {
    _this->_impl_.coco_ = new ::clarifai::api::DatasetVersionExport(*from._impl_.coco_);
  }
  if (from._internal_has_clarifai_data_json()) {
    _this->_impl_.clarifai_data_json_ = new ::clarifai::api::DatasetVersionExport(*from._impl_.clarifai_data_json_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetVersionExportInfo)
}

inline void DatasetVersionExportInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clarifai_data_protobuf_){nullptr}
    , decltype(_impl_.coco_){nullptr}
    , decltype(_impl_.clarifai_data_json_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DatasetVersionExportInfo::~DatasetVersionExportInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetVersionExportInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatasetVersionExportInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.clarifai_data_protobuf_;
  if (this != internal_default_instance()) delete _impl_.coco_;
  if (this != internal_default_instance()) delete _impl_.clarifai_data_json_;
}

void DatasetVersionExportInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatasetVersionExportInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetVersionExportInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.clarifai_data_protobuf_ != nullptr) {
    delete _impl_.clarifai_data_protobuf_;
  }
  _impl_.clarifai_data_protobuf_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.coco_ != nullptr) {
    delete _impl_.coco_;
  }
  _impl_.coco_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.clarifai_data_json_ != nullptr) {
    delete _impl_.clarifai_data_json_;
  }
  _impl_.clarifai_data_json_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetVersionExportInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.DatasetVersionExport clarifai_data_protobuf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clarifai_data_protobuf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersionExport coco = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coco(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersionExport clarifai_data_json = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_clarifai_data_json(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetVersionExportInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetVersionExportInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.DatasetVersionExport clarifai_data_protobuf = 1;
  if (this->_internal_has_clarifai_data_protobuf()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::clarifai_data_protobuf(this),
        _Internal::clarifai_data_protobuf(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.DatasetVersionExport coco = 2;
  if (this->_internal_has_coco()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::coco(this),
        _Internal::coco(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.DatasetVersionExport clarifai_data_json = 3;
  if (this->_internal_has_clarifai_data_json()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::clarifai_data_json(this),
        _Internal::clarifai_data_json(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetVersionExportInfo)
  return target;
}

size_t DatasetVersionExportInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetVersionExportInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.DatasetVersionExport clarifai_data_protobuf = 1;
  if (this->_internal_has_clarifai_data_protobuf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clarifai_data_protobuf_);
  }

  // .clarifai.api.DatasetVersionExport coco = 2;
  if (this->_internal_has_coco()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coco_);
  }

  // .clarifai.api.DatasetVersionExport clarifai_data_json = 3;
  if (this->_internal_has_clarifai_data_json()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clarifai_data_json_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetVersionExportInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatasetVersionExportInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetVersionExportInfo::GetClassData() const { return &_class_data_; }


void DatasetVersionExportInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatasetVersionExportInfo*>(&to_msg);
  auto& from = static_cast<const DatasetVersionExportInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetVersionExportInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clarifai_data_protobuf()) {
    _this->_internal_mutable_clarifai_data_protobuf()->::clarifai::api::DatasetVersionExport::MergeFrom(
        from._internal_clarifai_data_protobuf());
  }
  if (from._internal_has_coco()) {
    _this->_internal_mutable_coco()->::clarifai::api::DatasetVersionExport::MergeFrom(
        from._internal_coco());
  }
  if (from._internal_has_clarifai_data_json()) {
    _this->_internal_mutable_clarifai_data_json()->::clarifai::api::DatasetVersionExport::MergeFrom(
        from._internal_clarifai_data_json());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetVersionExportInfo::CopyFrom(const DatasetVersionExportInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetVersionExportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetVersionExportInfo::IsInitialized() const {
  return true;
}

void DatasetVersionExportInfo::InternalSwap(DatasetVersionExportInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetVersionExportInfo, _impl_.clarifai_data_json_)
      + sizeof(DatasetVersionExportInfo::_impl_.clarifai_data_json_)
      - PROTOBUF_FIELD_OFFSET(DatasetVersionExportInfo, _impl_.clarifai_data_protobuf_)>(
          reinterpret_cast<char*>(&_impl_.clarifai_data_protobuf_),
          reinterpret_cast<char*>(&other->_impl_.clarifai_data_protobuf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetVersionExportInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[56]);
}

// ===================================================================

class DatasetVersionExport::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const DatasetVersionExport* msg);
};

const ::clarifai::api::status::Status&
DatasetVersionExport::_Internal::status(const DatasetVersionExport* msg) {
  return *msg->_impl_.status_;
}
void DatasetVersionExport::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
DatasetVersionExport::DatasetVersionExport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DatasetVersionExport)
}
DatasetVersionExport::DatasetVersionExport(const DatasetVersionExport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatasetVersionExport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.format_){}
    , decltype(_impl_.include_embeddings_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.format_, &from._impl_.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.format_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetVersionExport)
}

inline void DatasetVersionExport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.format_){0}
    , decltype(_impl_.include_embeddings_){false}
    , decltype(_impl_.size_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DatasetVersionExport::~DatasetVersionExport() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetVersionExport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatasetVersionExport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DatasetVersionExport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatasetVersionExport::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetVersionExport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.format_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetVersionExport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.DatasetVersionExportFormat format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::clarifai::api::DatasetVersionExportFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DatasetVersionExport.url"));
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_embeddings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.include_embeddings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetVersionExport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetVersionExport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.DatasetVersionExportFormat format = 1;
  if (this->_internal_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_format(), target);
  }

  // .clarifai.api.status.Status status = 2;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersionExport.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // uint64 size = 4;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_size(), target);
  }

  // bool include_embeddings = 5;
  if (this->_internal_include_embeddings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_include_embeddings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetVersionExport)
  return target;
}

size_t DatasetVersionExport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetVersionExport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 3;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .clarifai.api.status.Status status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.DatasetVersionExportFormat format = 1;
  if (this->_internal_format() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_format());
  }

  // bool include_embeddings = 5;
  if (this->_internal_include_embeddings() != 0) {
    total_size += 1 + 1;
  }

  // uint64 size = 4;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetVersionExport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatasetVersionExport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetVersionExport::GetClassData() const { return &_class_data_; }


void DatasetVersionExport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatasetVersionExport*>(&to_msg);
  auto& from = static_cast<const DatasetVersionExport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetVersionExport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_format() != 0) {
    _this->_internal_set_format(from._internal_format());
  }
  if (from._internal_include_embeddings() != 0) {
    _this->_internal_set_include_embeddings(from._internal_include_embeddings());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetVersionExport::CopyFrom(const DatasetVersionExport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetVersionExport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetVersionExport::IsInitialized() const {
  return true;
}

void DatasetVersionExport::InternalSwap(DatasetVersionExport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetVersionExport, _impl_.size_)
      + sizeof(DatasetVersionExport::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(DatasetVersionExport, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetVersionExport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[57]);
}

// ===================================================================

class DatasetVersionProcessingInfo::_Internal {
 public:
  static const ::clarifai::api::FrameInterpolationInfo& frame_interpolation_info(const DatasetVersionProcessingInfo* msg);
};

const ::clarifai::api::FrameInterpolationInfo&
DatasetVersionProcessingInfo::_Internal::frame_interpolation_info(const DatasetVersionProcessingInfo* msg) {
  return *msg->_impl_.frame_interpolation_info_;
}
DatasetVersionProcessingInfo::DatasetVersionProcessingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DatasetVersionProcessingInfo)
}
DatasetVersionProcessingInfo::DatasetVersionProcessingInfo(const DatasetVersionProcessingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatasetVersionProcessingInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.frame_interpolation_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_frame_interpolation_info()) {
    _this->_impl_.frame_interpolation_info_ = new ::clarifai::api::FrameInterpolationInfo(*from._impl_.frame_interpolation_info_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetVersionProcessingInfo)
}

inline void DatasetVersionProcessingInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.frame_interpolation_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DatasetVersionProcessingInfo::~DatasetVersionProcessingInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetVersionProcessingInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatasetVersionProcessingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.frame_interpolation_info_;
}

void DatasetVersionProcessingInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatasetVersionProcessingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetVersionProcessingInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.frame_interpolation_info_ != nullptr) {
    delete _impl_.frame_interpolation_info_;
  }
  _impl_.frame_interpolation_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetVersionProcessingInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.FrameInterpolationInfo frame_interpolation_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_interpolation_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetVersionProcessingInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetVersionProcessingInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.FrameInterpolationInfo frame_interpolation_info = 1;
  if (this->_internal_has_frame_interpolation_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::frame_interpolation_info(this),
        _Internal::frame_interpolation_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetVersionProcessingInfo)
  return target;
}

size_t DatasetVersionProcessingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetVersionProcessingInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.FrameInterpolationInfo frame_interpolation_info = 1;
  if (this->_internal_has_frame_interpolation_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.frame_interpolation_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetVersionProcessingInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatasetVersionProcessingInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetVersionProcessingInfo::GetClassData() const { return &_class_data_; }


void DatasetVersionProcessingInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatasetVersionProcessingInfo*>(&to_msg);
  auto& from = static_cast<const DatasetVersionProcessingInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetVersionProcessingInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_frame_interpolation_info()) {
    _this->_internal_mutable_frame_interpolation_info()->::clarifai::api::FrameInterpolationInfo::MergeFrom(
        from._internal_frame_interpolation_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetVersionProcessingInfo::CopyFrom(const DatasetVersionProcessingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetVersionProcessingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetVersionProcessingInfo::IsInitialized() const {
  return true;
}

void DatasetVersionProcessingInfo::InternalSwap(DatasetVersionProcessingInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.frame_interpolation_info_, other->_impl_.frame_interpolation_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetVersionProcessingInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[58]);
}

// ===================================================================

class FrameInterpolationInfo::_Internal {
 public:
};

FrameInterpolationInfo::FrameInterpolationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.FrameInterpolationInfo)
}
FrameInterpolationInfo::FrameInterpolationInfo(const FrameInterpolationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameInterpolationInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sample_ms_ = from._impl_.sample_ms_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.FrameInterpolationInfo)
}

inline void FrameInterpolationInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_ms_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FrameInterpolationInfo::~FrameInterpolationInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.FrameInterpolationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameInterpolationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FrameInterpolationInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameInterpolationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.FrameInterpolationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sample_ms_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameInterpolationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sample_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sample_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameInterpolationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.FrameInterpolationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sample_ms = 1;
  if (this->_internal_sample_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sample_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.FrameInterpolationInfo)
  return target;
}

size_t FrameInterpolationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.FrameInterpolationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sample_ms = 1;
  if (this->_internal_sample_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameInterpolationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameInterpolationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameInterpolationInfo::GetClassData() const { return &_class_data_; }


void FrameInterpolationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameInterpolationInfo*>(&to_msg);
  auto& from = static_cast<const FrameInterpolationInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.FrameInterpolationInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sample_ms() != 0) {
    _this->_internal_set_sample_ms(from._internal_sample_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameInterpolationInfo::CopyFrom(const FrameInterpolationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.FrameInterpolationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameInterpolationInfo::IsInitialized() const {
  return true;
}

void FrameInterpolationInfo::InternalSwap(FrameInterpolationInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sample_ms_, other->_impl_.sample_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameInterpolationInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[59]);
}

// ===================================================================

class WorkflowResultsSimilarity::_Internal {
 public:
  static const ::clarifai::api::Input& probe_input(const WorkflowResultsSimilarity* msg);
};

const ::clarifai::api::Input&
WorkflowResultsSimilarity::_Internal::probe_input(const WorkflowResultsSimilarity* msg) {
  return *msg->_impl_.probe_input_;
}
WorkflowResultsSimilarity::WorkflowResultsSimilarity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.WorkflowResultsSimilarity)
}
WorkflowResultsSimilarity::WorkflowResultsSimilarity(const WorkflowResultsSimilarity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkflowResultsSimilarity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pool_results_){from._impl_.pool_results_}
    , decltype(_impl_.probe_input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_probe_input()) {
    _this->_impl_.probe_input_ = new ::clarifai::api::Input(*from._impl_.probe_input_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowResultsSimilarity)
}

inline void WorkflowResultsSimilarity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pool_results_){arena}
    , decltype(_impl_.probe_input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorkflowResultsSimilarity::~WorkflowResultsSimilarity() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowResultsSimilarity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkflowResultsSimilarity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pool_results_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.probe_input_;
}

void WorkflowResultsSimilarity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkflowResultsSimilarity::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowResultsSimilarity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pool_results_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.probe_input_ != nullptr) {
    delete _impl_.probe_input_;
  }
  _impl_.probe_input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowResultsSimilarity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Input probe_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_probe_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit pool_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pool_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowResultsSimilarity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowResultsSimilarity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Input probe_input = 1;
  if (this->_internal_has_probe_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::probe_input(this),
        _Internal::probe_input(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Hit pool_results = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pool_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_pool_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowResultsSimilarity)
  return target;
}

size_t WorkflowResultsSimilarity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowResultsSimilarity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Hit pool_results = 2;
  total_size += 1UL * this->_internal_pool_results_size();
  for (const auto& msg : this->_impl_.pool_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.Input probe_input = 1;
  if (this->_internal_has_probe_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.probe_input_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowResultsSimilarity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkflowResultsSimilarity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowResultsSimilarity::GetClassData() const { return &_class_data_; }


void WorkflowResultsSimilarity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkflowResultsSimilarity*>(&to_msg);
  auto& from = static_cast<const WorkflowResultsSimilarity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowResultsSimilarity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pool_results_.MergeFrom(from._impl_.pool_results_);
  if (from._internal_has_probe_input()) {
    _this->_internal_mutable_probe_input()->::clarifai::api::Input::MergeFrom(
        from._internal_probe_input());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowResultsSimilarity::CopyFrom(const WorkflowResultsSimilarity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowResultsSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowResultsSimilarity::IsInitialized() const {
  return true;
}

void WorkflowResultsSimilarity::InternalSwap(WorkflowResultsSimilarity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pool_results_.InternalSwap(&other->_impl_.pool_results_);
  swap(_impl_.probe_input_, other->_impl_.probe_input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowResultsSimilarity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[60]);
}

// ===================================================================

class Key::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Key* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expires_at(const Key* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Key::_Internal::created_at(const Key* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Key::_Internal::expires_at(const Key* msg) {
  return *msg->_impl_.expires_at_;
}
void Key::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Key::clear_expires_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.expires_at_ != nullptr) {
    delete _impl_.expires_at_;
  }
  _impl_.expires_at_ = nullptr;
}
Key::Key(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Key)
}
Key::Key(const Key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Key* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){from._impl_.scopes_}
    , decltype(_impl_.apps_){from._impl_.apps_}
    , decltype(_impl_.endpoints_){from._impl_.endpoints_}
    , decltype(_impl_.authorized_idp_ids_){from._impl_.authorized_idp_ids_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.expires_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_expires_at()) {
    _this->_impl_.expires_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expires_at_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Key)
}

inline void Key::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){arena}
    , decltype(_impl_.apps_){arena}
    , decltype(_impl_.endpoints_){arena}
    , decltype(_impl_.authorized_idp_ids_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.expires_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:clarifai.api.Key)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Key::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scopes_.~RepeatedPtrField();
  _impl_.apps_.~RepeatedPtrField();
  _impl_.endpoints_.~RepeatedPtrField();
  _impl_.authorized_idp_ids_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.description_.Destroy();
  _impl_.type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.expires_at_;
}

void Key::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Key::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Key)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scopes_.Clear();
  _impl_.apps_.Clear();
  _impl_.endpoints_.Clear();
  _impl_.authorized_idp_ids_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expires_at_ != nullptr) {
    delete _impl_.expires_at_;
  }
  _impl_.expires_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Key::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Key.id"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Key.description"));
        } else
          goto handle_unusual;
        continue;
      // repeated string scopes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Key.scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.App apps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expires_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string endpoints = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Key.endpoints"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Key.type"));
        } else
          goto handle_unusual;
        continue;
      // repeated string authorized_idp_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_authorized_idp_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Key.authorized_idp_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Key::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Key)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // repeated string scopes = 3;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.scopes");
    target = stream->WriteString(3, s, target);
  }

  // repeated .clarifai.api.App apps = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_apps_size()); i < n; i++) {
    const auto& repfield = this->_internal_apps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp expires_at = 6;
  if (this->_internal_has_expires_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::expires_at(this),
        _Internal::expires_at(this).GetCachedSize(), target, stream);
  }

  // repeated string endpoints = 7;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.endpoints");
    target = stream->WriteString(7, s, target);
  }

  // string type = 8;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_type(), target);
  }

  // repeated string authorized_idp_ids = 9;
  for (int i = 0, n = this->_internal_authorized_idp_ids_size(); i < n; i++) {
    const auto& s = this->_internal_authorized_idp_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.authorized_idp_ids");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Key)
  return target;
}

size_t Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Key)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.scopes_.size());
  for (int i = 0, n = _impl_.scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.scopes_.Get(i));
  }

  // repeated .clarifai.api.App apps = 4;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->_impl_.apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string endpoints = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.endpoints_.size());
  for (int i = 0, n = _impl_.endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.endpoints_.Get(i));
  }

  // repeated string authorized_idp_ids = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.authorized_idp_ids_.size());
  for (int i = 0, n = _impl_.authorized_idp_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.authorized_idp_ids_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string type = 8;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp expires_at = 6;
  if (this->_internal_has_expires_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expires_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Key::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Key::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Key::GetClassData() const { return &_class_data_; }


void Key::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Key*>(&to_msg);
  auto& from = static_cast<const Key&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Key)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scopes_.MergeFrom(from._impl_.scopes_);
  _this->_impl_.apps_.MergeFrom(from._impl_.apps_);
  _this->_impl_.endpoints_.MergeFrom(from._impl_.endpoints_);
  _this->_impl_.authorized_idp_ids_.MergeFrom(from._impl_.authorized_idp_ids_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_expires_at()) {
    _this->_internal_mutable_expires_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expires_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Key::CopyFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {
  return true;
}

void Key::InternalSwap(Key* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scopes_.InternalSwap(&other->_impl_.scopes_);
  _impl_.apps_.InternalSwap(&other->_impl_.apps_);
  _impl_.endpoints_.InternalSwap(&other->_impl_.endpoints_);
  _impl_.authorized_idp_ids_.InternalSwap(&other->_impl_.authorized_idp_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Key, _impl_.expires_at_)
      + sizeof(Key::_impl_.expires_at_)
      - PROTOBUF_FIELD_OFFSET(Key, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Key::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[61]);
}

// ===================================================================

class Model::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Model* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Model* msg);
  static const ::clarifai::api::OutputInfo& output_info(const Model* msg);
  static const ::clarifai::api::ModelVersion& model_version(const Model* msg);
  static const ::clarifai::api::EvalInfo& default_eval_info(const Model* msg);
  static const ::clarifai::api::Visibility& visibility(const Model* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const Model* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& presets(const Model* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& workflow_recommended(const Model* msg);
  static const ::clarifai::api::BookmarkOrigin& bookmark_origin(const Model* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Model::_Internal::created_at(const Model* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Model::_Internal::modified_at(const Model* msg) {
  return *msg->_impl_.modified_at_;
}
const ::clarifai::api::OutputInfo&
Model::_Internal::output_info(const Model* msg) {
  return *msg->_impl_.output_info_;
}
const ::clarifai::api::ModelVersion&
Model::_Internal::model_version(const Model* msg) {
  return *msg->_impl_.model_version_;
}
const ::clarifai::api::EvalInfo&
Model::_Internal::default_eval_info(const Model* msg) {
  return *msg->_impl_.default_eval_info_;
}
const ::clarifai::api::Visibility&
Model::_Internal::visibility(const Model* msg) {
  return *msg->_impl_.visibility_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Model::_Internal::metadata(const Model* msg) {
  return *msg->_impl_.metadata_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Model::_Internal::presets(const Model* msg) {
  return *msg->_impl_.presets_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Model::_Internal::workflow_recommended(const Model* msg) {
  return *msg->_impl_.workflow_recommended_;
}
const ::clarifai::api::BookmarkOrigin&
Model::_Internal::bookmark_origin(const Model* msg) {
  return *msg->_impl_.bookmark_origin_;
}
void Model::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Model::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void Model::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
void Model::clear_presets() {
  if (GetArenaForAllocation() == nullptr && _impl_.presets_ != nullptr) {
    delete _impl_.presets_;
  }
  _impl_.presets_ = nullptr;
}
void Model::clear_workflow_recommended() {
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_recommended_ != nullptr) {
    delete _impl_.workflow_recommended_;
  }
  _impl_.workflow_recommended_ = nullptr;
}
Model::Model(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Model)
}
Model::Model(const Model& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Model* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.toolkits_){from._impl_.toolkits_}
    , decltype(_impl_.use_cases_){from._impl_.use_cases_}
    , decltype(_impl_.languages_){from._impl_.languages_}
    , decltype(_impl_.languages_full_){from._impl_.languages_full_}
    , decltype(_impl_.check_consents_){from._impl_.check_consents_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.model_type_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.task_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.output_info_){nullptr}
    , decltype(_impl_.model_version_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.presets_){nullptr}
    , decltype(_impl_.workflow_recommended_){nullptr}
    , decltype(_impl_.default_eval_info_){nullptr}
    , decltype(_impl_.bookmark_origin_){nullptr}
    , decltype(_impl_.is_starred_){}
    , decltype(_impl_.star_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_type_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_type_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_type_id().empty()) {
    _this->_impl_.model_type_id_.Set(from._internal_model_type_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notes().empty()) {
    _this->_impl_.notes_.Set(from._internal_notes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.task_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task().empty()) {
    _this->_impl_.task_.Set(from._internal_task(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_output_info()) {
    _this->_impl_.output_info_ = new ::clarifai::api::OutputInfo(*from._impl_.output_info_);
  }
  if (from._internal_has_model_version()) {
    _this->_impl_.model_version_ = new ::clarifai::api::ModelVersion(*from._impl_.model_version_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_presets()) {
    _this->_impl_.presets_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.presets_);
  }
  if (from._internal_has_workflow_recommended()) {
    _this->_impl_.workflow_recommended_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from._impl_.workflow_recommended_);
  }
  if (from._internal_has_default_eval_info()) {
    _this->_impl_.default_eval_info_ = new ::clarifai::api::EvalInfo(*from._impl_.default_eval_info_);
  }
  if (from._internal_has_bookmark_origin()) {
    _this->_impl_.bookmark_origin_ = new ::clarifai::api::BookmarkOrigin(*from._impl_.bookmark_origin_);
  }
  ::memcpy(&_impl_.is_starred_, &from._impl_.is_starred_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.star_count_) -
    reinterpret_cast<char*>(&_impl_.is_starred_)) + sizeof(_impl_.star_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Model)
}

inline void Model::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.toolkits_){arena}
    , decltype(_impl_.use_cases_){arena}
    , decltype(_impl_.languages_){arena}
    , decltype(_impl_.languages_full_){arena}
    , decltype(_impl_.check_consents_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.model_type_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.task_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.output_info_){nullptr}
    , decltype(_impl_.model_version_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.presets_){nullptr}
    , decltype(_impl_.workflow_recommended_){nullptr}
    , decltype(_impl_.default_eval_info_){nullptr}
    , decltype(_impl_.bookmark_origin_){nullptr}
    , decltype(_impl_.is_starred_){false}
    , decltype(_impl_.star_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_type_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_type_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.task_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:clarifai.api.Model)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Model::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.toolkits_.~RepeatedPtrField();
  _impl_.use_cases_.~RepeatedPtrField();
  _impl_.languages_.~RepeatedPtrField();
  _impl_.languages_full_.~RepeatedPtrField();
  _impl_.check_consents_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.display_name_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.model_type_id_.Destroy();
  _impl_.description_.Destroy();
  _impl_.notes_.Destroy();
  _impl_.task_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.output_info_;
  if (this != internal_default_instance()) delete _impl_.model_version_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.presets_;
  if (this != internal_default_instance()) delete _impl_.workflow_recommended_;
  if (this != internal_default_instance()) delete _impl_.default_eval_info_;
  if (this != internal_default_instance()) delete _impl_.bookmark_origin_;
}

void Model::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Model)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.toolkits_.Clear();
  _impl_.use_cases_.Clear();
  _impl_.languages_.Clear();
  _impl_.languages_full_.Clear();
  _impl_.check_consents_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.display_name_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.model_type_id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.notes_.ClearToEmpty();
  _impl_.task_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.output_info_ != nullptr) {
    delete _impl_.output_info_;
  }
  _impl_.output_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_version_ != nullptr) {
    delete _impl_.model_version_;
  }
  _impl_.model_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.presets_ != nullptr) {
    delete _impl_.presets_;
  }
  _impl_.presets_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_recommended_ != nullptr) {
    delete _impl_.workflow_recommended_;
  }
  _impl_.workflow_recommended_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.default_eval_info_ != nullptr) {
    delete _impl_.default_eval_info_;
  }
  _impl_.default_eval_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bookmark_origin_ != nullptr) {
    delete _impl_.bookmark_origin_;
  }
  _impl_.bookmark_origin_ = nullptr;
  ::memset(&_impl_.is_starred_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.star_count_) -
      reinterpret_cast<char*>(&_impl_.is_starred_)) + sizeof(_impl_.star_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Model::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Model.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Model.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Model.app_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.OutputInfo output_info = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelVersion model_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string display_name = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Model.display_name"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Model.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_type_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_model_type_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Model.model_type_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Model.description"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string notes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_notes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Model.notes"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string toolkits = 20 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_toolkits();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Model.toolkits"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string use_cases = 21 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_use_cases();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Model.use_cases"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_starred = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 star_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.star_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string languages = 25 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_languages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Model.languages"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string task = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_task();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Model.task"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct presets = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_presets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue workflow_recommended = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow_recommended(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvalInfo default_eval_info = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_eval_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.FullTag languages_full = 31 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_languages_full(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string check_consents = 32 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_check_consents();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Model.check_consents"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.BookmarkOrigin bookmark_origin = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bookmark_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Model::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Model)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [deprecated = true];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // string app_id = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  // .clarifai.api.OutputInfo output_info = 5 [deprecated = true];
  if (this->_internal_has_output_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::output_info(this),
        _Internal::output_info(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ModelVersion model_version = 6;
  if (this->_internal_has_model_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::model_version(this),
        _Internal::model_version(this).GetCachedSize(), target, stream);
  }

  // string display_name = 7 [deprecated = true];
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.display_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_display_name(), target);
  }

  // string user_id = 9;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.user_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_user_id(), target);
  }

  // string model_type_id = 14;
  if (!this->_internal_model_type_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type_id().data(), static_cast<int>(this->_internal_model_type_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.model_type_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_model_type_id(), target);
  }

  // .clarifai.api.Visibility visibility = 15;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  // string description = 16;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.description");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_description(), target);
  }

  // .google.protobuf.Struct metadata = 17;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // string notes = 18;
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.notes");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_notes(), target);
  }

  // .google.protobuf.Timestamp modified_at = 19;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // repeated string toolkits = 20 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (int i = 0, n = this->_internal_toolkits_size(); i < n; i++) {
    const auto& s = this->_internal_toolkits(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.toolkits");
    target = stream->WriteString(20, s, target);
  }

  // repeated string use_cases = 21 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (int i = 0, n = this->_internal_use_cases_size(); i < n; i++) {
    const auto& s = this->_internal_use_cases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.use_cases");
    target = stream->WriteString(21, s, target);
  }

  // bool is_starred = 22;
  if (this->_internal_is_starred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_is_starred(), target);
  }

  // int32 star_count = 23;
  if (this->_internal_star_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_star_count(), target);
  }

  // repeated string languages = 25 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (int i = 0, n = this->_internal_languages_size(); i < n; i++) {
    const auto& s = this->_internal_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.languages");
    target = stream->WriteString(25, s, target);
  }

  // string task = 26;
  if (!this->_internal_task().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task().data(), static_cast<int>(this->_internal_task().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.task");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_task(), target);
  }

  // .google.protobuf.Struct presets = 27;
  if (this->_internal_has_presets()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::presets(this),
        _Internal::presets(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue workflow_recommended = 29;
  if (this->_internal_has_workflow_recommended()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::workflow_recommended(this),
        _Internal::workflow_recommended(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.EvalInfo default_eval_info = 30;
  if (this->_internal_has_default_eval_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::default_eval_info(this),
        _Internal::default_eval_info(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.FullTag languages_full = 31 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_languages_full_size()); i < n; i++) {
    const auto& repfield = this->_internal_languages_full(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string check_consents = 32 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (int i = 0, n = this->_internal_check_consents_size(); i < n; i++) {
    const auto& s = this->_internal_check_consents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.check_consents");
    target = stream->WriteString(32, s, target);
  }

  // .clarifai.api.BookmarkOrigin bookmark_origin = 33;
  if (this->_internal_has_bookmark_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::bookmark_origin(this),
        _Internal::bookmark_origin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Model)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string toolkits = 20 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.toolkits_.size());
  for (int i = 0, n = _impl_.toolkits_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.toolkits_.Get(i));
  }

  // repeated string use_cases = 21 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.use_cases_.size());
  for (int i = 0, n = _impl_.use_cases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.use_cases_.Get(i));
  }

  // repeated string languages = 25 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.languages_.size());
  for (int i = 0, n = _impl_.languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.languages_.Get(i));
  }

  // repeated .clarifai.api.FullTag languages_full = 31 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 2UL * this->_internal_languages_full_size();
  for (const auto& msg : this->_impl_.languages_full_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string check_consents = 32 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.check_consents_.size());
  for (int i = 0, n = _impl_.check_consents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.check_consents_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [deprecated = true];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string app_id = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string display_name = 7 [deprecated = true];
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string user_id = 9;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string model_type_id = 14;
  if (!this->_internal_model_type_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type_id());
  }

  // string description = 16;
  if (!this->_internal_description().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string notes = 18;
  if (!this->_internal_notes().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // string task = 26;
  if (!this->_internal_task().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task());
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .clarifai.api.OutputInfo output_info = 5 [deprecated = true];
  if (this->_internal_has_output_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.output_info_);
  }

  // .clarifai.api.ModelVersion model_version = 6;
  if (this->_internal_has_model_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_version_);
  }

  // .clarifai.api.Visibility visibility = 15;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  // .google.protobuf.Struct metadata = 17;
  if (this->_internal_has_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .google.protobuf.Timestamp modified_at = 19;
  if (this->_internal_has_modified_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .google.protobuf.Struct presets = 27;
  if (this->_internal_has_presets()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.presets_);
  }

  // .google.protobuf.BoolValue workflow_recommended = 29;
  if (this->_internal_has_workflow_recommended()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workflow_recommended_);
  }

  // .clarifai.api.EvalInfo default_eval_info = 30;
  if (this->_internal_has_default_eval_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.default_eval_info_);
  }

  // .clarifai.api.BookmarkOrigin bookmark_origin = 33;
  if (this->_internal_has_bookmark_origin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bookmark_origin_);
  }

  // bool is_starred = 22;
  if (this->_internal_is_starred() != 0) {
    total_size += 2 + 1;
  }

  // int32 star_count = 23;
  if (this->_internal_star_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_star_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Model::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Model::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Model::GetClassData() const { return &_class_data_; }


void Model::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Model*>(&to_msg);
  auto& from = static_cast<const Model&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Model)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.toolkits_.MergeFrom(from._impl_.toolkits_);
  _this->_impl_.use_cases_.MergeFrom(from._impl_.use_cases_);
  _this->_impl_.languages_.MergeFrom(from._impl_.languages_);
  _this->_impl_.languages_full_.MergeFrom(from._impl_.languages_full_);
  _this->_impl_.check_consents_.MergeFrom(from._impl_.check_consents_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_model_type_id().empty()) {
    _this->_internal_set_model_type_id(from._internal_model_type_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_notes().empty()) {
    _this->_internal_set_notes(from._internal_notes());
  }
  if (!from._internal_task().empty()) {
    _this->_internal_set_task(from._internal_task());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_output_info()) {
    _this->_internal_mutable_output_info()->::clarifai::api::OutputInfo::MergeFrom(
        from._internal_output_info());
  }
  if (from._internal_has_model_version()) {
    _this->_internal_mutable_model_version()->::clarifai::api::ModelVersion::MergeFrom(
        from._internal_model_version());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_presets()) {
    _this->_internal_mutable_presets()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_presets());
  }
  if (from._internal_has_workflow_recommended()) {
    _this->_internal_mutable_workflow_recommended()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(
        from._internal_workflow_recommended());
  }
  if (from._internal_has_default_eval_info()) {
    _this->_internal_mutable_default_eval_info()->::clarifai::api::EvalInfo::MergeFrom(
        from._internal_default_eval_info());
  }
  if (from._internal_has_bookmark_origin()) {
    _this->_internal_mutable_bookmark_origin()->::clarifai::api::BookmarkOrigin::MergeFrom(
        from._internal_bookmark_origin());
  }
  if (from._internal_is_starred() != 0) {
    _this->_internal_set_is_starred(from._internal_is_starred());
  }
  if (from._internal_star_count() != 0) {
    _this->_internal_set_star_count(from._internal_star_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::InternalSwap(Model* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.toolkits_.InternalSwap(&other->_impl_.toolkits_);
  _impl_.use_cases_.InternalSwap(&other->_impl_.use_cases_);
  _impl_.languages_.InternalSwap(&other->_impl_.languages_);
  _impl_.languages_full_.InternalSwap(&other->_impl_.languages_full_);
  _impl_.check_consents_.InternalSwap(&other->_impl_.check_consents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_type_id_, lhs_arena,
      &other->_impl_.model_type_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notes_, lhs_arena,
      &other->_impl_.notes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_, lhs_arena,
      &other->_impl_.task_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Model, _impl_.star_count_)
      + sizeof(Model::_impl_.star_count_)
      - PROTOBUF_FIELD_OFFSET(Model, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Model::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[62]);
}

// ===================================================================

class ModelReference::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const ModelReference* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
ModelReference::_Internal::metadata(const ModelReference* msg) {
  return *msg->_impl_.metadata_;
}
void ModelReference::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
ModelReference::ModelReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelReference)
}
ModelReference::ModelReference(const ModelReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelReference)
}

inline void ModelReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelReference::~ModelReference() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.model_id_.Destroy();
  _impl_.url_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void ModelReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelReference::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.model_id_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelReference.id"));
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelReference.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelReference.url"));
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelReference.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelReference.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelReference.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelReference.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelReference.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelReference)
  return target;
}

size_t ModelReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelReference::GetClassData() const { return &_class_data_; }


void ModelReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelReference*>(&to_msg);
  auto& from = static_cast<const ModelReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelReference::CopyFrom(const ModelReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelReference::IsInitialized() const {
  return true;
}

void ModelReference::InternalSwap(ModelReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.metadata_, other->_impl_.metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[63]);
}

// ===================================================================

class ModelVersionInputExample::_Internal {
 public:
  static const ::clarifai::api::Data& data(const ModelVersionInputExample* msg);
};

const ::clarifai::api::Data&
ModelVersionInputExample::_Internal::data(const ModelVersionInputExample* msg) {
  return *msg->_impl_.data_;
}
ModelVersionInputExample::ModelVersionInputExample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelVersionInputExample)
}
ModelVersionInputExample::ModelVersionInputExample(const ModelVersionInputExample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelVersionInputExample* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    _this->_impl_.model_version_id_.Set(from._internal_model_version_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::clarifai::api::Data(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelVersionInputExample)
}

inline void ModelVersionInputExample::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelVersionInputExample::~ModelVersionInputExample() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelVersionInputExample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelVersionInputExample::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.model_id_.Destroy();
  _impl_.model_version_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
}

void ModelVersionInputExample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelVersionInputExample::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelVersionInputExample)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.model_id_.ClearToEmpty();
  _impl_.model_version_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelVersionInputExample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelVersionInputExample.id"));
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelVersionInputExample.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelVersionInputExample.model_version_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelVersionInputExample.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelVersionInputExample.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelVersionInputExample::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelVersionInputExample)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionInputExample.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionInputExample.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionInputExample.model_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_version_id(), target);
  }

  // .clarifai.api.Data data = 4;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionInputExample.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // string description = 6;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionInputExample.description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelVersionInputExample)
  return target;
}

size_t ModelVersionInputExample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelVersionInputExample)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 6;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .clarifai.api.Data data = 4;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelVersionInputExample::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelVersionInputExample::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelVersionInputExample::GetClassData() const { return &_class_data_; }


void ModelVersionInputExample::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelVersionInputExample*>(&to_msg);
  auto& from = static_cast<const ModelVersionInputExample&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelVersionInputExample)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_model_version_id().empty()) {
    _this->_internal_set_model_version_id(from._internal_model_version_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::clarifai::api::Data::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelVersionInputExample::CopyFrom(const ModelVersionInputExample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelVersionInputExample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVersionInputExample::IsInitialized() const {
  return true;
}

void ModelVersionInputExample::InternalSwap(ModelVersionInputExample* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_version_id_, lhs_arena,
      &other->_impl_.model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelVersionInputExample::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[64]);
}

// ===================================================================

class OutputInfo::_Internal {
 public:
  static const ::clarifai::api::Data& data(const OutputInfo* msg);
  static const ::clarifai::api::OutputConfig& output_config(const OutputInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& fields_map(const OutputInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& params(const OutputInfo* msg);
};

const ::clarifai::api::Data&
OutputInfo::_Internal::data(const OutputInfo* msg) {
  return *msg->_impl_.data_;
}
const ::clarifai::api::OutputConfig&
OutputInfo::_Internal::output_config(const OutputInfo* msg) {
  return *msg->_impl_.output_config_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
OutputInfo::_Internal::fields_map(const OutputInfo* msg) {
  return *msg->_impl_.fields_map_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
OutputInfo::_Internal::params(const OutputInfo* msg) {
  return *msg->_impl_.params_;
}
void OutputInfo::clear_fields_map() {
  if (GetArenaForAllocation() == nullptr && _impl_.fields_map_ != nullptr) {
    delete _impl_.fields_map_;
  }
  _impl_.fields_map_ = nullptr;
}
void OutputInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
OutputInfo::OutputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.OutputInfo)
}
OutputInfo::OutputInfo(const OutputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutputInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.output_config_){nullptr}
    , decltype(_impl_.fields_map_){nullptr}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::clarifai::api::Data(*from._impl_.data_);
  }
  if (from._internal_has_output_config()) {
    _this->_impl_.output_config_ = new ::clarifai::api::OutputConfig(*from._impl_.output_config_);
  }
  if (from._internal_has_fields_map()) {
    _this->_impl_.fields_map_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.fields_map_);
  }
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.OutputInfo)
}

inline void OutputInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.output_config_){nullptr}
    , decltype(_impl_.fields_map_){nullptr}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OutputInfo::~OutputInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.OutputInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutputInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.output_config_;
  if (this != internal_default_instance()) delete _impl_.fields_map_;
  if (this != internal_default_instance()) delete _impl_.params_;
}

void OutputInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.OutputInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.output_config_ != nullptr) {
    delete _impl_.output_config_;
  }
  _impl_.output_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fields_map_ != nullptr) {
    delete _impl_.fields_map_;
  }
  _impl_.fields_map_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.OutputConfig output_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.OutputInfo.message"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct fields_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fields_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct params = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutputInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.OutputInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Data data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.OutputConfig output_config = 2;
  if (this->_internal_has_output_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::output_config(this),
        _Internal::output_config(this).GetCachedSize(), target, stream);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.OutputInfo.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // .google.protobuf.Struct fields_map = 6;
  if (this->_internal_has_fields_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::fields_map(this),
        _Internal::fields_map(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct params = 7;
  if (this->_internal_has_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.OutputInfo)
  return target;
}

size_t OutputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.OutputInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .clarifai.api.Data data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .clarifai.api.OutputConfig output_config = 2;
  if (this->_internal_has_output_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.output_config_);
  }

  // .google.protobuf.Struct fields_map = 6;
  if (this->_internal_has_fields_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fields_map_);
  }

  // .google.protobuf.Struct params = 7;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutputInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputInfo::GetClassData() const { return &_class_data_; }


void OutputInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutputInfo*>(&to_msg);
  auto& from = static_cast<const OutputInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.OutputInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::clarifai::api::Data::MergeFrom(
        from._internal_data());
  }
  if (from._internal_has_output_config()) {
    _this->_internal_mutable_output_config()->::clarifai::api::OutputConfig::MergeFrom(
        from._internal_output_config());
  }
  if (from._internal_has_fields_map()) {
    _this->_internal_mutable_fields_map()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_fields_map());
  }
  if (from._internal_has_params()) {
    _this->_internal_mutable_params()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputInfo::CopyFrom(const OutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputInfo::IsInitialized() const {
  return true;
}

void OutputInfo::InternalSwap(OutputInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutputInfo, _impl_.params_)
      + sizeof(OutputInfo::_impl_.params_)
      - PROTOBUF_FIELD_OFFSET(OutputInfo, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[65]);
}

// ===================================================================

class InputInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& fields_map(const InputInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& params(const InputInfo* msg);
  static const ::clarifai::api::Model& base_embed_model(const InputInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
InputInfo::_Internal::fields_map(const InputInfo* msg) {
  return *msg->_impl_.fields_map_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
InputInfo::_Internal::params(const InputInfo* msg) {
  return *msg->_impl_.params_;
}
const ::clarifai::api::Model&
InputInfo::_Internal::base_embed_model(const InputInfo* msg) {
  return *msg->_impl_.base_embed_model_;
}
void InputInfo::clear_fields_map() {
  if (GetArenaForAllocation() == nullptr && _impl_.fields_map_ != nullptr) {
    delete _impl_.fields_map_;
  }
  _impl_.fields_map_ = nullptr;
}
void InputInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
InputInfo::InputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.InputInfo)
}
InputInfo::InputInfo(const InputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_map_){nullptr}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.base_embed_model_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fields_map()) {
    _this->_impl_.fields_map_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.fields_map_);
  }
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.params_);
  }
  if (from._internal_has_base_embed_model()) {
    _this->_impl_.base_embed_model_ = new ::clarifai::api::Model(*from._impl_.base_embed_model_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.InputInfo)
}

inline void InputInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_map_){nullptr}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.base_embed_model_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InputInfo::~InputInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.InputInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fields_map_;
  if (this != internal_default_instance()) delete _impl_.params_;
  if (this != internal_default_instance()) delete _impl_.base_embed_model_;
}

void InputInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.InputInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.fields_map_ != nullptr) {
    delete _impl_.fields_map_;
  }
  _impl_.fields_map_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.base_embed_model_ != nullptr) {
    delete _impl_.base_embed_model_;
  }
  _impl_.base_embed_model_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct fields_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fields_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Model base_embed_model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_embed_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.InputInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct fields_map = 1;
  if (this->_internal_has_fields_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fields_map(this),
        _Internal::fields_map(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct params = 2;
  if (this->_internal_has_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Model base_embed_model = 3;
  if (this->_internal_has_base_embed_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::base_embed_model(this),
        _Internal::base_embed_model(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.InputInfo)
  return target;
}

size_t InputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.InputInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct fields_map = 1;
  if (this->_internal_has_fields_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fields_map_);
  }

  // .google.protobuf.Struct params = 2;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  // .clarifai.api.Model base_embed_model = 3;
  if (this->_internal_has_base_embed_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_embed_model_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputInfo::GetClassData() const { return &_class_data_; }


void InputInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputInfo*>(&to_msg);
  auto& from = static_cast<const InputInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.InputInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fields_map()) {
    _this->_internal_mutable_fields_map()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_fields_map());
  }
  if (from._internal_has_params()) {
    _this->_internal_mutable_params()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_params());
  }
  if (from._internal_has_base_embed_model()) {
    _this->_internal_mutable_base_embed_model()->::clarifai::api::Model::MergeFrom(
        from._internal_base_embed_model());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputInfo::CopyFrom(const InputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.InputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputInfo::IsInitialized() const {
  return true;
}

void InputInfo::InternalSwap(InputInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputInfo, _impl_.base_embed_model_)
      + sizeof(InputInfo::_impl_.base_embed_model_)
      - PROTOBUF_FIELD_OFFSET(InputInfo, _impl_.fields_map_)>(
          reinterpret_cast<char*>(&_impl_.fields_map_),
          reinterpret_cast<char*>(&other->_impl_.fields_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[66]);
}

// ===================================================================

class TrainInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& params(const TrainInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
TrainInfo::_Internal::params(const TrainInfo* msg) {
  return *msg->_impl_.params_;
}
void TrainInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
TrainInfo::TrainInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TrainInfo)
}
TrainInfo::TrainInfo(const TrainInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrainInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TrainInfo)
}

inline void TrainInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrainInfo::~TrainInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TrainInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrainInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.params_;
}

void TrainInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrainInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TrainInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrainInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TrainInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->_internal_has_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TrainInfo)
  return target;
}

size_t TrainInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TrainInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrainInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrainInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrainInfo::GetClassData() const { return &_class_data_; }


void TrainInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrainInfo*>(&to_msg);
  auto& from = static_cast<const TrainInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TrainInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_params()) {
    _this->_internal_mutable_params()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrainInfo::CopyFrom(const TrainInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TrainInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainInfo::IsInitialized() const {
  return true;
}

void TrainInfo::InternalSwap(TrainInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[67]);
}

// ===================================================================

class EvalInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& params(const EvalInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
EvalInfo::_Internal::params(const EvalInfo* msg) {
  return *msg->_impl_.params_;
}
void EvalInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
EvalInfo::EvalInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.EvalInfo)
}
EvalInfo::EvalInfo(const EvalInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EvalInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.EvalInfo)
}

inline void EvalInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EvalInfo::~EvalInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.EvalInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EvalInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.params_;
}

void EvalInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EvalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.EvalInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvalInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EvalInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.EvalInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->_internal_has_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.EvalInfo)
  return target;
}

size_t EvalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.EvalInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvalInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EvalInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvalInfo::GetClassData() const { return &_class_data_; }


void EvalInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EvalInfo*>(&to_msg);
  auto& from = static_cast<const EvalInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.EvalInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_params()) {
    _this->_internal_mutable_params()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvalInfo::CopyFrom(const EvalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.EvalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalInfo::IsInitialized() const {
  return true;
}

void EvalInfo::InternalSwap(EvalInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[68]);
}

// ===================================================================

class ImportInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& params(const ImportInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
ImportInfo::_Internal::params(const ImportInfo* msg) {
  return *msg->_impl_.params_;
}
void ImportInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
ImportInfo::ImportInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ImportInfo)
}
ImportInfo::ImportInfo(const ImportInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImportInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ImportInfo)
}

inline void ImportInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImportInfo::~ImportInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.ImportInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImportInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.params_;
}

void ImportInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImportInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ImportInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ImportInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->_internal_has_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ImportInfo)
  return target;
}

size_t ImportInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ImportInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImportInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportInfo::GetClassData() const { return &_class_data_; }


void ImportInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImportInfo*>(&to_msg);
  auto& from = static_cast<const ImportInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ImportInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_params()) {
    _this->_internal_mutable_params()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportInfo::CopyFrom(const ImportInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ImportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportInfo::IsInitialized() const {
  return true;
}

void ImportInfo::InternalSwap(ImportInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[69]);
}

// ===================================================================

class OutputConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& hyper_params(const OutputConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& model_metadata(const OutputConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
OutputConfig::_Internal::hyper_params(const OutputConfig* msg) {
  return *msg->_impl_.hyper_params_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
OutputConfig::_Internal::model_metadata(const OutputConfig* msg) {
  return *msg->_impl_.model_metadata_;
}
void OutputConfig::clear_hyper_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.hyper_params_ != nullptr) {
    delete _impl_.hyper_params_;
  }
  _impl_.hyper_params_ = nullptr;
}
void OutputConfig::clear_model_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_metadata_ != nullptr) {
    delete _impl_.model_metadata_;
  }
  _impl_.model_metadata_ = nullptr;
}
OutputConfig::OutputConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.OutputConfig)
}
OutputConfig::OutputConfig(const OutputConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutputConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.select_concepts_){from._impl_.select_concepts_}
    , decltype(_impl_.existing_model_id_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.hyper_parameters_){}
    , decltype(_impl_.embed_model_version_id_){}
    , decltype(_impl_.hyper_params_){nullptr}
    , decltype(_impl_.model_metadata_){nullptr}
    , decltype(_impl_.max_concepts_){}
    , decltype(_impl_.min_value_){}
    , decltype(_impl_.concepts_mutually_exclusive_){}
    , decltype(_impl_.fail_on_missing_positive_examples_){}
    , decltype(_impl_.training_timeout_){}
    , decltype(_impl_.sample_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.existing_model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.existing_model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_existing_model_id().empty()) {
    _this->_impl_.existing_model_id_.Set(from._internal_existing_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hyper_parameters_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hyper_parameters_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hyper_parameters().empty()) {
    _this->_impl_.hyper_parameters_.Set(from._internal_hyper_parameters(), 
      _this->GetArenaForAllocation());
  }
  _impl_.embed_model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.embed_model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_embed_model_version_id().empty()) {
    _this->_impl_.embed_model_version_id_.Set(from._internal_embed_model_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_hyper_params()) {
    _this->_impl_.hyper_params_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.hyper_params_);
  }
  if (from._internal_has_model_metadata()) {
    _this->_impl_.model_metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.model_metadata_);
  }
  ::memcpy(&_impl_.max_concepts_, &from._impl_.max_concepts_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sample_ms_) -
    reinterpret_cast<char*>(&_impl_.max_concepts_)) + sizeof(_impl_.sample_ms_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.OutputConfig)
}

inline void OutputConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.select_concepts_){arena}
    , decltype(_impl_.existing_model_id_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.hyper_parameters_){}
    , decltype(_impl_.embed_model_version_id_){}
    , decltype(_impl_.hyper_params_){nullptr}
    , decltype(_impl_.model_metadata_){nullptr}
    , decltype(_impl_.max_concepts_){0u}
    , decltype(_impl_.min_value_){0}
    , decltype(_impl_.concepts_mutually_exclusive_){false}
    , decltype(_impl_.fail_on_missing_positive_examples_){false}
    , decltype(_impl_.training_timeout_){0u}
    , decltype(_impl_.sample_ms_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.existing_model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.existing_model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hyper_parameters_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hyper_parameters_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.embed_model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.embed_model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OutputConfig::~OutputConfig() {
  // @@protoc_insertion_point(destructor:clarifai.api.OutputConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutputConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.select_concepts_.~RepeatedPtrField();
  _impl_.existing_model_id_.Destroy();
  _impl_.language_.Destroy();
  _impl_.hyper_parameters_.Destroy();
  _impl_.embed_model_version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.hyper_params_;
  if (this != internal_default_instance()) delete _impl_.model_metadata_;
}

void OutputConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutputConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.OutputConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.select_concepts_.Clear();
  _impl_.existing_model_id_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  _impl_.hyper_parameters_.ClearToEmpty();
  _impl_.embed_model_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.hyper_params_ != nullptr) {
    delete _impl_.hyper_params_;
  }
  _impl_.hyper_params_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_metadata_ != nullptr) {
    delete _impl_.model_metadata_;
  }
  _impl_.model_metadata_ = nullptr;
  ::memset(&_impl_.max_concepts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sample_ms_) -
      reinterpret_cast<char*>(&_impl_.max_concepts_)) + sizeof(_impl_.sample_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool concepts_mutually_exclusive = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.concepts_mutually_exclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string existing_model_id = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_existing_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.OutputConfig.existing_model_id"));
        } else
          goto handle_unusual;
        continue;
      // string language = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.OutputConfig.language"));
        } else
          goto handle_unusual;
        continue;
      // string hyper_parameters = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_hyper_parameters();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.OutputConfig.hyper_parameters"));
        } else
          goto handle_unusual;
        continue;
      // uint32 max_concepts = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.max_concepts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float min_value = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept select_concepts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_select_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 training_timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.training_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sample_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.sample_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct hyper_params = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_hyper_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string embed_model_version_id = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_embed_model_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.OutputConfig.embed_model_version_id"));
        } else
          goto handle_unusual;
        continue;
      // bool fail_on_missing_positive_examples = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.fail_on_missing_positive_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct model_metadata = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutputConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.OutputConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool concepts_mutually_exclusive = 1 [deprecated = true];
  if (this->_internal_concepts_mutually_exclusive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_concepts_mutually_exclusive(), target);
  }

  // string existing_model_id = 3 [deprecated = true];
  if (!this->_internal_existing_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_existing_model_id().data(), static_cast<int>(this->_internal_existing_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.OutputConfig.existing_model_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_existing_model_id(), target);
  }

  // string language = 4;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.OutputConfig.language");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language(), target);
  }

  // string hyper_parameters = 5 [deprecated = true];
  if (!this->_internal_hyper_parameters().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hyper_parameters().data(), static_cast<int>(this->_internal_hyper_parameters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.OutputConfig.hyper_parameters");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hyper_parameters(), target);
  }

  // uint32 max_concepts = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_max_concepts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_max_concepts(), target);
  }

  // float min_value = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_value = this->_internal_min_value();
  uint32_t raw_min_value;
  memcpy(&raw_min_value, &tmp_min_value, sizeof(tmp_min_value));
  if (raw_min_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_min_value(), target);
  }

  // repeated .clarifai.api.Concept select_concepts = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_select_concepts_size()); i < n; i++) {
    const auto& repfield = this->_internal_select_concepts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 training_timeout = 9;
  if (this->_internal_training_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_training_timeout(), target);
  }

  // uint32 sample_ms = 10;
  if (this->_internal_sample_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_sample_ms(), target);
  }

  // .google.protobuf.Struct hyper_params = 13;
  if (this->_internal_has_hyper_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::hyper_params(this),
        _Internal::hyper_params(this).GetCachedSize(), target, stream);
  }

  // string embed_model_version_id = 14 [deprecated = true];
  if (!this->_internal_embed_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_embed_model_version_id().data(), static_cast<int>(this->_internal_embed_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.OutputConfig.embed_model_version_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_embed_model_version_id(), target);
  }

  // bool fail_on_missing_positive_examples = 15;
  if (this->_internal_fail_on_missing_positive_examples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_fail_on_missing_positive_examples(), target);
  }

  // .google.protobuf.Struct model_metadata = 17 [deprecated = true];
  if (this->_internal_has_model_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::model_metadata(this),
        _Internal::model_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.OutputConfig)
  return target;
}

size_t OutputConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.OutputConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept select_concepts = 8;
  total_size += 1UL * this->_internal_select_concepts_size();
  for (const auto& msg : this->_impl_.select_concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string existing_model_id = 3 [deprecated = true];
  if (!this->_internal_existing_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_existing_model_id());
  }

  // string language = 4;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string hyper_parameters = 5 [deprecated = true];
  if (!this->_internal_hyper_parameters().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hyper_parameters());
  }

  // string embed_model_version_id = 14 [deprecated = true];
  if (!this->_internal_embed_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_embed_model_version_id());
  }

  // .google.protobuf.Struct hyper_params = 13;
  if (this->_internal_has_hyper_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hyper_params_);
  }

  // .google.protobuf.Struct model_metadata = 17 [deprecated = true];
  if (this->_internal_has_model_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_metadata_);
  }

  // uint32 max_concepts = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_max_concepts() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_concepts());
  }

  // float min_value = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_value = this->_internal_min_value();
  uint32_t raw_min_value;
  memcpy(&raw_min_value, &tmp_min_value, sizeof(tmp_min_value));
  if (raw_min_value != 0) {
    total_size += 1 + 4;
  }

  // bool concepts_mutually_exclusive = 1 [deprecated = true];
  if (this->_internal_concepts_mutually_exclusive() != 0) {
    total_size += 1 + 1;
  }

  // bool fail_on_missing_positive_examples = 15;
  if (this->_internal_fail_on_missing_positive_examples() != 0) {
    total_size += 1 + 1;
  }

  // uint32 training_timeout = 9;
  if (this->_internal_training_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_training_timeout());
  }

  // uint32 sample_ms = 10;
  if (this->_internal_sample_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutputConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputConfig::GetClassData() const { return &_class_data_; }


void OutputConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutputConfig*>(&to_msg);
  auto& from = static_cast<const OutputConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.OutputConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.select_concepts_.MergeFrom(from._impl_.select_concepts_);
  if (!from._internal_existing_model_id().empty()) {
    _this->_internal_set_existing_model_id(from._internal_existing_model_id());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (!from._internal_hyper_parameters().empty()) {
    _this->_internal_set_hyper_parameters(from._internal_hyper_parameters());
  }
  if (!from._internal_embed_model_version_id().empty()) {
    _this->_internal_set_embed_model_version_id(from._internal_embed_model_version_id());
  }
  if (from._internal_has_hyper_params()) {
    _this->_internal_mutable_hyper_params()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_hyper_params());
  }
  if (from._internal_has_model_metadata()) {
    _this->_internal_mutable_model_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_model_metadata());
  }
  if (from._internal_max_concepts() != 0) {
    _this->_internal_set_max_concepts(from._internal_max_concepts());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_value = from._internal_min_value();
  uint32_t raw_min_value;
  memcpy(&raw_min_value, &tmp_min_value, sizeof(tmp_min_value));
  if (raw_min_value != 0) {
    _this->_internal_set_min_value(from._internal_min_value());
  }
  if (from._internal_concepts_mutually_exclusive() != 0) {
    _this->_internal_set_concepts_mutually_exclusive(from._internal_concepts_mutually_exclusive());
  }
  if (from._internal_fail_on_missing_positive_examples() != 0) {
    _this->_internal_set_fail_on_missing_positive_examples(from._internal_fail_on_missing_positive_examples());
  }
  if (from._internal_training_timeout() != 0) {
    _this->_internal_set_training_timeout(from._internal_training_timeout());
  }
  if (from._internal_sample_ms() != 0) {
    _this->_internal_set_sample_ms(from._internal_sample_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputConfig::CopyFrom(const OutputConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.OutputConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputConfig::IsInitialized() const {
  return true;
}

void OutputConfig::InternalSwap(OutputConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.select_concepts_.InternalSwap(&other->_impl_.select_concepts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.existing_model_id_, lhs_arena,
      &other->_impl_.existing_model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hyper_parameters_, lhs_arena,
      &other->_impl_.hyper_parameters_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.embed_model_version_id_, lhs_arena,
      &other->_impl_.embed_model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutputConfig, _impl_.sample_ms_)
      + sizeof(OutputConfig::_impl_.sample_ms_)
      - PROTOBUF_FIELD_OFFSET(OutputConfig, _impl_.hyper_params_)>(
          reinterpret_cast<char*>(&_impl_.hyper_params_),
          reinterpret_cast<char*>(&other->_impl_.hyper_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[70]);
}

// ===================================================================

class ModelType::_Internal {
 public:
};

ModelType::ModelType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelType)
}
ModelType::ModelType(const ModelType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_fields_){from._impl_.input_fields_}
    , decltype(_impl_.output_fields_){from._impl_.output_fields_}
    , decltype(_impl_.model_type_fields_){from._impl_.model_type_fields_}
    , decltype(_impl_.expected_input_layers_){from._impl_.expected_input_layers_}
    , decltype(_impl_.expected_output_layers_){from._impl_.expected_output_layers_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.trainable_){}
    , decltype(_impl_.creatable_){}
    , decltype(_impl_.internal_only_){}
    , decltype(_impl_.requires_sequential_frames_){}
    , decltype(_impl_.evaluation_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.trainable_, &from._impl_.trainable_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.evaluation_type_) -
    reinterpret_cast<char*>(&_impl_.trainable_)) + sizeof(_impl_.evaluation_type_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelType)
}

inline void ModelType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_fields_){arena}
    , decltype(_impl_.output_fields_){arena}
    , decltype(_impl_.model_type_fields_){arena}
    , decltype(_impl_.expected_input_layers_){arena}
    , decltype(_impl_.expected_output_layers_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.trainable_){false}
    , decltype(_impl_.creatable_){false}
    , decltype(_impl_.internal_only_){false}
    , decltype(_impl_.requires_sequential_frames_){false}
    , decltype(_impl_.evaluation_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelType::~ModelType() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_fields_.~RepeatedPtrField();
  _impl_.output_fields_.~RepeatedPtrField();
  _impl_.model_type_fields_.~RepeatedPtrField();
  _impl_.expected_input_layers_.~RepeatedPtrField();
  _impl_.expected_output_layers_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void ModelType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelType::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_fields_.Clear();
  _impl_.output_fields_.Clear();
  _impl_.model_type_fields_.Clear();
  _impl_.expected_input_layers_.Clear();
  _impl_.expected_output_layers_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  ::memset(&_impl_.trainable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.evaluation_type_) -
      reinterpret_cast<char*>(&_impl_.trainable_)) + sizeof(_impl_.evaluation_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelType.id"));
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelType.title"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelType.description"));
        } else
          goto handle_unusual;
        continue;
      // repeated string input_fields = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelType.input_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string output_fields = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelType.output_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool trainable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.trainable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool creatable = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.creatable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool internal_only = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.internal_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelTypeField model_type_fields = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_type_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool requires_sequential_frames = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.requires_sequential_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelLayerInfo expected_input_layers = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_expected_input_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelLayerInfo expected_output_layers = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_expected_output_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvaluationType evaluation_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_evaluation_type(static_cast<::clarifai::api::EvaluationType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelType.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelType.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelType.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // repeated string input_fields = 5;
  for (int i = 0, n = this->_internal_input_fields_size(); i < n; i++) {
    const auto& s = this->_internal_input_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelType.input_fields");
    target = stream->WriteString(5, s, target);
  }

  // repeated string output_fields = 6;
  for (int i = 0, n = this->_internal_output_fields_size(); i < n; i++) {
    const auto& s = this->_internal_output_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelType.output_fields");
    target = stream->WriteString(6, s, target);
  }

  // bool trainable = 8;
  if (this->_internal_trainable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_trainable(), target);
  }

  // bool creatable = 9;
  if (this->_internal_creatable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_creatable(), target);
  }

  // bool internal_only = 10;
  if (this->_internal_internal_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_internal_only(), target);
  }

  // repeated .clarifai.api.ModelTypeField model_type_fields = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_model_type_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_model_type_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool requires_sequential_frames = 12;
  if (this->_internal_requires_sequential_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_requires_sequential_frames(), target);
  }

  // repeated .clarifai.api.ModelLayerInfo expected_input_layers = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_expected_input_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_expected_input_layers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.ModelLayerInfo expected_output_layers = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_expected_output_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_expected_output_layers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.EvaluationType evaluation_type = 18;
  if (this->_internal_evaluation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_evaluation_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelType)
  return target;
}

size_t ModelType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_fields = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.input_fields_.size());
  for (int i = 0, n = _impl_.input_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.input_fields_.Get(i));
  }

  // repeated string output_fields = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.output_fields_.size());
  for (int i = 0, n = _impl_.output_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.output_fields_.Get(i));
  }

  // repeated .clarifai.api.ModelTypeField model_type_fields = 11;
  total_size += 1UL * this->_internal_model_type_fields_size();
  for (const auto& msg : this->_impl_.model_type_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.ModelLayerInfo expected_input_layers = 16;
  total_size += 2UL * this->_internal_expected_input_layers_size();
  for (const auto& msg : this->_impl_.expected_input_layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.ModelLayerInfo expected_output_layers = 17;
  total_size += 2UL * this->_internal_expected_output_layers_size();
  for (const auto& msg : this->_impl_.expected_output_layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool trainable = 8;
  if (this->_internal_trainable() != 0) {
    total_size += 1 + 1;
  }

  // bool creatable = 9;
  if (this->_internal_creatable() != 0) {
    total_size += 1 + 1;
  }

  // bool internal_only = 10;
  if (this->_internal_internal_only() != 0) {
    total_size += 1 + 1;
  }

  // bool requires_sequential_frames = 12;
  if (this->_internal_requires_sequential_frames() != 0) {
    total_size += 1 + 1;
  }

  // .clarifai.api.EvaluationType evaluation_type = 18;
  if (this->_internal_evaluation_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_evaluation_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelType::GetClassData() const { return &_class_data_; }


void ModelType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelType*>(&to_msg);
  auto& from = static_cast<const ModelType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_fields_.MergeFrom(from._impl_.input_fields_);
  _this->_impl_.output_fields_.MergeFrom(from._impl_.output_fields_);
  _this->_impl_.model_type_fields_.MergeFrom(from._impl_.model_type_fields_);
  _this->_impl_.expected_input_layers_.MergeFrom(from._impl_.expected_input_layers_);
  _this->_impl_.expected_output_layers_.MergeFrom(from._impl_.expected_output_layers_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_trainable() != 0) {
    _this->_internal_set_trainable(from._internal_trainable());
  }
  if (from._internal_creatable() != 0) {
    _this->_internal_set_creatable(from._internal_creatable());
  }
  if (from._internal_internal_only() != 0) {
    _this->_internal_set_internal_only(from._internal_internal_only());
  }
  if (from._internal_requires_sequential_frames() != 0) {
    _this->_internal_set_requires_sequential_frames(from._internal_requires_sequential_frames());
  }
  if (from._internal_evaluation_type() != 0) {
    _this->_internal_set_evaluation_type(from._internal_evaluation_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelType::CopyFrom(const ModelType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelType::IsInitialized() const {
  return true;
}

void ModelType::InternalSwap(ModelType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.input_fields_.InternalSwap(&other->_impl_.input_fields_);
  _impl_.output_fields_.InternalSwap(&other->_impl_.output_fields_);
  _impl_.model_type_fields_.InternalSwap(&other->_impl_.model_type_fields_);
  _impl_.expected_input_layers_.InternalSwap(&other->_impl_.expected_input_layers_);
  _impl_.expected_output_layers_.InternalSwap(&other->_impl_.expected_output_layers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelType, _impl_.evaluation_type_)
      + sizeof(ModelType::_impl_.evaluation_type_)
      - PROTOBUF_FIELD_OFFSET(ModelType, _impl_.trainable_)>(
          reinterpret_cast<char*>(&_impl_.trainable_),
          reinterpret_cast<char*>(&other->_impl_.trainable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[71]);
}

// ===================================================================

class ModelLayerInfo::_Internal {
 public:
};

ModelLayerInfo::ModelLayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelLayerInfo)
}
ModelLayerInfo::ModelLayerInfo(const ModelLayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelLayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shapes_){from._impl_.shapes_}
    , decltype(_impl_.data_field_name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.requires_label_filename_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_field_name().empty()) {
    _this->_impl_.data_field_name_.Set(from._internal_data_field_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.requires_label_filename_ = from._impl_.requires_label_filename_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelLayerInfo)
}

inline void ModelLayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shapes_){arena}
    , decltype(_impl_.data_field_name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.requires_label_filename_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelLayerInfo::~ModelLayerInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelLayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelLayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shapes_.~RepeatedPtrField();
  _impl_.data_field_name_.Destroy();
  _impl_.description_.Destroy();
}

void ModelLayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelLayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelLayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shapes_.Clear();
  _impl_.data_field_name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.requires_label_filename_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelLayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data_field_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data_field_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelLayerInfo.data_field_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.LayerShape shapes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelLayerInfo.description"));
        } else
          goto handle_unusual;
        continue;
      // bool requires_label_filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.requires_label_filename_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelLayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelLayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data_field_name = 1;
  if (!this->_internal_data_field_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_field_name().data(), static_cast<int>(this->_internal_data_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelLayerInfo.data_field_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data_field_name(), target);
  }

  // repeated .clarifai.api.LayerShape shapes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shapes_size()); i < n; i++) {
    const auto& repfield = this->_internal_shapes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelLayerInfo.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // bool requires_label_filename = 4;
  if (this->_internal_requires_label_filename() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_requires_label_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelLayerInfo)
  return target;
}

size_t ModelLayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelLayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LayerShape shapes = 2;
  total_size += 1UL * this->_internal_shapes_size();
  for (const auto& msg : this->_impl_.shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string data_field_name = 1;
  if (!this->_internal_data_field_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_field_name());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool requires_label_filename = 4;
  if (this->_internal_requires_label_filename() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelLayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelLayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelLayerInfo::GetClassData() const { return &_class_data_; }


void ModelLayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelLayerInfo*>(&to_msg);
  auto& from = static_cast<const ModelLayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelLayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shapes_.MergeFrom(from._impl_.shapes_);
  if (!from._internal_data_field_name().empty()) {
    _this->_internal_set_data_field_name(from._internal_data_field_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_requires_label_filename() != 0) {
    _this->_internal_set_requires_label_filename(from._internal_requires_label_filename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelLayerInfo::CopyFrom(const ModelLayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelLayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelLayerInfo::IsInitialized() const {
  return true;
}

void ModelLayerInfo::InternalSwap(ModelLayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shapes_.InternalSwap(&other->_impl_.shapes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_field_name_, lhs_arena,
      &other->_impl_.data_field_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.requires_label_filename_, other->_impl_.requires_label_filename_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelLayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[72]);
}

// ===================================================================

class TritonCondaEnvInfo::_Internal {
 public:
};

TritonCondaEnvInfo::TritonCondaEnvInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TritonCondaEnvInfo)
}
TritonCondaEnvInfo::TritonCondaEnvInfo(const TritonCondaEnvInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TritonCondaEnvInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conda_pack_url_){}
    , decltype(_impl_.conda_yaml_url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conda_pack_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conda_pack_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conda_pack_url().empty()) {
    _this->_impl_.conda_pack_url_.Set(from._internal_conda_pack_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.conda_yaml_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conda_yaml_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conda_yaml_url().empty()) {
    _this->_impl_.conda_yaml_url_.Set(from._internal_conda_yaml_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TritonCondaEnvInfo)
}

inline void TritonCondaEnvInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.conda_pack_url_){}
    , decltype(_impl_.conda_yaml_url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.conda_pack_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conda_pack_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.conda_yaml_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conda_yaml_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TritonCondaEnvInfo::~TritonCondaEnvInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TritonCondaEnvInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TritonCondaEnvInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conda_pack_url_.Destroy();
  _impl_.conda_yaml_url_.Destroy();
}

void TritonCondaEnvInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TritonCondaEnvInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TritonCondaEnvInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conda_pack_url_.ClearToEmpty();
  _impl_.conda_yaml_url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TritonCondaEnvInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string conda_pack_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conda_pack_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.TritonCondaEnvInfo.conda_pack_url"));
        } else
          goto handle_unusual;
        continue;
      // string conda_yaml_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_conda_yaml_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.TritonCondaEnvInfo.conda_yaml_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TritonCondaEnvInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TritonCondaEnvInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string conda_pack_url = 1;
  if (!this->_internal_conda_pack_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conda_pack_url().data(), static_cast<int>(this->_internal_conda_pack_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TritonCondaEnvInfo.conda_pack_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conda_pack_url(), target);
  }

  // string conda_yaml_url = 2;
  if (!this->_internal_conda_yaml_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conda_yaml_url().data(), static_cast<int>(this->_internal_conda_yaml_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TritonCondaEnvInfo.conda_yaml_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_conda_yaml_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TritonCondaEnvInfo)
  return target;
}

size_t TritonCondaEnvInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TritonCondaEnvInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string conda_pack_url = 1;
  if (!this->_internal_conda_pack_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conda_pack_url());
  }

  // string conda_yaml_url = 2;
  if (!this->_internal_conda_yaml_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conda_yaml_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TritonCondaEnvInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TritonCondaEnvInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TritonCondaEnvInfo::GetClassData() const { return &_class_data_; }


void TritonCondaEnvInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TritonCondaEnvInfo*>(&to_msg);
  auto& from = static_cast<const TritonCondaEnvInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TritonCondaEnvInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_conda_pack_url().empty()) {
    _this->_internal_set_conda_pack_url(from._internal_conda_pack_url());
  }
  if (!from._internal_conda_yaml_url().empty()) {
    _this->_internal_set_conda_yaml_url(from._internal_conda_yaml_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TritonCondaEnvInfo::CopyFrom(const TritonCondaEnvInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TritonCondaEnvInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TritonCondaEnvInfo::IsInitialized() const {
  return true;
}

void TritonCondaEnvInfo::InternalSwap(TritonCondaEnvInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conda_pack_url_, lhs_arena,
      &other->_impl_.conda_pack_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conda_yaml_url_, lhs_arena,
      &other->_impl_.conda_yaml_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TritonCondaEnvInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[73]);
}

// ===================================================================

class LayerShape::_Internal {
 public:
};

LayerShape::LayerShape(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.LayerShape)
}
LayerShape::LayerShape(const LayerShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LayerShape* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dims_){from._impl_.dims_}
    , /*decltype(_impl_._dims_cached_byte_size_)*/{0}
    , decltype(_impl_.max_dims_){from._impl_.max_dims_}
    , /*decltype(_impl_._max_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.description_){}
    , decltype(_impl_.data_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.data_type_ = from._impl_.data_type_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LayerShape)
}

inline void LayerShape::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dims_){arena}
    , /*decltype(_impl_._dims_cached_byte_size_)*/{0}
    , decltype(_impl_.max_dims_){arena}
    , /*decltype(_impl_._max_dims_cached_byte_size_)*/{0}
    , decltype(_impl_.description_){}
    , decltype(_impl_.data_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LayerShape::~LayerShape() {
  // @@protoc_insertion_point(destructor:clarifai.api.LayerShape)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayerShape::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dims_.~RepeatedField();
  _impl_.max_dims_.~RepeatedField();
  _impl_.description_.Destroy();
}

void LayerShape::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayerShape::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LayerShape)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dims_.Clear();
  _impl_.max_dims_.Clear();
  _impl_.description_.ClearToEmpty();
  _impl_.data_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayerShape::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 dims = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 max_dims = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_max_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_max_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DataType data_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::clarifai::api::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.LayerShape.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerShape::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LayerShape)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 dims = 1;
  {
    int byte_size = _impl_._dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_dims(), byte_size, target);
    }
  }

  // repeated int32 max_dims = 2;
  {
    int byte_size = _impl_._max_dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_max_dims(), byte_size, target);
    }
  }

  // .clarifai.api.DataType data_type = 3;
  if (this->_internal_data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_data_type(), target);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.LayerShape.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LayerShape)
  return target;
}

size_t LayerShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LayerShape)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 dims = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 max_dims = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.max_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._max_dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .clarifai.api.DataType data_type = 3;
  if (this->_internal_data_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayerShape::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LayerShape::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayerShape::GetClassData() const { return &_class_data_; }


void LayerShape::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LayerShape*>(&to_msg);
  auto& from = static_cast<const LayerShape&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LayerShape)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dims_.MergeFrom(from._impl_.dims_);
  _this->_impl_.max_dims_.MergeFrom(from._impl_.max_dims_);
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_data_type() != 0) {
    _this->_internal_set_data_type(from._internal_data_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayerShape::CopyFrom(const LayerShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LayerShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerShape::IsInitialized() const {
  return true;
}

void LayerShape::InternalSwap(LayerShape* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dims_.InternalSwap(&other->_impl_.dims_);
  _impl_.max_dims_.InternalSwap(&other->_impl_.max_dims_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.data_type_, other->_impl_.data_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayerShape::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[74]);
}

// ===================================================================

class ModelTypeField::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Value& default_value(const ModelTypeField* msg);
  static const ::clarifai::api::ModelTypeRangeInfo& model_type_range_info(const ModelTypeField* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Value&
ModelTypeField::_Internal::default_value(const ModelTypeField* msg) {
  return *msg->_impl_.default_value_;
}
const ::clarifai::api::ModelTypeRangeInfo&
ModelTypeField::_Internal::model_type_range_info(const ModelTypeField* msg) {
  return *msg->_impl_.model_type_range_info_;
}
void ModelTypeField::clear_default_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.default_value_ != nullptr) {
    delete _impl_.default_value_;
  }
  _impl_.default_value_ = nullptr;
}
ModelTypeField::ModelTypeField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelTypeField)
}
ModelTypeField::ModelTypeField(const ModelTypeField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelTypeField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_type_enum_options_){from._impl_.model_type_enum_options_}
    , decltype(_impl_.path_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.placeholder_){}
    , decltype(_impl_.default_value_){nullptr}
    , decltype(_impl_.model_type_range_info_){nullptr}
    , decltype(_impl_.field_type_){}
    , decltype(_impl_.internal_only_){}
    , decltype(_impl_.required_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.placeholder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.placeholder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_placeholder().empty()) {
    _this->_impl_.placeholder_.Set(from._internal_placeholder(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_default_value()) {
    _this->_impl_.default_value_ = new ::PROTOBUF_NAMESPACE_ID::Value(*from._impl_.default_value_);
  }
  if (from._internal_has_model_type_range_info()) {
    _this->_impl_.model_type_range_info_ = new ::clarifai::api::ModelTypeRangeInfo(*from._impl_.model_type_range_info_);
  }
  ::memcpy(&_impl_.field_type_, &from._impl_.field_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.required_) -
    reinterpret_cast<char*>(&_impl_.field_type_)) + sizeof(_impl_.required_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelTypeField)
}

inline void ModelTypeField::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_type_enum_options_){arena}
    , decltype(_impl_.path_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.placeholder_){}
    , decltype(_impl_.default_value_){nullptr}
    , decltype(_impl_.model_type_range_info_){nullptr}
    , decltype(_impl_.field_type_){0}
    , decltype(_impl_.internal_only_){false}
    , decltype(_impl_.required_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.placeholder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.placeholder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelTypeField::~ModelTypeField() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelTypeField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelTypeField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_type_enum_options_.~RepeatedPtrField();
  _impl_.path_.Destroy();
  _impl_.description_.Destroy();
  _impl_.placeholder_.Destroy();
  if (this != internal_default_instance()) delete _impl_.default_value_;
  if (this != internal_default_instance()) delete _impl_.model_type_range_info_;
}

void ModelTypeField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelTypeField::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelTypeField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_type_enum_options_.Clear();
  _impl_.path_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.placeholder_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.default_value_ != nullptr) {
    delete _impl_.default_value_;
  }
  _impl_.default_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_type_range_info_ != nullptr) {
    delete _impl_.model_type_range_info_;
  }
  _impl_.model_type_range_info_ = nullptr;
  ::memset(&_impl_.field_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.required_) -
      reinterpret_cast<char*>(&_impl_.field_type_)) + sizeof(_impl_.required_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelTypeField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelTypeField.path"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelTypeField.ModelTypeFieldType field_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_field_type(static_cast<::clarifai::api::ModelTypeField_ModelTypeFieldType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Value default_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelTypeField.description"));
        } else
          goto handle_unusual;
        continue;
      // string placeholder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_placeholder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelTypeField.placeholder"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelTypeEnumOption model_type_enum_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_type_enum_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool internal_only = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.internal_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool required = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelTypeRangeInfo model_type_range_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_type_range_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelTypeField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelTypeField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeField.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .clarifai.api.ModelTypeField.ModelTypeFieldType field_type = 2;
  if (this->_internal_field_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_field_type(), target);
  }

  // .google.protobuf.Value default_value = 3;
  if (this->_internal_has_default_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::default_value(this),
        _Internal::default_value(this).GetCachedSize(), target, stream);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeField.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // string placeholder = 5;
  if (!this->_internal_placeholder().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_placeholder().data(), static_cast<int>(this->_internal_placeholder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeField.placeholder");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_placeholder(), target);
  }

  // repeated .clarifai.api.ModelTypeEnumOption model_type_enum_options = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_model_type_enum_options_size()); i < n; i++) {
    const auto& repfield = this->_internal_model_type_enum_options(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool internal_only = 7;
  if (this->_internal_internal_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_internal_only(), target);
  }

  // bool required = 8;
  if (this->_internal_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_required(), target);
  }

  // .clarifai.api.ModelTypeRangeInfo model_type_range_info = 9;
  if (this->_internal_has_model_type_range_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::model_type_range_info(this),
        _Internal::model_type_range_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelTypeField)
  return target;
}

size_t ModelTypeField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelTypeField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelTypeEnumOption model_type_enum_options = 6;
  total_size += 1UL * this->_internal_model_type_enum_options_size();
  for (const auto& msg : this->_impl_.model_type_enum_options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string placeholder = 5;
  if (!this->_internal_placeholder().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_placeholder());
  }

  // .google.protobuf.Value default_value = 3;
  if (this->_internal_has_default_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.default_value_);
  }

  // .clarifai.api.ModelTypeRangeInfo model_type_range_info = 9;
  if (this->_internal_has_model_type_range_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_type_range_info_);
  }

  // .clarifai.api.ModelTypeField.ModelTypeFieldType field_type = 2;
  if (this->_internal_field_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_field_type());
  }

  // bool internal_only = 7;
  if (this->_internal_internal_only() != 0) {
    total_size += 1 + 1;
  }

  // bool required = 8;
  if (this->_internal_required() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelTypeField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelTypeField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelTypeField::GetClassData() const { return &_class_data_; }


void ModelTypeField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelTypeField*>(&to_msg);
  auto& from = static_cast<const ModelTypeField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelTypeField)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.model_type_enum_options_.MergeFrom(from._impl_.model_type_enum_options_);
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_placeholder().empty()) {
    _this->_internal_set_placeholder(from._internal_placeholder());
  }
  if (from._internal_has_default_value()) {
    _this->_internal_mutable_default_value()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(
        from._internal_default_value());
  }
  if (from._internal_has_model_type_range_info()) {
    _this->_internal_mutable_model_type_range_info()->::clarifai::api::ModelTypeRangeInfo::MergeFrom(
        from._internal_model_type_range_info());
  }
  if (from._internal_field_type() != 0) {
    _this->_internal_set_field_type(from._internal_field_type());
  }
  if (from._internal_internal_only() != 0) {
    _this->_internal_set_internal_only(from._internal_internal_only());
  }
  if (from._internal_required() != 0) {
    _this->_internal_set_required(from._internal_required());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelTypeField::CopyFrom(const ModelTypeField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelTypeField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTypeField::IsInitialized() const {
  return true;
}

void ModelTypeField::InternalSwap(ModelTypeField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.model_type_enum_options_.InternalSwap(&other->_impl_.model_type_enum_options_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.placeholder_, lhs_arena,
      &other->_impl_.placeholder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelTypeField, _impl_.required_)
      + sizeof(ModelTypeField::_impl_.required_)
      - PROTOBUF_FIELD_OFFSET(ModelTypeField, _impl_.default_value_)>(
          reinterpret_cast<char*>(&_impl_.default_value_),
          reinterpret_cast<char*>(&other->_impl_.default_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelTypeField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[75]);
}

// ===================================================================

class ModelTypeRangeInfo::_Internal {
 public:
};

ModelTypeRangeInfo::ModelTypeRangeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelTypeRangeInfo)
}
ModelTypeRangeInfo::ModelTypeRangeInfo(const ModelTypeRangeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelTypeRangeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.min_){}
    , decltype(_impl_.max_){}
    , decltype(_impl_.step_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.min_, &from._impl_.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.step_) -
    reinterpret_cast<char*>(&_impl_.min_)) + sizeof(_impl_.step_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelTypeRangeInfo)
}

inline void ModelTypeRangeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.min_){0}
    , decltype(_impl_.max_){0}
    , decltype(_impl_.step_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ModelTypeRangeInfo::~ModelTypeRangeInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelTypeRangeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelTypeRangeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModelTypeRangeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelTypeRangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelTypeRangeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.step_) -
      reinterpret_cast<char*>(&_impl_.min_)) + sizeof(_impl_.step_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelTypeRangeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float step = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelTypeRangeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelTypeRangeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float min = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min = this->_internal_min();
  uint32_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_min(), target);
  }

  // float max = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max = this->_internal_max();
  uint32_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_max(), target);
  }

  // float step = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_step = this->_internal_step();
  uint32_t raw_step;
  memcpy(&raw_step, &tmp_step, sizeof(tmp_step));
  if (raw_step != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_step(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelTypeRangeInfo)
  return target;
}

size_t ModelTypeRangeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelTypeRangeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float min = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min = this->_internal_min();
  uint32_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    total_size += 1 + 4;
  }

  // float max = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max = this->_internal_max();
  uint32_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    total_size += 1 + 4;
  }

  // float step = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_step = this->_internal_step();
  uint32_t raw_step;
  memcpy(&raw_step, &tmp_step, sizeof(tmp_step));
  if (raw_step != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelTypeRangeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelTypeRangeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelTypeRangeInfo::GetClassData() const { return &_class_data_; }


void ModelTypeRangeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelTypeRangeInfo*>(&to_msg);
  auto& from = static_cast<const ModelTypeRangeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelTypeRangeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min = from._internal_min();
  uint32_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    _this->_internal_set_min(from._internal_min());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max = from._internal_max();
  uint32_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    _this->_internal_set_max(from._internal_max());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_step = from._internal_step();
  uint32_t raw_step;
  memcpy(&raw_step, &tmp_step, sizeof(tmp_step));
  if (raw_step != 0) {
    _this->_internal_set_step(from._internal_step());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelTypeRangeInfo::CopyFrom(const ModelTypeRangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelTypeRangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTypeRangeInfo::IsInitialized() const {
  return true;
}

void ModelTypeRangeInfo::InternalSwap(ModelTypeRangeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelTypeRangeInfo, _impl_.step_)
      + sizeof(ModelTypeRangeInfo::_impl_.step_)
      - PROTOBUF_FIELD_OFFSET(ModelTypeRangeInfo, _impl_.min_)>(
          reinterpret_cast<char*>(&_impl_.min_),
          reinterpret_cast<char*>(&other->_impl_.min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelTypeRangeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[76]);
}

// ===================================================================

class ModelTypeEnumOption::_Internal {
 public:
};

ModelTypeEnumOption::ModelTypeEnumOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelTypeEnumOption)
}
ModelTypeEnumOption::ModelTypeEnumOption(const ModelTypeEnumOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelTypeEnumOption* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_type_fields_){from._impl_.model_type_fields_}
    , decltype(_impl_.aliases_){from._impl_.aliases_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.internal_only_){}
    , decltype(_impl_.recommended_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.internal_only_, &from._impl_.internal_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.recommended_) -
    reinterpret_cast<char*>(&_impl_.internal_only_)) + sizeof(_impl_.recommended_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelTypeEnumOption)
}

inline void ModelTypeEnumOption::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_type_fields_){arena}
    , decltype(_impl_.aliases_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.internal_only_){false}
    , decltype(_impl_.recommended_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelTypeEnumOption::~ModelTypeEnumOption() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelTypeEnumOption)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelTypeEnumOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_type_fields_.~RepeatedPtrField();
  _impl_.aliases_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.description_.Destroy();
}

void ModelTypeEnumOption::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelTypeEnumOption::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelTypeEnumOption)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_type_fields_.Clear();
  _impl_.aliases_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  ::memset(&_impl_.internal_only_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.recommended_) -
      reinterpret_cast<char*>(&_impl_.internal_only_)) + sizeof(_impl_.recommended_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelTypeEnumOption::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelTypeEnumOption.id"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelTypeEnumOption.description"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelTypeField model_type_fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_type_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool internal_only = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.internal_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelTypeEnumOptionAlias aliases = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aliases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool recommended = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.recommended_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelTypeEnumOption::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelTypeEnumOption)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeEnumOption.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeEnumOption.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // repeated .clarifai.api.ModelTypeField model_type_fields = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_model_type_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_model_type_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool internal_only = 4;
  if (this->_internal_internal_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_internal_only(), target);
  }

  // repeated .clarifai.api.ModelTypeEnumOptionAlias aliases = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aliases_size()); i < n; i++) {
    const auto& repfield = this->_internal_aliases(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool recommended = 6;
  if (this->_internal_recommended() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_recommended(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelTypeEnumOption)
  return target;
}

size_t ModelTypeEnumOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelTypeEnumOption)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelTypeField model_type_fields = 3;
  total_size += 1UL * this->_internal_model_type_fields_size();
  for (const auto& msg : this->_impl_.model_type_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.ModelTypeEnumOptionAlias aliases = 5;
  total_size += 1UL * this->_internal_aliases_size();
  for (const auto& msg : this->_impl_.aliases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool internal_only = 4;
  if (this->_internal_internal_only() != 0) {
    total_size += 1 + 1;
  }

  // bool recommended = 6;
  if (this->_internal_recommended() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelTypeEnumOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelTypeEnumOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelTypeEnumOption::GetClassData() const { return &_class_data_; }


void ModelTypeEnumOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelTypeEnumOption*>(&to_msg);
  auto& from = static_cast<const ModelTypeEnumOption&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelTypeEnumOption)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.model_type_fields_.MergeFrom(from._impl_.model_type_fields_);
  _this->_impl_.aliases_.MergeFrom(from._impl_.aliases_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_internal_only() != 0) {
    _this->_internal_set_internal_only(from._internal_internal_only());
  }
  if (from._internal_recommended() != 0) {
    _this->_internal_set_recommended(from._internal_recommended());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelTypeEnumOption::CopyFrom(const ModelTypeEnumOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelTypeEnumOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTypeEnumOption::IsInitialized() const {
  return true;
}

void ModelTypeEnumOption::InternalSwap(ModelTypeEnumOption* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.model_type_fields_.InternalSwap(&other->_impl_.model_type_fields_);
  _impl_.aliases_.InternalSwap(&other->_impl_.aliases_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelTypeEnumOption, _impl_.recommended_)
      + sizeof(ModelTypeEnumOption::_impl_.recommended_)
      - PROTOBUF_FIELD_OFFSET(ModelTypeEnumOption, _impl_.internal_only_)>(
          reinterpret_cast<char*>(&_impl_.internal_only_),
          reinterpret_cast<char*>(&other->_impl_.internal_only_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelTypeEnumOption::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[77]);
}

// ===================================================================

class ModelTypeEnumOptionAlias::_Internal {
 public:
};

ModelTypeEnumOptionAlias::ModelTypeEnumOptionAlias(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelTypeEnumOptionAlias)
}
ModelTypeEnumOptionAlias::ModelTypeEnumOptionAlias(const ModelTypeEnumOptionAlias& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelTypeEnumOptionAlias* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wildcard_string_){}
    , decltype(_impl_.id_int_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.wildcard_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wildcard_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wildcard_string().empty()) {
    _this->_impl_.wildcard_string_.Set(from._internal_wildcard_string(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_int_ = from._impl_.id_int_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelTypeEnumOptionAlias)
}

inline void ModelTypeEnumOptionAlias::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wildcard_string_){}
    , decltype(_impl_.id_int_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.wildcard_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wildcard_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelTypeEnumOptionAlias::~ModelTypeEnumOptionAlias() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelTypeEnumOptionAlias)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelTypeEnumOptionAlias::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wildcard_string_.Destroy();
}

void ModelTypeEnumOptionAlias::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelTypeEnumOptionAlias::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelTypeEnumOptionAlias)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wildcard_string_.ClearToEmpty();
  _impl_.id_int_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelTypeEnumOptionAlias::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string wildcard_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_wildcard_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelTypeEnumOptionAlias.wildcard_string"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelTypeEnumOptionAlias::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelTypeEnumOptionAlias)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id_int = 1;
  if (this->_internal_id_int() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id_int(), target);
  }

  // string wildcard_string = 2;
  if (!this->_internal_wildcard_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wildcard_string().data(), static_cast<int>(this->_internal_wildcard_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeEnumOptionAlias.wildcard_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_wildcard_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelTypeEnumOptionAlias)
  return target;
}

size_t ModelTypeEnumOptionAlias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelTypeEnumOptionAlias)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string wildcard_string = 2;
  if (!this->_internal_wildcard_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wildcard_string());
  }

  // int64 id_int = 1;
  if (this->_internal_id_int() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id_int());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelTypeEnumOptionAlias::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelTypeEnumOptionAlias::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelTypeEnumOptionAlias::GetClassData() const { return &_class_data_; }


void ModelTypeEnumOptionAlias::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelTypeEnumOptionAlias*>(&to_msg);
  auto& from = static_cast<const ModelTypeEnumOptionAlias&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelTypeEnumOptionAlias)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_wildcard_string().empty()) {
    _this->_internal_set_wildcard_string(from._internal_wildcard_string());
  }
  if (from._internal_id_int() != 0) {
    _this->_internal_set_id_int(from._internal_id_int());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelTypeEnumOptionAlias::CopyFrom(const ModelTypeEnumOptionAlias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelTypeEnumOptionAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTypeEnumOptionAlias::IsInitialized() const {
  return true;
}

void ModelTypeEnumOptionAlias::InternalSwap(ModelTypeEnumOptionAlias* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.wildcard_string_, lhs_arena,
      &other->_impl_.wildcard_string_, rhs_arena
  );
  swap(_impl_.id_int_, other->_impl_.id_int_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelTypeEnumOptionAlias::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[78]);
}

// ===================================================================

class ModelQuery::_Internal {
 public:
};

ModelQuery::ModelQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelQuery)
}
ModelQuery::ModelQuery(const ModelQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.model_type_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_type_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_type_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_type_id().empty()) {
    _this->_impl_.model_type_id_.Set(from._internal_model_type_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelQuery)
}

inline void ModelQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.model_type_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_type_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_type_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelQuery::~ModelQuery() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.model_type_id_.Destroy();
}

void ModelQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.model_type_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelQuery.name"));
        } else
          goto handle_unusual;
        continue;
      // string model_type_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_type_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelQuery.model_type_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelQuery.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string model_type_id = 3;
  if (!this->_internal_model_type_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type_id().data(), static_cast<int>(this->_internal_model_type_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelQuery.model_type_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_type_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelQuery)
  return target;
}

size_t ModelQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string model_type_id = 3;
  if (!this->_internal_model_type_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelQuery::GetClassData() const { return &_class_data_; }


void ModelQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelQuery*>(&to_msg);
  auto& from = static_cast<const ModelQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_model_type_id().empty()) {
    _this->_internal_set_model_type_id(from._internal_model_type_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelQuery::CopyFrom(const ModelQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelQuery::IsInitialized() const {
  return true;
}

void ModelQuery::InternalSwap(ModelQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_type_id_, lhs_arena,
      &other->_impl_.model_type_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[79]);
}

// ===================================================================

class ModelVersion::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const ModelVersion* msg);
  static const ::clarifai::api::status::Status& status(const ModelVersion* msg);
  static const ::clarifai::api::EvalMetrics& metrics(const ModelVersion* msg);
  static const ::clarifai::api::PretrainedModelConfig& pretrained_model_config(const ModelVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& completed_at(const ModelVersion* msg);
  static const ::clarifai::api::Visibility& visibility(const ModelVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const ModelVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const ModelVersion* msg);
  static const ::clarifai::api::OutputInfo& output_info(const ModelVersion* msg);
  static const ::clarifai::api::InputInfo& input_info(const ModelVersion* msg);
  static const ::clarifai::api::TrainInfo& train_info(const ModelVersion* msg);
  static const ::clarifai::api::ImportInfo& import_info(const ModelVersion* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ModelVersion::_Internal::created_at(const ModelVersion* msg) {
  return *msg->_impl_.created_at_;
}
const ::clarifai::api::status::Status&
ModelVersion::_Internal::status(const ModelVersion* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::EvalMetrics&
ModelVersion::_Internal::metrics(const ModelVersion* msg) {
  return *msg->_impl_.metrics_;
}
const ::clarifai::api::PretrainedModelConfig&
ModelVersion::_Internal::pretrained_model_config(const ModelVersion* msg) {
  return *msg->_impl_.pretrained_model_config_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ModelVersion::_Internal::completed_at(const ModelVersion* msg) {
  return *msg->_impl_.completed_at_;
}
const ::clarifai::api::Visibility&
ModelVersion::_Internal::visibility(const ModelVersion* msg) {
  return *msg->_impl_.visibility_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ModelVersion::_Internal::modified_at(const ModelVersion* msg) {
  return *msg->_impl_.modified_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
ModelVersion::_Internal::metadata(const ModelVersion* msg) {
  return *msg->_impl_.metadata_;
}
const ::clarifai::api::OutputInfo&
ModelVersion::_Internal::output_info(const ModelVersion* msg) {
  return *msg->_impl_.output_info_;
}
const ::clarifai::api::InputInfo&
ModelVersion::_Internal::input_info(const ModelVersion* msg) {
  return *msg->_impl_.input_info_;
}
const ::clarifai::api::TrainInfo&
ModelVersion::_Internal::train_info(const ModelVersion* msg) {
  return *msg->_impl_.train_info_;
}
const ::clarifai::api::ImportInfo&
ModelVersion::_Internal::import_info(const ModelVersion* msg) {
  return *msg->_impl_.import_info_;
}
void ModelVersion::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void ModelVersion::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void ModelVersion::clear_completed_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.completed_at_ != nullptr) {
    delete _impl_.completed_at_;
  }
  _impl_.completed_at_ = nullptr;
}
void ModelVersion::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void ModelVersion::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
ModelVersion::ModelVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelVersion)
}
ModelVersion::ModelVersion(const ModelVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.license_){}
    , decltype(_impl_.train_log_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.metrics_){nullptr}
    , decltype(_impl_.pretrained_model_config_){nullptr}
    , decltype(_impl_.completed_at_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.output_info_){nullptr}
    , decltype(_impl_.input_info_){nullptr}
    , decltype(_impl_.train_info_){nullptr}
    , decltype(_impl_.import_info_){nullptr}
    , decltype(_impl_.active_concept_count_){}
    , decltype(_impl_.total_input_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_license().empty()) {
    _this->_impl_.license_.Set(from._internal_license(), 
      _this->GetArenaForAllocation());
  }
  _impl_.train_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.train_log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_train_log().empty()) {
    _this->_impl_.train_log_.Set(from._internal_train_log(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_metrics()) {
    _this->_impl_.metrics_ = new ::clarifai::api::EvalMetrics(*from._impl_.metrics_);
  }
  if (from._internal_has_pretrained_model_config()) {
    _this->_impl_.pretrained_model_config_ = new ::clarifai::api::PretrainedModelConfig(*from._impl_.pretrained_model_config_);
  }
  if (from._internal_has_completed_at()) {
    _this->_impl_.completed_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.completed_at_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_output_info()) {
    _this->_impl_.output_info_ = new ::clarifai::api::OutputInfo(*from._impl_.output_info_);
  }
  if (from._internal_has_input_info()) {
    _this->_impl_.input_info_ = new ::clarifai::api::InputInfo(*from._impl_.input_info_);
  }
  if (from._internal_has_train_info()) {
    _this->_impl_.train_info_ = new ::clarifai::api::TrainInfo(*from._impl_.train_info_);
  }
  if (from._internal_has_import_info()) {
    _this->_impl_.import_info_ = new ::clarifai::api::ImportInfo(*from._impl_.import_info_);
  }
  ::memcpy(&_impl_.active_concept_count_, &from._impl_.active_concept_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_input_count_) -
    reinterpret_cast<char*>(&_impl_.active_concept_count_)) + sizeof(_impl_.total_input_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelVersion)
}

inline void ModelVersion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.license_){}
    , decltype(_impl_.train_log_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.metrics_){nullptr}
    , decltype(_impl_.pretrained_model_config_){nullptr}
    , decltype(_impl_.completed_at_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.output_info_){nullptr}
    , decltype(_impl_.input_info_){nullptr}
    , decltype(_impl_.train_info_){nullptr}
    , decltype(_impl_.import_info_){nullptr}
    , decltype(_impl_.active_concept_count_){0u}
    , decltype(_impl_.total_input_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.train_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.train_log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelVersion::~ModelVersion() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.description_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.license_.Destroy();
  _impl_.train_log_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.metrics_;
  if (this != internal_default_instance()) delete _impl_.pretrained_model_config_;
  if (this != internal_default_instance()) delete _impl_.completed_at_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.output_info_;
  if (this != internal_default_instance()) delete _impl_.input_info_;
  if (this != internal_default_instance()) delete _impl_.train_info_;
  if (this != internal_default_instance()) delete _impl_.import_info_;
}

void ModelVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.license_.ClearToEmpty();
  _impl_.train_log_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metrics_ != nullptr) {
    delete _impl_.metrics_;
  }
  _impl_.metrics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pretrained_model_config_ != nullptr) {
    delete _impl_.pretrained_model_config_;
  }
  _impl_.pretrained_model_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.completed_at_ != nullptr) {
    delete _impl_.completed_at_;
  }
  _impl_.completed_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.output_info_ != nullptr) {
    delete _impl_.output_info_;
  }
  _impl_.output_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_info_ != nullptr) {
    delete _impl_.input_info_;
  }
  _impl_.input_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.train_info_ != nullptr) {
    delete _impl_.train_info_;
  }
  _impl_.train_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.import_info_ != nullptr) {
    delete _impl_.import_info_;
  }
  _impl_.import_info_ = nullptr;
  ::memset(&_impl_.active_concept_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_input_count_) -
      reinterpret_cast<char*>(&_impl_.active_concept_count_)) + sizeof(_impl_.total_input_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelVersion.id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 active_concept_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.active_concept_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvalMetrics metrics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 total_input_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.total_input_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.PretrainedModelConfig pretrained_model_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pretrained_model_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp completed_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_completed_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelVersion.description"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelVersion.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelVersion.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string license = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_license();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelVersion.license"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.OutputInfo output_info = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.InputInfo input_info = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TrainInfo train_info = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_train_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ImportInfo import_info = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_import_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string train_log = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_train_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelVersion.train_log"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.status.Status status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // uint32 active_concept_count = 4;
  if (this->_internal_active_concept_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_active_concept_count(), target);
  }

  // .clarifai.api.EvalMetrics metrics = 5;
  if (this->_internal_has_metrics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::metrics(this),
        _Internal::metrics(this).GetCachedSize(), target, stream);
  }

  // uint32 total_input_count = 6;
  if (this->_internal_total_input_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_total_input_count(), target);
  }

  // .clarifai.api.PretrainedModelConfig pretrained_model_config = 7;
  if (this->_internal_has_pretrained_model_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::pretrained_model_config(this),
        _Internal::pretrained_model_config(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp completed_at = 10;
  if (this->_internal_has_completed_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::completed_at(this),
        _Internal::completed_at(this).GetCachedSize(), target, stream);
  }

  // string description = 11;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.description");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_description(), target);
  }

  // .clarifai.api.Visibility visibility = 12;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  // string app_id = 13;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.app_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_app_id(), target);
  }

  // string user_id = 14;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.user_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_user_id(), target);
  }

  // .google.protobuf.Timestamp modified_at = 15;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct metadata = 16;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // string license = 17;
  if (!this->_internal_license().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.license");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_license(), target);
  }

  // .clarifai.api.OutputInfo output_info = 19;
  if (this->_internal_has_output_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::output_info(this),
        _Internal::output_info(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.InputInfo input_info = 20;
  if (this->_internal_has_input_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::input_info(this),
        _Internal::input_info(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.TrainInfo train_info = 21;
  if (this->_internal_has_train_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::train_info(this),
        _Internal::train_info(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ImportInfo import_info = 22;
  if (this->_internal_has_import_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::import_info(this),
        _Internal::import_info(this).GetCachedSize(), target, stream);
  }

  // string train_log = 23;
  if (!this->_internal_train_log().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_train_log().data(), static_cast<int>(this->_internal_train_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.train_log");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_train_log(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelVersion)
  return target;
}

size_t ModelVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 11;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string app_id = 13;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 14;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string license = 17;
  if (!this->_internal_license().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());
  }

  // string train_log = 23;
  if (!this->_internal_train_log().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_train_log());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .clarifai.api.status.Status status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.EvalMetrics metrics = 5;
  if (this->_internal_has_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metrics_);
  }

  // .clarifai.api.PretrainedModelConfig pretrained_model_config = 7;
  if (this->_internal_has_pretrained_model_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pretrained_model_config_);
  }

  // .google.protobuf.Timestamp completed_at = 10;
  if (this->_internal_has_completed_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.completed_at_);
  }

  // .clarifai.api.Visibility visibility = 12;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  // .google.protobuf.Timestamp modified_at = 15;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .google.protobuf.Struct metadata = 16;
  if (this->_internal_has_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .clarifai.api.OutputInfo output_info = 19;
  if (this->_internal_has_output_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.output_info_);
  }

  // .clarifai.api.InputInfo input_info = 20;
  if (this->_internal_has_input_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_info_);
  }

  // .clarifai.api.TrainInfo train_info = 21;
  if (this->_internal_has_train_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.train_info_);
  }

  // .clarifai.api.ImportInfo import_info = 22;
  if (this->_internal_has_import_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.import_info_);
  }

  // uint32 active_concept_count = 4;
  if (this->_internal_active_concept_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_active_concept_count());
  }

  // uint32 total_input_count = 6;
  if (this->_internal_total_input_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_input_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelVersion::GetClassData() const { return &_class_data_; }


void ModelVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelVersion*>(&to_msg);
  auto& from = static_cast<const ModelVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelVersion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_license().empty()) {
    _this->_internal_set_license(from._internal_license());
  }
  if (!from._internal_train_log().empty()) {
    _this->_internal_set_train_log(from._internal_train_log());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_metrics()) {
    _this->_internal_mutable_metrics()->::clarifai::api::EvalMetrics::MergeFrom(
        from._internal_metrics());
  }
  if (from._internal_has_pretrained_model_config()) {
    _this->_internal_mutable_pretrained_model_config()->::clarifai::api::PretrainedModelConfig::MergeFrom(
        from._internal_pretrained_model_config());
  }
  if (from._internal_has_completed_at()) {
    _this->_internal_mutable_completed_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_completed_at());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_output_info()) {
    _this->_internal_mutable_output_info()->::clarifai::api::OutputInfo::MergeFrom(
        from._internal_output_info());
  }
  if (from._internal_has_input_info()) {
    _this->_internal_mutable_input_info()->::clarifai::api::InputInfo::MergeFrom(
        from._internal_input_info());
  }
  if (from._internal_has_train_info()) {
    _this->_internal_mutable_train_info()->::clarifai::api::TrainInfo::MergeFrom(
        from._internal_train_info());
  }
  if (from._internal_has_import_info()) {
    _this->_internal_mutable_import_info()->::clarifai::api::ImportInfo::MergeFrom(
        from._internal_import_info());
  }
  if (from._internal_active_concept_count() != 0) {
    _this->_internal_set_active_concept_count(from._internal_active_concept_count());
  }
  if (from._internal_total_input_count() != 0) {
    _this->_internal_set_total_input_count(from._internal_total_input_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelVersion::CopyFrom(const ModelVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVersion::IsInitialized() const {
  return true;
}

void ModelVersion::InternalSwap(ModelVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.license_, lhs_arena,
      &other->_impl_.license_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.train_log_, lhs_arena,
      &other->_impl_.train_log_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelVersion, _impl_.total_input_count_)
      + sizeof(ModelVersion::_impl_.total_input_count_)
      - PROTOBUF_FIELD_OFFSET(ModelVersion, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[80]);
}

// ===================================================================

class PretrainedModelConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& input_fields_map(const PretrainedModelConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& output_fields_map(const PretrainedModelConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
PretrainedModelConfig::_Internal::input_fields_map(const PretrainedModelConfig* msg) {
  return *msg->_impl_.input_fields_map_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
PretrainedModelConfig::_Internal::output_fields_map(const PretrainedModelConfig* msg) {
  return *msg->_impl_.output_fields_map_;
}
void PretrainedModelConfig::clear_input_fields_map() {
  if (GetArenaForAllocation() == nullptr && _impl_.input_fields_map_ != nullptr) {
    delete _impl_.input_fields_map_;
  }
  _impl_.input_fields_map_ = nullptr;
}
void PretrainedModelConfig::clear_output_fields_map() {
  if (GetArenaForAllocation() == nullptr && _impl_.output_fields_map_ != nullptr) {
    delete _impl_.output_fields_map_;
  }
  _impl_.output_fields_map_ = nullptr;
}
PretrainedModelConfig::PretrainedModelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PretrainedModelConfig)
}
PretrainedModelConfig::PretrainedModelConfig(const PretrainedModelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PretrainedModelConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_zip_url_){}
    , decltype(_impl_.input_fields_map_){nullptr}
    , decltype(_impl_.output_fields_map_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_zip_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_zip_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_zip_url().empty()) {
    _this->_impl_.model_zip_url_.Set(from._internal_model_zip_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_input_fields_map()) {
    _this->_impl_.input_fields_map_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.input_fields_map_);
  }
  if (from._internal_has_output_fields_map()) {
    _this->_impl_.output_fields_map_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.output_fields_map_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PretrainedModelConfig)
}

inline void PretrainedModelConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_zip_url_){}
    , decltype(_impl_.input_fields_map_){nullptr}
    , decltype(_impl_.output_fields_map_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_zip_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_zip_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PretrainedModelConfig::~PretrainedModelConfig() {
  // @@protoc_insertion_point(destructor:clarifai.api.PretrainedModelConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PretrainedModelConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_zip_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.input_fields_map_;
  if (this != internal_default_instance()) delete _impl_.output_fields_map_;
}

void PretrainedModelConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PretrainedModelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PretrainedModelConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_zip_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.input_fields_map_ != nullptr) {
    delete _impl_.input_fields_map_;
  }
  _impl_.input_fields_map_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.output_fields_map_ != nullptr) {
    delete _impl_.output_fields_map_;
  }
  _impl_.output_fields_map_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PretrainedModelConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct input_fields_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_fields_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct output_fields_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_fields_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_zip_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_model_zip_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PretrainedModelConfig.model_zip_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PretrainedModelConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PretrainedModelConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct input_fields_map = 3;
  if (this->_internal_has_input_fields_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::input_fields_map(this),
        _Internal::input_fields_map(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct output_fields_map = 4;
  if (this->_internal_has_output_fields_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::output_fields_map(this),
        _Internal::output_fields_map(this).GetCachedSize(), target, stream);
  }

  // string model_zip_url = 6;
  if (!this->_internal_model_zip_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_zip_url().data(), static_cast<int>(this->_internal_model_zip_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PretrainedModelConfig.model_zip_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_model_zip_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PretrainedModelConfig)
  return target;
}

size_t PretrainedModelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PretrainedModelConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_zip_url = 6;
  if (!this->_internal_model_zip_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_zip_url());
  }

  // .google.protobuf.Struct input_fields_map = 3;
  if (this->_internal_has_input_fields_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_fields_map_);
  }

  // .google.protobuf.Struct output_fields_map = 4;
  if (this->_internal_has_output_fields_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.output_fields_map_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PretrainedModelConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PretrainedModelConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PretrainedModelConfig::GetClassData() const { return &_class_data_; }


void PretrainedModelConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PretrainedModelConfig*>(&to_msg);
  auto& from = static_cast<const PretrainedModelConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PretrainedModelConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_zip_url().empty()) {
    _this->_internal_set_model_zip_url(from._internal_model_zip_url());
  }
  if (from._internal_has_input_fields_map()) {
    _this->_internal_mutable_input_fields_map()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_input_fields_map());
  }
  if (from._internal_has_output_fields_map()) {
    _this->_internal_mutable_output_fields_map()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_output_fields_map());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PretrainedModelConfig::CopyFrom(const PretrainedModelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PretrainedModelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PretrainedModelConfig::IsInitialized() const {
  return true;
}

void PretrainedModelConfig::InternalSwap(PretrainedModelConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_zip_url_, lhs_arena,
      &other->_impl_.model_zip_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PretrainedModelConfig, _impl_.output_fields_map_)
      + sizeof(PretrainedModelConfig::_impl_.output_fields_map_)
      - PROTOBUF_FIELD_OFFSET(PretrainedModelConfig, _impl_.input_fields_map_)>(
          reinterpret_cast<char*>(&_impl_.input_fields_map_),
          reinterpret_cast<char*>(&other->_impl_.input_fields_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PretrainedModelConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[81]);
}

// ===================================================================

class TrainStats::_Internal {
 public:
};

TrainStats::TrainStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TrainStats)
}
TrainStats::TrainStats(const TrainStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrainStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.loss_curve_){from._impl_.loss_curve_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TrainStats)
}

inline void TrainStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.loss_curve_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrainStats::~TrainStats() {
  // @@protoc_insertion_point(destructor:clarifai.api.TrainStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrainStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.loss_curve_.~RepeatedPtrField();
}

void TrainStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrainStats::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TrainStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.loss_curve_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.LossCurveEntry loss_curve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loss_curve(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrainStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TrainStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.LossCurveEntry loss_curve = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_loss_curve_size()); i < n; i++) {
    const auto& repfield = this->_internal_loss_curve(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TrainStats)
  return target;
}

size_t TrainStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TrainStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LossCurveEntry loss_curve = 1;
  total_size += 1UL * this->_internal_loss_curve_size();
  for (const auto& msg : this->_impl_.loss_curve_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrainStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrainStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrainStats::GetClassData() const { return &_class_data_; }


void TrainStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrainStats*>(&to_msg);
  auto& from = static_cast<const TrainStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TrainStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.loss_curve_.MergeFrom(from._impl_.loss_curve_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrainStats::CopyFrom(const TrainStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TrainStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainStats::IsInitialized() const {
  return true;
}

void TrainStats::InternalSwap(TrainStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.loss_curve_.InternalSwap(&other->_impl_.loss_curve_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[82]);
}

// ===================================================================

class LossCurveEntry::_Internal {
 public:
};

LossCurveEntry::LossCurveEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.LossCurveEntry)
}
LossCurveEntry::LossCurveEntry(const LossCurveEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LossCurveEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.epoch_){}
    , decltype(_impl_.global_step_){}
    , decltype(_impl_.cost_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.epoch_, &from._impl_.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cost_) -
    reinterpret_cast<char*>(&_impl_.epoch_)) + sizeof(_impl_.cost_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LossCurveEntry)
}

inline void LossCurveEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.epoch_){0u}
    , decltype(_impl_.global_step_){0u}
    , decltype(_impl_.cost_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LossCurveEntry::~LossCurveEntry() {
  // @@protoc_insertion_point(destructor:clarifai.api.LossCurveEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LossCurveEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LossCurveEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LossCurveEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LossCurveEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cost_) -
      reinterpret_cast<char*>(&_impl_.epoch_)) + sizeof(_impl_.cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LossCurveEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 global_step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.global_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LossCurveEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LossCurveEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_epoch(), target);
  }

  // uint32 global_step = 2;
  if (this->_internal_global_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_global_step(), target);
  }

  // float cost = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost = this->_internal_cost();
  uint32_t raw_cost;
  memcpy(&raw_cost, &tmp_cost, sizeof(tmp_cost));
  if (raw_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LossCurveEntry)
  return target;
}

size_t LossCurveEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LossCurveEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_epoch());
  }

  // uint32 global_step = 2;
  if (this->_internal_global_step() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_global_step());
  }

  // float cost = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost = this->_internal_cost();
  uint32_t raw_cost;
  memcpy(&raw_cost, &tmp_cost, sizeof(tmp_cost));
  if (raw_cost != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LossCurveEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LossCurveEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LossCurveEntry::GetClassData() const { return &_class_data_; }


void LossCurveEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LossCurveEntry*>(&to_msg);
  auto& from = static_cast<const LossCurveEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LossCurveEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_epoch() != 0) {
    _this->_internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_global_step() != 0) {
    _this->_internal_set_global_step(from._internal_global_step());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost = from._internal_cost();
  uint32_t raw_cost;
  memcpy(&raw_cost, &tmp_cost, sizeof(tmp_cost));
  if (raw_cost != 0) {
    _this->_internal_set_cost(from._internal_cost());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LossCurveEntry::CopyFrom(const LossCurveEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LossCurveEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossCurveEntry::IsInitialized() const {
  return true;
}

void LossCurveEntry::InternalSwap(LossCurveEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LossCurveEntry, _impl_.cost_)
      + sizeof(LossCurveEntry::_impl_.cost_)
      - PROTOBUF_FIELD_OFFSET(LossCurveEntry, _impl_.epoch_)>(
          reinterpret_cast<char*>(&_impl_.epoch_),
          reinterpret_cast<char*>(&other->_impl_.epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LossCurveEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[83]);
}

// ===================================================================

class LabelCount::_Internal {
 public:
  static const ::clarifai::api::Concept& concept(const LabelCount* msg);
};

const ::clarifai::api::Concept&
LabelCount::_Internal::concept(const LabelCount* msg) {
  return *msg->_impl_.concept_;
}
LabelCount::LabelCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.LabelCount)
}
LabelCount::LabelCount(const LabelCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LabelCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_name_){}
    , decltype(_impl_.concept_){nullptr}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.concept_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_name().empty()) {
    _this->_impl_.concept_name_.Set(from._internal_concept_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_concept()) {
    _this->_impl_.concept_ = new ::clarifai::api::Concept(*from._impl_.concept_);
  }
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LabelCount)
}

inline void LabelCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_name_){}
    , decltype(_impl_.concept_){nullptr}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.concept_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LabelCount::~LabelCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.LabelCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LabelCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.concept_;
}

void LabelCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LabelCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LabelCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.concept_ != nullptr) {
    delete _impl_.concept_;
  }
  _impl_.concept_ = nullptr;
  _impl_.count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string concept_name = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_concept_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.LabelCount.concept_name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Concept concept = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LabelCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LabelCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string concept_name = 1 [deprecated = true];
  if (!this->_internal_concept_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_name().data(), static_cast<int>(this->_internal_concept_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.LabelCount.concept_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_concept_name(), target);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // .clarifai.api.Concept concept = 3;
  if (this->_internal_has_concept()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::concept(this),
        _Internal::concept(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LabelCount)
  return target;
}

size_t LabelCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LabelCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_name = 1 [deprecated = true];
  if (!this->_internal_concept_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_name());
  }

  // .clarifai.api.Concept concept = 3;
  if (this->_internal_has_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.concept_);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabelCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LabelCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabelCount::GetClassData() const { return &_class_data_; }


void LabelCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LabelCount*>(&to_msg);
  auto& from = static_cast<const LabelCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LabelCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_concept_name().empty()) {
    _this->_internal_set_concept_name(from._internal_concept_name());
  }
  if (from._internal_has_concept()) {
    _this->_internal_mutable_concept()->::clarifai::api::Concept::MergeFrom(
        from._internal_concept());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabelCount::CopyFrom(const LabelCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LabelCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelCount::IsInitialized() const {
  return true;
}

void LabelCount::InternalSwap(LabelCount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.concept_name_, lhs_arena,
      &other->_impl_.concept_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LabelCount, _impl_.count_)
      + sizeof(LabelCount::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(LabelCount, _impl_.concept_)>(
          reinterpret_cast<char*>(&_impl_.concept_),
          reinterpret_cast<char*>(&other->_impl_.concept_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[84]);
}

// ===================================================================

class LabelDistribution::_Internal {
 public:
};

LabelDistribution::LabelDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.LabelDistribution)
}
LabelDistribution::LabelDistribution(const LabelDistribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LabelDistribution* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.positive_label_counts_){from._impl_.positive_label_counts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LabelDistribution)
}

inline void LabelDistribution::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.positive_label_counts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LabelDistribution::~LabelDistribution() {
  // @@protoc_insertion_point(destructor:clarifai.api.LabelDistribution)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LabelDistribution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.positive_label_counts_.~RepeatedPtrField();
}

void LabelDistribution::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LabelDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LabelDistribution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.positive_label_counts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelDistribution::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.LabelCount positive_label_counts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positive_label_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LabelDistribution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LabelDistribution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.LabelCount positive_label_counts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_positive_label_counts_size()); i < n; i++) {
    const auto& repfield = this->_internal_positive_label_counts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LabelDistribution)
  return target;
}

size_t LabelDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LabelDistribution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LabelCount positive_label_counts = 1;
  total_size += 1UL * this->_internal_positive_label_counts_size();
  for (const auto& msg : this->_impl_.positive_label_counts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabelDistribution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LabelDistribution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabelDistribution::GetClassData() const { return &_class_data_; }


void LabelDistribution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LabelDistribution*>(&to_msg);
  auto& from = static_cast<const LabelDistribution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LabelDistribution)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.positive_label_counts_.MergeFrom(from._impl_.positive_label_counts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabelDistribution::CopyFrom(const LabelDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LabelDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelDistribution::IsInitialized() const {
  return true;
}

void LabelDistribution::InternalSwap(LabelDistribution* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.positive_label_counts_.InternalSwap(&other->_impl_.positive_label_counts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelDistribution::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[85]);
}

// ===================================================================

class CooccurrenceMatrixEntry::_Internal {
 public:
};

CooccurrenceMatrixEntry::CooccurrenceMatrixEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.CooccurrenceMatrixEntry)
}
CooccurrenceMatrixEntry::CooccurrenceMatrixEntry(const CooccurrenceMatrixEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CooccurrenceMatrixEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_row().empty()) {
    _this->_impl_.row_.Set(from._internal_row(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_col().empty()) {
    _this->_impl_.col_.Set(from._internal_col(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.CooccurrenceMatrixEntry)
}

inline void CooccurrenceMatrixEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CooccurrenceMatrixEntry::~CooccurrenceMatrixEntry() {
  // @@protoc_insertion_point(destructor:clarifai.api.CooccurrenceMatrixEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CooccurrenceMatrixEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_.Destroy();
  _impl_.col_.Destroy();
}

void CooccurrenceMatrixEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CooccurrenceMatrixEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.CooccurrenceMatrixEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.row_.ClearToEmpty();
  _impl_.col_.ClearToEmpty();
  _impl_.count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CooccurrenceMatrixEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_row();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.CooccurrenceMatrixEntry.row"));
        } else
          goto handle_unusual;
        continue;
      // string col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.CooccurrenceMatrixEntry.col"));
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CooccurrenceMatrixEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.CooccurrenceMatrixEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string row = 1;
  if (!this->_internal_row().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_row().data(), static_cast<int>(this->_internal_row().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.CooccurrenceMatrixEntry.row");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_row(), target);
  }

  // string col = 2;
  if (!this->_internal_col().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col().data(), static_cast<int>(this->_internal_col().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.CooccurrenceMatrixEntry.col");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col(), target);
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.CooccurrenceMatrixEntry)
  return target;
}

size_t CooccurrenceMatrixEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.CooccurrenceMatrixEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string row = 1;
  if (!this->_internal_row().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_row());
  }

  // string col = 2;
  if (!this->_internal_col().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_col());
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CooccurrenceMatrixEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CooccurrenceMatrixEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CooccurrenceMatrixEntry::GetClassData() const { return &_class_data_; }


void CooccurrenceMatrixEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CooccurrenceMatrixEntry*>(&to_msg);
  auto& from = static_cast<const CooccurrenceMatrixEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.CooccurrenceMatrixEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_row().empty()) {
    _this->_internal_set_row(from._internal_row());
  }
  if (!from._internal_col().empty()) {
    _this->_internal_set_col(from._internal_col());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CooccurrenceMatrixEntry::CopyFrom(const CooccurrenceMatrixEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.CooccurrenceMatrixEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CooccurrenceMatrixEntry::IsInitialized() const {
  return true;
}

void CooccurrenceMatrixEntry::InternalSwap(CooccurrenceMatrixEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.row_, lhs_arena,
      &other->_impl_.row_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_, lhs_arena,
      &other->_impl_.col_, rhs_arena
  );
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CooccurrenceMatrixEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[86]);
}

// ===================================================================

class CooccurrenceMatrix::_Internal {
 public:
};

CooccurrenceMatrix::CooccurrenceMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.CooccurrenceMatrix)
}
CooccurrenceMatrix::CooccurrenceMatrix(const CooccurrenceMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CooccurrenceMatrix* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.matrix_){from._impl_.matrix_}
    , decltype(_impl_.concept_ids_){from._impl_.concept_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.CooccurrenceMatrix)
}

inline void CooccurrenceMatrix::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.matrix_){arena}
    , decltype(_impl_.concept_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CooccurrenceMatrix::~CooccurrenceMatrix() {
  // @@protoc_insertion_point(destructor:clarifai.api.CooccurrenceMatrix)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CooccurrenceMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.matrix_.~RepeatedPtrField();
  _impl_.concept_ids_.~RepeatedPtrField();
}

void CooccurrenceMatrix::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CooccurrenceMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.CooccurrenceMatrix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matrix_.Clear();
  _impl_.concept_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CooccurrenceMatrix::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.CooccurrenceMatrixEntry matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matrix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string concept_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.CooccurrenceMatrix.concept_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CooccurrenceMatrix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.CooccurrenceMatrix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.CooccurrenceMatrixEntry matrix = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_matrix_size()); i < n; i++) {
    const auto& repfield = this->_internal_matrix(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string concept_ids = 2;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.CooccurrenceMatrix.concept_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.CooccurrenceMatrix)
  return target;
}

size_t CooccurrenceMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.CooccurrenceMatrix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.CooccurrenceMatrixEntry matrix = 1;
  total_size += 1UL * this->_internal_matrix_size();
  for (const auto& msg : this->_impl_.matrix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string concept_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.concept_ids_.size());
  for (int i = 0, n = _impl_.concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.concept_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CooccurrenceMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CooccurrenceMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CooccurrenceMatrix::GetClassData() const { return &_class_data_; }


void CooccurrenceMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CooccurrenceMatrix*>(&to_msg);
  auto& from = static_cast<const CooccurrenceMatrix&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.CooccurrenceMatrix)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.matrix_.MergeFrom(from._impl_.matrix_);
  _this->_impl_.concept_ids_.MergeFrom(from._impl_.concept_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CooccurrenceMatrix::CopyFrom(const CooccurrenceMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.CooccurrenceMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CooccurrenceMatrix::IsInitialized() const {
  return true;
}

void CooccurrenceMatrix::InternalSwap(CooccurrenceMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.matrix_.InternalSwap(&other->_impl_.matrix_);
  _impl_.concept_ids_.InternalSwap(&other->_impl_.concept_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CooccurrenceMatrix::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[87]);
}

// ===================================================================

class ConfusionMatrixEntry::_Internal {
 public:
  static const ::clarifai::api::Concept& predicted_concept(const ConfusionMatrixEntry* msg);
  static const ::clarifai::api::Concept& actual_concept(const ConfusionMatrixEntry* msg);
};

const ::clarifai::api::Concept&
ConfusionMatrixEntry::_Internal::predicted_concept(const ConfusionMatrixEntry* msg) {
  return *msg->_impl_.predicted_concept_;
}
const ::clarifai::api::Concept&
ConfusionMatrixEntry::_Internal::actual_concept(const ConfusionMatrixEntry* msg) {
  return *msg->_impl_.actual_concept_;
}
ConfusionMatrixEntry::ConfusionMatrixEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConfusionMatrixEntry)
}
ConfusionMatrixEntry::ConfusionMatrixEntry(const ConfusionMatrixEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfusionMatrixEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.predicted_){}
    , decltype(_impl_.actual_){}
    , decltype(_impl_.predicted_concept_){nullptr}
    , decltype(_impl_.actual_concept_){nullptr}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.predicted_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.predicted_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_predicted().empty()) {
    _this->_impl_.predicted_.Set(from._internal_predicted(), 
      _this->GetArenaForAllocation());
  }
  _impl_.actual_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.actual_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_actual().empty()) {
    _this->_impl_.actual_.Set(from._internal_actual(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_predicted_concept()) {
    _this->_impl_.predicted_concept_ = new ::clarifai::api::Concept(*from._impl_.predicted_concept_);
  }
  if (from._internal_has_actual_concept()) {
    _this->_impl_.actual_concept_ = new ::clarifai::api::Concept(*from._impl_.actual_concept_);
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConfusionMatrixEntry)
}

inline void ConfusionMatrixEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.predicted_){}
    , decltype(_impl_.actual_){}
    , decltype(_impl_.predicted_concept_){nullptr}
    , decltype(_impl_.actual_concept_){nullptr}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.predicted_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.predicted_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.actual_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.actual_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfusionMatrixEntry::~ConfusionMatrixEntry() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConfusionMatrixEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfusionMatrixEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.predicted_.Destroy();
  _impl_.actual_.Destroy();
  if (this != internal_default_instance()) delete _impl_.predicted_concept_;
  if (this != internal_default_instance()) delete _impl_.actual_concept_;
}

void ConfusionMatrixEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfusionMatrixEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConfusionMatrixEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.predicted_.ClearToEmpty();
  _impl_.actual_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.predicted_concept_ != nullptr) {
    delete _impl_.predicted_concept_;
  }
  _impl_.predicted_concept_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.actual_concept_ != nullptr) {
    delete _impl_.actual_concept_;
  }
  _impl_.actual_concept_ = nullptr;
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfusionMatrixEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string predicted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_predicted();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConfusionMatrixEntry.predicted"));
        } else
          goto handle_unusual;
        continue;
      // string actual = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_actual();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConfusionMatrixEntry.actual"));
        } else
          goto handle_unusual;
        continue;
      // float value = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Concept predicted_concept = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicted_concept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Concept actual_concept = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_actual_concept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfusionMatrixEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConfusionMatrixEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string predicted = 1;
  if (!this->_internal_predicted().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_predicted().data(), static_cast<int>(this->_internal_predicted().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConfusionMatrixEntry.predicted");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_predicted(), target);
  }

  // string actual = 2;
  if (!this->_internal_actual().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actual().data(), static_cast<int>(this->_internal_actual().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConfusionMatrixEntry.actual");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_actual(), target);
  }

  // float value = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_value(), target);
  }

  // .clarifai.api.Concept predicted_concept = 5;
  if (this->_internal_has_predicted_concept()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::predicted_concept(this),
        _Internal::predicted_concept(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Concept actual_concept = 6;
  if (this->_internal_has_actual_concept()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::actual_concept(this),
        _Internal::actual_concept(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConfusionMatrixEntry)
  return target;
}

size_t ConfusionMatrixEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConfusionMatrixEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string predicted = 1;
  if (!this->_internal_predicted().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_predicted());
  }

  // string actual = 2;
  if (!this->_internal_actual().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actual());
  }

  // .clarifai.api.Concept predicted_concept = 5;
  if (this->_internal_has_predicted_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.predicted_concept_);
  }

  // .clarifai.api.Concept actual_concept = 6;
  if (this->_internal_has_actual_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.actual_concept_);
  }

  // float value = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfusionMatrixEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfusionMatrixEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfusionMatrixEntry::GetClassData() const { return &_class_data_; }


void ConfusionMatrixEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfusionMatrixEntry*>(&to_msg);
  auto& from = static_cast<const ConfusionMatrixEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConfusionMatrixEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_predicted().empty()) {
    _this->_internal_set_predicted(from._internal_predicted());
  }
  if (!from._internal_actual().empty()) {
    _this->_internal_set_actual(from._internal_actual());
  }
  if (from._internal_has_predicted_concept()) {
    _this->_internal_mutable_predicted_concept()->::clarifai::api::Concept::MergeFrom(
        from._internal_predicted_concept());
  }
  if (from._internal_has_actual_concept()) {
    _this->_internal_mutable_actual_concept()->::clarifai::api::Concept::MergeFrom(
        from._internal_actual_concept());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfusionMatrixEntry::CopyFrom(const ConfusionMatrixEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConfusionMatrixEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfusionMatrixEntry::IsInitialized() const {
  return true;
}

void ConfusionMatrixEntry::InternalSwap(ConfusionMatrixEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.predicted_, lhs_arena,
      &other->_impl_.predicted_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.actual_, lhs_arena,
      &other->_impl_.actual_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfusionMatrixEntry, _impl_.value_)
      + sizeof(ConfusionMatrixEntry::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(ConfusionMatrixEntry, _impl_.predicted_concept_)>(
          reinterpret_cast<char*>(&_impl_.predicted_concept_),
          reinterpret_cast<char*>(&other->_impl_.predicted_concept_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfusionMatrixEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[88]);
}

// ===================================================================

class ConfusionMatrix::_Internal {
 public:
};

ConfusionMatrix::ConfusionMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConfusionMatrix)
}
ConfusionMatrix::ConfusionMatrix(const ConfusionMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfusionMatrix* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.matrix_){from._impl_.matrix_}
    , decltype(_impl_.concept_ids_){from._impl_.concept_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConfusionMatrix)
}

inline void ConfusionMatrix::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.matrix_){arena}
    , decltype(_impl_.concept_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConfusionMatrix::~ConfusionMatrix() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConfusionMatrix)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfusionMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.matrix_.~RepeatedPtrField();
  _impl_.concept_ids_.~RepeatedPtrField();
}

void ConfusionMatrix::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfusionMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConfusionMatrix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matrix_.Clear();
  _impl_.concept_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfusionMatrix::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.ConfusionMatrixEntry matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matrix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string concept_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ConfusionMatrix.concept_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfusionMatrix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConfusionMatrix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.ConfusionMatrixEntry matrix = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_matrix_size()); i < n; i++) {
    const auto& repfield = this->_internal_matrix(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string concept_ids = 2;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConfusionMatrix.concept_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConfusionMatrix)
  return target;
}

size_t ConfusionMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConfusionMatrix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConfusionMatrixEntry matrix = 1;
  total_size += 1UL * this->_internal_matrix_size();
  for (const auto& msg : this->_impl_.matrix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string concept_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.concept_ids_.size());
  for (int i = 0, n = _impl_.concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.concept_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfusionMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfusionMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfusionMatrix::GetClassData() const { return &_class_data_; }


void ConfusionMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfusionMatrix*>(&to_msg);
  auto& from = static_cast<const ConfusionMatrix&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConfusionMatrix)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.matrix_.MergeFrom(from._impl_.matrix_);
  _this->_impl_.concept_ids_.MergeFrom(from._impl_.concept_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfusionMatrix::CopyFrom(const ConfusionMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConfusionMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfusionMatrix::IsInitialized() const {
  return true;
}

void ConfusionMatrix::InternalSwap(ConfusionMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.matrix_.InternalSwap(&other->_impl_.matrix_);
  _impl_.concept_ids_.InternalSwap(&other->_impl_.concept_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfusionMatrix::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[89]);
}

// ===================================================================

class ROC::_Internal {
 public:
};

ROC::ROC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ROC)
}
ROC::ROC(const ROC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ROC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fpr_){from._impl_.fpr_}
    , decltype(_impl_.tpr_){from._impl_.tpr_}
    , decltype(_impl_.thresholds_){from._impl_.thresholds_}
    , decltype(_impl_.fpr_per_image_){from._impl_.fpr_per_image_}
    , decltype(_impl_.fpr_per_object_){from._impl_.fpr_per_object_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ROC)
}

inline void ROC::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fpr_){arena}
    , decltype(_impl_.tpr_){arena}
    , decltype(_impl_.thresholds_){arena}
    , decltype(_impl_.fpr_per_image_){arena}
    , decltype(_impl_.fpr_per_object_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ROC::~ROC() {
  // @@protoc_insertion_point(destructor:clarifai.api.ROC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ROC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fpr_.~RepeatedField();
  _impl_.tpr_.~RepeatedField();
  _impl_.thresholds_.~RepeatedField();
  _impl_.fpr_per_image_.~RepeatedField();
  _impl_.fpr_per_object_.~RepeatedField();
}

void ROC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ROC::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ROC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fpr_.Clear();
  _impl_.tpr_.Clear();
  _impl_.thresholds_.Clear();
  _impl_.fpr_per_image_.Clear();
  _impl_.fpr_per_object_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float fpr = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_fpr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_fpr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float tpr = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_tpr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_tpr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_thresholds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float fpr_per_image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_fpr_per_image(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_fpr_per_image(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float fpr_per_object = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_fpr_per_object(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_fpr_per_object(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ROC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ROC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float fpr = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_fpr_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_fpr(), target);
  }

  // repeated float tpr = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_tpr_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_tpr(), target);
  }

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_thresholds_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_thresholds(), target);
  }

  // repeated float fpr_per_image = 4;
  if (this->_internal_fpr_per_image_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_fpr_per_image(), target);
  }

  // repeated float fpr_per_object = 5;
  if (this->_internal_fpr_per_object_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_fpr_per_object(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ROC)
  return target;
}

size_t ROC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ROC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float fpr = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fpr_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float tpr = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_tpr_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_thresholds_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float fpr_per_image = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fpr_per_image_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float fpr_per_object = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fpr_per_object_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ROC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ROC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ROC::GetClassData() const { return &_class_data_; }


void ROC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ROC*>(&to_msg);
  auto& from = static_cast<const ROC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ROC)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fpr_.MergeFrom(from._impl_.fpr_);
  _this->_impl_.tpr_.MergeFrom(from._impl_.tpr_);
  _this->_impl_.thresholds_.MergeFrom(from._impl_.thresholds_);
  _this->_impl_.fpr_per_image_.MergeFrom(from._impl_.fpr_per_image_);
  _this->_impl_.fpr_per_object_.MergeFrom(from._impl_.fpr_per_object_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ROC::CopyFrom(const ROC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ROC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROC::IsInitialized() const {
  return true;
}

void ROC::InternalSwap(ROC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fpr_.InternalSwap(&other->_impl_.fpr_);
  _impl_.tpr_.InternalSwap(&other->_impl_.tpr_);
  _impl_.thresholds_.InternalSwap(&other->_impl_.thresholds_);
  _impl_.fpr_per_image_.InternalSwap(&other->_impl_.fpr_per_image_);
  _impl_.fpr_per_object_.InternalSwap(&other->_impl_.fpr_per_object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[90]);
}

// ===================================================================

class PrecisionRecallCurve::_Internal {
 public:
};

PrecisionRecallCurve::PrecisionRecallCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PrecisionRecallCurve)
}
PrecisionRecallCurve::PrecisionRecallCurve(const PrecisionRecallCurve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrecisionRecallCurve* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.recall_){from._impl_.recall_}
    , decltype(_impl_.precision_){from._impl_.precision_}
    , decltype(_impl_.thresholds_){from._impl_.thresholds_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PrecisionRecallCurve)
}

inline void PrecisionRecallCurve::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.recall_){arena}
    , decltype(_impl_.precision_){arena}
    , decltype(_impl_.thresholds_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrecisionRecallCurve::~PrecisionRecallCurve() {
  // @@protoc_insertion_point(destructor:clarifai.api.PrecisionRecallCurve)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrecisionRecallCurve::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.recall_.~RepeatedField();
  _impl_.precision_.~RepeatedField();
  _impl_.thresholds_.~RepeatedField();
}

void PrecisionRecallCurve::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrecisionRecallCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PrecisionRecallCurve)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recall_.Clear();
  _impl_.precision_.Clear();
  _impl_.thresholds_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrecisionRecallCurve::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float recall = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_recall(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_recall(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float precision = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_precision(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_precision(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_thresholds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrecisionRecallCurve::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PrecisionRecallCurve)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float recall = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_recall_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_recall(), target);
  }

  // repeated float precision = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_precision_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_precision(), target);
  }

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_thresholds_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_thresholds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PrecisionRecallCurve)
  return target;
}

size_t PrecisionRecallCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PrecisionRecallCurve)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float recall = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_recall_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float precision = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_precision_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_thresholds_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrecisionRecallCurve::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrecisionRecallCurve::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrecisionRecallCurve::GetClassData() const { return &_class_data_; }


void PrecisionRecallCurve::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrecisionRecallCurve*>(&to_msg);
  auto& from = static_cast<const PrecisionRecallCurve&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PrecisionRecallCurve)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.recall_.MergeFrom(from._impl_.recall_);
  _this->_impl_.precision_.MergeFrom(from._impl_.precision_);
  _this->_impl_.thresholds_.MergeFrom(from._impl_.thresholds_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrecisionRecallCurve::CopyFrom(const PrecisionRecallCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PrecisionRecallCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrecisionRecallCurve::IsInitialized() const {
  return true;
}

void PrecisionRecallCurve::InternalSwap(PrecisionRecallCurve* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.recall_.InternalSwap(&other->_impl_.recall_);
  _impl_.precision_.InternalSwap(&other->_impl_.precision_);
  _impl_.thresholds_.InternalSwap(&other->_impl_.thresholds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrecisionRecallCurve::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[91]);
}

// ===================================================================

class BinaryMetrics::_Internal {
 public:
  static const ::clarifai::api::Concept& concept(const BinaryMetrics* msg);
  static const ::clarifai::api::ROC& roc_curve(const BinaryMetrics* msg);
  static const ::clarifai::api::PrecisionRecallCurve& precision_recall_curve(const BinaryMetrics* msg);
};

const ::clarifai::api::Concept&
BinaryMetrics::_Internal::concept(const BinaryMetrics* msg) {
  return *msg->_impl_.concept_;
}
const ::clarifai::api::ROC&
BinaryMetrics::_Internal::roc_curve(const BinaryMetrics* msg) {
  return *msg->_impl_.roc_curve_;
}
const ::clarifai::api::PrecisionRecallCurve&
BinaryMetrics::_Internal::precision_recall_curve(const BinaryMetrics* msg) {
  return *msg->_impl_.precision_recall_curve_;
}
BinaryMetrics::BinaryMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.BinaryMetrics)
}
BinaryMetrics::BinaryMetrics(const BinaryMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinaryMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.area_name_){}
    , decltype(_impl_.concept_){nullptr}
    , decltype(_impl_.roc_curve_){nullptr}
    , decltype(_impl_.precision_recall_curve_){nullptr}
    , decltype(_impl_.num_pos_){}
    , decltype(_impl_.num_neg_){}
    , decltype(_impl_.num_tot_){}
    , decltype(_impl_.roc_auc_){}
    , decltype(_impl_.f1_){}
    , decltype(_impl_.avg_precision_){}
    , decltype(_impl_.area_min_){}
    , decltype(_impl_.area_max_){}
    , decltype(_impl_.iou_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.area_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.area_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_area_name().empty()) {
    _this->_impl_.area_name_.Set(from._internal_area_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_concept()) {
    _this->_impl_.concept_ = new ::clarifai::api::Concept(*from._impl_.concept_);
  }
  if (from._internal_has_roc_curve()) {
    _this->_impl_.roc_curve_ = new ::clarifai::api::ROC(*from._impl_.roc_curve_);
  }
  if (from._internal_has_precision_recall_curve()) {
    _this->_impl_.precision_recall_curve_ = new ::clarifai::api::PrecisionRecallCurve(*from._impl_.precision_recall_curve_);
  }
  ::memcpy(&_impl_.num_pos_, &from._impl_.num_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.iou_) -
    reinterpret_cast<char*>(&_impl_.num_pos_)) + sizeof(_impl_.iou_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.BinaryMetrics)
}

inline void BinaryMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.area_name_){}
    , decltype(_impl_.concept_){nullptr}
    , decltype(_impl_.roc_curve_){nullptr}
    , decltype(_impl_.precision_recall_curve_){nullptr}
    , decltype(_impl_.num_pos_){0u}
    , decltype(_impl_.num_neg_){0u}
    , decltype(_impl_.num_tot_){0u}
    , decltype(_impl_.roc_auc_){0}
    , decltype(_impl_.f1_){0}
    , decltype(_impl_.avg_precision_){0}
    , decltype(_impl_.area_min_){0}
    , decltype(_impl_.area_max_){0}
    , decltype(_impl_.iou_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.area_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.area_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BinaryMetrics::~BinaryMetrics() {
  // @@protoc_insertion_point(destructor:clarifai.api.BinaryMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.area_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.concept_;
  if (this != internal_default_instance()) delete _impl_.roc_curve_;
  if (this != internal_default_instance()) delete _impl_.precision_recall_curve_;
}

void BinaryMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinaryMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.BinaryMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.area_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.concept_ != nullptr) {
    delete _impl_.concept_;
  }
  _impl_.concept_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.roc_curve_ != nullptr) {
    delete _impl_.roc_curve_;
  }
  _impl_.roc_curve_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.precision_recall_curve_ != nullptr) {
    delete _impl_.precision_recall_curve_;
  }
  _impl_.precision_recall_curve_ = nullptr;
  ::memset(&_impl_.num_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.iou_) -
      reinterpret_cast<char*>(&_impl_.num_pos_)) + sizeof(_impl_.iou_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 num_pos = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_neg = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_neg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_tot = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_tot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.roc_auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float f1 = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Concept concept = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ROC roc_curve = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_roc_curve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.PrecisionRecallCurve precision_recall_curve = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_precision_recall_curve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float avg_precision = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.avg_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string area_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_area_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.BinaryMetrics.area_name"));
        } else
          goto handle_unusual;
        continue;
      // double area_min = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.area_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double area_max = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.area_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float iou = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.iou_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.BinaryMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_pos = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_num_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_pos(), target);
  }

  // uint32 num_neg = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_num_neg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_neg(), target);
  }

  // uint32 num_tot = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_num_tot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_tot(), target);
  }

  // float roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roc_auc = this->_internal_roc_auc();
  uint32_t raw_roc_auc;
  memcpy(&raw_roc_auc, &tmp_roc_auc, sizeof(tmp_roc_auc));
  if (raw_roc_auc != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_roc_auc(), target);
  }

  // float f1 = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_f1 = this->_internal_f1();
  uint32_t raw_f1;
  memcpy(&raw_f1, &tmp_f1, sizeof(tmp_f1));
  if (raw_f1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_f1(), target);
  }

  // .clarifai.api.Concept concept = 6;
  if (this->_internal_has_concept()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::concept(this),
        _Internal::concept(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ROC roc_curve = 7;
  if (this->_internal_has_roc_curve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::roc_curve(this),
        _Internal::roc_curve(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.PrecisionRecallCurve precision_recall_curve = 8;
  if (this->_internal_has_precision_recall_curve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::precision_recall_curve(this),
        _Internal::precision_recall_curve(this).GetCachedSize(), target, stream);
  }

  // float avg_precision = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avg_precision = this->_internal_avg_precision();
  uint32_t raw_avg_precision;
  memcpy(&raw_avg_precision, &tmp_avg_precision, sizeof(tmp_avg_precision));
  if (raw_avg_precision != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_avg_precision(), target);
  }

  // string area_name = 10;
  if (!this->_internal_area_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_area_name().data(), static_cast<int>(this->_internal_area_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.BinaryMetrics.area_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_area_name(), target);
  }

  // double area_min = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area_min = this->_internal_area_min();
  uint64_t raw_area_min;
  memcpy(&raw_area_min, &tmp_area_min, sizeof(tmp_area_min));
  if (raw_area_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_area_min(), target);
  }

  // double area_max = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area_max = this->_internal_area_max();
  uint64_t raw_area_max;
  memcpy(&raw_area_max, &tmp_area_max, sizeof(tmp_area_max));
  if (raw_area_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_area_max(), target);
  }

  // float iou = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_iou = this->_internal_iou();
  uint32_t raw_iou;
  memcpy(&raw_iou, &tmp_iou, sizeof(tmp_iou));
  if (raw_iou != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_iou(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.BinaryMetrics)
  return target;
}

size_t BinaryMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.BinaryMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string area_name = 10;
  if (!this->_internal_area_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_area_name());
  }

  // .clarifai.api.Concept concept = 6;
  if (this->_internal_has_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.concept_);
  }

  // .clarifai.api.ROC roc_curve = 7;
  if (this->_internal_has_roc_curve()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.roc_curve_);
  }

  // .clarifai.api.PrecisionRecallCurve precision_recall_curve = 8;
  if (this->_internal_has_precision_recall_curve()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.precision_recall_curve_);
  }

  // uint32 num_pos = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_num_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_pos());
  }

  // uint32 num_neg = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_num_neg() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_neg());
  }

  // uint32 num_tot = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_num_tot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_tot());
  }

  // float roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roc_auc = this->_internal_roc_auc();
  uint32_t raw_roc_auc;
  memcpy(&raw_roc_auc, &tmp_roc_auc, sizeof(tmp_roc_auc));
  if (raw_roc_auc != 0) {
    total_size += 1 + 4;
  }

  // float f1 = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_f1 = this->_internal_f1();
  uint32_t raw_f1;
  memcpy(&raw_f1, &tmp_f1, sizeof(tmp_f1));
  if (raw_f1 != 0) {
    total_size += 1 + 4;
  }

  // float avg_precision = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avg_precision = this->_internal_avg_precision();
  uint32_t raw_avg_precision;
  memcpy(&raw_avg_precision, &tmp_avg_precision, sizeof(tmp_avg_precision));
  if (raw_avg_precision != 0) {
    total_size += 1 + 4;
  }

  // double area_min = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area_min = this->_internal_area_min();
  uint64_t raw_area_min;
  memcpy(&raw_area_min, &tmp_area_min, sizeof(tmp_area_min));
  if (raw_area_min != 0) {
    total_size += 1 + 8;
  }

  // double area_max = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area_max = this->_internal_area_max();
  uint64_t raw_area_max;
  memcpy(&raw_area_max, &tmp_area_max, sizeof(tmp_area_max));
  if (raw_area_max != 0) {
    total_size += 1 + 8;
  }

  // float iou = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_iou = this->_internal_iou();
  uint32_t raw_iou;
  memcpy(&raw_iou, &tmp_iou, sizeof(tmp_iou));
  if (raw_iou != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinaryMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryMetrics::GetClassData() const { return &_class_data_; }


void BinaryMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinaryMetrics*>(&to_msg);
  auto& from = static_cast<const BinaryMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.BinaryMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_area_name().empty()) {
    _this->_internal_set_area_name(from._internal_area_name());
  }
  if (from._internal_has_concept()) {
    _this->_internal_mutable_concept()->::clarifai::api::Concept::MergeFrom(
        from._internal_concept());
  }
  if (from._internal_has_roc_curve()) {
    _this->_internal_mutable_roc_curve()->::clarifai::api::ROC::MergeFrom(
        from._internal_roc_curve());
  }
  if (from._internal_has_precision_recall_curve()) {
    _this->_internal_mutable_precision_recall_curve()->::clarifai::api::PrecisionRecallCurve::MergeFrom(
        from._internal_precision_recall_curve());
  }
  if (from._internal_num_pos() != 0) {
    _this->_internal_set_num_pos(from._internal_num_pos());
  }
  if (from._internal_num_neg() != 0) {
    _this->_internal_set_num_neg(from._internal_num_neg());
  }
  if (from._internal_num_tot() != 0) {
    _this->_internal_set_num_tot(from._internal_num_tot());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roc_auc = from._internal_roc_auc();
  uint32_t raw_roc_auc;
  memcpy(&raw_roc_auc, &tmp_roc_auc, sizeof(tmp_roc_auc));
  if (raw_roc_auc != 0) {
    _this->_internal_set_roc_auc(from._internal_roc_auc());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_f1 = from._internal_f1();
  uint32_t raw_f1;
  memcpy(&raw_f1, &tmp_f1, sizeof(tmp_f1));
  if (raw_f1 != 0) {
    _this->_internal_set_f1(from._internal_f1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avg_precision = from._internal_avg_precision();
  uint32_t raw_avg_precision;
  memcpy(&raw_avg_precision, &tmp_avg_precision, sizeof(tmp_avg_precision));
  if (raw_avg_precision != 0) {
    _this->_internal_set_avg_precision(from._internal_avg_precision());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area_min = from._internal_area_min();
  uint64_t raw_area_min;
  memcpy(&raw_area_min, &tmp_area_min, sizeof(tmp_area_min));
  if (raw_area_min != 0) {
    _this->_internal_set_area_min(from._internal_area_min());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area_max = from._internal_area_max();
  uint64_t raw_area_max;
  memcpy(&raw_area_max, &tmp_area_max, sizeof(tmp_area_max));
  if (raw_area_max != 0) {
    _this->_internal_set_area_max(from._internal_area_max());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_iou = from._internal_iou();
  uint32_t raw_iou;
  memcpy(&raw_iou, &tmp_iou, sizeof(tmp_iou));
  if (raw_iou != 0) {
    _this->_internal_set_iou(from._internal_iou());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryMetrics::CopyFrom(const BinaryMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.BinaryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryMetrics::IsInitialized() const {
  return true;
}

void BinaryMetrics::InternalSwap(BinaryMetrics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.area_name_, lhs_arena,
      &other->_impl_.area_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryMetrics, _impl_.iou_)
      + sizeof(BinaryMetrics::_impl_.iou_)
      - PROTOBUF_FIELD_OFFSET(BinaryMetrics, _impl_.concept_)>(
          reinterpret_cast<char*>(&_impl_.concept_),
          reinterpret_cast<char*>(&other->_impl_.concept_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[92]);
}

// ===================================================================

class TrackerMetrics::_Internal {
 public:
};

TrackerMetrics::TrackerMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TrackerMetrics)
}
TrackerMetrics::TrackerMetrics(const TrackerMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackerMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aiid_){}
    , decltype(_impl_.mot_mota_){}
    , decltype(_impl_.mot_num_switches_){}
    , decltype(_impl_.morse_frag_){}
    , decltype(_impl_.avg_precision_){}
    , decltype(_impl_.unique_switch_rate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.aiid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aiid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aiid().empty()) {
    _this->_impl_.aiid_.Set(from._internal_aiid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mot_mota_, &from._impl_.mot_mota_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unique_switch_rate_) -
    reinterpret_cast<char*>(&_impl_.mot_mota_)) + sizeof(_impl_.unique_switch_rate_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TrackerMetrics)
}

inline void TrackerMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aiid_){}
    , decltype(_impl_.mot_mota_){0}
    , decltype(_impl_.mot_num_switches_){0}
    , decltype(_impl_.morse_frag_){0}
    , decltype(_impl_.avg_precision_){0}
    , decltype(_impl_.unique_switch_rate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.aiid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aiid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackerMetrics::~TrackerMetrics() {
  // @@protoc_insertion_point(destructor:clarifai.api.TrackerMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackerMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.aiid_.Destroy();
}

void TrackerMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackerMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TrackerMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aiid_.ClearToEmpty();
  ::memset(&_impl_.mot_mota_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.unique_switch_rate_) -
      reinterpret_cast<char*>(&_impl_.mot_mota_)) + sizeof(_impl_.unique_switch_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackerMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float mot_mota = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.mot_mota_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 mot_num_switches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mot_num_switches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float morse_frag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.morse_frag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float avg_precision = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.avg_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string aiid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_aiid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.TrackerMetrics.aiid"));
        } else
          goto handle_unusual;
        continue;
      // float unique_switch_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.unique_switch_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackerMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TrackerMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float mot_mota = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mot_mota = this->_internal_mot_mota();
  uint32_t raw_mot_mota;
  memcpy(&raw_mot_mota, &tmp_mot_mota, sizeof(tmp_mot_mota));
  if (raw_mot_mota != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_mot_mota(), target);
  }

  // int32 mot_num_switches = 2;
  if (this->_internal_mot_num_switches() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mot_num_switches(), target);
  }

  // float morse_frag = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_morse_frag = this->_internal_morse_frag();
  uint32_t raw_morse_frag;
  memcpy(&raw_morse_frag, &tmp_morse_frag, sizeof(tmp_morse_frag));
  if (raw_morse_frag != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_morse_frag(), target);
  }

  // float avg_precision = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avg_precision = this->_internal_avg_precision();
  uint32_t raw_avg_precision;
  memcpy(&raw_avg_precision, &tmp_avg_precision, sizeof(tmp_avg_precision));
  if (raw_avg_precision != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_avg_precision(), target);
  }

  // string aiid = 5;
  if (!this->_internal_aiid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aiid().data(), static_cast<int>(this->_internal_aiid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TrackerMetrics.aiid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_aiid(), target);
  }

  // float unique_switch_rate = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_unique_switch_rate = this->_internal_unique_switch_rate();
  uint32_t raw_unique_switch_rate;
  memcpy(&raw_unique_switch_rate, &tmp_unique_switch_rate, sizeof(tmp_unique_switch_rate));
  if (raw_unique_switch_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_unique_switch_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TrackerMetrics)
  return target;
}

size_t TrackerMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TrackerMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string aiid = 5;
  if (!this->_internal_aiid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aiid());
  }

  // float mot_mota = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mot_mota = this->_internal_mot_mota();
  uint32_t raw_mot_mota;
  memcpy(&raw_mot_mota, &tmp_mot_mota, sizeof(tmp_mot_mota));
  if (raw_mot_mota != 0) {
    total_size += 1 + 4;
  }

  // int32 mot_num_switches = 2;
  if (this->_internal_mot_num_switches() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mot_num_switches());
  }

  // float morse_frag = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_morse_frag = this->_internal_morse_frag();
  uint32_t raw_morse_frag;
  memcpy(&raw_morse_frag, &tmp_morse_frag, sizeof(tmp_morse_frag));
  if (raw_morse_frag != 0) {
    total_size += 1 + 4;
  }

  // float avg_precision = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avg_precision = this->_internal_avg_precision();
  uint32_t raw_avg_precision;
  memcpy(&raw_avg_precision, &tmp_avg_precision, sizeof(tmp_avg_precision));
  if (raw_avg_precision != 0) {
    total_size += 1 + 4;
  }

  // float unique_switch_rate = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_unique_switch_rate = this->_internal_unique_switch_rate();
  uint32_t raw_unique_switch_rate;
  memcpy(&raw_unique_switch_rate, &tmp_unique_switch_rate, sizeof(tmp_unique_switch_rate));
  if (raw_unique_switch_rate != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackerMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackerMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackerMetrics::GetClassData() const { return &_class_data_; }


void TrackerMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackerMetrics*>(&to_msg);
  auto& from = static_cast<const TrackerMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TrackerMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_aiid().empty()) {
    _this->_internal_set_aiid(from._internal_aiid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mot_mota = from._internal_mot_mota();
  uint32_t raw_mot_mota;
  memcpy(&raw_mot_mota, &tmp_mot_mota, sizeof(tmp_mot_mota));
  if (raw_mot_mota != 0) {
    _this->_internal_set_mot_mota(from._internal_mot_mota());
  }
  if (from._internal_mot_num_switches() != 0) {
    _this->_internal_set_mot_num_switches(from._internal_mot_num_switches());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_morse_frag = from._internal_morse_frag();
  uint32_t raw_morse_frag;
  memcpy(&raw_morse_frag, &tmp_morse_frag, sizeof(tmp_morse_frag));
  if (raw_morse_frag != 0) {
    _this->_internal_set_morse_frag(from._internal_morse_frag());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avg_precision = from._internal_avg_precision();
  uint32_t raw_avg_precision;
  memcpy(&raw_avg_precision, &tmp_avg_precision, sizeof(tmp_avg_precision));
  if (raw_avg_precision != 0) {
    _this->_internal_set_avg_precision(from._internal_avg_precision());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_unique_switch_rate = from._internal_unique_switch_rate();
  uint32_t raw_unique_switch_rate;
  memcpy(&raw_unique_switch_rate, &tmp_unique_switch_rate, sizeof(tmp_unique_switch_rate));
  if (raw_unique_switch_rate != 0) {
    _this->_internal_set_unique_switch_rate(from._internal_unique_switch_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackerMetrics::CopyFrom(const TrackerMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TrackerMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerMetrics::IsInitialized() const {
  return true;
}

void TrackerMetrics::InternalSwap(TrackerMetrics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aiid_, lhs_arena,
      &other->_impl_.aiid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackerMetrics, _impl_.unique_switch_rate_)
      + sizeof(TrackerMetrics::_impl_.unique_switch_rate_)
      - PROTOBUF_FIELD_OFFSET(TrackerMetrics, _impl_.mot_mota_)>(
          reinterpret_cast<char*>(&_impl_.mot_mota_),
          reinterpret_cast<char*>(&other->_impl_.mot_mota_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackerMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[93]);
}

// ===================================================================

class EvalTestSetEntry::_Internal {
 public:
  static const ::clarifai::api::Input& input(const EvalTestSetEntry* msg);
  static const ::clarifai::api::Annotation& annotation(const EvalTestSetEntry* msg);
};

const ::clarifai::api::Input&
EvalTestSetEntry::_Internal::input(const EvalTestSetEntry* msg) {
  return *msg->_impl_.input_;
}
const ::clarifai::api::Annotation&
EvalTestSetEntry::_Internal::annotation(const EvalTestSetEntry* msg) {
  return *msg->_impl_.annotation_;
}
EvalTestSetEntry::EvalTestSetEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.EvalTestSetEntry)
}
EvalTestSetEntry::EvalTestSetEntry(const EvalTestSetEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EvalTestSetEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.predicted_concepts_){from._impl_.predicted_concepts_}
    , decltype(_impl_.ground_truth_concepts_){from._impl_.ground_truth_concepts_}
    , decltype(_impl_.annotation_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_annotation()) {
    _this->_impl_.annotation_ = new ::clarifai::api::Annotation(*from._impl_.annotation_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::clarifai::api::Input(*from._impl_.input_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.EvalTestSetEntry)
}

inline void EvalTestSetEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.predicted_concepts_){arena}
    , decltype(_impl_.ground_truth_concepts_){arena}
    , decltype(_impl_.annotation_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EvalTestSetEntry::~EvalTestSetEntry() {
  // @@protoc_insertion_point(destructor:clarifai.api.EvalTestSetEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EvalTestSetEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.predicted_concepts_.~RepeatedPtrField();
  _impl_.ground_truth_concepts_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.annotation_;
  if (this != internal_default_instance()) delete _impl_.input_;
}

void EvalTestSetEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EvalTestSetEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.EvalTestSetEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.predicted_concepts_.Clear();
  _impl_.ground_truth_concepts_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.annotation_ != nullptr) {
    delete _impl_.annotation_;
  }
  _impl_.annotation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvalTestSetEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.Concept predicted_concepts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predicted_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept ground_truth_concepts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ground_truth_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EvalTestSetEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.EvalTestSetEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept predicted_concepts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_predicted_concepts_size()); i < n; i++) {
    const auto& repfield = this->_internal_predicted_concepts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Concept ground_truth_concepts = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ground_truth_concepts_size()); i < n; i++) {
    const auto& repfield = this->_internal_ground_truth_concepts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.Annotation annotation = 5;
  if (this->_internal_has_annotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::annotation(this),
        _Internal::annotation(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Input input = 6;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.EvalTestSetEntry)
  return target;
}

size_t EvalTestSetEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.EvalTestSetEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept predicted_concepts = 3;
  total_size += 1UL * this->_internal_predicted_concepts_size();
  for (const auto& msg : this->_impl_.predicted_concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Concept ground_truth_concepts = 4;
  total_size += 1UL * this->_internal_ground_truth_concepts_size();
  for (const auto& msg : this->_impl_.ground_truth_concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.Annotation annotation = 5;
  if (this->_internal_has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotation_);
  }

  // .clarifai.api.Input input = 6;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvalTestSetEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EvalTestSetEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvalTestSetEntry::GetClassData() const { return &_class_data_; }


void EvalTestSetEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EvalTestSetEntry*>(&to_msg);
  auto& from = static_cast<const EvalTestSetEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.EvalTestSetEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.predicted_concepts_.MergeFrom(from._impl_.predicted_concepts_);
  _this->_impl_.ground_truth_concepts_.MergeFrom(from._impl_.ground_truth_concepts_);
  if (from._internal_has_annotation()) {
    _this->_internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(
        from._internal_annotation());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::clarifai::api::Input::MergeFrom(
        from._internal_input());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvalTestSetEntry::CopyFrom(const EvalTestSetEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.EvalTestSetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalTestSetEntry::IsInitialized() const {
  return true;
}

void EvalTestSetEntry::InternalSwap(EvalTestSetEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.predicted_concepts_.InternalSwap(&other->_impl_.predicted_concepts_);
  _impl_.ground_truth_concepts_.InternalSwap(&other->_impl_.ground_truth_concepts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvalTestSetEntry, _impl_.input_)
      + sizeof(EvalTestSetEntry::_impl_.input_)
      - PROTOBUF_FIELD_OFFSET(EvalTestSetEntry, _impl_.annotation_)>(
          reinterpret_cast<char*>(&_impl_.annotation_),
          reinterpret_cast<char*>(&other->_impl_.annotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalTestSetEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[94]);
}

// ===================================================================

class LOPQEvalResult::_Internal {
 public:
};

LOPQEvalResult::LOPQEvalResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.LOPQEvalResult)
}
LOPQEvalResult::LOPQEvalResult(const LOPQEvalResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LOPQEvalResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.k_){}
    , decltype(_impl_.recall_vs_brute_force_){}
    , decltype(_impl_.kendall_tau_vs_brute_force_){}
    , decltype(_impl_.most_frequent_code_percent_){}
    , decltype(_impl_.lopq_ndcg_){}
    , decltype(_impl_.brute_force_ndcg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.k_, &from._impl_.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.brute_force_ndcg_) -
    reinterpret_cast<char*>(&_impl_.k_)) + sizeof(_impl_.brute_force_ndcg_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LOPQEvalResult)
}

inline void LOPQEvalResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.k_){0}
    , decltype(_impl_.recall_vs_brute_force_){0}
    , decltype(_impl_.kendall_tau_vs_brute_force_){0}
    , decltype(_impl_.most_frequent_code_percent_){0}
    , decltype(_impl_.lopq_ndcg_){0}
    , decltype(_impl_.brute_force_ndcg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LOPQEvalResult::~LOPQEvalResult() {
  // @@protoc_insertion_point(destructor:clarifai.api.LOPQEvalResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LOPQEvalResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LOPQEvalResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LOPQEvalResult::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LOPQEvalResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.brute_force_ndcg_) -
      reinterpret_cast<char*>(&_impl_.k_)) + sizeof(_impl_.brute_force_ndcg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQEvalResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.recall_vs_brute_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.kendall_tau_vs_brute_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.most_frequent_code_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.lopq_ndcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.brute_force_ndcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LOPQEvalResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LOPQEvalResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 k = 1;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_k(), target);
  }

  // float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_recall_vs_brute_force = this->_internal_recall_vs_brute_force();
  uint32_t raw_recall_vs_brute_force;
  memcpy(&raw_recall_vs_brute_force, &tmp_recall_vs_brute_force, sizeof(tmp_recall_vs_brute_force));
  if (raw_recall_vs_brute_force != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_recall_vs_brute_force(), target);
  }

  // float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_kendall_tau_vs_brute_force = this->_internal_kendall_tau_vs_brute_force();
  uint32_t raw_kendall_tau_vs_brute_force;
  memcpy(&raw_kendall_tau_vs_brute_force, &tmp_kendall_tau_vs_brute_force, sizeof(tmp_kendall_tau_vs_brute_force));
  if (raw_kendall_tau_vs_brute_force != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_kendall_tau_vs_brute_force(), target);
  }

  // float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_most_frequent_code_percent = this->_internal_most_frequent_code_percent();
  uint32_t raw_most_frequent_code_percent;
  memcpy(&raw_most_frequent_code_percent, &tmp_most_frequent_code_percent, sizeof(tmp_most_frequent_code_percent));
  if (raw_most_frequent_code_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_most_frequent_code_percent(), target);
  }

  // float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lopq_ndcg = this->_internal_lopq_ndcg();
  uint32_t raw_lopq_ndcg;
  memcpy(&raw_lopq_ndcg, &tmp_lopq_ndcg, sizeof(tmp_lopq_ndcg));
  if (raw_lopq_ndcg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_lopq_ndcg(), target);
  }

  // float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brute_force_ndcg = this->_internal_brute_force_ndcg();
  uint32_t raw_brute_force_ndcg;
  memcpy(&raw_brute_force_ndcg, &tmp_brute_force_ndcg, sizeof(tmp_brute_force_ndcg));
  if (raw_brute_force_ndcg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_brute_force_ndcg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LOPQEvalResult)
  return target;
}

size_t LOPQEvalResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LOPQEvalResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 k = 1;
  if (this->_internal_k() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_k());
  }

  // float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_recall_vs_brute_force = this->_internal_recall_vs_brute_force();
  uint32_t raw_recall_vs_brute_force;
  memcpy(&raw_recall_vs_brute_force, &tmp_recall_vs_brute_force, sizeof(tmp_recall_vs_brute_force));
  if (raw_recall_vs_brute_force != 0) {
    total_size += 1 + 4;
  }

  // float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_kendall_tau_vs_brute_force = this->_internal_kendall_tau_vs_brute_force();
  uint32_t raw_kendall_tau_vs_brute_force;
  memcpy(&raw_kendall_tau_vs_brute_force, &tmp_kendall_tau_vs_brute_force, sizeof(tmp_kendall_tau_vs_brute_force));
  if (raw_kendall_tau_vs_brute_force != 0) {
    total_size += 1 + 4;
  }

  // float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_most_frequent_code_percent = this->_internal_most_frequent_code_percent();
  uint32_t raw_most_frequent_code_percent;
  memcpy(&raw_most_frequent_code_percent, &tmp_most_frequent_code_percent, sizeof(tmp_most_frequent_code_percent));
  if (raw_most_frequent_code_percent != 0) {
    total_size += 1 + 4;
  }

  // float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lopq_ndcg = this->_internal_lopq_ndcg();
  uint32_t raw_lopq_ndcg;
  memcpy(&raw_lopq_ndcg, &tmp_lopq_ndcg, sizeof(tmp_lopq_ndcg));
  if (raw_lopq_ndcg != 0) {
    total_size += 1 + 4;
  }

  // float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brute_force_ndcg = this->_internal_brute_force_ndcg();
  uint32_t raw_brute_force_ndcg;
  memcpy(&raw_brute_force_ndcg, &tmp_brute_force_ndcg, sizeof(tmp_brute_force_ndcg));
  if (raw_brute_force_ndcg != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LOPQEvalResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LOPQEvalResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LOPQEvalResult::GetClassData() const { return &_class_data_; }


void LOPQEvalResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LOPQEvalResult*>(&to_msg);
  auto& from = static_cast<const LOPQEvalResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LOPQEvalResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_k() != 0) {
    _this->_internal_set_k(from._internal_k());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_recall_vs_brute_force = from._internal_recall_vs_brute_force();
  uint32_t raw_recall_vs_brute_force;
  memcpy(&raw_recall_vs_brute_force, &tmp_recall_vs_brute_force, sizeof(tmp_recall_vs_brute_force));
  if (raw_recall_vs_brute_force != 0) {
    _this->_internal_set_recall_vs_brute_force(from._internal_recall_vs_brute_force());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_kendall_tau_vs_brute_force = from._internal_kendall_tau_vs_brute_force();
  uint32_t raw_kendall_tau_vs_brute_force;
  memcpy(&raw_kendall_tau_vs_brute_force, &tmp_kendall_tau_vs_brute_force, sizeof(tmp_kendall_tau_vs_brute_force));
  if (raw_kendall_tau_vs_brute_force != 0) {
    _this->_internal_set_kendall_tau_vs_brute_force(from._internal_kendall_tau_vs_brute_force());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_most_frequent_code_percent = from._internal_most_frequent_code_percent();
  uint32_t raw_most_frequent_code_percent;
  memcpy(&raw_most_frequent_code_percent, &tmp_most_frequent_code_percent, sizeof(tmp_most_frequent_code_percent));
  if (raw_most_frequent_code_percent != 0) {
    _this->_internal_set_most_frequent_code_percent(from._internal_most_frequent_code_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lopq_ndcg = from._internal_lopq_ndcg();
  uint32_t raw_lopq_ndcg;
  memcpy(&raw_lopq_ndcg, &tmp_lopq_ndcg, sizeof(tmp_lopq_ndcg));
  if (raw_lopq_ndcg != 0) {
    _this->_internal_set_lopq_ndcg(from._internal_lopq_ndcg());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brute_force_ndcg = from._internal_brute_force_ndcg();
  uint32_t raw_brute_force_ndcg;
  memcpy(&raw_brute_force_ndcg, &tmp_brute_force_ndcg, sizeof(tmp_brute_force_ndcg));
  if (raw_brute_force_ndcg != 0) {
    _this->_internal_set_brute_force_ndcg(from._internal_brute_force_ndcg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LOPQEvalResult::CopyFrom(const LOPQEvalResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LOPQEvalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQEvalResult::IsInitialized() const {
  return true;
}

void LOPQEvalResult::InternalSwap(LOPQEvalResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LOPQEvalResult, _impl_.brute_force_ndcg_)
      + sizeof(LOPQEvalResult::_impl_.brute_force_ndcg_)
      - PROTOBUF_FIELD_OFFSET(LOPQEvalResult, _impl_.k_)>(
          reinterpret_cast<char*>(&_impl_.k_),
          reinterpret_cast<char*>(&other->_impl_.k_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQEvalResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[95]);
}

// ===================================================================

class MetricsSummary::_Internal {
 public:
};

MetricsSummary::MetricsSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MetricsSummary)
}
MetricsSummary::MetricsSummary(const MetricsSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricsSummary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lopq_metrics_){from._impl_.lopq_metrics_}
    , decltype(_impl_.top1_accuracy_){}
    , decltype(_impl_.top5_accuracy_){}
    , decltype(_impl_.macro_avg_roc_auc_){}
    , decltype(_impl_.macro_std_roc_auc_){}
    , decltype(_impl_.macro_avg_f1_score_){}
    , decltype(_impl_.macro_std_f1_score_){}
    , decltype(_impl_.macro_avg_precision_){}
    , decltype(_impl_.macro_avg_recall_){}
    , decltype(_impl_.mean_avg_precision_iou_50_){}
    , decltype(_impl_.mean_avg_precision_iou_range_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.top1_accuracy_, &from._impl_.top1_accuracy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mean_avg_precision_iou_range_) -
    reinterpret_cast<char*>(&_impl_.top1_accuracy_)) + sizeof(_impl_.mean_avg_precision_iou_range_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MetricsSummary)
}

inline void MetricsSummary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lopq_metrics_){arena}
    , decltype(_impl_.top1_accuracy_){0}
    , decltype(_impl_.top5_accuracy_){0}
    , decltype(_impl_.macro_avg_roc_auc_){0}
    , decltype(_impl_.macro_std_roc_auc_){0}
    , decltype(_impl_.macro_avg_f1_score_){0}
    , decltype(_impl_.macro_std_f1_score_){0}
    , decltype(_impl_.macro_avg_precision_){0}
    , decltype(_impl_.macro_avg_recall_){0}
    , decltype(_impl_.mean_avg_precision_iou_50_){0}
    , decltype(_impl_.mean_avg_precision_iou_range_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetricsSummary::~MetricsSummary() {
  // @@protoc_insertion_point(destructor:clarifai.api.MetricsSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricsSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lopq_metrics_.~RepeatedPtrField();
}

void MetricsSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricsSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MetricsSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lopq_metrics_.Clear();
  ::memset(&_impl_.top1_accuracy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mean_avg_precision_iou_range_) -
      reinterpret_cast<char*>(&_impl_.top1_accuracy_)) + sizeof(_impl_.mean_avg_precision_iou_range_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float top1_accuracy = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.top1_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float top5_accuracy = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.top5_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float macro_avg_roc_auc = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.macro_avg_roc_auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float macro_std_roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.macro_std_roc_auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float macro_avg_f1_score = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.macro_avg_f1_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float macro_std_f1_score = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.macro_std_f1_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float macro_avg_precision = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.macro_avg_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float macro_avg_recall = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.macro_avg_recall_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.LOPQEvalResult lopq_metrics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lopq_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // float mean_avg_precision_iou_50 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.mean_avg_precision_iou_50_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mean_avg_precision_iou_range = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.mean_avg_precision_iou_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricsSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MetricsSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float top1_accuracy = 1 [deprecated = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top1_accuracy = this->_internal_top1_accuracy();
  uint32_t raw_top1_accuracy;
  memcpy(&raw_top1_accuracy, &tmp_top1_accuracy, sizeof(tmp_top1_accuracy));
  if (raw_top1_accuracy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_top1_accuracy(), target);
  }

  // float top5_accuracy = 2 [deprecated = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top5_accuracy = this->_internal_top5_accuracy();
  uint32_t raw_top5_accuracy;
  memcpy(&raw_top5_accuracy, &tmp_top5_accuracy, sizeof(tmp_top5_accuracy));
  if (raw_top5_accuracy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_top5_accuracy(), target);
  }

  // float macro_avg_roc_auc = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_roc_auc = this->_internal_macro_avg_roc_auc();
  uint32_t raw_macro_avg_roc_auc;
  memcpy(&raw_macro_avg_roc_auc, &tmp_macro_avg_roc_auc, sizeof(tmp_macro_avg_roc_auc));
  if (raw_macro_avg_roc_auc != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_macro_avg_roc_auc(), target);
  }

  // float macro_std_roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_std_roc_auc = this->_internal_macro_std_roc_auc();
  uint32_t raw_macro_std_roc_auc;
  memcpy(&raw_macro_std_roc_auc, &tmp_macro_std_roc_auc, sizeof(tmp_macro_std_roc_auc));
  if (raw_macro_std_roc_auc != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_macro_std_roc_auc(), target);
  }

  // float macro_avg_f1_score = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_f1_score = this->_internal_macro_avg_f1_score();
  uint32_t raw_macro_avg_f1_score;
  memcpy(&raw_macro_avg_f1_score, &tmp_macro_avg_f1_score, sizeof(tmp_macro_avg_f1_score));
  if (raw_macro_avg_f1_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_macro_avg_f1_score(), target);
  }

  // float macro_std_f1_score = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_std_f1_score = this->_internal_macro_std_f1_score();
  uint32_t raw_macro_std_f1_score;
  memcpy(&raw_macro_std_f1_score, &tmp_macro_std_f1_score, sizeof(tmp_macro_std_f1_score));
  if (raw_macro_std_f1_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_macro_std_f1_score(), target);
  }

  // float macro_avg_precision = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_precision = this->_internal_macro_avg_precision();
  uint32_t raw_macro_avg_precision;
  memcpy(&raw_macro_avg_precision, &tmp_macro_avg_precision, sizeof(tmp_macro_avg_precision));
  if (raw_macro_avg_precision != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_macro_avg_precision(), target);
  }

  // float macro_avg_recall = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_recall = this->_internal_macro_avg_recall();
  uint32_t raw_macro_avg_recall;
  memcpy(&raw_macro_avg_recall, &tmp_macro_avg_recall, sizeof(tmp_macro_avg_recall));
  if (raw_macro_avg_recall != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_macro_avg_recall(), target);
  }

  // repeated .clarifai.api.LOPQEvalResult lopq_metrics = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lopq_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_lopq_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // float mean_avg_precision_iou_50 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mean_avg_precision_iou_50 = this->_internal_mean_avg_precision_iou_50();
  uint32_t raw_mean_avg_precision_iou_50;
  memcpy(&raw_mean_avg_precision_iou_50, &tmp_mean_avg_precision_iou_50, sizeof(tmp_mean_avg_precision_iou_50));
  if (raw_mean_avg_precision_iou_50 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_mean_avg_precision_iou_50(), target);
  }

  // float mean_avg_precision_iou_range = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mean_avg_precision_iou_range = this->_internal_mean_avg_precision_iou_range();
  uint32_t raw_mean_avg_precision_iou_range;
  memcpy(&raw_mean_avg_precision_iou_range, &tmp_mean_avg_precision_iou_range, sizeof(tmp_mean_avg_precision_iou_range));
  if (raw_mean_avg_precision_iou_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_mean_avg_precision_iou_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MetricsSummary)
  return target;
}

size_t MetricsSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MetricsSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LOPQEvalResult lopq_metrics = 9;
  total_size += 1UL * this->_internal_lopq_metrics_size();
  for (const auto& msg : this->_impl_.lopq_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float top1_accuracy = 1 [deprecated = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top1_accuracy = this->_internal_top1_accuracy();
  uint32_t raw_top1_accuracy;
  memcpy(&raw_top1_accuracy, &tmp_top1_accuracy, sizeof(tmp_top1_accuracy));
  if (raw_top1_accuracy != 0) {
    total_size += 1 + 4;
  }

  // float top5_accuracy = 2 [deprecated = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top5_accuracy = this->_internal_top5_accuracy();
  uint32_t raw_top5_accuracy;
  memcpy(&raw_top5_accuracy, &tmp_top5_accuracy, sizeof(tmp_top5_accuracy));
  if (raw_top5_accuracy != 0) {
    total_size += 1 + 4;
  }

  // float macro_avg_roc_auc = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_roc_auc = this->_internal_macro_avg_roc_auc();
  uint32_t raw_macro_avg_roc_auc;
  memcpy(&raw_macro_avg_roc_auc, &tmp_macro_avg_roc_auc, sizeof(tmp_macro_avg_roc_auc));
  if (raw_macro_avg_roc_auc != 0) {
    total_size += 1 + 4;
  }

  // float macro_std_roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_std_roc_auc = this->_internal_macro_std_roc_auc();
  uint32_t raw_macro_std_roc_auc;
  memcpy(&raw_macro_std_roc_auc, &tmp_macro_std_roc_auc, sizeof(tmp_macro_std_roc_auc));
  if (raw_macro_std_roc_auc != 0) {
    total_size += 1 + 4;
  }

  // float macro_avg_f1_score = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_f1_score = this->_internal_macro_avg_f1_score();
  uint32_t raw_macro_avg_f1_score;
  memcpy(&raw_macro_avg_f1_score, &tmp_macro_avg_f1_score, sizeof(tmp_macro_avg_f1_score));
  if (raw_macro_avg_f1_score != 0) {
    total_size += 1 + 4;
  }

  // float macro_std_f1_score = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_std_f1_score = this->_internal_macro_std_f1_score();
  uint32_t raw_macro_std_f1_score;
  memcpy(&raw_macro_std_f1_score, &tmp_macro_std_f1_score, sizeof(tmp_macro_std_f1_score));
  if (raw_macro_std_f1_score != 0) {
    total_size += 1 + 4;
  }

  // float macro_avg_precision = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_precision = this->_internal_macro_avg_precision();
  uint32_t raw_macro_avg_precision;
  memcpy(&raw_macro_avg_precision, &tmp_macro_avg_precision, sizeof(tmp_macro_avg_precision));
  if (raw_macro_avg_precision != 0) {
    total_size += 1 + 4;
  }

  // float macro_avg_recall = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_recall = this->_internal_macro_avg_recall();
  uint32_t raw_macro_avg_recall;
  memcpy(&raw_macro_avg_recall, &tmp_macro_avg_recall, sizeof(tmp_macro_avg_recall));
  if (raw_macro_avg_recall != 0) {
    total_size += 1 + 4;
  }

  // float mean_avg_precision_iou_50 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mean_avg_precision_iou_50 = this->_internal_mean_avg_precision_iou_50();
  uint32_t raw_mean_avg_precision_iou_50;
  memcpy(&raw_mean_avg_precision_iou_50, &tmp_mean_avg_precision_iou_50, sizeof(tmp_mean_avg_precision_iou_50));
  if (raw_mean_avg_precision_iou_50 != 0) {
    total_size += 1 + 4;
  }

  // float mean_avg_precision_iou_range = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mean_avg_precision_iou_range = this->_internal_mean_avg_precision_iou_range();
  uint32_t raw_mean_avg_precision_iou_range;
  memcpy(&raw_mean_avg_precision_iou_range, &tmp_mean_avg_precision_iou_range, sizeof(tmp_mean_avg_precision_iou_range));
  if (raw_mean_avg_precision_iou_range != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricsSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsSummary::GetClassData() const { return &_class_data_; }


void MetricsSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricsSummary*>(&to_msg);
  auto& from = static_cast<const MetricsSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MetricsSummary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lopq_metrics_.MergeFrom(from._impl_.lopq_metrics_);
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top1_accuracy = from._internal_top1_accuracy();
  uint32_t raw_top1_accuracy;
  memcpy(&raw_top1_accuracy, &tmp_top1_accuracy, sizeof(tmp_top1_accuracy));
  if (raw_top1_accuracy != 0) {
    _this->_internal_set_top1_accuracy(from._internal_top1_accuracy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top5_accuracy = from._internal_top5_accuracy();
  uint32_t raw_top5_accuracy;
  memcpy(&raw_top5_accuracy, &tmp_top5_accuracy, sizeof(tmp_top5_accuracy));
  if (raw_top5_accuracy != 0) {
    _this->_internal_set_top5_accuracy(from._internal_top5_accuracy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_roc_auc = from._internal_macro_avg_roc_auc();
  uint32_t raw_macro_avg_roc_auc;
  memcpy(&raw_macro_avg_roc_auc, &tmp_macro_avg_roc_auc, sizeof(tmp_macro_avg_roc_auc));
  if (raw_macro_avg_roc_auc != 0) {
    _this->_internal_set_macro_avg_roc_auc(from._internal_macro_avg_roc_auc());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_std_roc_auc = from._internal_macro_std_roc_auc();
  uint32_t raw_macro_std_roc_auc;
  memcpy(&raw_macro_std_roc_auc, &tmp_macro_std_roc_auc, sizeof(tmp_macro_std_roc_auc));
  if (raw_macro_std_roc_auc != 0) {
    _this->_internal_set_macro_std_roc_auc(from._internal_macro_std_roc_auc());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_f1_score = from._internal_macro_avg_f1_score();
  uint32_t raw_macro_avg_f1_score;
  memcpy(&raw_macro_avg_f1_score, &tmp_macro_avg_f1_score, sizeof(tmp_macro_avg_f1_score));
  if (raw_macro_avg_f1_score != 0) {
    _this->_internal_set_macro_avg_f1_score(from._internal_macro_avg_f1_score());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_std_f1_score = from._internal_macro_std_f1_score();
  uint32_t raw_macro_std_f1_score;
  memcpy(&raw_macro_std_f1_score, &tmp_macro_std_f1_score, sizeof(tmp_macro_std_f1_score));
  if (raw_macro_std_f1_score != 0) {
    _this->_internal_set_macro_std_f1_score(from._internal_macro_std_f1_score());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_precision = from._internal_macro_avg_precision();
  uint32_t raw_macro_avg_precision;
  memcpy(&raw_macro_avg_precision, &tmp_macro_avg_precision, sizeof(tmp_macro_avg_precision));
  if (raw_macro_avg_precision != 0) {
    _this->_internal_set_macro_avg_precision(from._internal_macro_avg_precision());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_recall = from._internal_macro_avg_recall();
  uint32_t raw_macro_avg_recall;
  memcpy(&raw_macro_avg_recall, &tmp_macro_avg_recall, sizeof(tmp_macro_avg_recall));
  if (raw_macro_avg_recall != 0) {
    _this->_internal_set_macro_avg_recall(from._internal_macro_avg_recall());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mean_avg_precision_iou_50 = from._internal_mean_avg_precision_iou_50();
  uint32_t raw_mean_avg_precision_iou_50;
  memcpy(&raw_mean_avg_precision_iou_50, &tmp_mean_avg_precision_iou_50, sizeof(tmp_mean_avg_precision_iou_50));
  if (raw_mean_avg_precision_iou_50 != 0) {
    _this->_internal_set_mean_avg_precision_iou_50(from._internal_mean_avg_precision_iou_50());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mean_avg_precision_iou_range = from._internal_mean_avg_precision_iou_range();
  uint32_t raw_mean_avg_precision_iou_range;
  memcpy(&raw_mean_avg_precision_iou_range, &tmp_mean_avg_precision_iou_range, sizeof(tmp_mean_avg_precision_iou_range));
  if (raw_mean_avg_precision_iou_range != 0) {
    _this->_internal_set_mean_avg_precision_iou_range(from._internal_mean_avg_precision_iou_range());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsSummary::CopyFrom(const MetricsSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MetricsSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsSummary::IsInitialized() const {
  return true;
}

void MetricsSummary::InternalSwap(MetricsSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lopq_metrics_.InternalSwap(&other->_impl_.lopq_metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricsSummary, _impl_.mean_avg_precision_iou_range_)
      + sizeof(MetricsSummary::_impl_.mean_avg_precision_iou_range_)
      - PROTOBUF_FIELD_OFFSET(MetricsSummary, _impl_.top1_accuracy_)>(
          reinterpret_cast<char*>(&_impl_.top1_accuracy_),
          reinterpret_cast<char*>(&other->_impl_.top1_accuracy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[96]);
}

// ===================================================================

class EvalMetrics::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const EvalMetrics* msg);
  static const ::clarifai::api::Model& model(const EvalMetrics* msg);
  static const ::clarifai::api::Dataset& ground_truth_dataset(const EvalMetrics* msg);
  static const ::clarifai::api::MetricsSummary& summary(const EvalMetrics* msg);
  static const ::clarifai::api::ConfusionMatrix& confusion_matrix(const EvalMetrics* msg);
  static const ::clarifai::api::CooccurrenceMatrix& cooccurrence_matrix(const EvalMetrics* msg);
  static const ::clarifai::api::LabelDistribution& label_counts(const EvalMetrics* msg);
  static const ::clarifai::api::EvalInfo& eval_info(const EvalMetrics* msg);
};

const ::clarifai::api::status::Status&
EvalMetrics::_Internal::status(const EvalMetrics* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Model&
EvalMetrics::_Internal::model(const EvalMetrics* msg) {
  return *msg->_impl_.model_;
}
const ::clarifai::api::Dataset&
EvalMetrics::_Internal::ground_truth_dataset(const EvalMetrics* msg) {
  return *msg->_impl_.ground_truth_dataset_;
}
const ::clarifai::api::MetricsSummary&
EvalMetrics::_Internal::summary(const EvalMetrics* msg) {
  return *msg->_impl_.summary_;
}
const ::clarifai::api::ConfusionMatrix&
EvalMetrics::_Internal::confusion_matrix(const EvalMetrics* msg) {
  return *msg->_impl_.confusion_matrix_;
}
const ::clarifai::api::CooccurrenceMatrix&
EvalMetrics::_Internal::cooccurrence_matrix(const EvalMetrics* msg) {
  return *msg->_impl_.cooccurrence_matrix_;
}
const ::clarifai::api::LabelDistribution&
EvalMetrics::_Internal::label_counts(const EvalMetrics* msg) {
  return *msg->_impl_.label_counts_;
}
const ::clarifai::api::EvalInfo&
EvalMetrics::_Internal::eval_info(const EvalMetrics* msg) {
  return *msg->_impl_.eval_info_;
}
void EvalMetrics::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
EvalMetrics::EvalMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.EvalMetrics)
}
EvalMetrics::EvalMetrics(const EvalMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EvalMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.binary_metrics_){from._impl_.binary_metrics_}
    , decltype(_impl_.test_set_){from._impl_.test_set_}
    , decltype(_impl_.metrics_by_area_){from._impl_.metrics_by_area_}
    , decltype(_impl_.metrics_by_class_){from._impl_.metrics_by_class_}
    , decltype(_impl_.tracker_metrics_){from._impl_.tracker_metrics_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.summary_){nullptr}
    , decltype(_impl_.confusion_matrix_){nullptr}
    , decltype(_impl_.cooccurrence_matrix_){nullptr}
    , decltype(_impl_.label_counts_){nullptr}
    , decltype(_impl_.eval_info_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , decltype(_impl_.ground_truth_dataset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_summary()) {
    _this->_impl_.summary_ = new ::clarifai::api::MetricsSummary(*from._impl_.summary_);
  }
  if (from._internal_has_confusion_matrix()) {
    _this->_impl_.confusion_matrix_ = new ::clarifai::api::ConfusionMatrix(*from._impl_.confusion_matrix_);
  }
  if (from._internal_has_cooccurrence_matrix()) {
    _this->_impl_.cooccurrence_matrix_ = new ::clarifai::api::CooccurrenceMatrix(*from._impl_.cooccurrence_matrix_);
  }
  if (from._internal_has_label_counts()) {
    _this->_impl_.label_counts_ = new ::clarifai::api::LabelDistribution(*from._impl_.label_counts_);
  }
  if (from._internal_has_eval_info()) {
    _this->_impl_.eval_info_ = new ::clarifai::api::EvalInfo(*from._impl_.eval_info_);
  }
  if (from._internal_has_model()) {
    _this->_impl_.model_ = new ::clarifai::api::Model(*from._impl_.model_);
  }
  if (from._internal_has_ground_truth_dataset()) {
    _this->_impl_.ground_truth_dataset_ = new ::clarifai::api::Dataset(*from._impl_.ground_truth_dataset_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.EvalMetrics)
}

inline void EvalMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.binary_metrics_){arena}
    , decltype(_impl_.test_set_){arena}
    , decltype(_impl_.metrics_by_area_){arena}
    , decltype(_impl_.metrics_by_class_){arena}
    , decltype(_impl_.tracker_metrics_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.summary_){nullptr}
    , decltype(_impl_.confusion_matrix_){nullptr}
    , decltype(_impl_.cooccurrence_matrix_){nullptr}
    , decltype(_impl_.label_counts_){nullptr}
    , decltype(_impl_.eval_info_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , decltype(_impl_.ground_truth_dataset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EvalMetrics::~EvalMetrics() {
  // @@protoc_insertion_point(destructor:clarifai.api.EvalMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EvalMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.binary_metrics_.~RepeatedPtrField();
  _impl_.test_set_.~RepeatedPtrField();
  _impl_.metrics_by_area_.~RepeatedPtrField();
  _impl_.metrics_by_class_.~RepeatedPtrField();
  _impl_.tracker_metrics_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.app_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.summary_;
  if (this != internal_default_instance()) delete _impl_.confusion_matrix_;
  if (this != internal_default_instance()) delete _impl_.cooccurrence_matrix_;
  if (this != internal_default_instance()) delete _impl_.label_counts_;
  if (this != internal_default_instance()) delete _impl_.eval_info_;
  if (this != internal_default_instance()) delete _impl_.model_;
  if (this != internal_default_instance()) delete _impl_.ground_truth_dataset_;
}

void EvalMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EvalMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.EvalMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.binary_metrics_.Clear();
  _impl_.test_set_.Clear();
  _impl_.metrics_by_area_.Clear();
  _impl_.metrics_by_class_.Clear();
  _impl_.tracker_metrics_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.summary_ != nullptr) {
    delete _impl_.summary_;
  }
  _impl_.summary_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.confusion_matrix_ != nullptr) {
    delete _impl_.confusion_matrix_;
  }
  _impl_.confusion_matrix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cooccurrence_matrix_ != nullptr) {
    delete _impl_.cooccurrence_matrix_;
  }
  _impl_.cooccurrence_matrix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.label_counts_ != nullptr) {
    delete _impl_.label_counts_;
  }
  _impl_.label_counts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.eval_info_ != nullptr) {
    delete _impl_.eval_info_;
  }
  _impl_.eval_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_ != nullptr) {
    delete _impl_.model_;
  }
  _impl_.model_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ground_truth_dataset_ != nullptr) {
    delete _impl_.ground_truth_dataset_;
  }
  _impl_.ground_truth_dataset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvalMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.MetricsSummary summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ConfusionMatrix confusion_matrix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_confusion_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.CooccurrenceMatrix cooccurrence_matrix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cooccurrence_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.LabelDistribution label_counts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_counts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.BinaryMetrics binary_metrics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_binary_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.EvalTestSetEntry test_set = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_test_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.BinaryMetrics metrics_by_area = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics_by_area(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.BinaryMetrics metrics_by_class = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics_by_class(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.EvalMetrics.id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.TrackerMetrics tracker_metrics = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracker_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvalInfo eval_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Dataset ground_truth_dataset = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_truth_dataset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.EvalMetrics.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.EvalMetrics.app_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EvalMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.EvalMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.MetricsSummary summary = 2;
  if (this->_internal_has_summary()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::summary(this),
        _Internal::summary(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ConfusionMatrix confusion_matrix = 3;
  if (this->_internal_has_confusion_matrix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::confusion_matrix(this),
        _Internal::confusion_matrix(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.CooccurrenceMatrix cooccurrence_matrix = 4;
  if (this->_internal_has_cooccurrence_matrix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cooccurrence_matrix(this),
        _Internal::cooccurrence_matrix(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.LabelDistribution label_counts = 5;
  if (this->_internal_has_label_counts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::label_counts(this),
        _Internal::label_counts(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.BinaryMetrics binary_metrics = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_binary_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_binary_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.EvalTestSetEntry test_set = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_test_set_size()); i < n; i++) {
    const auto& repfield = this->_internal_test_set(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.BinaryMetrics metrics_by_area = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metrics_by_area_size()); i < n; i++) {
    const auto& repfield = this->_internal_metrics_by_area(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.BinaryMetrics metrics_by_class = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metrics_by_class_size()); i < n; i++) {
    const auto& repfield = this->_internal_metrics_by_class(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string id = 10;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EvalMetrics.id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_id(), target);
  }

  // repeated .clarifai.api.TrackerMetrics tracker_metrics = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tracker_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_tracker_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.EvalInfo eval_info = 12;
  if (this->_internal_has_eval_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::eval_info(this),
        _Internal::eval_info(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Model model = 13;
  if (this->_internal_has_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::model(this),
        _Internal::model(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Dataset ground_truth_dataset = 14;
  if (this->_internal_has_ground_truth_dataset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::ground_truth_dataset(this),
        _Internal::ground_truth_dataset(this).GetCachedSize(), target, stream);
  }

  // string user_id = 15;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EvalMetrics.user_id");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_user_id(), target);
  }

  // string app_id = 16;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EvalMetrics.app_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.EvalMetrics)
  return target;
}

size_t EvalMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.EvalMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.BinaryMetrics binary_metrics = 6;
  total_size += 1UL * this->_internal_binary_metrics_size();
  for (const auto& msg : this->_impl_.binary_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.EvalTestSetEntry test_set = 7;
  total_size += 1UL * this->_internal_test_set_size();
  for (const auto& msg : this->_impl_.test_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.BinaryMetrics metrics_by_area = 8;
  total_size += 1UL * this->_internal_metrics_by_area_size();
  for (const auto& msg : this->_impl_.metrics_by_area_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.BinaryMetrics metrics_by_class = 9;
  total_size += 1UL * this->_internal_metrics_by_class_size();
  for (const auto& msg : this->_impl_.metrics_by_class_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.TrackerMetrics tracker_metrics = 11;
  total_size += 1UL * this->_internal_tracker_metrics_size();
  for (const auto& msg : this->_impl_.tracker_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 10;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string user_id = 15;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string app_id = 16;
  if (!this->_internal_app_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.MetricsSummary summary = 2;
  if (this->_internal_has_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.summary_);
  }

  // .clarifai.api.ConfusionMatrix confusion_matrix = 3;
  if (this->_internal_has_confusion_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.confusion_matrix_);
  }

  // .clarifai.api.CooccurrenceMatrix cooccurrence_matrix = 4;
  if (this->_internal_has_cooccurrence_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cooccurrence_matrix_);
  }

  // .clarifai.api.LabelDistribution label_counts = 5;
  if (this->_internal_has_label_counts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.label_counts_);
  }

  // .clarifai.api.EvalInfo eval_info = 12;
  if (this->_internal_has_eval_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.eval_info_);
  }

  // .clarifai.api.Model model = 13;
  if (this->_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_);
  }

  // .clarifai.api.Dataset ground_truth_dataset = 14;
  if (this->_internal_has_ground_truth_dataset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ground_truth_dataset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvalMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EvalMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvalMetrics::GetClassData() const { return &_class_data_; }


void EvalMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EvalMetrics*>(&to_msg);
  auto& from = static_cast<const EvalMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.EvalMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.binary_metrics_.MergeFrom(from._impl_.binary_metrics_);
  _this->_impl_.test_set_.MergeFrom(from._impl_.test_set_);
  _this->_impl_.metrics_by_area_.MergeFrom(from._impl_.metrics_by_area_);
  _this->_impl_.metrics_by_class_.MergeFrom(from._impl_.metrics_by_class_);
  _this->_impl_.tracker_metrics_.MergeFrom(from._impl_.tracker_metrics_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_summary()) {
    _this->_internal_mutable_summary()->::clarifai::api::MetricsSummary::MergeFrom(
        from._internal_summary());
  }
  if (from._internal_has_confusion_matrix()) {
    _this->_internal_mutable_confusion_matrix()->::clarifai::api::ConfusionMatrix::MergeFrom(
        from._internal_confusion_matrix());
  }
  if (from._internal_has_cooccurrence_matrix()) {
    _this->_internal_mutable_cooccurrence_matrix()->::clarifai::api::CooccurrenceMatrix::MergeFrom(
        from._internal_cooccurrence_matrix());
  }
  if (from._internal_has_label_counts()) {
    _this->_internal_mutable_label_counts()->::clarifai::api::LabelDistribution::MergeFrom(
        from._internal_label_counts());
  }
  if (from._internal_has_eval_info()) {
    _this->_internal_mutable_eval_info()->::clarifai::api::EvalInfo::MergeFrom(
        from._internal_eval_info());
  }
  if (from._internal_has_model()) {
    _this->_internal_mutable_model()->::clarifai::api::Model::MergeFrom(
        from._internal_model());
  }
  if (from._internal_has_ground_truth_dataset()) {
    _this->_internal_mutable_ground_truth_dataset()->::clarifai::api::Dataset::MergeFrom(
        from._internal_ground_truth_dataset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvalMetrics::CopyFrom(const EvalMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.EvalMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalMetrics::IsInitialized() const {
  return true;
}

void EvalMetrics::InternalSwap(EvalMetrics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.binary_metrics_.InternalSwap(&other->_impl_.binary_metrics_);
  _impl_.test_set_.InternalSwap(&other->_impl_.test_set_);
  _impl_.metrics_by_area_.InternalSwap(&other->_impl_.metrics_by_area_);
  _impl_.metrics_by_class_.InternalSwap(&other->_impl_.metrics_by_class_);
  _impl_.tracker_metrics_.InternalSwap(&other->_impl_.tracker_metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvalMetrics, _impl_.ground_truth_dataset_)
      + sizeof(EvalMetrics::_impl_.ground_truth_dataset_)
      - PROTOBUF_FIELD_OFFSET(EvalMetrics, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[97]);
}

// ===================================================================

class FieldsValue::_Internal {
 public:
};

FieldsValue::FieldsValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.FieldsValue)
}
FieldsValue::FieldsValue(const FieldsValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FieldsValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.confusion_matrix_){}
    , decltype(_impl_.cooccurrence_matrix_){}
    , decltype(_impl_.label_counts_){}
    , decltype(_impl_.binary_metrics_){}
    , decltype(_impl_.test_set_){}
    , decltype(_impl_.metrics_by_area_){}
    , decltype(_impl_.metrics_by_class_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.confusion_matrix_, &from._impl_.confusion_matrix_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.metrics_by_class_) -
    reinterpret_cast<char*>(&_impl_.confusion_matrix_)) + sizeof(_impl_.metrics_by_class_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.FieldsValue)
}

inline void FieldsValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.confusion_matrix_){false}
    , decltype(_impl_.cooccurrence_matrix_){false}
    , decltype(_impl_.label_counts_){false}
    , decltype(_impl_.binary_metrics_){false}
    , decltype(_impl_.test_set_){false}
    , decltype(_impl_.metrics_by_area_){false}
    , decltype(_impl_.metrics_by_class_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FieldsValue::~FieldsValue() {
  // @@protoc_insertion_point(destructor:clarifai.api.FieldsValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FieldsValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FieldsValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FieldsValue::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.FieldsValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.confusion_matrix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.metrics_by_class_) -
      reinterpret_cast<char*>(&_impl_.confusion_matrix_)) + sizeof(_impl_.metrics_by_class_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldsValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool confusion_matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.confusion_matrix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool cooccurrence_matrix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cooccurrence_matrix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool label_counts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.label_counts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool binary_metrics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.binary_metrics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool test_set = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.test_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool metrics_by_area = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.metrics_by_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool metrics_by_class = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.metrics_by_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldsValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.FieldsValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool confusion_matrix = 1;
  if (this->_internal_confusion_matrix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_confusion_matrix(), target);
  }

  // bool cooccurrence_matrix = 2;
  if (this->_internal_cooccurrence_matrix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_cooccurrence_matrix(), target);
  }

  // bool label_counts = 3;
  if (this->_internal_label_counts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_label_counts(), target);
  }

  // bool binary_metrics = 4;
  if (this->_internal_binary_metrics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_binary_metrics(), target);
  }

  // bool test_set = 5;
  if (this->_internal_test_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_test_set(), target);
  }

  // bool metrics_by_area = 6;
  if (this->_internal_metrics_by_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_metrics_by_area(), target);
  }

  // bool metrics_by_class = 7;
  if (this->_internal_metrics_by_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_metrics_by_class(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.FieldsValue)
  return target;
}

size_t FieldsValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.FieldsValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool confusion_matrix = 1;
  if (this->_internal_confusion_matrix() != 0) {
    total_size += 1 + 1;
  }

  // bool cooccurrence_matrix = 2;
  if (this->_internal_cooccurrence_matrix() != 0) {
    total_size += 1 + 1;
  }

  // bool label_counts = 3;
  if (this->_internal_label_counts() != 0) {
    total_size += 1 + 1;
  }

  // bool binary_metrics = 4;
  if (this->_internal_binary_metrics() != 0) {
    total_size += 1 + 1;
  }

  // bool test_set = 5;
  if (this->_internal_test_set() != 0) {
    total_size += 1 + 1;
  }

  // bool metrics_by_area = 6;
  if (this->_internal_metrics_by_area() != 0) {
    total_size += 1 + 1;
  }

  // bool metrics_by_class = 7;
  if (this->_internal_metrics_by_class() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldsValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FieldsValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldsValue::GetClassData() const { return &_class_data_; }


void FieldsValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FieldsValue*>(&to_msg);
  auto& from = static_cast<const FieldsValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.FieldsValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_confusion_matrix() != 0) {
    _this->_internal_set_confusion_matrix(from._internal_confusion_matrix());
  }
  if (from._internal_cooccurrence_matrix() != 0) {
    _this->_internal_set_cooccurrence_matrix(from._internal_cooccurrence_matrix());
  }
  if (from._internal_label_counts() != 0) {
    _this->_internal_set_label_counts(from._internal_label_counts());
  }
  if (from._internal_binary_metrics() != 0) {
    _this->_internal_set_binary_metrics(from._internal_binary_metrics());
  }
  if (from._internal_test_set() != 0) {
    _this->_internal_set_test_set(from._internal_test_set());
  }
  if (from._internal_metrics_by_area() != 0) {
    _this->_internal_set_metrics_by_area(from._internal_metrics_by_area());
  }
  if (from._internal_metrics_by_class() != 0) {
    _this->_internal_set_metrics_by_class(from._internal_metrics_by_class());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldsValue::CopyFrom(const FieldsValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.FieldsValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldsValue::IsInitialized() const {
  return true;
}

void FieldsValue::InternalSwap(FieldsValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldsValue, _impl_.metrics_by_class_)
      + sizeof(FieldsValue::_impl_.metrics_by_class_)
      - PROTOBUF_FIELD_OFFSET(FieldsValue, _impl_.confusion_matrix_)>(
          reinterpret_cast<char*>(&_impl_.confusion_matrix_),
          reinterpret_cast<char*>(&other->_impl_.confusion_matrix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldsValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[98]);
}

// ===================================================================

class Output::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const Output* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Output* msg);
  static const ::clarifai::api::Model& model(const Output* msg);
  static const ::clarifai::api::Input& input(const Output* msg);
  static const ::clarifai::api::Data& data(const Output* msg);
};

const ::clarifai::api::status::Status&
Output::_Internal::status(const Output* msg) {
  return *msg->_impl_.status_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Output::_Internal::created_at(const Output* msg) {
  return *msg->_impl_.created_at_;
}
const ::clarifai::api::Model&
Output::_Internal::model(const Output* msg) {
  return *msg->_impl_.model_;
}
const ::clarifai::api::Input&
Output::_Internal::input(const Output* msg) {
  return *msg->_impl_.input_;
}
const ::clarifai::api::Data&
Output::_Internal::data(const Output* msg) {
  return *msg->_impl_.data_;
}
void Output::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void Output::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
Output::Output(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Output)
}
Output::Output(const Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Output* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_model()) {
    _this->_impl_.model_ = new ::clarifai::api::Model(*from._impl_.model_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::clarifai::api::Input(*from._impl_.input_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::clarifai::api::Data(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Output)
}

inline void Output::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:clarifai.api.Output)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Output::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.model_;
  if (this != internal_default_instance()) delete _impl_.input_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void Output::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Output)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_ != nullptr) {
    delete _impl_.model_;
  }
  _impl_.model_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Output::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Output.id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Output::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Output)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Output.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.status.Status status = 2;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Model model = 4;
  if (this->_internal_has_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::model(this),
        _Internal::model(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Input input = 5;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Data data = 6;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Output)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.status.Status status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .clarifai.api.Model model = 4;
  if (this->_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_);
  }

  // .clarifai.api.Input input = 5;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // .clarifai.api.Data data = 6;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Output::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Output::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Output::GetClassData() const { return &_class_data_; }


void Output::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Output*>(&to_msg);
  auto& from = static_cast<const Output&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Output)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_model()) {
    _this->_internal_mutable_model()->::clarifai::api::Model::MergeFrom(
        from._internal_model());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::clarifai::api::Input::MergeFrom(
        from._internal_input());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::clarifai::api::Data::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  return true;
}

void Output::InternalSwap(Output* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Output, _impl_.data_)
      + sizeof(Output::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(Output, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Output::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[99]);
}

// ===================================================================

class ScopeDeps::_Internal {
 public:
};

ScopeDeps::ScopeDeps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ScopeDeps)
}
ScopeDeps::ScopeDeps(const ScopeDeps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScopeDeps* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.depending_scopes_){from._impl_.depending_scopes_}
    , decltype(_impl_.scope_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.scope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scope_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_scope().empty()) {
    _this->_impl_.scope_.Set(from._internal_scope(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ScopeDeps)
}

inline void ScopeDeps::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.depending_scopes_){arena}
    , decltype(_impl_.scope_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.scope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scope_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScopeDeps::~ScopeDeps() {
  // @@protoc_insertion_point(destructor:clarifai.api.ScopeDeps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScopeDeps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.depending_scopes_.~RepeatedPtrField();
  _impl_.scope_.Destroy();
}

void ScopeDeps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScopeDeps::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ScopeDeps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.depending_scopes_.Clear();
  _impl_.scope_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScopeDeps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string scope = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_scope();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ScopeDeps.scope"));
        } else
          goto handle_unusual;
        continue;
      // repeated string depending_scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_depending_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ScopeDeps.depending_scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScopeDeps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ScopeDeps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string scope = 1;
  if (!this->_internal_scope().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scope().data(), static_cast<int>(this->_internal_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ScopeDeps.scope");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scope(), target);
  }

  // repeated string depending_scopes = 2;
  for (int i = 0, n = this->_internal_depending_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_depending_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ScopeDeps.depending_scopes");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ScopeDeps)
  return target;
}

size_t ScopeDeps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ScopeDeps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string depending_scopes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.depending_scopes_.size());
  for (int i = 0, n = _impl_.depending_scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.depending_scopes_.Get(i));
  }

  // string scope = 1;
  if (!this->_internal_scope().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scope());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScopeDeps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScopeDeps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScopeDeps::GetClassData() const { return &_class_data_; }


void ScopeDeps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScopeDeps*>(&to_msg);
  auto& from = static_cast<const ScopeDeps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ScopeDeps)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.depending_scopes_.MergeFrom(from._impl_.depending_scopes_);
  if (!from._internal_scope().empty()) {
    _this->_internal_set_scope(from._internal_scope());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScopeDeps::CopyFrom(const ScopeDeps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ScopeDeps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScopeDeps::IsInitialized() const {
  return true;
}

void ScopeDeps::InternalSwap(ScopeDeps* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.depending_scopes_.InternalSwap(&other->_impl_.depending_scopes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scope_, lhs_arena,
      &other->_impl_.scope_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ScopeDeps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[100]);
}

// ===================================================================

class EndpointDeps::_Internal {
 public:
};

EndpointDeps::EndpointDeps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.EndpointDeps)
}
EndpointDeps::EndpointDeps(const EndpointDeps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EndpointDeps* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.depending_scopes_){from._impl_.depending_scopes_}
    , decltype(_impl_.endpoint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_endpoint().empty()) {
    _this->_impl_.endpoint_.Set(from._internal_endpoint(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.EndpointDeps)
}

inline void EndpointDeps::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.depending_scopes_){arena}
    , decltype(_impl_.endpoint_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EndpointDeps::~EndpointDeps() {
  // @@protoc_insertion_point(destructor:clarifai.api.EndpointDeps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EndpointDeps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.depending_scopes_.~RepeatedPtrField();
  _impl_.endpoint_.Destroy();
}

void EndpointDeps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EndpointDeps::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.EndpointDeps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.depending_scopes_.Clear();
  _impl_.endpoint_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndpointDeps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string endpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_endpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.EndpointDeps.endpoint"));
        } else
          goto handle_unusual;
        continue;
      // repeated string depending_scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_depending_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.EndpointDeps.depending_scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndpointDeps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.EndpointDeps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string endpoint = 1;
  if (!this->_internal_endpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint().data(), static_cast<int>(this->_internal_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EndpointDeps.endpoint");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_endpoint(), target);
  }

  // repeated string depending_scopes = 2;
  for (int i = 0, n = this->_internal_depending_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_depending_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EndpointDeps.depending_scopes");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.EndpointDeps)
  return target;
}

size_t EndpointDeps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.EndpointDeps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string depending_scopes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.depending_scopes_.size());
  for (int i = 0, n = _impl_.depending_scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.depending_scopes_.Get(i));
  }

  // string endpoint = 1;
  if (!this->_internal_endpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndpointDeps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EndpointDeps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndpointDeps::GetClassData() const { return &_class_data_; }


void EndpointDeps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EndpointDeps*>(&to_msg);
  auto& from = static_cast<const EndpointDeps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.EndpointDeps)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.depending_scopes_.MergeFrom(from._impl_.depending_scopes_);
  if (!from._internal_endpoint().empty()) {
    _this->_internal_set_endpoint(from._internal_endpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndpointDeps::CopyFrom(const EndpointDeps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.EndpointDeps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndpointDeps::IsInitialized() const {
  return true;
}

void EndpointDeps::InternalSwap(EndpointDeps* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.depending_scopes_.InternalSwap(&other->_impl_.depending_scopes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.endpoint_, lhs_arena,
      &other->_impl_.endpoint_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EndpointDeps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[101]);
}

// ===================================================================

class Hit::_Internal {
 public:
  static const ::clarifai::api::Input& input(const Hit* msg);
  static const ::clarifai::api::Annotation& annotation(const Hit* msg);
};

const ::clarifai::api::Input&
Hit::_Internal::input(const Hit* msg) {
  return *msg->_impl_.input_;
}
const ::clarifai::api::Annotation&
Hit::_Internal::annotation(const Hit* msg) {
  return *msg->_impl_.annotation_;
}
Hit::Hit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Hit)
}
Hit::Hit(const Hit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Hit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.annotation_){nullptr}
    , decltype(_impl_.score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::clarifai::api::Input(*from._impl_.input_);
  }
  if (from._internal_has_annotation()) {
    _this->_impl_.annotation_ = new ::clarifai::api::Annotation(*from._impl_.annotation_);
  }
  _this->_impl_.score_ = from._impl_.score_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Hit)
}

inline void Hit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.annotation_){nullptr}
    , decltype(_impl_.score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Hit::~Hit() {
  // @@protoc_insertion_point(destructor:clarifai.api.Hit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Hit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.app_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.input_;
  if (this != internal_default_instance()) delete _impl_.annotation_;
}

void Hit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Hit::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Hit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.annotation_ != nullptr) {
    delete _impl_.annotation_;
  }
  _impl_.annotation_ = nullptr;
  _impl_.score_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float score = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Hit.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Hit.app_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Hit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Hit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float score = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_score(), target);
  }

  // .clarifai.api.Input input = 2;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Annotation annotation = 3;
  if (this->_internal_has_annotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::annotation(this),
        _Internal::annotation(this).GetCachedSize(), target, stream);
  }

  // string user_id = 4;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Hit.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  // string app_id = 5;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Hit.app_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Hit)
  return target;
}

size_t Hit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Hit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 4;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string app_id = 5;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // .clarifai.api.Input input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // .clarifai.api.Annotation annotation = 3;
  if (this->_internal_has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotation_);
  }

  // float score = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Hit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Hit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Hit::GetClassData() const { return &_class_data_; }


void Hit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Hit*>(&to_msg);
  auto& from = static_cast<const Hit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Hit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::clarifai::api::Input::MergeFrom(
        from._internal_input());
  }
  if (from._internal_has_annotation()) {
    _this->_internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(
        from._internal_annotation());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Hit::CopyFrom(const Hit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Hit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hit::IsInitialized() const {
  return true;
}

void Hit::InternalSwap(Hit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hit, _impl_.score_)
      + sizeof(Hit::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(Hit, _impl_.input_)>(
          reinterpret_cast<char*>(&_impl_.input_),
          reinterpret_cast<char*>(&other->_impl_.input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Hit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[102]);
}

// ===================================================================

class HitCount::_Internal {
 public:
};

HitCount::HitCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.HitCount)
}
HitCount::HitCount(const HitCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HitCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.estimated_total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.estimated_total_ = from._impl_.estimated_total_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.HitCount)
}

inline void HitCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.estimated_total_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HitCount::~HitCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.HitCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HitCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HitCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HitCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.HitCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.estimated_total_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 estimated_total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.estimated_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HitCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.HitCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 estimated_total = 1;
  if (this->_internal_estimated_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_estimated_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.HitCount)
  return target;
}

size_t HitCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.HitCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 estimated_total = 1;
  if (this->_internal_estimated_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_estimated_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HitCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HitCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HitCount::GetClassData() const { return &_class_data_; }


void HitCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HitCount*>(&to_msg);
  auto& from = static_cast<const HitCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.HitCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_estimated_total() != 0) {
    _this->_internal_set_estimated_total(from._internal_estimated_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HitCount::CopyFrom(const HitCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.HitCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitCount::IsInitialized() const {
  return true;
}

void HitCount::InternalSwap(HitCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.estimated_total_, other->_impl_.estimated_total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HitCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[103]);
}

// ===================================================================

class And::_Internal {
 public:
  static const ::clarifai::api::Input& input(const And* msg);
  static const ::clarifai::api::Output& output(const And* msg);
  static const ::clarifai::api::Annotation& annotation(const And* msg);
};

const ::clarifai::api::Input&
And::_Internal::input(const And* msg) {
  return *msg->_impl_.input_;
}
const ::clarifai::api::Output&
And::_Internal::output(const And* msg) {
  return *msg->_impl_.output_;
}
const ::clarifai::api::Annotation&
And::_Internal::annotation(const And* msg) {
  return *msg->_impl_.annotation_;
}
And::And(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.And)
}
And::And(const And& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  And* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_){nullptr}
    , decltype(_impl_.output_){nullptr}
    , decltype(_impl_.annotation_){nullptr}
    , decltype(_impl_.negate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::clarifai::api::Input(*from._impl_.input_);
  }
  if (from._internal_has_output()) {
    _this->_impl_.output_ = new ::clarifai::api::Output(*from._impl_.output_);
  }
  if (from._internal_has_annotation()) {
    _this->_impl_.annotation_ = new ::clarifai::api::Annotation(*from._impl_.annotation_);
  }
  _this->_impl_.negate_ = from._impl_.negate_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.And)
}

inline void And::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_){nullptr}
    , decltype(_impl_.output_){nullptr}
    , decltype(_impl_.annotation_){nullptr}
    , decltype(_impl_.negate_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

And::~And() {
  // @@protoc_insertion_point(destructor:clarifai.api.And)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void And::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.input_;
  if (this != internal_default_instance()) delete _impl_.output_;
  if (this != internal_default_instance()) delete _impl_.annotation_;
}

void And::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void And::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.And)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.output_ != nullptr) {
    delete _impl_.output_;
  }
  _impl_.output_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.annotation_ != nullptr) {
    delete _impl_.annotation_;
  }
  _impl_.annotation_ = nullptr;
  _impl_.negate_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* And::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Input input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Output output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool negate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.negate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* And::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.And)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Input input = 1;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Output output = 2;
  if (this->_internal_has_output()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::output(this),
        _Internal::output(this).GetCachedSize(), target, stream);
  }

  // bool negate = 3;
  if (this->_internal_negate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_negate(), target);
  }

  // .clarifai.api.Annotation annotation = 4;
  if (this->_internal_has_annotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::annotation(this),
        _Internal::annotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.And)
  return target;
}

size_t And::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.And)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Input input = 1;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // .clarifai.api.Output output = 2;
  if (this->_internal_has_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.output_);
  }

  // .clarifai.api.Annotation annotation = 4;
  if (this->_internal_has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotation_);
  }

  // bool negate = 3;
  if (this->_internal_negate() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData And::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    And::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*And::GetClassData() const { return &_class_data_; }


void And::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<And*>(&to_msg);
  auto& from = static_cast<const And&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.And)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::clarifai::api::Input::MergeFrom(
        from._internal_input());
  }
  if (from._internal_has_output()) {
    _this->_internal_mutable_output()->::clarifai::api::Output::MergeFrom(
        from._internal_output());
  }
  if (from._internal_has_annotation()) {
    _this->_internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(
        from._internal_annotation());
  }
  if (from._internal_negate() != 0) {
    _this->_internal_set_negate(from._internal_negate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void And::CopyFrom(const And& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.And)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool And::IsInitialized() const {
  return true;
}

void And::InternalSwap(And* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(And, _impl_.negate_)
      + sizeof(And::_impl_.negate_)
      - PROTOBUF_FIELD_OFFSET(And, _impl_.input_)>(
          reinterpret_cast<char*>(&_impl_.input_),
          reinterpret_cast<char*>(&other->_impl_.input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata And::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[104]);
}

// ===================================================================

class Query::_Internal {
 public:
};

Query::Query(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Query)
}
Query::Query(const Query& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ands_){from._impl_.ands_}
    , decltype(_impl_.filters_){from._impl_.filters_}
    , decltype(_impl_.ranks_){from._impl_.ranks_}
    , decltype(_impl_.language_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Query)
}

inline void Query::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ands_){arena}
    , decltype(_impl_.filters_){arena}
    , decltype(_impl_.ranks_){arena}
    , decltype(_impl_.language_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:clarifai.api.Query)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ands_.~RepeatedPtrField();
  _impl_.filters_.~RepeatedPtrField();
  _impl_.ranks_.~RepeatedPtrField();
  _impl_.language_.Destroy();
}

void Query::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Query)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ands_.Clear();
  _impl_.filters_.Clear();
  _impl_.ranks_.Clear();
  _impl_.language_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.And ands = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Query.language"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Filter filters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Rank ranks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Query::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Query)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.And ands = 1 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ands_size()); i < n; i++) {
    const auto& repfield = this->_internal_ands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Query.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  // repeated .clarifai.api.Filter filters = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Rank ranks = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ranks_size()); i < n; i++) {
    const auto& repfield = this->_internal_ranks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Query)
  return target;
}

size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Query)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.And ands = 1 [deprecated = true];
  total_size += 1UL * this->_internal_ands_size();
  for (const auto& msg : this->_impl_.ands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Filter filters = 3;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->_impl_.filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Rank ranks = 4;
  total_size += 1UL * this->_internal_ranks_size();
  for (const auto& msg : this->_impl_.ranks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query::GetClassData() const { return &_class_data_; }


void Query::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query*>(&to_msg);
  auto& from = static_cast<const Query&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Query)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ands_.MergeFrom(from._impl_.ands_);
  _this->_impl_.filters_.MergeFrom(from._impl_.filters_);
  _this->_impl_.ranks_.MergeFrom(from._impl_.ranks_);
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::InternalSwap(Query* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ands_.InternalSwap(&other->_impl_.ands_);
  _impl_.filters_.InternalSwap(&other->_impl_.filters_);
  _impl_.ranks_.InternalSwap(&other->_impl_.ranks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Query::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[105]);
}

// ===================================================================

class Search::_Internal {
 public:
  static const ::clarifai::api::Query& query(const Search* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& as_of(const Search* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Search* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Search* msg);
  static const ::clarifai::api::Visibility& visibility(const Search* msg);
};

const ::clarifai::api::Query&
Search::_Internal::query(const Search* msg) {
  return *msg->_impl_.query_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Search::_Internal::as_of(const Search* msg) {
  return *msg->_impl_.as_of_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Search::_Internal::created_at(const Search* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Search::_Internal::modified_at(const Search* msg) {
  return *msg->_impl_.modified_at_;
}
const ::clarifai::api::Visibility&
Search::_Internal::visibility(const Search* msg) {
  return *msg->_impl_.visibility_;
}
void Search::clear_as_of() {
  if (GetArenaForAllocation() == nullptr && _impl_.as_of_ != nullptr) {
    delete _impl_.as_of_;
  }
  _impl_.as_of_ = nullptr;
}
void Search::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Search::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
Search::Search(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Search)
}
Search::Search(const Search& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Search* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.application_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.git_hash_){}
    , decltype(_impl_.algorithm_){}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.as_of_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.save_){}
    , decltype(_impl_.min_value_){}
    , decltype(_impl_.metric_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.application_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.application_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_application_id().empty()) {
    _this->_impl_.application_id_.Set(from._internal_application_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.git_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.git_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_git_hash().empty()) {
    _this->_impl_.git_hash_.Set(from._internal_git_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.algorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.algorithm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_algorithm().empty()) {
    _this->_impl_.algorithm_.Set(from._internal_algorithm(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_query()) {
    _this->_impl_.query_ = new ::clarifai::api::Query(*from._impl_.query_);
  }
  if (from._internal_has_as_of()) {
    _this->_impl_.as_of_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.as_of_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  ::memcpy(&_impl_.save_, &from._impl_.save_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.metric_) -
    reinterpret_cast<char*>(&_impl_.save_)) + sizeof(_impl_.metric_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Search)
}

inline void Search::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.application_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.git_hash_){}
    , decltype(_impl_.algorithm_){}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.as_of_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.save_){false}
    , decltype(_impl_.min_value_){0}
    , decltype(_impl_.metric_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.application_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.application_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.git_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.git_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.algorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.algorithm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Search::~Search() {
  // @@protoc_insertion_point(destructor:clarifai.api.Search)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Search::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.application_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.git_hash_.Destroy();
  _impl_.algorithm_.Destroy();
  if (this != internal_default_instance()) delete _impl_.query_;
  if (this != internal_default_instance()) delete _impl_.as_of_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
}

void Search::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Search::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Search)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.application_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.git_hash_.ClearToEmpty();
  _impl_.algorithm_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.query_ != nullptr) {
    delete _impl_.query_;
  }
  _impl_.query_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.as_of_ != nullptr) {
    delete _impl_.as_of_;
  }
  _impl_.as_of_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  ::memset(&_impl_.save_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.metric_) -
      reinterpret_cast<char*>(&_impl_.save_)) + sizeof(_impl_.metric_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Search::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Query query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Search.id"));
        } else
          goto handle_unusual;
        continue;
      // string application_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_application_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Search.application_id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Search.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp as_of = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_as_of(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string git_hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_git_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Search.git_hash"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string algorithm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_algorithm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Search.algorithm"));
        } else
          goto handle_unusual;
        continue;
      // bool save = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.save_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float min_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search.Metric metric = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_metric(static_cast<::clarifai::api::Search_Metric>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Search::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Search)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Query query = 1;
  if (this->_internal_has_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Search.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string application_id = 3;
  if (!this->_internal_application_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_id().data(), static_cast<int>(this->_internal_application_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Search.application_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_application_id(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Search.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp as_of = 5;
  if (this->_internal_has_as_of()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::as_of(this),
        _Internal::as_of(this).GetCachedSize(), target, stream);
  }

  // string git_hash = 6;
  if (!this->_internal_git_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_git_hash().data(), static_cast<int>(this->_internal_git_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Search.git_hash");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_git_hash(), target);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 8;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // string algorithm = 9;
  if (!this->_internal_algorithm().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_algorithm().data(), static_cast<int>(this->_internal_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Search.algorithm");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_algorithm(), target);
  }

  // bool save = 10;
  if (this->_internal_save() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_save(), target);
  }

  // float min_value = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_value = this->_internal_min_value();
  uint32_t raw_min_value;
  memcpy(&raw_min_value, &tmp_min_value, sizeof(tmp_min_value));
  if (raw_min_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_min_value(), target);
  }

  // .clarifai.api.Visibility visibility = 12;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Search.Metric metric = 13;
  if (this->_internal_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_metric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Search)
  return target;
}

size_t Search::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Search)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string application_id = 3;
  if (!this->_internal_application_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_id());
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string git_hash = 6;
  if (!this->_internal_git_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_git_hash());
  }

  // string algorithm = 9;
  if (!this->_internal_algorithm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_algorithm());
  }

  // .clarifai.api.Query query = 1;
  if (this->_internal_has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_);
  }

  // .google.protobuf.Timestamp as_of = 5;
  if (this->_internal_has_as_of()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.as_of_);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 8;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .clarifai.api.Visibility visibility = 12;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  // bool save = 10;
  if (this->_internal_save() != 0) {
    total_size += 1 + 1;
  }

  // float min_value = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_value = this->_internal_min_value();
  uint32_t raw_min_value;
  memcpy(&raw_min_value, &tmp_min_value, sizeof(tmp_min_value));
  if (raw_min_value != 0) {
    total_size += 1 + 4;
  }

  // .clarifai.api.Search.Metric metric = 13;
  if (this->_internal_metric() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_metric());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Search::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Search::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Search::GetClassData() const { return &_class_data_; }


void Search::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Search*>(&to_msg);
  auto& from = static_cast<const Search&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Search)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_application_id().empty()) {
    _this->_internal_set_application_id(from._internal_application_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_git_hash().empty()) {
    _this->_internal_set_git_hash(from._internal_git_hash());
  }
  if (!from._internal_algorithm().empty()) {
    _this->_internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_has_query()) {
    _this->_internal_mutable_query()->::clarifai::api::Query::MergeFrom(
        from._internal_query());
  }
  if (from._internal_has_as_of()) {
    _this->_internal_mutable_as_of()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_as_of());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  if (from._internal_save() != 0) {
    _this->_internal_set_save(from._internal_save());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_value = from._internal_min_value();
  uint32_t raw_min_value;
  memcpy(&raw_min_value, &tmp_min_value, sizeof(tmp_min_value));
  if (raw_min_value != 0) {
    _this->_internal_set_min_value(from._internal_min_value());
  }
  if (from._internal_metric() != 0) {
    _this->_internal_set_metric(from._internal_metric());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Search::CopyFrom(const Search& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Search)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Search::IsInitialized() const {
  return true;
}

void Search::InternalSwap(Search* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.application_id_, lhs_arena,
      &other->_impl_.application_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.git_hash_, lhs_arena,
      &other->_impl_.git_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.algorithm_, lhs_arena,
      &other->_impl_.algorithm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Search, _impl_.metric_)
      + sizeof(Search::_impl_.metric_)
      - PROTOBUF_FIELD_OFFSET(Search, _impl_.query_)>(
          reinterpret_cast<char*>(&_impl_.query_),
          reinterpret_cast<char*>(&other->_impl_.query_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Search::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[106]);
}

// ===================================================================

class Filter::_Internal {
 public:
  static const ::clarifai::api::Annotation& annotation(const Filter* msg);
  static const ::clarifai::api::Input& input(const Filter* msg);
  static const ::clarifai::api::TimeRange& last_updated_time_range(const Filter* msg);
};

const ::clarifai::api::Annotation&
Filter::_Internal::annotation(const Filter* msg) {
  return *msg->_impl_.annotation_;
}
const ::clarifai::api::Input&
Filter::_Internal::input(const Filter* msg) {
  return *msg->_impl_.input_;
}
const ::clarifai::api::TimeRange&
Filter::_Internal::last_updated_time_range(const Filter* msg) {
  return *msg->_impl_.last_updated_time_range_;
}
Filter::Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Filter)
}
Filter::Filter(const Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Filter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.last_updated_time_range_){nullptr}
    , decltype(_impl_.negate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_annotation()) {
    _this->_impl_.annotation_ = new ::clarifai::api::Annotation(*from._impl_.annotation_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::clarifai::api::Input(*from._impl_.input_);
  }
  if (from._internal_has_last_updated_time_range()) {
    _this->_impl_.last_updated_time_range_ = new ::clarifai::api::TimeRange(*from._impl_.last_updated_time_range_);
  }
  _this->_impl_.negate_ = from._impl_.negate_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Filter)
}

inline void Filter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.last_updated_time_range_){nullptr}
    , decltype(_impl_.negate_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:clarifai.api.Filter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.annotation_;
  if (this != internal_default_instance()) delete _impl_.input_;
  if (this != internal_default_instance()) delete _impl_.last_updated_time_range_;
}

void Filter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Filter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.annotation_ != nullptr) {
    delete _impl_.annotation_;
  }
  _impl_.annotation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_updated_time_range_ != nullptr) {
    delete _impl_.last_updated_time_range_;
  }
  _impl_.last_updated_time_range_ = nullptr;
  _impl_.negate_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Filter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool negate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.negate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TimeRange last_updated_time_range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated_time_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Filter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Filter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool negate = 3;
  if (this->_internal_negate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_negate(), target);
  }

  // .clarifai.api.Annotation annotation = 4;
  if (this->_internal_has_annotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::annotation(this),
        _Internal::annotation(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Input input = 5;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.TimeRange last_updated_time_range = 6;
  if (this->_internal_has_last_updated_time_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::last_updated_time_range(this),
        _Internal::last_updated_time_range(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Filter)
  return target;
}

size_t Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Filter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Annotation annotation = 4;
  if (this->_internal_has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotation_);
  }

  // .clarifai.api.Input input = 5;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // .clarifai.api.TimeRange last_updated_time_range = 6;
  if (this->_internal_has_last_updated_time_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_updated_time_range_);
  }

  // bool negate = 3;
  if (this->_internal_negate() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Filter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Filter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Filter::GetClassData() const { return &_class_data_; }


void Filter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Filter*>(&to_msg);
  auto& from = static_cast<const Filter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Filter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_annotation()) {
    _this->_internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(
        from._internal_annotation());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::clarifai::api::Input::MergeFrom(
        from._internal_input());
  }
  if (from._internal_has_last_updated_time_range()) {
    _this->_internal_mutable_last_updated_time_range()->::clarifai::api::TimeRange::MergeFrom(
        from._internal_last_updated_time_range());
  }
  if (from._internal_negate() != 0) {
    _this->_internal_set_negate(from._internal_negate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Filter::CopyFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {
  return true;
}

void Filter::InternalSwap(Filter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Filter, _impl_.negate_)
      + sizeof(Filter::_impl_.negate_)
      - PROTOBUF_FIELD_OFFSET(Filter, _impl_.annotation_)>(
          reinterpret_cast<char*>(&_impl_.annotation_),
          reinterpret_cast<char*>(&other->_impl_.annotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Filter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[107]);
}

// ===================================================================

class TimeRange::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const TimeRange* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const TimeRange* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TimeRange::_Internal::start_time(const TimeRange* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TimeRange::_Internal::end_time(const TimeRange* msg) {
  return *msg->_impl_.end_time_;
}
void TimeRange::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void TimeRange::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
}
TimeRange::TimeRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TimeRange)
}
TimeRange::TimeRange(const TimeRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_end_time()) {
    _this->_impl_.end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_time_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TimeRange)
}

inline void TimeRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimeRange::~TimeRange() {
  // @@protoc_insertion_point(destructor:clarifai.api.TimeRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
}

void TimeRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TimeRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TimeRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->_internal_has_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TimeRange)
  return target;
}

size_t TimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TimeRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeRange::GetClassData() const { return &_class_data_; }


void TimeRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeRange*>(&to_msg);
  auto& from = static_cast<const TimeRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TimeRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _this->_internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeRange::CopyFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {
  return true;
}

void TimeRange::InternalSwap(TimeRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeRange, _impl_.end_time_)
      + sizeof(TimeRange::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(TimeRange, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[108]);
}

// ===================================================================

class Rank::_Internal {
 public:
  static const ::clarifai::api::Annotation& annotation(const Rank* msg);
};

const ::clarifai::api::Annotation&
Rank::_Internal::annotation(const Rank* msg) {
  return *msg->_impl_.annotation_;
}
Rank::Rank(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Rank)
}
Rank::Rank(const Rank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rank* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_){nullptr}
    , decltype(_impl_.negate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_annotation()) {
    _this->_impl_.annotation_ = new ::clarifai::api::Annotation(*from._impl_.annotation_);
  }
  _this->_impl_.negate_ = from._impl_.negate_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Rank)
}

inline void Rank::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_){nullptr}
    , decltype(_impl_.negate_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rank::~Rank() {
  // @@protoc_insertion_point(destructor:clarifai.api.Rank)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rank::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.annotation_;
}

void Rank::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rank::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Rank)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.annotation_ != nullptr) {
    delete _impl_.annotation_;
  }
  _impl_.annotation_ = nullptr;
  _impl_.negate_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rank::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool negate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.negate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rank::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Rank)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool negate = 3;
  if (this->_internal_negate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_negate(), target);
  }

  // .clarifai.api.Annotation annotation = 4;
  if (this->_internal_has_annotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::annotation(this),
        _Internal::annotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Rank)
  return target;
}

size_t Rank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Rank)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Annotation annotation = 4;
  if (this->_internal_has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotation_);
  }

  // bool negate = 3;
  if (this->_internal_negate() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rank::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rank::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rank::GetClassData() const { return &_class_data_; }


void Rank::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rank*>(&to_msg);
  auto& from = static_cast<const Rank&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Rank)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_annotation()) {
    _this->_internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(
        from._internal_annotation());
  }
  if (from._internal_negate() != 0) {
    _this->_internal_set_negate(from._internal_negate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rank::CopyFrom(const Rank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rank::IsInitialized() const {
  return true;
}

void Rank::InternalSwap(Rank* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rank, _impl_.negate_)
      + sizeof(Rank::_impl_.negate_)
      - PROTOBUF_FIELD_OFFSET(Rank, _impl_.annotation_)>(
          reinterpret_cast<char*>(&_impl_.annotation_),
          reinterpret_cast<char*>(&other->_impl_.annotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rank::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[109]);
}

// ===================================================================

class AnnotationSearchMetrics::_Internal {
 public:
  static const ::clarifai::api::Search& ground_truth(const AnnotationSearchMetrics* msg);
  static const ::clarifai::api::Search& search_to_eval(const AnnotationSearchMetrics* msg);
  static const ::clarifai::api::EvalMetrics& metrics(const AnnotationSearchMetrics* msg);
  static const ::clarifai::api::Data& data(const AnnotationSearchMetrics* msg);
  static const ::clarifai::api::Visibility& visibility(const AnnotationSearchMetrics* msg);
};

const ::clarifai::api::Search&
AnnotationSearchMetrics::_Internal::ground_truth(const AnnotationSearchMetrics* msg) {
  return *msg->_impl_.ground_truth_;
}
const ::clarifai::api::Search&
AnnotationSearchMetrics::_Internal::search_to_eval(const AnnotationSearchMetrics* msg) {
  return *msg->_impl_.search_to_eval_;
}
const ::clarifai::api::EvalMetrics&
AnnotationSearchMetrics::_Internal::metrics(const AnnotationSearchMetrics* msg) {
  return *msg->_impl_.metrics_;
}
const ::clarifai::api::Data&
AnnotationSearchMetrics::_Internal::data(const AnnotationSearchMetrics* msg) {
  return *msg->_impl_.data_;
}
const ::clarifai::api::Visibility&
AnnotationSearchMetrics::_Internal::visibility(const AnnotationSearchMetrics* msg) {
  return *msg->_impl_.visibility_;
}
AnnotationSearchMetrics::AnnotationSearchMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AnnotationSearchMetrics)
}
AnnotationSearchMetrics::AnnotationSearchMetrics(const AnnotationSearchMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnnotationSearchMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ground_truth_){nullptr}
    , decltype(_impl_.search_to_eval_){nullptr}
    , decltype(_impl_.metrics_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.active_concept_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ground_truth()) {
    _this->_impl_.ground_truth_ = new ::clarifai::api::Search(*from._impl_.ground_truth_);
  }
  if (from._internal_has_search_to_eval()) {
    _this->_impl_.search_to_eval_ = new ::clarifai::api::Search(*from._impl_.search_to_eval_);
  }
  if (from._internal_has_metrics()) {
    _this->_impl_.metrics_ = new ::clarifai::api::EvalMetrics(*from._impl_.metrics_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::clarifai::api::Data(*from._impl_.data_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  _this->_impl_.active_concept_count_ = from._impl_.active_concept_count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AnnotationSearchMetrics)
}

inline void AnnotationSearchMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ground_truth_){nullptr}
    , decltype(_impl_.search_to_eval_){nullptr}
    , decltype(_impl_.metrics_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.active_concept_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AnnotationSearchMetrics::~AnnotationSearchMetrics() {
  // @@protoc_insertion_point(destructor:clarifai.api.AnnotationSearchMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnnotationSearchMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ground_truth_;
  if (this != internal_default_instance()) delete _impl_.search_to_eval_;
  if (this != internal_default_instance()) delete _impl_.metrics_;
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
}

void AnnotationSearchMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnnotationSearchMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AnnotationSearchMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ground_truth_ != nullptr) {
    delete _impl_.ground_truth_;
  }
  _impl_.ground_truth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.search_to_eval_ != nullptr) {
    delete _impl_.search_to_eval_;
  }
  _impl_.search_to_eval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metrics_ != nullptr) {
    delete _impl_.metrics_;
  }
  _impl_.metrics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  _impl_.active_concept_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotationSearchMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Search ground_truth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_truth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search search_to_eval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_to_eval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvalMetrics metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 active_concept_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.active_concept_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnotationSearchMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AnnotationSearchMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Search ground_truth = 1;
  if (this->_internal_has_ground_truth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ground_truth(this),
        _Internal::ground_truth(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Search search_to_eval = 2;
  if (this->_internal_has_search_to_eval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::search_to_eval(this),
        _Internal::search_to_eval(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.EvalMetrics metrics = 3;
  if (this->_internal_has_metrics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::metrics(this),
        _Internal::metrics(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Data data = 4;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // uint32 active_concept_count = 5;
  if (this->_internal_active_concept_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_active_concept_count(), target);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AnnotationSearchMetrics)
  return target;
}

size_t AnnotationSearchMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AnnotationSearchMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Search ground_truth = 1;
  if (this->_internal_has_ground_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ground_truth_);
  }

  // .clarifai.api.Search search_to_eval = 2;
  if (this->_internal_has_search_to_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.search_to_eval_);
  }

  // .clarifai.api.EvalMetrics metrics = 3;
  if (this->_internal_has_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metrics_);
  }

  // .clarifai.api.Data data = 4;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  // uint32 active_concept_count = 5;
  if (this->_internal_active_concept_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_active_concept_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnotationSearchMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnnotationSearchMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnotationSearchMetrics::GetClassData() const { return &_class_data_; }


void AnnotationSearchMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnnotationSearchMetrics*>(&to_msg);
  auto& from = static_cast<const AnnotationSearchMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AnnotationSearchMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ground_truth()) {
    _this->_internal_mutable_ground_truth()->::clarifai::api::Search::MergeFrom(
        from._internal_ground_truth());
  }
  if (from._internal_has_search_to_eval()) {
    _this->_internal_mutable_search_to_eval()->::clarifai::api::Search::MergeFrom(
        from._internal_search_to_eval());
  }
  if (from._internal_has_metrics()) {
    _this->_internal_mutable_metrics()->::clarifai::api::EvalMetrics::MergeFrom(
        from._internal_metrics());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::clarifai::api::Data::MergeFrom(
        from._internal_data());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  if (from._internal_active_concept_count() != 0) {
    _this->_internal_set_active_concept_count(from._internal_active_concept_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnotationSearchMetrics::CopyFrom(const AnnotationSearchMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AnnotationSearchMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationSearchMetrics::IsInitialized() const {
  return true;
}

void AnnotationSearchMetrics::InternalSwap(AnnotationSearchMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnnotationSearchMetrics, _impl_.active_concept_count_)
      + sizeof(AnnotationSearchMetrics::_impl_.active_concept_count_)
      - PROTOBUF_FIELD_OFFSET(AnnotationSearchMetrics, _impl_.ground_truth_)>(
          reinterpret_cast<char*>(&_impl_.ground_truth_),
          reinterpret_cast<char*>(&other->_impl_.ground_truth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationSearchMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[110]);
}

// ===================================================================

class Text::_Internal {
 public:
  static const ::clarifai::api::HostedURL& hosted(const Text* msg);
  static const ::clarifai::api::TextInfo& text_info(const Text* msg);
};

const ::clarifai::api::HostedURL&
Text::_Internal::hosted(const Text* msg) {
  return *msg->_impl_.hosted_;
}
const ::clarifai::api::TextInfo&
Text::_Internal::text_info(const Text* msg) {
  return *msg->_impl_.text_info_;
}
Text::Text(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Text)
}
Text::Text(const Text& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Text* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.raw_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.hosted_){nullptr}
    , decltype(_impl_.text_info_){nullptr}
    , decltype(_impl_.allow_duplicate_url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.raw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw().empty()) {
    _this->_impl_.raw_.Set(from._internal_raw(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_hosted()) {
    _this->_impl_.hosted_ = new ::clarifai::api::HostedURL(*from._impl_.hosted_);
  }
  if (from._internal_has_text_info()) {
    _this->_impl_.text_info_ = new ::clarifai::api::TextInfo(*from._impl_.text_info_);
  }
  _this->_impl_.allow_duplicate_url_ = from._impl_.allow_duplicate_url_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Text)
}

inline void Text::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.raw_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.hosted_){nullptr}
    , decltype(_impl_.text_info_){nullptr}
    , decltype(_impl_.allow_duplicate_url_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.raw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:clarifai.api.Text)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Text::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.raw_.Destroy();
  _impl_.url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.hosted_;
  if (this != internal_default_instance()) delete _impl_.text_info_;
}

void Text::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Text)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.raw_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.hosted_ != nullptr) {
    delete _impl_.hosted_;
  }
  _impl_.hosted_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.text_info_ != nullptr) {
    delete _impl_.text_info_;
  }
  _impl_.text_info_ = nullptr;
  _impl_.allow_duplicate_url_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Text::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string raw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_raw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Text.raw"));
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Text.url"));
        } else
          goto handle_unusual;
        continue;
      // bool allow_duplicate_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.allow_duplicate_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.HostedURL hosted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hosted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TextInfo text_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Text::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Text)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string raw = 1;
  if (!this->_internal_raw().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw().data(), static_cast<int>(this->_internal_raw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Text.raw");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_raw(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Text.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // bool allow_duplicate_url = 3;
  if (this->_internal_allow_duplicate_url() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_allow_duplicate_url(), target);
  }

  // .clarifai.api.HostedURL hosted = 4;
  if (this->_internal_has_hosted()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::hosted(this),
        _Internal::hosted(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.TextInfo text_info = 5;
  if (this->_internal_has_text_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::text_info(this),
        _Internal::text_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Text)
  return target;
}

size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Text)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string raw = 1;
  if (!this->_internal_raw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw());
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .clarifai.api.HostedURL hosted = 4;
  if (this->_internal_has_hosted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hosted_);
  }

  // .clarifai.api.TextInfo text_info = 5;
  if (this->_internal_has_text_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_info_);
  }

  // bool allow_duplicate_url = 3;
  if (this->_internal_allow_duplicate_url() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Text::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Text::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Text::GetClassData() const { return &_class_data_; }


void Text::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Text*>(&to_msg);
  auto& from = static_cast<const Text&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Text)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_raw().empty()) {
    _this->_internal_set_raw(from._internal_raw());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_has_hosted()) {
    _this->_internal_mutable_hosted()->::clarifai::api::HostedURL::MergeFrom(
        from._internal_hosted());
  }
  if (from._internal_has_text_info()) {
    _this->_internal_mutable_text_info()->::clarifai::api::TextInfo::MergeFrom(
        from._internal_text_info());
  }
  if (from._internal_allow_duplicate_url() != 0) {
    _this->_internal_set_allow_duplicate_url(from._internal_allow_duplicate_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  return true;
}

void Text::InternalSwap(Text* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.raw_, lhs_arena,
      &other->_impl_.raw_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Text, _impl_.allow_duplicate_url_)
      + sizeof(Text::_impl_.allow_duplicate_url_)
      - PROTOBUF_FIELD_OFFSET(Text, _impl_.hosted_)>(
          reinterpret_cast<char*>(&_impl_.hosted_),
          reinterpret_cast<char*>(&other->_impl_.hosted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Text::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[111]);
}

// ===================================================================

class TextInfo::_Internal {
 public:
};

TextInfo::TextInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TextInfo)
}
TextInfo::TextInfo(const TextInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encoding_){}
    , decltype(_impl_.char_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.encoding_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoding_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoding().empty()) {
    _this->_impl_.encoding_.Set(from._internal_encoding(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.char_count_ = from._impl_.char_count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TextInfo)
}

inline void TextInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encoding_){}
    , decltype(_impl_.char_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.encoding_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoding_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TextInfo::~TextInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TextInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encoding_.Destroy();
}

void TextInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TextInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encoding_.ClearToEmpty();
  _impl_.char_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 char_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.char_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string encoding = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_encoding();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.TextInfo.encoding"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TextInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 char_count = 1;
  if (this->_internal_char_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_char_count(), target);
  }

  // string encoding = 2;
  if (!this->_internal_encoding().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoding().data(), static_cast<int>(this->_internal_encoding().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TextInfo.encoding");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_encoding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TextInfo)
  return target;
}

size_t TextInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TextInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string encoding = 2;
  if (!this->_internal_encoding().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoding());
  }

  // int32 char_count = 1;
  if (this->_internal_char_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_char_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextInfo::GetClassData() const { return &_class_data_; }


void TextInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextInfo*>(&to_msg);
  auto& from = static_cast<const TextInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TextInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoding().empty()) {
    _this->_internal_set_encoding(from._internal_encoding());
  }
  if (from._internal_char_count() != 0) {
    _this->_internal_set_char_count(from._internal_char_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextInfo::CopyFrom(const TextInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TextInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextInfo::IsInitialized() const {
  return true;
}

void TextInfo::InternalSwap(TextInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encoding_, lhs_arena,
      &other->_impl_.encoding_, rhs_arena
  );
  swap(_impl_.char_count_, other->_impl_.char_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[112]);
}

// ===================================================================

class User::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const User* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_gdpr_consent(const User* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_tos_consent(const User* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_marketing_consent(const User* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_pii_consent(const User* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const User* msg);
  static const ::clarifai::api::Visibility& visibility(const User* msg);
  static const ::clarifai::api::UserDetail& user_detail(const User* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::created_at(const User* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::date_gdpr_consent(const User* msg) {
  return *msg->_impl_.date_gdpr_consent_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::date_tos_consent(const User* msg) {
  return *msg->_impl_.date_tos_consent_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::date_marketing_consent(const User* msg) {
  return *msg->_impl_.date_marketing_consent_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::date_pii_consent(const User* msg) {
  return *msg->_impl_.date_pii_consent_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
User::_Internal::metadata(const User* msg) {
  return *msg->_impl_.metadata_;
}
const ::clarifai::api::Visibility&
User::_Internal::visibility(const User* msg) {
  return *msg->_impl_.visibility_;
}
const ::clarifai::api::UserDetail&
User::_Internal::user_detail(const User* msg) {
  return *msg->_impl_.user_detail_;
}
void User::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void User::clear_date_gdpr_consent() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_gdpr_consent_ != nullptr) {
    delete _impl_.date_gdpr_consent_;
  }
  _impl_.date_gdpr_consent_ = nullptr;
}
void User::clear_date_tos_consent() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_tos_consent_ != nullptr) {
    delete _impl_.date_tos_consent_;
  }
  _impl_.date_tos_consent_ = nullptr;
}
void User::clear_date_marketing_consent() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_marketing_consent_ != nullptr) {
    delete _impl_.date_marketing_consent_;
  }
  _impl_.date_marketing_consent_ = nullptr;
}
void User::clear_date_pii_consent() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_pii_consent_ != nullptr) {
    delete _impl_.date_pii_consent_;
  }
  _impl_.date_pii_consent_ = nullptr;
}
void User::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  User* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.email_addresses_){from._impl_.email_addresses_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.primary_email_){}
    , decltype(_impl_.first_name_){}
    , decltype(_impl_.last_name_){}
    , decltype(_impl_.company_name_){}
    , decltype(_impl_.bill_type_){}
    , decltype(_impl_.job_title_){}
    , decltype(_impl_.job_role_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.date_gdpr_consent_){nullptr}
    , decltype(_impl_.date_tos_consent_){nullptr}
    , decltype(_impl_.date_marketing_consent_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.user_detail_){nullptr}
    , decltype(_impl_.date_pii_consent_){nullptr}
    , decltype(_impl_.teams_count_){}
    , decltype(_impl_.two_factor_auth_enabled_){}
    , decltype(_impl_.is_starred_){}
    , decltype(_impl_.star_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.primary_email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.primary_email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_primary_email().empty()) {
    _this->_impl_.primary_email_.Set(from._internal_primary_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.first_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.first_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_first_name().empty()) {
    _this->_impl_.first_name_.Set(from._internal_first_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.last_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_name().empty()) {
    _this->_impl_.last_name_.Set(from._internal_last_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.company_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.company_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_company_name().empty()) {
    _this->_impl_.company_name_.Set(from._internal_company_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bill_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bill_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bill_type().empty()) {
    _this->_impl_.bill_type_.Set(from._internal_bill_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.job_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job_title().empty()) {
    _this->_impl_.job_title_.Set(from._internal_job_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.job_role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job_role().empty()) {
    _this->_impl_.job_role_.Set(from._internal_job_role(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_date_gdpr_consent()) {
    _this->_impl_.date_gdpr_consent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_gdpr_consent_);
  }
  if (from._internal_has_date_tos_consent()) {
    _this->_impl_.date_tos_consent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_tos_consent_);
  }
  if (from._internal_has_date_marketing_consent()) {
    _this->_impl_.date_marketing_consent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_marketing_consent_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  if (from._internal_has_user_detail()) {
    _this->_impl_.user_detail_ = new ::clarifai::api::UserDetail(*from._impl_.user_detail_);
  }
  if (from._internal_has_date_pii_consent()) {
    _this->_impl_.date_pii_consent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_pii_consent_);
  }
  ::memcpy(&_impl_.teams_count_, &from._impl_.teams_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.star_count_) -
    reinterpret_cast<char*>(&_impl_.teams_count_)) + sizeof(_impl_.star_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.User)
}

inline void User::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.email_addresses_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.primary_email_){}
    , decltype(_impl_.first_name_){}
    , decltype(_impl_.last_name_){}
    , decltype(_impl_.company_name_){}
    , decltype(_impl_.bill_type_){}
    , decltype(_impl_.job_title_){}
    , decltype(_impl_.job_role_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.date_gdpr_consent_){nullptr}
    , decltype(_impl_.date_tos_consent_){nullptr}
    , decltype(_impl_.date_marketing_consent_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.user_detail_){nullptr}
    , decltype(_impl_.date_pii_consent_){nullptr}
    , decltype(_impl_.teams_count_){0u}
    , decltype(_impl_.two_factor_auth_enabled_){false}
    , decltype(_impl_.is_starred_){false}
    , decltype(_impl_.star_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.primary_email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.primary_email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.first_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.first_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.company_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.company_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bill_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bill_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.job_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.job_role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

User::~User() {
  // @@protoc_insertion_point(destructor:clarifai.api.User)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_addresses_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.primary_email_.Destroy();
  _impl_.first_name_.Destroy();
  _impl_.last_name_.Destroy();
  _impl_.company_name_.Destroy();
  _impl_.bill_type_.Destroy();
  _impl_.job_title_.Destroy();
  _impl_.job_role_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.date_gdpr_consent_;
  if (this != internal_default_instance()) delete _impl_.date_tos_consent_;
  if (this != internal_default_instance()) delete _impl_.date_marketing_consent_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
  if (this != internal_default_instance()) delete _impl_.user_detail_;
  if (this != internal_default_instance()) delete _impl_.date_pii_consent_;
}

void User::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_addresses_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.primary_email_.ClearToEmpty();
  _impl_.first_name_.ClearToEmpty();
  _impl_.last_name_.ClearToEmpty();
  _impl_.company_name_.ClearToEmpty();
  _impl_.bill_type_.ClearToEmpty();
  _impl_.job_title_.ClearToEmpty();
  _impl_.job_role_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.date_gdpr_consent_ != nullptr) {
    delete _impl_.date_gdpr_consent_;
  }
  _impl_.date_gdpr_consent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.date_tos_consent_ != nullptr) {
    delete _impl_.date_tos_consent_;
  }
  _impl_.date_tos_consent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.date_marketing_consent_ != nullptr) {
    delete _impl_.date_marketing_consent_;
  }
  _impl_.date_marketing_consent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user_detail_ != nullptr) {
    delete _impl_.user_detail_;
  }
  _impl_.user_detail_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.date_pii_consent_ != nullptr) {
    delete _impl_.date_pii_consent_;
  }
  _impl_.date_pii_consent_ = nullptr;
  ::memset(&_impl_.teams_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.star_count_) -
      reinterpret_cast<char*>(&_impl_.teams_count_)) + sizeof(_impl_.star_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.User.id"));
        } else
          goto handle_unusual;
        continue;
      // string primary_email = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_primary_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.User.primary_email"));
        } else
          goto handle_unusual;
        continue;
      // string first_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_first_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.User.first_name"));
        } else
          goto handle_unusual;
        continue;
      // string last_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_last_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.User.last_name"));
        } else
          goto handle_unusual;
        continue;
      // string company_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_company_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.User.company_name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bill_type = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_bill_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.User.bill_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_gdpr_consent = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_gdpr_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_tos_consent = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_tos_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_marketing_consent = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_marketing_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.EmailAddress email_addresses = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_email_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool two_factor_auth_enabled = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.two_factor_auth_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 teams_count = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.teams_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.UserDetail user_detail = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string job_title = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_job_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.User.job_title"));
        } else
          goto handle_unusual;
        continue;
      // string job_role = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_job_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.User.job_role"));
        } else
          goto handle_unusual;
        continue;
      // bool is_starred = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 star_count = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.star_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_pii_consent = 23 [deprecated = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_pii_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string primary_email = 2 [deprecated = true];
  if (!this->_internal_primary_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_primary_email().data(), static_cast<int>(this->_internal_primary_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.primary_email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_primary_email(), target);
  }

  // string first_name = 3;
  if (!this->_internal_first_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.first_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_first_name(), target);
  }

  // string last_name = 4;
  if (!this->_internal_last_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.last_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_last_name(), target);
  }

  // string company_name = 5;
  if (!this->_internal_company_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.company_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_company_name(), target);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // string bill_type = 7 [deprecated = true];
  if (!this->_internal_bill_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bill_type().data(), static_cast<int>(this->_internal_bill_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.bill_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_bill_type(), target);
  }

  // .google.protobuf.Timestamp date_gdpr_consent = 8 [deprecated = true];
  if (this->_internal_has_date_gdpr_consent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::date_gdpr_consent(this),
        _Internal::date_gdpr_consent(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp date_tos_consent = 9 [deprecated = true];
  if (this->_internal_has_date_tos_consent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::date_tos_consent(this),
        _Internal::date_tos_consent(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp date_marketing_consent = 10 [deprecated = true];
  if (this->_internal_has_date_marketing_consent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::date_marketing_consent(this),
        _Internal::date_marketing_consent(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct metadata = 11 [deprecated = true];
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.EmailAddress email_addresses = 12 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_email_addresses_size()); i < n; i++) {
    const auto& repfield = this->_internal_email_addresses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool two_factor_auth_enabled = 15 [deprecated = true];
  if (this->_internal_two_factor_auth_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_two_factor_auth_enabled(), target);
  }

  // uint32 teams_count = 16 [deprecated = true];
  if (this->_internal_teams_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_teams_count(), target);
  }

  // .clarifai.api.Visibility visibility = 17;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.UserDetail user_detail = 18;
  if (this->_internal_has_user_detail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::user_detail(this),
        _Internal::user_detail(this).GetCachedSize(), target, stream);
  }

  // string job_title = 19;
  if (!this->_internal_job_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_title().data(), static_cast<int>(this->_internal_job_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.job_title");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_job_title(), target);
  }

  // string job_role = 20;
  if (!this->_internal_job_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_role().data(), static_cast<int>(this->_internal_job_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.job_role");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_job_role(), target);
  }

  // bool is_starred = 21;
  if (this->_internal_is_starred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_is_starred(), target);
  }

  // int32 star_count = 22;
  if (this->_internal_star_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_star_count(), target);
  }

  // .google.protobuf.Timestamp date_pii_consent = 23 [deprecated = true];
  if (this->_internal_has_date_pii_consent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::date_pii_consent(this),
        _Internal::date_pii_consent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.User)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.EmailAddress email_addresses = 12 [deprecated = true];
  total_size += 1UL * this->_internal_email_addresses_size();
  for (const auto& msg : this->_impl_.email_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string primary_email = 2 [deprecated = true];
  if (!this->_internal_primary_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primary_email());
  }

  // string first_name = 3;
  if (!this->_internal_first_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 4;
  if (!this->_internal_last_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string company_name = 5;
  if (!this->_internal_company_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  // string bill_type = 7 [deprecated = true];
  if (!this->_internal_bill_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bill_type());
  }

  // string job_title = 19;
  if (!this->_internal_job_title().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_title());
  }

  // string job_role = 20;
  if (!this->_internal_job_role().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_role());
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp date_gdpr_consent = 8 [deprecated = true];
  if (this->_internal_has_date_gdpr_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_gdpr_consent_);
  }

  // .google.protobuf.Timestamp date_tos_consent = 9 [deprecated = true];
  if (this->_internal_has_date_tos_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_tos_consent_);
  }

  // .google.protobuf.Timestamp date_marketing_consent = 10 [deprecated = true];
  if (this->_internal_has_date_marketing_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_marketing_consent_);
  }

  // .google.protobuf.Struct metadata = 11 [deprecated = true];
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .clarifai.api.Visibility visibility = 17;
  if (this->_internal_has_visibility()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  // .clarifai.api.UserDetail user_detail = 18;
  if (this->_internal_has_user_detail()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_detail_);
  }

  // .google.protobuf.Timestamp date_pii_consent = 23 [deprecated = true];
  if (this->_internal_has_date_pii_consent()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_pii_consent_);
  }

  // uint32 teams_count = 16 [deprecated = true];
  if (this->_internal_teams_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_teams_count());
  }

  // bool two_factor_auth_enabled = 15 [deprecated = true];
  if (this->_internal_two_factor_auth_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_starred = 21;
  if (this->_internal_is_starred() != 0) {
    total_size += 2 + 1;
  }

  // int32 star_count = 22;
  if (this->_internal_star_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_star_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User::GetClassData() const { return &_class_data_; }


void User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<User*>(&to_msg);
  auto& from = static_cast<const User&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.User)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.email_addresses_.MergeFrom(from._impl_.email_addresses_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_primary_email().empty()) {
    _this->_internal_set_primary_email(from._internal_primary_email());
  }
  if (!from._internal_first_name().empty()) {
    _this->_internal_set_first_name(from._internal_first_name());
  }
  if (!from._internal_last_name().empty()) {
    _this->_internal_set_last_name(from._internal_last_name());
  }
  if (!from._internal_company_name().empty()) {
    _this->_internal_set_company_name(from._internal_company_name());
  }
  if (!from._internal_bill_type().empty()) {
    _this->_internal_set_bill_type(from._internal_bill_type());
  }
  if (!from._internal_job_title().empty()) {
    _this->_internal_set_job_title(from._internal_job_title());
  }
  if (!from._internal_job_role().empty()) {
    _this->_internal_set_job_role(from._internal_job_role());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_date_gdpr_consent()) {
    _this->_internal_mutable_date_gdpr_consent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date_gdpr_consent());
  }
  if (from._internal_has_date_tos_consent()) {
    _this->_internal_mutable_date_tos_consent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date_tos_consent());
  }
  if (from._internal_has_date_marketing_consent()) {
    _this->_internal_mutable_date_marketing_consent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date_marketing_consent());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  if (from._internal_has_user_detail()) {
    _this->_internal_mutable_user_detail()->::clarifai::api::UserDetail::MergeFrom(
        from._internal_user_detail());
  }
  if (from._internal_has_date_pii_consent()) {
    _this->_internal_mutable_date_pii_consent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date_pii_consent());
  }
  if (from._internal_teams_count() != 0) {
    _this->_internal_set_teams_count(from._internal_teams_count());
  }
  if (from._internal_two_factor_auth_enabled() != 0) {
    _this->_internal_set_two_factor_auth_enabled(from._internal_two_factor_auth_enabled());
  }
  if (from._internal_is_starred() != 0) {
    _this->_internal_set_is_starred(from._internal_is_starred());
  }
  if (from._internal_star_count() != 0) {
    _this->_internal_set_star_count(from._internal_star_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.email_addresses_.InternalSwap(&other->_impl_.email_addresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.primary_email_, lhs_arena,
      &other->_impl_.primary_email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.first_name_, lhs_arena,
      &other->_impl_.first_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_name_, lhs_arena,
      &other->_impl_.last_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.company_name_, lhs_arena,
      &other->_impl_.company_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bill_type_, lhs_arena,
      &other->_impl_.bill_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.job_title_, lhs_arena,
      &other->_impl_.job_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.job_role_, lhs_arena,
      &other->_impl_.job_role_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User, _impl_.star_count_)
      + sizeof(User::_impl_.star_count_)
      - PROTOBUF_FIELD_OFFSET(User, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[113]);
}

// ===================================================================

class UserDetail::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_gdpr_consent(const UserDetail* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_tos_consent(const UserDetail* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_marketing_consent(const UserDetail* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_pii_consent(const UserDetail* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const UserDetail* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserDetail::_Internal::date_gdpr_consent(const UserDetail* msg) {
  return *msg->_impl_.date_gdpr_consent_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserDetail::_Internal::date_tos_consent(const UserDetail* msg) {
  return *msg->_impl_.date_tos_consent_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserDetail::_Internal::date_marketing_consent(const UserDetail* msg) {
  return *msg->_impl_.date_marketing_consent_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserDetail::_Internal::date_pii_consent(const UserDetail* msg) {
  return *msg->_impl_.date_pii_consent_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
UserDetail::_Internal::metadata(const UserDetail* msg) {
  return *msg->_impl_.metadata_;
}
void UserDetail::clear_date_gdpr_consent() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_gdpr_consent_ != nullptr) {
    delete _impl_.date_gdpr_consent_;
  }
  _impl_.date_gdpr_consent_ = nullptr;
}
void UserDetail::clear_date_tos_consent() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_tos_consent_ != nullptr) {
    delete _impl_.date_tos_consent_;
  }
  _impl_.date_tos_consent_ = nullptr;
}
void UserDetail::clear_date_marketing_consent() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_marketing_consent_ != nullptr) {
    delete _impl_.date_marketing_consent_;
  }
  _impl_.date_marketing_consent_ = nullptr;
}
void UserDetail::clear_date_pii_consent() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_pii_consent_ != nullptr) {
    delete _impl_.date_pii_consent_;
  }
  _impl_.date_pii_consent_ = nullptr;
}
void UserDetail::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
UserDetail::UserDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.UserDetail)
}
UserDetail::UserDetail(const UserDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.email_addresses_){from._impl_.email_addresses_}
    , decltype(_impl_.primary_email_){}
    , decltype(_impl_.bill_type_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.date_gdpr_consent_){nullptr}
    , decltype(_impl_.date_tos_consent_){nullptr}
    , decltype(_impl_.date_marketing_consent_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.date_pii_consent_){nullptr}
    , decltype(_impl_.two_factor_auth_enabled_){}
    , decltype(_impl_.teams_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.primary_email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.primary_email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_primary_email().empty()) {
    _this->_impl_.primary_email_.Set(from._internal_primary_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bill_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bill_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bill_type().empty()) {
    _this->_impl_.bill_type_.Set(from._internal_bill_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_date_gdpr_consent()) {
    _this->_impl_.date_gdpr_consent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_gdpr_consent_);
  }
  if (from._internal_has_date_tos_consent()) {
    _this->_impl_.date_tos_consent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_tos_consent_);
  }
  if (from._internal_has_date_marketing_consent()) {
    _this->_impl_.date_marketing_consent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_marketing_consent_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_date_pii_consent()) {
    _this->_impl_.date_pii_consent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.date_pii_consent_);
  }
  ::memcpy(&_impl_.two_factor_auth_enabled_, &from._impl_.two_factor_auth_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.teams_count_) -
    reinterpret_cast<char*>(&_impl_.two_factor_auth_enabled_)) + sizeof(_impl_.teams_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.UserDetail)
}

inline void UserDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.email_addresses_){arena}
    , decltype(_impl_.primary_email_){}
    , decltype(_impl_.bill_type_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.date_gdpr_consent_){nullptr}
    , decltype(_impl_.date_tos_consent_){nullptr}
    , decltype(_impl_.date_marketing_consent_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.date_pii_consent_){nullptr}
    , decltype(_impl_.two_factor_auth_enabled_){false}
    , decltype(_impl_.teams_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.primary_email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.primary_email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bill_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bill_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserDetail::~UserDetail() {
  // @@protoc_insertion_point(destructor:clarifai.api.UserDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_addresses_.~RepeatedPtrField();
  _impl_.primary_email_.Destroy();
  _impl_.bill_type_.Destroy();
  _impl_.country_.Destroy();
  _impl_.state_.Destroy();
  if (this != internal_default_instance()) delete _impl_.date_gdpr_consent_;
  if (this != internal_default_instance()) delete _impl_.date_tos_consent_;
  if (this != internal_default_instance()) delete _impl_.date_marketing_consent_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.date_pii_consent_;
}

void UserDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.UserDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_addresses_.Clear();
  _impl_.primary_email_.ClearToEmpty();
  _impl_.bill_type_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.date_gdpr_consent_ != nullptr) {
    delete _impl_.date_gdpr_consent_;
  }
  _impl_.date_gdpr_consent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.date_tos_consent_ != nullptr) {
    delete _impl_.date_tos_consent_;
  }
  _impl_.date_tos_consent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.date_marketing_consent_ != nullptr) {
    delete _impl_.date_marketing_consent_;
  }
  _impl_.date_marketing_consent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.date_pii_consent_ != nullptr) {
    delete _impl_.date_pii_consent_;
  }
  _impl_.date_pii_consent_ = nullptr;
  ::memset(&_impl_.two_factor_auth_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.teams_count_) -
      reinterpret_cast<char*>(&_impl_.two_factor_auth_enabled_)) + sizeof(_impl_.teams_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string primary_email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_primary_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.UserDetail.primary_email"));
        } else
          goto handle_unusual;
        continue;
      // string bill_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bill_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.UserDetail.bill_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_gdpr_consent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_gdpr_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_tos_consent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_tos_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_marketing_consent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_marketing_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.EmailAddress email_addresses = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_email_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool two_factor_auth_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.two_factor_auth_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 teams_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.teams_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string country = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.UserDetail.country"));
        } else
          goto handle_unusual;
        continue;
      // string state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.UserDetail.state"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_pii_consent = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_pii_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.UserDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string primary_email = 1;
  if (!this->_internal_primary_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_primary_email().data(), static_cast<int>(this->_internal_primary_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserDetail.primary_email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_primary_email(), target);
  }

  // string bill_type = 2;
  if (!this->_internal_bill_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bill_type().data(), static_cast<int>(this->_internal_bill_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserDetail.bill_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bill_type(), target);
  }

  // .google.protobuf.Timestamp date_gdpr_consent = 3;
  if (this->_internal_has_date_gdpr_consent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::date_gdpr_consent(this),
        _Internal::date_gdpr_consent(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp date_tos_consent = 4;
  if (this->_internal_has_date_tos_consent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::date_tos_consent(this),
        _Internal::date_tos_consent(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp date_marketing_consent = 5;
  if (this->_internal_has_date_marketing_consent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::date_marketing_consent(this),
        _Internal::date_marketing_consent(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct metadata = 6;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.EmailAddress email_addresses = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_email_addresses_size()); i < n; i++) {
    const auto& repfield = this->_internal_email_addresses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool two_factor_auth_enabled = 9;
  if (this->_internal_two_factor_auth_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_two_factor_auth_enabled(), target);
  }

  // uint32 teams_count = 10;
  if (this->_internal_teams_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_teams_count(), target);
  }

  // string country = 11;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserDetail.country");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_country(), target);
  }

  // string state = 12;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserDetail.state");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_state(), target);
  }

  // .google.protobuf.Timestamp date_pii_consent = 13;
  if (this->_internal_has_date_pii_consent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::date_pii_consent(this),
        _Internal::date_pii_consent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.UserDetail)
  return target;
}

size_t UserDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.UserDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.EmailAddress email_addresses = 7;
  total_size += 1UL * this->_internal_email_addresses_size();
  for (const auto& msg : this->_impl_.email_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string primary_email = 1;
  if (!this->_internal_primary_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primary_email());
  }

  // string bill_type = 2;
  if (!this->_internal_bill_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bill_type());
  }

  // string country = 11;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string state = 12;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // .google.protobuf.Timestamp date_gdpr_consent = 3;
  if (this->_internal_has_date_gdpr_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_gdpr_consent_);
  }

  // .google.protobuf.Timestamp date_tos_consent = 4;
  if (this->_internal_has_date_tos_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_tos_consent_);
  }

  // .google.protobuf.Timestamp date_marketing_consent = 5;
  if (this->_internal_has_date_marketing_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_marketing_consent_);
  }

  // .google.protobuf.Struct metadata = 6;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .google.protobuf.Timestamp date_pii_consent = 13;
  if (this->_internal_has_date_pii_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_pii_consent_);
  }

  // bool two_factor_auth_enabled = 9;
  if (this->_internal_two_factor_auth_enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 teams_count = 10;
  if (this->_internal_teams_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teams_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserDetail::GetClassData() const { return &_class_data_; }


void UserDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserDetail*>(&to_msg);
  auto& from = static_cast<const UserDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.UserDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.email_addresses_.MergeFrom(from._impl_.email_addresses_);
  if (!from._internal_primary_email().empty()) {
    _this->_internal_set_primary_email(from._internal_primary_email());
  }
  if (!from._internal_bill_type().empty()) {
    _this->_internal_set_bill_type(from._internal_bill_type());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_has_date_gdpr_consent()) {
    _this->_internal_mutable_date_gdpr_consent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date_gdpr_consent());
  }
  if (from._internal_has_date_tos_consent()) {
    _this->_internal_mutable_date_tos_consent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date_tos_consent());
  }
  if (from._internal_has_date_marketing_consent()) {
    _this->_internal_mutable_date_marketing_consent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date_marketing_consent());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_date_pii_consent()) {
    _this->_internal_mutable_date_pii_consent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_date_pii_consent());
  }
  if (from._internal_two_factor_auth_enabled() != 0) {
    _this->_internal_set_two_factor_auth_enabled(from._internal_two_factor_auth_enabled());
  }
  if (from._internal_teams_count() != 0) {
    _this->_internal_set_teams_count(from._internal_teams_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserDetail::CopyFrom(const UserDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.UserDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDetail::IsInitialized() const {
  return true;
}

void UserDetail::InternalSwap(UserDetail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.email_addresses_.InternalSwap(&other->_impl_.email_addresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.primary_email_, lhs_arena,
      &other->_impl_.primary_email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bill_type_, lhs_arena,
      &other->_impl_.bill_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserDetail, _impl_.teams_count_)
      + sizeof(UserDetail::_impl_.teams_count_)
      - PROTOBUF_FIELD_OFFSET(UserDetail, _impl_.date_gdpr_consent_)>(
          reinterpret_cast<char*>(&_impl_.date_gdpr_consent_),
          reinterpret_cast<char*>(&other->_impl_.date_gdpr_consent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[114]);
}

// ===================================================================

class EmailAddress::_Internal {
 public:
};

EmailAddress::EmailAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.EmailAddress)
}
EmailAddress::EmailAddress(const EmailAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailAddress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , decltype(_impl_.primary_){}
    , decltype(_impl_.verified_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.primary_, &from._impl_.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.verified_) -
    reinterpret_cast<char*>(&_impl_.primary_)) + sizeof(_impl_.verified_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.EmailAddress)
}

inline void EmailAddress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , decltype(_impl_.primary_){false}
    , decltype(_impl_.verified_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailAddress::~EmailAddress() {
  // @@protoc_insertion_point(destructor:clarifai.api.EmailAddress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
}

void EmailAddress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.EmailAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_.ClearToEmpty();
  ::memset(&_impl_.primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.verified_) -
      reinterpret_cast<char*>(&_impl_.primary_)) + sizeof(_impl_.verified_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailAddress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.EmailAddress.email"));
        } else
          goto handle_unusual;
        continue;
      // bool primary = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool verified = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.EmailAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EmailAddress.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // bool primary = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_primary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_primary(), target);
  }

  // bool verified = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_verified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_verified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.EmailAddress)
  return target;
}

size_t EmailAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.EmailAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // bool primary = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_primary() != 0) {
    total_size += 1 + 1;
  }

  // bool verified = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_verified() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailAddress::GetClassData() const { return &_class_data_; }


void EmailAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailAddress*>(&to_msg);
  auto& from = static_cast<const EmailAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.EmailAddress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (from._internal_primary() != 0) {
    _this->_internal_set_primary(from._internal_primary());
  }
  if (from._internal_verified() != 0) {
    _this->_internal_set_verified(from._internal_verified());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailAddress::CopyFrom(const EmailAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.EmailAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailAddress::IsInitialized() const {
  return true;
}

void EmailAddress::InternalSwap(EmailAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmailAddress, _impl_.verified_)
      + sizeof(EmailAddress::_impl_.verified_)
      - PROTOBUF_FIELD_OFFSET(EmailAddress, _impl_.primary_)>(
          reinterpret_cast<char*>(&_impl_.primary_),
          reinterpret_cast<char*>(&other->_impl_.primary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailAddress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[115]);
}

// ===================================================================

class Password::_Internal {
 public:
};

Password::Password(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Password)
}
Password::Password(const Password& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Password* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.plaintext_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.plaintext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plaintext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plaintext().empty()) {
    _this->_impl_.plaintext_.Set(from._internal_plaintext(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Password)
}

inline void Password::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.plaintext_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.plaintext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plaintext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Password::~Password() {
  // @@protoc_insertion_point(destructor:clarifai.api.Password)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Password::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.plaintext_.Destroy();
}

void Password::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Password::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Password)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.plaintext_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Password::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string plaintext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_plaintext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Password.plaintext"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Password::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Password)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string plaintext = 1;
  if (!this->_internal_plaintext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plaintext().data(), static_cast<int>(this->_internal_plaintext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Password.plaintext");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_plaintext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Password)
  return target;
}

size_t Password::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Password)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string plaintext = 1;
  if (!this->_internal_plaintext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plaintext());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Password::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Password::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Password::GetClassData() const { return &_class_data_; }


void Password::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Password*>(&to_msg);
  auto& from = static_cast<const Password&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Password)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_plaintext().empty()) {
    _this->_internal_set_plaintext(from._internal_plaintext());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Password::CopyFrom(const Password& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Password)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Password::IsInitialized() const {
  return true;
}

void Password::InternalSwap(Password* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.plaintext_, lhs_arena,
      &other->_impl_.plaintext_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Password::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[116]);
}

// ===================================================================

class PasswordViolations::_Internal {
 public:
};

PasswordViolations::PasswordViolations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PasswordViolations)
}
PasswordViolations::PasswordViolations(const PasswordViolations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PasswordViolations* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.minimum_length_){}
    , decltype(_impl_.maximum_length_){}
    , decltype(_impl_.upper_case_needed_){}
    , decltype(_impl_.lower_case_needed_){}
    , decltype(_impl_.numeric_needed_){}
    , decltype(_impl_.non_alphanumeric_needed_){}
    , decltype(_impl_.password_reuse_){}
    , decltype(_impl_.exclude_names_){}
    , decltype(_impl_.exclude_email_){}
    , decltype(_impl_.no_confusing_letters_){}
    , decltype(_impl_.no_simple_passwords_){}
    , decltype(_impl_.no_common_vocabs_){}
    , decltype(_impl_.no_overlap_with_old_){}
    , decltype(_impl_.password_lifespan_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.minimum_length_, &from._impl_.minimum_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.password_lifespan_) -
    reinterpret_cast<char*>(&_impl_.minimum_length_)) + sizeof(_impl_.password_lifespan_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PasswordViolations)
}

inline void PasswordViolations::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.minimum_length_){false}
    , decltype(_impl_.maximum_length_){false}
    , decltype(_impl_.upper_case_needed_){false}
    , decltype(_impl_.lower_case_needed_){false}
    , decltype(_impl_.numeric_needed_){false}
    , decltype(_impl_.non_alphanumeric_needed_){false}
    , decltype(_impl_.password_reuse_){false}
    , decltype(_impl_.exclude_names_){false}
    , decltype(_impl_.exclude_email_){false}
    , decltype(_impl_.no_confusing_letters_){false}
    , decltype(_impl_.no_simple_passwords_){false}
    , decltype(_impl_.no_common_vocabs_){false}
    , decltype(_impl_.no_overlap_with_old_){false}
    , decltype(_impl_.password_lifespan_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PasswordViolations::~PasswordViolations() {
  // @@protoc_insertion_point(destructor:clarifai.api.PasswordViolations)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PasswordViolations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PasswordViolations::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PasswordViolations::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PasswordViolations)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.minimum_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.password_lifespan_) -
      reinterpret_cast<char*>(&_impl_.minimum_length_)) + sizeof(_impl_.password_lifespan_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PasswordViolations::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool minimum_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.minimum_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool maximum_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.maximum_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool upper_case_needed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.upper_case_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool lower_case_needed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.lower_case_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool numeric_needed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.numeric_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool non_alphanumeric_needed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.non_alphanumeric_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool password_reuse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.password_reuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool exclude_names = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.exclude_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool exclude_email = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.exclude_email_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool no_confusing_letters = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.no_confusing_letters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool no_simple_passwords = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.no_simple_passwords_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool no_common_vocabs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.no_common_vocabs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool no_overlap_with_old = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.no_overlap_with_old_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool password_lifespan = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.password_lifespan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PasswordViolations::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PasswordViolations)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool minimum_length = 1;
  if (this->_internal_minimum_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_minimum_length(), target);
  }

  // bool maximum_length = 2;
  if (this->_internal_maximum_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_maximum_length(), target);
  }

  // bool upper_case_needed = 3;
  if (this->_internal_upper_case_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_upper_case_needed(), target);
  }

  // bool lower_case_needed = 4;
  if (this->_internal_lower_case_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_lower_case_needed(), target);
  }

  // bool numeric_needed = 5;
  if (this->_internal_numeric_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_numeric_needed(), target);
  }

  // bool non_alphanumeric_needed = 6;
  if (this->_internal_non_alphanumeric_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_non_alphanumeric_needed(), target);
  }

  // bool password_reuse = 7;
  if (this->_internal_password_reuse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_password_reuse(), target);
  }

  // bool exclude_names = 8;
  if (this->_internal_exclude_names() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_exclude_names(), target);
  }

  // bool exclude_email = 9;
  if (this->_internal_exclude_email() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_exclude_email(), target);
  }

  // bool no_confusing_letters = 10;
  if (this->_internal_no_confusing_letters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_no_confusing_letters(), target);
  }

  // bool no_simple_passwords = 11;
  if (this->_internal_no_simple_passwords() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_no_simple_passwords(), target);
  }

  // bool no_common_vocabs = 12;
  if (this->_internal_no_common_vocabs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_no_common_vocabs(), target);
  }

  // bool no_overlap_with_old = 13;
  if (this->_internal_no_overlap_with_old() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_no_overlap_with_old(), target);
  }

  // bool password_lifespan = 14;
  if (this->_internal_password_lifespan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_password_lifespan(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PasswordViolations)
  return target;
}

size_t PasswordViolations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PasswordViolations)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool minimum_length = 1;
  if (this->_internal_minimum_length() != 0) {
    total_size += 1 + 1;
  }

  // bool maximum_length = 2;
  if (this->_internal_maximum_length() != 0) {
    total_size += 1 + 1;
  }

  // bool upper_case_needed = 3;
  if (this->_internal_upper_case_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool lower_case_needed = 4;
  if (this->_internal_lower_case_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool numeric_needed = 5;
  if (this->_internal_numeric_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool non_alphanumeric_needed = 6;
  if (this->_internal_non_alphanumeric_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool password_reuse = 7;
  if (this->_internal_password_reuse() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_names = 8;
  if (this->_internal_exclude_names() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_email = 9;
  if (this->_internal_exclude_email() != 0) {
    total_size += 1 + 1;
  }

  // bool no_confusing_letters = 10;
  if (this->_internal_no_confusing_letters() != 0) {
    total_size += 1 + 1;
  }

  // bool no_simple_passwords = 11;
  if (this->_internal_no_simple_passwords() != 0) {
    total_size += 1 + 1;
  }

  // bool no_common_vocabs = 12;
  if (this->_internal_no_common_vocabs() != 0) {
    total_size += 1 + 1;
  }

  // bool no_overlap_with_old = 13;
  if (this->_internal_no_overlap_with_old() != 0) {
    total_size += 1 + 1;
  }

  // bool password_lifespan = 14;
  if (this->_internal_password_lifespan() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PasswordViolations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PasswordViolations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PasswordViolations::GetClassData() const { return &_class_data_; }


void PasswordViolations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PasswordViolations*>(&to_msg);
  auto& from = static_cast<const PasswordViolations&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PasswordViolations)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_minimum_length() != 0) {
    _this->_internal_set_minimum_length(from._internal_minimum_length());
  }
  if (from._internal_maximum_length() != 0) {
    _this->_internal_set_maximum_length(from._internal_maximum_length());
  }
  if (from._internal_upper_case_needed() != 0) {
    _this->_internal_set_upper_case_needed(from._internal_upper_case_needed());
  }
  if (from._internal_lower_case_needed() != 0) {
    _this->_internal_set_lower_case_needed(from._internal_lower_case_needed());
  }
  if (from._internal_numeric_needed() != 0) {
    _this->_internal_set_numeric_needed(from._internal_numeric_needed());
  }
  if (from._internal_non_alphanumeric_needed() != 0) {
    _this->_internal_set_non_alphanumeric_needed(from._internal_non_alphanumeric_needed());
  }
  if (from._internal_password_reuse() != 0) {
    _this->_internal_set_password_reuse(from._internal_password_reuse());
  }
  if (from._internal_exclude_names() != 0) {
    _this->_internal_set_exclude_names(from._internal_exclude_names());
  }
  if (from._internal_exclude_email() != 0) {
    _this->_internal_set_exclude_email(from._internal_exclude_email());
  }
  if (from._internal_no_confusing_letters() != 0) {
    _this->_internal_set_no_confusing_letters(from._internal_no_confusing_letters());
  }
  if (from._internal_no_simple_passwords() != 0) {
    _this->_internal_set_no_simple_passwords(from._internal_no_simple_passwords());
  }
  if (from._internal_no_common_vocabs() != 0) {
    _this->_internal_set_no_common_vocabs(from._internal_no_common_vocabs());
  }
  if (from._internal_no_overlap_with_old() != 0) {
    _this->_internal_set_no_overlap_with_old(from._internal_no_overlap_with_old());
  }
  if (from._internal_password_lifespan() != 0) {
    _this->_internal_set_password_lifespan(from._internal_password_lifespan());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PasswordViolations::CopyFrom(const PasswordViolations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PasswordViolations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordViolations::IsInitialized() const {
  return true;
}

void PasswordViolations::InternalSwap(PasswordViolations* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PasswordViolations, _impl_.password_lifespan_)
      + sizeof(PasswordViolations::_impl_.password_lifespan_)
      - PROTOBUF_FIELD_OFFSET(PasswordViolations, _impl_.minimum_length_)>(
          reinterpret_cast<char*>(&_impl_.minimum_length_),
          reinterpret_cast<char*>(&other->_impl_.minimum_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PasswordViolations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[117]);
}

// ===================================================================

class Video::_Internal {
 public:
  static const ::clarifai::api::HostedURL& hosted(const Video* msg);
  static const ::clarifai::api::VideoInfo& video_info(const Video* msg);
};

const ::clarifai::api::HostedURL&
Video::_Internal::hosted(const Video* msg) {
  return *msg->_impl_.hosted_;
}
const ::clarifai::api::VideoInfo&
Video::_Internal::video_info(const Video* msg) {
  return *msg->_impl_.video_info_;
}
Video::Video(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Video)
}
Video::Video(const Video& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Video* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.base64_){}
    , decltype(_impl_.thumbnail_url_){}
    , decltype(_impl_.hosted_){nullptr}
    , decltype(_impl_.video_info_){nullptr}
    , decltype(_impl_.allow_duplicate_url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.base64_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base64_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base64().empty()) {
    _this->_impl_.base64_.Set(from._internal_base64(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnail_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_thumbnail_url().empty()) {
    _this->_impl_.thumbnail_url_.Set(from._internal_thumbnail_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_hosted()) {
    _this->_impl_.hosted_ = new ::clarifai::api::HostedURL(*from._impl_.hosted_);
  }
  if (from._internal_has_video_info()) {
    _this->_impl_.video_info_ = new ::clarifai::api::VideoInfo(*from._impl_.video_info_);
  }
  _this->_impl_.allow_duplicate_url_ = from._impl_.allow_duplicate_url_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Video)
}

inline void Video::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.base64_){}
    , decltype(_impl_.thumbnail_url_){}
    , decltype(_impl_.hosted_){nullptr}
    , decltype(_impl_.video_info_){nullptr}
    , decltype(_impl_.allow_duplicate_url_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base64_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base64_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnail_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Video::~Video() {
  // @@protoc_insertion_point(destructor:clarifai.api.Video)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Video::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.base64_.Destroy();
  _impl_.thumbnail_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.hosted_;
  if (this != internal_default_instance()) delete _impl_.video_info_;
}

void Video::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Video::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Video)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.base64_.ClearToEmpty();
  _impl_.thumbnail_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.hosted_ != nullptr) {
    delete _impl_.hosted_;
  }
  _impl_.hosted_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.video_info_ != nullptr) {
    delete _impl_.video_info_;
  }
  _impl_.video_info_ = nullptr;
  _impl_.allow_duplicate_url_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Video::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Video.url"));
        } else
          goto handle_unusual;
        continue;
      // bytes base64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_base64();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_duplicate_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.allow_duplicate_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string thumbnail_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Video.thumbnail_url"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.HostedURL hosted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_hosted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.VideoInfo video_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Video::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Video)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Video.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // bytes base64 = 2;
  if (!this->_internal_base64().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_base64(), target);
  }

  // bool allow_duplicate_url = 4;
  if (this->_internal_allow_duplicate_url() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_duplicate_url(), target);
  }

  // string thumbnail_url = 5;
  if (!this->_internal_thumbnail_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Video.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_thumbnail_url(), target);
  }

  // .clarifai.api.HostedURL hosted = 6;
  if (this->_internal_has_hosted()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::hosted(this),
        _Internal::hosted(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.VideoInfo video_info = 7;
  if (this->_internal_has_video_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::video_info(this),
        _Internal::video_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Video)
  return target;
}

size_t Video::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Video)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // bytes base64 = 2;
  if (!this->_internal_base64().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_base64());
  }

  // string thumbnail_url = 5;
  if (!this->_internal_thumbnail_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thumbnail_url());
  }

  // .clarifai.api.HostedURL hosted = 6;
  if (this->_internal_has_hosted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hosted_);
  }

  // .clarifai.api.VideoInfo video_info = 7;
  if (this->_internal_has_video_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.video_info_);
  }

  // bool allow_duplicate_url = 4;
  if (this->_internal_allow_duplicate_url() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Video::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Video::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Video::GetClassData() const { return &_class_data_; }


void Video::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Video*>(&to_msg);
  auto& from = static_cast<const Video&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Video)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_base64().empty()) {
    _this->_internal_set_base64(from._internal_base64());
  }
  if (!from._internal_thumbnail_url().empty()) {
    _this->_internal_set_thumbnail_url(from._internal_thumbnail_url());
  }
  if (from._internal_has_hosted()) {
    _this->_internal_mutable_hosted()->::clarifai::api::HostedURL::MergeFrom(
        from._internal_hosted());
  }
  if (from._internal_has_video_info()) {
    _this->_internal_mutable_video_info()->::clarifai::api::VideoInfo::MergeFrom(
        from._internal_video_info());
  }
  if (from._internal_allow_duplicate_url() != 0) {
    _this->_internal_set_allow_duplicate_url(from._internal_allow_duplicate_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Video::CopyFrom(const Video& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Video::IsInitialized() const {
  return true;
}

void Video::InternalSwap(Video* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.base64_, lhs_arena,
      &other->_impl_.base64_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnail_url_, lhs_arena,
      &other->_impl_.thumbnail_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Video, _impl_.allow_duplicate_url_)
      + sizeof(Video::_impl_.allow_duplicate_url_)
      - PROTOBUF_FIELD_OFFSET(Video, _impl_.hosted_)>(
          reinterpret_cast<char*>(&_impl_.hosted_),
          reinterpret_cast<char*>(&other->_impl_.hosted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Video::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[118]);
}

// ===================================================================

class VideoInfo::_Internal {
 public:
};

VideoInfo::VideoInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.VideoInfo)
}
VideoInfo::VideoInfo(const VideoInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.video_format_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.fps_){}
    , decltype(_impl_.bit_rate_){}
    , decltype(_impl_.frame_count_){}
    , decltype(_impl_.duration_seconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.video_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_video_format().empty()) {
    _this->_impl_.video_format_.Set(from._internal_video_format(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_seconds_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.duration_seconds_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.VideoInfo)
}

inline void VideoInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.video_format_){}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.fps_){0}
    , decltype(_impl_.bit_rate_){0}
    , decltype(_impl_.frame_count_){0}
    , decltype(_impl_.duration_seconds_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.video_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoInfo::~VideoInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.VideoInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.video_format_.Destroy();
}

void VideoInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.VideoInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.video_format_.ClearToEmpty();
  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.duration_seconds_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.duration_seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float fps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string video_format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_video_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.VideoInfo.video_format"));
        } else
          goto handle_unusual;
        continue;
      // int32 bit_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.bit_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 frame_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.frame_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float duration_seconds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.VideoInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // float fps = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fps = this->_internal_fps();
  uint32_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_fps(), target);
  }

  // string video_format = 4;
  if (!this->_internal_video_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_video_format().data(), static_cast<int>(this->_internal_video_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.VideoInfo.video_format");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_video_format(), target);
  }

  // int32 bit_rate = 5;
  if (this->_internal_bit_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_bit_rate(), target);
  }

  // int32 frame_count = 6;
  if (this->_internal_frame_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_frame_count(), target);
  }

  // float duration_seconds = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = this->_internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_duration_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.VideoInfo)
  return target;
}

size_t VideoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.VideoInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string video_format = 4;
  if (!this->_internal_video_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_video_format());
  }

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // float fps = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fps = this->_internal_fps();
  uint32_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    total_size += 1 + 4;
  }

  // int32 bit_rate = 5;
  if (this->_internal_bit_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bit_rate());
  }

  // int32 frame_count = 6;
  if (this->_internal_frame_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frame_count());
  }

  // float duration_seconds = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = this->_internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoInfo::GetClassData() const { return &_class_data_; }


void VideoInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoInfo*>(&to_msg);
  auto& from = static_cast<const VideoInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.VideoInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_video_format().empty()) {
    _this->_internal_set_video_format(from._internal_video_format());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fps = from._internal_fps();
  uint32_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    _this->_internal_set_fps(from._internal_fps());
  }
  if (from._internal_bit_rate() != 0) {
    _this->_internal_set_bit_rate(from._internal_bit_rate());
  }
  if (from._internal_frame_count() != 0) {
    _this->_internal_set_frame_count(from._internal_frame_count());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = from._internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    _this->_internal_set_duration_seconds(from._internal_duration_seconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoInfo::CopyFrom(const VideoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.VideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoInfo::IsInitialized() const {
  return true;
}

void VideoInfo::InternalSwap(VideoInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.video_format_, lhs_arena,
      &other->_impl_.video_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoInfo, _impl_.duration_seconds_)
      + sizeof(VideoInfo::_impl_.duration_seconds_)
      - PROTOBUF_FIELD_OFFSET(VideoInfo, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[119]);
}

// ===================================================================

class Workflow::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Workflow* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const Workflow* msg);
  static const ::clarifai::api::Visibility& visibility(const Workflow* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Workflow* msg);
  static const ::clarifai::api::WorkflowVersion& version(const Workflow* msg);
  static const ::clarifai::api::BookmarkOrigin& bookmark_origin(const Workflow* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Workflow::_Internal::created_at(const Workflow* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Workflow::_Internal::metadata(const Workflow* msg) {
  return *msg->_impl_.metadata_;
}
const ::clarifai::api::Visibility&
Workflow::_Internal::visibility(const Workflow* msg) {
  return *msg->_impl_.visibility_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Workflow::_Internal::modified_at(const Workflow* msg) {
  return *msg->_impl_.modified_at_;
}
const ::clarifai::api::WorkflowVersion&
Workflow::_Internal::version(const Workflow* msg) {
  return *msg->_impl_.version_;
}
const ::clarifai::api::BookmarkOrigin&
Workflow::_Internal::bookmark_origin(const Workflow* msg) {
  return *msg->_impl_.bookmark_origin_;
}
void Workflow::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Workflow::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
void Workflow::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
Workflow::Workflow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Workflow)
}
Workflow::Workflow(const Workflow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Workflow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){from._impl_.nodes_}
    , decltype(_impl_.use_cases_){from._impl_.use_cases_}
    , decltype(_impl_.check_consents_){from._impl_.check_consents_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.bookmark_origin_){nullptr}
    , decltype(_impl_.is_starred_){}
    , decltype(_impl_.star_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notes().empty()) {
    _this->_impl_.notes_.Set(from._internal_notes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::clarifai::api::WorkflowVersion(*from._impl_.version_);
  }
  if (from._internal_has_bookmark_origin()) {
    _this->_impl_.bookmark_origin_ = new ::clarifai::api::BookmarkOrigin(*from._impl_.bookmark_origin_);
  }
  ::memcpy(&_impl_.is_starred_, &from._impl_.is_starred_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.star_count_) -
    reinterpret_cast<char*>(&_impl_.is_starred_)) + sizeof(_impl_.star_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Workflow)
}

inline void Workflow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){arena}
    , decltype(_impl_.use_cases_){arena}
    , decltype(_impl_.check_consents_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.bookmark_origin_){nullptr}
    , decltype(_impl_.is_starred_){false}
    , decltype(_impl_.star_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Workflow::~Workflow() {
  // @@protoc_insertion_point(destructor:clarifai.api.Workflow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Workflow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~RepeatedPtrField();
  _impl_.use_cases_.~RepeatedPtrField();
  _impl_.check_consents_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.description_.Destroy();
  _impl_.notes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.version_;
  if (this != internal_default_instance()) delete _impl_.bookmark_origin_;
}

void Workflow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Workflow::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Workflow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  _impl_.use_cases_.Clear();
  _impl_.check_consents_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.notes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.version_ != nullptr) {
    delete _impl_.version_;
  }
  _impl_.version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bookmark_origin_ != nullptr) {
    delete _impl_.bookmark_origin_;
  }
  _impl_.bookmark_origin_ = nullptr;
  ::memset(&_impl_.is_starred_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.star_count_) -
      reinterpret_cast<char*>(&_impl_.is_starred_)) + sizeof(_impl_.star_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Workflow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Workflow.id"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Workflow.app_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowNode nodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Workflow.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.WorkflowVersion version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_starred = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 star_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.star_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Workflow.description"));
        } else
          goto handle_unusual;
        continue;
      // string notes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_notes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Workflow.notes"));
        } else
          goto handle_unusual;
        continue;
      // repeated string use_cases = 14 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_use_cases();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Workflow.use_cases"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string check_consents = 15 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_check_consents();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Workflow.check_consents"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.BookmarkOrigin bookmark_origin = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_bookmark_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Workflow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Workflow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.WorkflowNode nodes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  // string user_id = 7;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.user_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_id(), target);
  }

  // .google.protobuf.Timestamp modified_at = 8;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.WorkflowVersion version = 9;
  if (this->_internal_has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // bool is_starred = 10;
  if (this->_internal_is_starred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_starred(), target);
  }

  // int32 star_count = 11;
  if (this->_internal_star_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_star_count(), target);
  }

  // string description = 12;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.description");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_description(), target);
  }

  // string notes = 13;
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.notes");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_notes(), target);
  }

  // repeated string use_cases = 14 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (int i = 0, n = this->_internal_use_cases_size(); i < n; i++) {
    const auto& s = this->_internal_use_cases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.use_cases");
    target = stream->WriteString(14, s, target);
  }

  // repeated string check_consents = 15 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (int i = 0, n = this->_internal_check_consents_size(); i < n; i++) {
    const auto& s = this->_internal_check_consents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.check_consents");
    target = stream->WriteString(15, s, target);
  }

  // .clarifai.api.BookmarkOrigin bookmark_origin = 16;
  if (this->_internal_has_bookmark_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::bookmark_origin(this),
        _Internal::bookmark_origin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Workflow)
  return target;
}

size_t Workflow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Workflow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowNode nodes = 4;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string use_cases = 14 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.use_cases_.size());
  for (int i = 0, n = _impl_.use_cases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.use_cases_.Get(i));
  }

  // repeated string check_consents = 15 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.check_consents_.size());
  for (int i = 0, n = _impl_.check_consents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.check_consents_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 7;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string description = 12;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string notes = 13;
  if (!this->_internal_notes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  // .google.protobuf.Timestamp modified_at = 8;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .clarifai.api.WorkflowVersion version = 9;
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.version_);
  }

  // .clarifai.api.BookmarkOrigin bookmark_origin = 16;
  if (this->_internal_has_bookmark_origin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bookmark_origin_);
  }

  // bool is_starred = 10;
  if (this->_internal_is_starred() != 0) {
    total_size += 1 + 1;
  }

  // int32 star_count = 11;
  if (this->_internal_star_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_star_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Workflow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Workflow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Workflow::GetClassData() const { return &_class_data_; }


void Workflow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Workflow*>(&to_msg);
  auto& from = static_cast<const Workflow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Workflow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  _this->_impl_.use_cases_.MergeFrom(from._impl_.use_cases_);
  _this->_impl_.check_consents_.MergeFrom(from._impl_.check_consents_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_notes().empty()) {
    _this->_internal_set_notes(from._internal_notes());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_version()) {
    _this->_internal_mutable_version()->::clarifai::api::WorkflowVersion::MergeFrom(
        from._internal_version());
  }
  if (from._internal_has_bookmark_origin()) {
    _this->_internal_mutable_bookmark_origin()->::clarifai::api::BookmarkOrigin::MergeFrom(
        from._internal_bookmark_origin());
  }
  if (from._internal_is_starred() != 0) {
    _this->_internal_set_is_starred(from._internal_is_starred());
  }
  if (from._internal_star_count() != 0) {
    _this->_internal_set_star_count(from._internal_star_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Workflow::CopyFrom(const Workflow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Workflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workflow::IsInitialized() const {
  return true;
}

void Workflow::InternalSwap(Workflow* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  _impl_.use_cases_.InternalSwap(&other->_impl_.use_cases_);
  _impl_.check_consents_.InternalSwap(&other->_impl_.check_consents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notes_, lhs_arena,
      &other->_impl_.notes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Workflow, _impl_.star_count_)
      + sizeof(Workflow::_impl_.star_count_)
      - PROTOBUF_FIELD_OFFSET(Workflow, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Workflow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[120]);
}

// ===================================================================

class WorkflowVersion::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const WorkflowVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const WorkflowVersion* msg);
  static const ::clarifai::api::Visibility& visibility(const WorkflowVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const WorkflowVersion* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
WorkflowVersion::_Internal::created_at(const WorkflowVersion* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
WorkflowVersion::_Internal::modified_at(const WorkflowVersion* msg) {
  return *msg->_impl_.modified_at_;
}
const ::clarifai::api::Visibility&
WorkflowVersion::_Internal::visibility(const WorkflowVersion* msg) {
  return *msg->_impl_.visibility_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
WorkflowVersion::_Internal::metadata(const WorkflowVersion* msg) {
  return *msg->_impl_.metadata_;
}
void WorkflowVersion::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void WorkflowVersion::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void WorkflowVersion::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
WorkflowVersion::WorkflowVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.WorkflowVersion)
}
WorkflowVersion::WorkflowVersion(const WorkflowVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkflowVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){from._impl_.nodes_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.license_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    _this->_impl_.workflow_id_.Set(from._internal_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_license().empty()) {
    _this->_impl_.license_.Set(from._internal_license(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowVersion)
}

inline void WorkflowVersion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.license_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkflowVersion::~WorkflowVersion() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkflowVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.workflow_id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.description_.Destroy();
  _impl_.license_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void WorkflowVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkflowVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.workflow_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.license_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.WorkflowVersion.id"));
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.WorkflowVersion.workflow_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowNode nodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.WorkflowVersion.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.WorkflowVersion.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string description = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.WorkflowVersion.description"));
        } else
          goto handle_unusual;
        continue;
      // string license = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_license();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.WorkflowVersion.license"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 4;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Visibility visibility = 5;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.WorkflowNode nodes = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct metadata = 7;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // string app_id = 8;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.app_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_app_id(), target);
  }

  // string user_id = 9;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.user_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_user_id(), target);
  }

  // string description = 10;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.description");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_description(), target);
  }

  // string license = 11;
  if (!this->_internal_license().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.license");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_license(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowVersion)
  return target;
}

size_t WorkflowVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowNode nodes = 6;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // string app_id = 8;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 9;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string description = 10;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string license = 11;
  if (!this->_internal_license().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 4;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .clarifai.api.Visibility visibility = 5;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  // .google.protobuf.Struct metadata = 7;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkflowVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowVersion::GetClassData() const { return &_class_data_; }


void WorkflowVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkflowVersion*>(&to_msg);
  auto& from = static_cast<const WorkflowVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowVersion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_workflow_id().empty()) {
    _this->_internal_set_workflow_id(from._internal_workflow_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_license().empty()) {
    _this->_internal_set_license(from._internal_license());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowVersion::CopyFrom(const WorkflowVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowVersion::IsInitialized() const {
  return true;
}

void WorkflowVersion::InternalSwap(WorkflowVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_id_, lhs_arena,
      &other->_impl_.workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.license_, lhs_arena,
      &other->_impl_.license_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkflowVersion, _impl_.metadata_)
      + sizeof(WorkflowVersion::_impl_.metadata_)
      - PROTOBUF_FIELD_OFFSET(WorkflowVersion, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[121]);
}

// ===================================================================

class WorkflowNode::_Internal {
 public:
  static const ::clarifai::api::Model& model(const WorkflowNode* msg);
  static const ::clarifai::api::OutputInfo& output_info_override(const WorkflowNode* msg);
};

const ::clarifai::api::Model&
WorkflowNode::_Internal::model(const WorkflowNode* msg) {
  return *msg->_impl_.model_;
}
const ::clarifai::api::OutputInfo&
WorkflowNode::_Internal::output_info_override(const WorkflowNode* msg) {
  return *msg->_impl_.output_info_override_;
}
WorkflowNode::WorkflowNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.WorkflowNode)
}
WorkflowNode::WorkflowNode(const WorkflowNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkflowNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_inputs_){from._impl_.node_inputs_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.model_){nullptr}
    , decltype(_impl_.output_info_override_){nullptr}
    , decltype(_impl_.suppress_output_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_model()) {
    _this->_impl_.model_ = new ::clarifai::api::Model(*from._impl_.model_);
  }
  if (from._internal_has_output_info_override()) {
    _this->_impl_.output_info_override_ = new ::clarifai::api::OutputInfo(*from._impl_.output_info_override_);
  }
  _this->_impl_.suppress_output_ = from._impl_.suppress_output_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowNode)
}

inline void WorkflowNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_inputs_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.model_){nullptr}
    , decltype(_impl_.output_info_override_){nullptr}
    , decltype(_impl_.suppress_output_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkflowNode::~WorkflowNode() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkflowNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_inputs_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.model_;
  if (this != internal_default_instance()) delete _impl_.output_info_override_;
}

void WorkflowNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkflowNode::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_inputs_.Clear();
  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.model_ != nullptr) {
    delete _impl_.model_;
  }
  _impl_.model_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.output_info_override_ != nullptr) {
    delete _impl_.output_info_override_;
  }
  _impl_.output_info_override_ = nullptr;
  _impl_.suppress_output_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.WorkflowNode.id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.NodeInput node_inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool suppress_output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.suppress_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.OutputInfo output_info_override = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_info_override(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowNode.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.Model model = 2;
  if (this->_internal_has_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::model(this),
        _Internal::model(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.NodeInput node_inputs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_inputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_node_inputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool suppress_output = 4;
  if (this->_internal_suppress_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_suppress_output(), target);
  }

  // .clarifai.api.OutputInfo output_info_override = 5;
  if (this->_internal_has_output_info_override()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::output_info_override(this),
        _Internal::output_info_override(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowNode)
  return target;
}

size_t WorkflowNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.NodeInput node_inputs = 3;
  total_size += 1UL * this->_internal_node_inputs_size();
  for (const auto& msg : this->_impl_.node_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.Model model = 2;
  if (this->_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_);
  }

  // .clarifai.api.OutputInfo output_info_override = 5;
  if (this->_internal_has_output_info_override()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.output_info_override_);
  }

  // bool suppress_output = 4;
  if (this->_internal_suppress_output() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkflowNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowNode::GetClassData() const { return &_class_data_; }


void WorkflowNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkflowNode*>(&to_msg);
  auto& from = static_cast<const WorkflowNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.node_inputs_.MergeFrom(from._impl_.node_inputs_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_model()) {
    _this->_internal_mutable_model()->::clarifai::api::Model::MergeFrom(
        from._internal_model());
  }
  if (from._internal_has_output_info_override()) {
    _this->_internal_mutable_output_info_override()->::clarifai::api::OutputInfo::MergeFrom(
        from._internal_output_info_override());
  }
  if (from._internal_suppress_output() != 0) {
    _this->_internal_set_suppress_output(from._internal_suppress_output());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowNode::CopyFrom(const WorkflowNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowNode::IsInitialized() const {
  return true;
}

void WorkflowNode::InternalSwap(WorkflowNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.node_inputs_.InternalSwap(&other->_impl_.node_inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkflowNode, _impl_.suppress_output_)
      + sizeof(WorkflowNode::_impl_.suppress_output_)
      - PROTOBUF_FIELD_OFFSET(WorkflowNode, _impl_.model_)>(
          reinterpret_cast<char*>(&_impl_.model_),
          reinterpret_cast<char*>(&other->_impl_.model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[122]);
}

// ===================================================================

class NodeInput::_Internal {
 public:
};

NodeInput::NodeInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.NodeInput)
}
NodeInput::NodeInput(const NodeInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeInput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_id().empty()) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.NodeInput)
}

inline void NodeInput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeInput::~NodeInput() {
  // @@protoc_insertion_point(destructor:clarifai.api.NodeInput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_id_.Destroy();
}

void NodeInput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeInput::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.NodeInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.NodeInput.node_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.NodeInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (!this->_internal_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.NodeInput.node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.NodeInput)
  return target;
}

size_t NodeInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.NodeInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInput::GetClassData() const { return &_class_data_; }


void NodeInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeInput*>(&to_msg);
  auto& from = static_cast<const NodeInput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.NodeInput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_id().empty()) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInput::CopyFrom(const NodeInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.NodeInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInput::IsInitialized() const {
  return true;
}

void NodeInput::InternalSwap(NodeInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_id_, lhs_arena,
      &other->_impl_.node_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[123]);
}

// ===================================================================

class WorkflowResult::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const WorkflowResult* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const WorkflowResult* msg);
  static const ::clarifai::api::Model& model(const WorkflowResult* msg);
  static const ::clarifai::api::Input& input(const WorkflowResult* msg);
};

const ::clarifai::api::status::Status&
WorkflowResult::_Internal::status(const WorkflowResult* msg) {
  return *msg->_impl_.status_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
WorkflowResult::_Internal::created_at(const WorkflowResult* msg) {
  return *msg->_impl_.created_at_;
}
const ::clarifai::api::Model&
WorkflowResult::_Internal::model(const WorkflowResult* msg) {
  return *msg->_impl_.model_;
}
const ::clarifai::api::Input&
WorkflowResult::_Internal::input(const WorkflowResult* msg) {
  return *msg->_impl_.input_;
}
void WorkflowResult::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void WorkflowResult::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
WorkflowResult::WorkflowResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.WorkflowResult)
}
WorkflowResult::WorkflowResult(const WorkflowResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkflowResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.outputs_){from._impl_.outputs_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.suppress_output_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_model()) {
    _this->_impl_.model_ = new ::clarifai::api::Model(*from._impl_.model_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::clarifai::api::Input(*from._impl_.input_);
  }
  _this->_impl_.suppress_output_ = from._impl_.suppress_output_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowResult)
}

inline void WorkflowResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.outputs_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.suppress_output_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkflowResult::~WorkflowResult() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkflowResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.outputs_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.model_;
  if (this != internal_default_instance()) delete _impl_.input_;
}

void WorkflowResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkflowResult::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.outputs_.Clear();
  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_ != nullptr) {
    delete _impl_.model_;
  }
  _impl_.model_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  _impl_.suppress_output_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.WorkflowResult.id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Output outputs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool suppress_output = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.suppress_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowResult.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.status.Status status = 2;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Model model = 4;
  if (this->_internal_has_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::model(this),
        _Internal::model(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Input input = 5;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Output outputs = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool suppress_output = 7;
  if (this->_internal_suppress_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_suppress_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowResult)
  return target;
}

size_t WorkflowResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Output outputs = 6;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->_impl_.outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.status.Status status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .clarifai.api.Model model = 4;
  if (this->_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_);
  }

  // .clarifai.api.Input input = 5;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // bool suppress_output = 7;
  if (this->_internal_suppress_output() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkflowResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowResult::GetClassData() const { return &_class_data_; }


void WorkflowResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkflowResult*>(&to_msg);
  auto& from = static_cast<const WorkflowResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.outputs_.MergeFrom(from._impl_.outputs_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_model()) {
    _this->_internal_mutable_model()->::clarifai::api::Model::MergeFrom(
        from._internal_model());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::clarifai::api::Input::MergeFrom(
        from._internal_input());
  }
  if (from._internal_suppress_output() != 0) {
    _this->_internal_set_suppress_output(from._internal_suppress_output());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowResult::CopyFrom(const WorkflowResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowResult::IsInitialized() const {
  return true;
}

void WorkflowResult::InternalSwap(WorkflowResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.outputs_.InternalSwap(&other->_impl_.outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkflowResult, _impl_.suppress_output_)
      + sizeof(WorkflowResult::_impl_.suppress_output_)
      - PROTOBUF_FIELD_OFFSET(WorkflowResult, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[124]);
}

// ===================================================================

class WorkflowState::_Internal {
 public:
};

WorkflowState::WorkflowState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.WorkflowState)
}
WorkflowState::WorkflowState(const WorkflowState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkflowState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowState)
}

inline void WorkflowState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkflowState::~WorkflowState() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkflowState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void WorkflowState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkflowState::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.WorkflowState.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowState.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowState)
  return target;
}

size_t WorkflowState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkflowState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowState::GetClassData() const { return &_class_data_; }


void WorkflowState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkflowState*>(&to_msg);
  auto& from = static_cast<const WorkflowState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowState::CopyFrom(const WorkflowState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowState::IsInitialized() const {
  return true;
}

void WorkflowState::InternalSwap(WorkflowState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[125]);
}

// ===================================================================

class AppDuplication::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const AppDuplication* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const AppDuplication* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_modified_at(const AppDuplication* msg);
  static const ::clarifai::api::AppDuplicationFilters& filter(const AppDuplication* msg);
};

const ::clarifai::api::status::Status&
AppDuplication::_Internal::status(const AppDuplication* msg) {
  return *msg->_impl_.status_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AppDuplication::_Internal::created_at(const AppDuplication* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AppDuplication::_Internal::last_modified_at(const AppDuplication* msg) {
  return *msg->_impl_.last_modified_at_;
}
const ::clarifai::api::AppDuplicationFilters&
AppDuplication::_Internal::filter(const AppDuplication* msg) {
  return *msg->_impl_.filter_;
}
void AppDuplication::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void AppDuplication::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void AppDuplication::clear_last_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_modified_at_ != nullptr) {
    delete _impl_.last_modified_at_;
  }
  _impl_.last_modified_at_ = nullptr;
}
AppDuplication::AppDuplication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AppDuplication)
}
AppDuplication::AppDuplication(const AppDuplication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppDuplication* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.progress_){from._impl_.progress_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.new_app_id_){}
    , decltype(_impl_.new_app_name_){}
    , decltype(_impl_.existing_app_id_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.last_modified_at_){nullptr}
    , decltype(_impl_.filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_app_id().empty()) {
    _this->_impl_.new_app_id_.Set(from._internal_new_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_app_name().empty()) {
    _this->_impl_.new_app_name_.Set(from._internal_new_app_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.existing_app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.existing_app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_existing_app_id().empty()) {
    _this->_impl_.existing_app_id_.Set(from._internal_existing_app_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_last_modified_at()) {
    _this->_impl_.last_modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_modified_at_);
  }
  if (from._internal_has_filter()) {
    _this->_impl_.filter_ = new ::clarifai::api::AppDuplicationFilters(*from._impl_.filter_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AppDuplication)
}

inline void AppDuplication::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.progress_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.new_app_id_){}
    , decltype(_impl_.new_app_name_){}
    , decltype(_impl_.existing_app_id_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.last_modified_at_){nullptr}
    , decltype(_impl_.filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.existing_app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.existing_app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppDuplication::~AppDuplication() {
  // @@protoc_insertion_point(destructor:clarifai.api.AppDuplication)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppDuplication::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.progress_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.new_app_id_.Destroy();
  _impl_.new_app_name_.Destroy();
  _impl_.existing_app_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.last_modified_at_;
  if (this != internal_default_instance()) delete _impl_.filter_;
}

void AppDuplication::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppDuplication::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AppDuplication)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.progress_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.new_app_id_.ClearToEmpty();
  _impl_.new_app_name_.ClearToEmpty();
  _impl_.existing_app_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_modified_at_ != nullptr) {
    delete _impl_.last_modified_at_;
  }
  _impl_.last_modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.filter_ != nullptr) {
    delete _impl_.filter_;
  }
  _impl_.filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppDuplication::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AppDuplication.id"));
        } else
          goto handle_unusual;
        continue;
      // string new_app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AppDuplication.new_app_id"));
        } else
          goto handle_unusual;
        continue;
      // string new_app_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_new_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AppDuplication.new_app_name"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_modified_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AppDuplicationFilters filter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string existing_app_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_existing_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AppDuplication.existing_app_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.AppCopyProgress progress = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppDuplication::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AppDuplication)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppDuplication.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string new_app_id = 2;
  if (!this->_internal_new_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_app_id().data(), static_cast<int>(this->_internal_new_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppDuplication.new_app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_app_id(), target);
  }

  // string new_app_name = 3;
  if (!this->_internal_new_app_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_app_name().data(), static_cast<int>(this->_internal_new_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppDuplication.new_app_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_new_app_name(), target);
  }

  // .clarifai.api.status.Status status = 4;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_modified_at = 6;
  if (this->_internal_has_last_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::last_modified_at(this),
        _Internal::last_modified_at(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.AppDuplicationFilters filter = 7;
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // string existing_app_id = 8;
  if (!this->_internal_existing_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_existing_app_id().data(), static_cast<int>(this->_internal_existing_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppDuplication.existing_app_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_existing_app_id(), target);
  }

  // repeated .clarifai.api.AppCopyProgress progress = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_progress_size()); i < n; i++) {
    const auto& repfield = this->_internal_progress(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AppDuplication)
  return target;
}

size_t AppDuplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AppDuplication)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AppCopyProgress progress = 9;
  total_size += 1UL * this->_internal_progress_size();
  for (const auto& msg : this->_impl_.progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string new_app_id = 2;
  if (!this->_internal_new_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_app_id());
  }

  // string new_app_name = 3;
  if (!this->_internal_new_app_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_app_name());
  }

  // string existing_app_id = 8;
  if (!this->_internal_existing_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_existing_app_id());
  }

  // .clarifai.api.status.Status status = 4;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp last_modified_at = 6;
  if (this->_internal_has_last_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_modified_at_);
  }

  // .clarifai.api.AppDuplicationFilters filter = 7;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppDuplication::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppDuplication::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppDuplication::GetClassData() const { return &_class_data_; }


void AppDuplication::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppDuplication*>(&to_msg);
  auto& from = static_cast<const AppDuplication&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AppDuplication)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.progress_.MergeFrom(from._impl_.progress_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_new_app_id().empty()) {
    _this->_internal_set_new_app_id(from._internal_new_app_id());
  }
  if (!from._internal_new_app_name().empty()) {
    _this->_internal_set_new_app_name(from._internal_new_app_name());
  }
  if (!from._internal_existing_app_id().empty()) {
    _this->_internal_set_existing_app_id(from._internal_existing_app_id());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_last_modified_at()) {
    _this->_internal_mutable_last_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_modified_at());
  }
  if (from._internal_has_filter()) {
    _this->_internal_mutable_filter()->::clarifai::api::AppDuplicationFilters::MergeFrom(
        from._internal_filter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppDuplication::CopyFrom(const AppDuplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AppDuplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppDuplication::IsInitialized() const {
  return true;
}

void AppDuplication::InternalSwap(AppDuplication* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.progress_.InternalSwap(&other->_impl_.progress_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_app_id_, lhs_arena,
      &other->_impl_.new_app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_app_name_, lhs_arena,
      &other->_impl_.new_app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.existing_app_id_, lhs_arena,
      &other->_impl_.existing_app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppDuplication, _impl_.filter_)
      + sizeof(AppDuplication::_impl_.filter_)
      - PROTOBUF_FIELD_OFFSET(AppDuplication, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppDuplication::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[126]);
}

// ===================================================================

class AppCopyProgress::_Internal {
 public:
};

AppCopyProgress::AppCopyProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AppCopyProgress)
}
AppCopyProgress::AppCopyProgress(const AppCopyProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppCopyProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    _this->_impl_.field_.Set(from._internal_field(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AppCopyProgress)
}

inline void AppCopyProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppCopyProgress::~AppCopyProgress() {
  // @@protoc_insertion_point(destructor:clarifai.api.AppCopyProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppCopyProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_.Destroy();
}

void AppCopyProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppCopyProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AppCopyProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_.ClearToEmpty();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppCopyProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AppCopyProgress.field"));
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppCopyProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AppCopyProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppCopyProgress.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AppCopyProgress)
  return target;
}

size_t AppCopyProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AppCopyProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppCopyProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppCopyProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppCopyProgress::GetClassData() const { return &_class_data_; }


void AppCopyProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppCopyProgress*>(&to_msg);
  auto& from = static_cast<const AppCopyProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AppCopyProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_field().empty()) {
    _this->_internal_set_field(from._internal_field());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppCopyProgress::CopyFrom(const AppCopyProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AppCopyProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppCopyProgress::IsInitialized() const {
  return true;
}

void AppCopyProgress::InternalSwap(AppCopyProgress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_, lhs_arena,
      &other->_impl_.field_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppCopyProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[127]);
}

// ===================================================================

class AppDuplicationFilters::_Internal {
 public:
};

AppDuplicationFilters::AppDuplicationFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AppDuplicationFilters)
}
AppDuplicationFilters::AppDuplicationFilters(const AppDuplicationFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppDuplicationFilters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.copy_inputs_){}
    , decltype(_impl_.copy_concepts_){}
    , decltype(_impl_.copy_annotations_){}
    , decltype(_impl_.copy_models_){}
    , decltype(_impl_.copy_workflows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.copy_inputs_, &from._impl_.copy_inputs_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.copy_workflows_) -
    reinterpret_cast<char*>(&_impl_.copy_inputs_)) + sizeof(_impl_.copy_workflows_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AppDuplicationFilters)
}

inline void AppDuplicationFilters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.copy_inputs_){false}
    , decltype(_impl_.copy_concepts_){false}
    , decltype(_impl_.copy_annotations_){false}
    , decltype(_impl_.copy_models_){false}
    , decltype(_impl_.copy_workflows_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppDuplicationFilters::~AppDuplicationFilters() {
  // @@protoc_insertion_point(destructor:clarifai.api.AppDuplicationFilters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppDuplicationFilters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppDuplicationFilters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppDuplicationFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AppDuplicationFilters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.copy_inputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.copy_workflows_) -
      reinterpret_cast<char*>(&_impl_.copy_inputs_)) + sizeof(_impl_.copy_workflows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppDuplicationFilters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool copy_inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.copy_inputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool copy_concepts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.copy_concepts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool copy_annotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.copy_annotations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool copy_models = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.copy_models_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool copy_workflows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.copy_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppDuplicationFilters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AppDuplicationFilters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool copy_inputs = 1;
  if (this->_internal_copy_inputs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_copy_inputs(), target);
  }

  // bool copy_concepts = 2;
  if (this->_internal_copy_concepts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_copy_concepts(), target);
  }

  // bool copy_annotations = 3;
  if (this->_internal_copy_annotations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_copy_annotations(), target);
  }

  // bool copy_models = 4;
  if (this->_internal_copy_models() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_copy_models(), target);
  }

  // bool copy_workflows = 5;
  if (this->_internal_copy_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_copy_workflows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AppDuplicationFilters)
  return target;
}

size_t AppDuplicationFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AppDuplicationFilters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool copy_inputs = 1;
  if (this->_internal_copy_inputs() != 0) {
    total_size += 1 + 1;
  }

  // bool copy_concepts = 2;
  if (this->_internal_copy_concepts() != 0) {
    total_size += 1 + 1;
  }

  // bool copy_annotations = 3;
  if (this->_internal_copy_annotations() != 0) {
    total_size += 1 + 1;
  }

  // bool copy_models = 4;
  if (this->_internal_copy_models() != 0) {
    total_size += 1 + 1;
  }

  // bool copy_workflows = 5;
  if (this->_internal_copy_workflows() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppDuplicationFilters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppDuplicationFilters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppDuplicationFilters::GetClassData() const { return &_class_data_; }


void AppDuplicationFilters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppDuplicationFilters*>(&to_msg);
  auto& from = static_cast<const AppDuplicationFilters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AppDuplicationFilters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_copy_inputs() != 0) {
    _this->_internal_set_copy_inputs(from._internal_copy_inputs());
  }
  if (from._internal_copy_concepts() != 0) {
    _this->_internal_set_copy_concepts(from._internal_copy_concepts());
  }
  if (from._internal_copy_annotations() != 0) {
    _this->_internal_set_copy_annotations(from._internal_copy_annotations());
  }
  if (from._internal_copy_models() != 0) {
    _this->_internal_set_copy_models(from._internal_copy_models());
  }
  if (from._internal_copy_workflows() != 0) {
    _this->_internal_set_copy_workflows(from._internal_copy_workflows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppDuplicationFilters::CopyFrom(const AppDuplicationFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AppDuplicationFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppDuplicationFilters::IsInitialized() const {
  return true;
}

void AppDuplicationFilters::InternalSwap(AppDuplicationFilters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppDuplicationFilters, _impl_.copy_workflows_)
      + sizeof(AppDuplicationFilters::_impl_.copy_workflows_)
      - PROTOBUF_FIELD_OFFSET(AppDuplicationFilters, _impl_.copy_inputs_)>(
          reinterpret_cast<char*>(&_impl_.copy_inputs_),
          reinterpret_cast<char*>(&other->_impl_.copy_inputs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppDuplicationFilters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[128]);
}

// ===================================================================

class LabelOrder::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const LabelOrder* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& desired_fulfill_time(const LabelOrder* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& estimate_fulfill_time(const LabelOrder* msg);
  static const ::clarifai::api::Task& task(const LabelOrder* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const LabelOrder* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const LabelOrder* msg);
};

const ::clarifai::api::status::Status&
LabelOrder::_Internal::status(const LabelOrder* msg) {
  return *msg->_impl_.status_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LabelOrder::_Internal::desired_fulfill_time(const LabelOrder* msg) {
  return *msg->_impl_.desired_fulfill_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LabelOrder::_Internal::estimate_fulfill_time(const LabelOrder* msg) {
  return *msg->_impl_.estimate_fulfill_time_;
}
const ::clarifai::api::Task&
LabelOrder::_Internal::task(const LabelOrder* msg) {
  return *msg->_impl_.task_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LabelOrder::_Internal::created_at(const LabelOrder* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LabelOrder::_Internal::modified_at(const LabelOrder* msg) {
  return *msg->_impl_.modified_at_;
}
void LabelOrder::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void LabelOrder::clear_desired_fulfill_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.desired_fulfill_time_ != nullptr) {
    delete _impl_.desired_fulfill_time_;
  }
  _impl_.desired_fulfill_time_ = nullptr;
}
void LabelOrder::clear_estimate_fulfill_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.estimate_fulfill_time_ != nullptr) {
    delete _impl_.estimate_fulfill_time_;
  }
  _impl_.estimate_fulfill_time_ = nullptr;
}
void LabelOrder::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void LabelOrder::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
LabelOrder::LabelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.LabelOrder)
}
LabelOrder::LabelOrder(const LabelOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LabelOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.desired_fulfill_time_){nullptr}
    , decltype(_impl_.estimate_fulfill_time_){nullptr}
    , decltype(_impl_.task_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.auto_release_){}
    , decltype(_impl_.allow_empty_tag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_desired_fulfill_time()) {
    _this->_impl_.desired_fulfill_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.desired_fulfill_time_);
  }
  if (from._internal_has_estimate_fulfill_time()) {
    _this->_impl_.estimate_fulfill_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.estimate_fulfill_time_);
  }
  if (from._internal_has_task()) {
    _this->_impl_.task_ = new ::clarifai::api::Task(*from._impl_.task_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  ::memcpy(&_impl_.auto_release_, &from._impl_.auto_release_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.allow_empty_tag_) -
    reinterpret_cast<char*>(&_impl_.auto_release_)) + sizeof(_impl_.allow_empty_tag_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LabelOrder)
}

inline void LabelOrder::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.desired_fulfill_time_){nullptr}
    , decltype(_impl_.estimate_fulfill_time_){nullptr}
    , decltype(_impl_.task_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.auto_release_){false}
    , decltype(_impl_.allow_empty_tag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LabelOrder::~LabelOrder() {
  // @@protoc_insertion_point(destructor:clarifai.api.LabelOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LabelOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.desired_fulfill_time_;
  if (this != internal_default_instance()) delete _impl_.estimate_fulfill_time_;
  if (this != internal_default_instance()) delete _impl_.task_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
}

void LabelOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LabelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LabelOrder)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.desired_fulfill_time_ != nullptr) {
    delete _impl_.desired_fulfill_time_;
  }
  _impl_.desired_fulfill_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.estimate_fulfill_time_ != nullptr) {
    delete _impl_.estimate_fulfill_time_;
  }
  _impl_.estimate_fulfill_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.task_ != nullptr) {
    delete _impl_.task_;
  }
  _impl_.task_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  ::memset(&_impl_.auto_release_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.allow_empty_tag_) -
      reinterpret_cast<char*>(&_impl_.auto_release_)) + sizeof(_impl_.allow_empty_tag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.LabelOrder.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.LabelOrder.name"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_release = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.auto_release_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_empty_tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.allow_empty_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp desired_fulfill_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_desired_fulfill_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp estimate_fulfill_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_estimate_fulfill_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Task task = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LabelOrder::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LabelOrder)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.LabelOrder.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.LabelOrder.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .clarifai.api.status.Status status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // bool auto_release = 4;
  if (this->_internal_auto_release() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_auto_release(), target);
  }

  // bool allow_empty_tag = 5;
  if (this->_internal_allow_empty_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_allow_empty_tag(), target);
  }

  // .google.protobuf.Timestamp desired_fulfill_time = 6;
  if (this->_internal_has_desired_fulfill_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::desired_fulfill_time(this),
        _Internal::desired_fulfill_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp estimate_fulfill_time = 7;
  if (this->_internal_has_estimate_fulfill_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::estimate_fulfill_time(this),
        _Internal::estimate_fulfill_time(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Task task = 8;
  if (this->_internal_has_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::task(this),
        _Internal::task(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 10;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LabelOrder)
  return target;
}

size_t LabelOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LabelOrder)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .clarifai.api.status.Status status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .google.protobuf.Timestamp desired_fulfill_time = 6;
  if (this->_internal_has_desired_fulfill_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.desired_fulfill_time_);
  }

  // .google.protobuf.Timestamp estimate_fulfill_time = 7;
  if (this->_internal_has_estimate_fulfill_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.estimate_fulfill_time_);
  }

  // .clarifai.api.Task task = 8;
  if (this->_internal_has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.task_);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 10;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // bool auto_release = 4;
  if (this->_internal_auto_release() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_empty_tag = 5;
  if (this->_internal_allow_empty_tag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabelOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LabelOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabelOrder::GetClassData() const { return &_class_data_; }


void LabelOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LabelOrder*>(&to_msg);
  auto& from = static_cast<const LabelOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LabelOrder)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_desired_fulfill_time()) {
    _this->_internal_mutable_desired_fulfill_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_desired_fulfill_time());
  }
  if (from._internal_has_estimate_fulfill_time()) {
    _this->_internal_mutable_estimate_fulfill_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_estimate_fulfill_time());
  }
  if (from._internal_has_task()) {
    _this->_internal_mutable_task()->::clarifai::api::Task::MergeFrom(
        from._internal_task());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_auto_release() != 0) {
    _this->_internal_set_auto_release(from._internal_auto_release());
  }
  if (from._internal_allow_empty_tag() != 0) {
    _this->_internal_set_allow_empty_tag(from._internal_allow_empty_tag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabelOrder::CopyFrom(const LabelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LabelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelOrder::IsInitialized() const {
  return true;
}

void LabelOrder::InternalSwap(LabelOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LabelOrder, _impl_.allow_empty_tag_)
      + sizeof(LabelOrder::_impl_.allow_empty_tag_)
      - PROTOBUF_FIELD_OFFSET(LabelOrder, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[129]);
}

// ===================================================================

class Task::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Task* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Task* msg);
  static const ::clarifai::api::TaskWorker& worker(const Task* msg);
  static const ::clarifai::api::TaskInputSource& input_source(const Task* msg);
  static const ::clarifai::api::TaskAIAssistant& ai_assistant(const Task* msg);
  static const ::clarifai::api::TaskReview& review(const Task* msg);
  static const ::clarifai::api::status::Status& status(const Task* msg);
  static const ::clarifai::api::AiAssistParameters& ai_assist_params(const Task* msg);
  static const ::clarifai::api::Visibility& visibility(const Task* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Task::_Internal::created_at(const Task* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Task::_Internal::modified_at(const Task* msg) {
  return *msg->_impl_.modified_at_;
}
const ::clarifai::api::TaskWorker&
Task::_Internal::worker(const Task* msg) {
  return *msg->_impl_.worker_;
}
const ::clarifai::api::TaskInputSource&
Task::_Internal::input_source(const Task* msg) {
  return *msg->_impl_.input_source_;
}
const ::clarifai::api::TaskAIAssistant&
Task::_Internal::ai_assistant(const Task* msg) {
  return *msg->_impl_.ai_assistant_;
}
const ::clarifai::api::TaskReview&
Task::_Internal::review(const Task* msg) {
  return *msg->_impl_.review_;
}
const ::clarifai::api::status::Status&
Task::_Internal::status(const Task* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::AiAssistParameters&
Task::_Internal::ai_assist_params(const Task* msg) {
  return *msg->_impl_.ai_assist_params_;
}
const ::clarifai::api::Visibility&
Task::_Internal::visibility(const Task* msg) {
  return *msg->_impl_.visibility_;
}
void Task::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Task::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void Task::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Task* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_ids_){from._impl_.concept_ids_}
    , decltype(_impl_.concepts_){from._impl_.concepts_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.label_order_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.worker_){nullptr}
    , decltype(_impl_.input_source_){nullptr}
    , decltype(_impl_.ai_assistant_){nullptr}
    , decltype(_impl_.review_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.ai_assist_params_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.sample_ms_){}
    , decltype(_impl_.delete_previous_annotations_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.label_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label_order_id().empty()) {
    _this->_impl_.label_order_id_.Set(from._internal_label_order_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_worker()) {
    _this->_impl_.worker_ = new ::clarifai::api::TaskWorker(*from._impl_.worker_);
  }
  if (from._internal_has_input_source()) {
    _this->_impl_.input_source_ = new ::clarifai::api::TaskInputSource(*from._impl_.input_source_);
  }
  if (from._internal_has_ai_assistant()) {
    _this->_impl_.ai_assistant_ = new ::clarifai::api::TaskAIAssistant(*from._impl_.ai_assistant_);
  }
  if (from._internal_has_review()) {
    _this->_impl_.review_ = new ::clarifai::api::TaskReview(*from._impl_.review_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_ai_assist_params()) {
    _this->_impl_.ai_assist_params_ = new ::clarifai::api::AiAssistParameters(*from._impl_.ai_assist_params_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.delete_previous_annotations_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.delete_previous_annotations_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Task)
}

inline void Task::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_ids_){arena}
    , decltype(_impl_.concepts_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.label_order_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.worker_){nullptr}
    , decltype(_impl_.input_source_){nullptr}
    , decltype(_impl_.ai_assistant_){nullptr}
    , decltype(_impl_.review_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.ai_assist_params_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.sample_ms_){0u}
    , decltype(_impl_.delete_previous_annotations_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:clarifai.api.Task)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_ids_.~RepeatedPtrField();
  _impl_.concepts_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.description_.Destroy();
  _impl_.name_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.label_order_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.worker_;
  if (this != internal_default_instance()) delete _impl_.input_source_;
  if (this != internal_default_instance()) delete _impl_.ai_assistant_;
  if (this != internal_default_instance()) delete _impl_.review_;
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.ai_assist_params_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
}

void Task::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Task)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_ids_.Clear();
  _impl_.concepts_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.label_order_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.worker_ != nullptr) {
    delete _impl_.worker_;
  }
  _impl_.worker_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_source_ != nullptr) {
    delete _impl_.input_source_;
  }
  _impl_.input_source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ai_assistant_ != nullptr) {
    delete _impl_.ai_assistant_;
  }
  _impl_.ai_assistant_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.review_ != nullptr) {
    delete _impl_.review_;
  }
  _impl_.review_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ai_assist_params_ != nullptr) {
    delete _impl_.ai_assist_params_;
  }
  _impl_.ai_assist_params_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.delete_previous_annotations_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.delete_previous_annotations_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Task.id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Task.TaskType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::clarifai::api::Task_TaskType>(val));
        } else
          goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Task.description"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TaskWorker worker = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_worker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string concept_ids = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Task.concept_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TaskInputSource input_source = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sample_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.sample_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TaskAIAssistant ai_assistant = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ai_assistant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TaskReview review = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_review(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Task.name"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AiAssistParameters ai_assist_params = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ai_assist_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Task.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Task.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string label_order_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_label_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Task.label_order_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.TaskConcept concepts = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool delete_previous_annotations = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.delete_previous_annotations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Task::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Task)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Task.TaskType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // .clarifai.api.TaskWorker worker = 6;
  if (this->_internal_has_worker()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::worker(this),
        _Internal::worker(this).GetCachedSize(), target, stream);
  }

  // repeated string concept_ids = 7 [deprecated = true];
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.concept_ids");
    target = stream->WriteString(7, s, target);
  }

  // .clarifai.api.TaskInputSource input_source = 8;
  if (this->_internal_has_input_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::input_source(this),
        _Internal::input_source(this).GetCachedSize(), target, stream);
  }

  // uint32 sample_ms = 9;
  if (this->_internal_sample_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_sample_ms(), target);
  }

  // .clarifai.api.TaskAIAssistant ai_assistant = 10;
  if (this->_internal_has_ai_assistant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::ai_assistant(this),
        _Internal::ai_assistant(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.TaskReview review = 11;
  if (this->_internal_has_review()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::review(this),
        _Internal::review(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.status.Status status = 12;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string name = 13;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_name(), target);
  }

  // .clarifai.api.AiAssistParameters ai_assist_params = 14;
  if (this->_internal_has_ai_assist_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::ai_assist_params(this),
        _Internal::ai_assist_params(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Visibility visibility = 15;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  // string app_id = 16;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.app_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_app_id(), target);
  }

  // string user_id = 17;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.user_id");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_user_id(), target);
  }

  // string label_order_id = 18;
  if (!this->_internal_label_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label_order_id().data(), static_cast<int>(this->_internal_label_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.label_order_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_label_order_id(), target);
  }

  // repeated .clarifai.api.TaskConcept concepts = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_concepts_size()); i < n; i++) {
    const auto& repfield = this->_internal_concepts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool delete_previous_annotations = 20;
  if (this->_internal_delete_previous_annotations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_delete_previous_annotations(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Task)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string concept_ids = 7 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.concept_ids_.size());
  for (int i = 0, n = _impl_.concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.concept_ids_.Get(i));
  }

  // repeated .clarifai.api.TaskConcept concepts = 19;
  total_size += 2UL * this->_internal_concepts_size();
  for (const auto& msg : this->_impl_.concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string name = 13;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string app_id = 16;
  if (!this->_internal_app_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 17;
  if (!this->_internal_user_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string label_order_id = 18;
  if (!this->_internal_label_order_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label_order_id());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .clarifai.api.TaskWorker worker = 6;
  if (this->_internal_has_worker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.worker_);
  }

  // .clarifai.api.TaskInputSource input_source = 8;
  if (this->_internal_has_input_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_source_);
  }

  // .clarifai.api.TaskAIAssistant ai_assistant = 10;
  if (this->_internal_has_ai_assistant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ai_assistant_);
  }

  // .clarifai.api.TaskReview review = 11;
  if (this->_internal_has_review()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.review_);
  }

  // .clarifai.api.status.Status status = 12;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.AiAssistParameters ai_assist_params = 14;
  if (this->_internal_has_ai_assist_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ai_assist_params_);
  }

  // .clarifai.api.Visibility visibility = 15;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  // .clarifai.api.Task.TaskType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 sample_ms = 9;
  if (this->_internal_sample_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_ms());
  }

  // bool delete_previous_annotations = 20;
  if (this->_internal_delete_previous_annotations() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Task::GetClassData() const { return &_class_data_; }


void Task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Task*>(&to_msg);
  auto& from = static_cast<const Task&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Task)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concept_ids_.MergeFrom(from._impl_.concept_ids_);
  _this->_impl_.concepts_.MergeFrom(from._impl_.concepts_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_label_order_id().empty()) {
    _this->_internal_set_label_order_id(from._internal_label_order_id());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_worker()) {
    _this->_internal_mutable_worker()->::clarifai::api::TaskWorker::MergeFrom(
        from._internal_worker());
  }
  if (from._internal_has_input_source()) {
    _this->_internal_mutable_input_source()->::clarifai::api::TaskInputSource::MergeFrom(
        from._internal_input_source());
  }
  if (from._internal_has_ai_assistant()) {
    _this->_internal_mutable_ai_assistant()->::clarifai::api::TaskAIAssistant::MergeFrom(
        from._internal_ai_assistant());
  }
  if (from._internal_has_review()) {
    _this->_internal_mutable_review()->::clarifai::api::TaskReview::MergeFrom(
        from._internal_review());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_ai_assist_params()) {
    _this->_internal_mutable_ai_assist_params()->::clarifai::api::AiAssistParameters::MergeFrom(
        from._internal_ai_assist_params());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_sample_ms() != 0) {
    _this->_internal_set_sample_ms(from._internal_sample_ms());
  }
  if (from._internal_delete_previous_annotations() != 0) {
    _this->_internal_set_delete_previous_annotations(from._internal_delete_previous_annotations());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concept_ids_.InternalSwap(&other->_impl_.concept_ids_);
  _impl_.concepts_.InternalSwap(&other->_impl_.concepts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_order_id_, lhs_arena,
      &other->_impl_.label_order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Task, _impl_.delete_previous_annotations_)
      + sizeof(Task::_impl_.delete_previous_annotations_)
      - PROTOBUF_FIELD_OFFSET(Task, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[130]);
}

// ===================================================================

class AiAssistParameters::_Internal {
 public:
};

AiAssistParameters::AiAssistParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AiAssistParameters)
}
AiAssistParameters::AiAssistParameters(const AiAssistParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AiAssistParameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_relation_ids_){from._impl_.concept_relation_ids_}
    , decltype(_impl_.min_threshold_){}
    , decltype(_impl_.max_threshold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.min_threshold_, &from._impl_.min_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_threshold_) -
    reinterpret_cast<char*>(&_impl_.min_threshold_)) + sizeof(_impl_.max_threshold_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AiAssistParameters)
}

inline void AiAssistParameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_relation_ids_){arena}
    , decltype(_impl_.min_threshold_){0}
    , decltype(_impl_.max_threshold_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AiAssistParameters::~AiAssistParameters() {
  // @@protoc_insertion_point(destructor:clarifai.api.AiAssistParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AiAssistParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_relation_ids_.~RepeatedPtrField();
}

void AiAssistParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AiAssistParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AiAssistParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_relation_ids_.Clear();
  ::memset(&_impl_.min_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_threshold_) -
      reinterpret_cast<char*>(&_impl_.min_threshold_)) + sizeof(_impl_.max_threshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AiAssistParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float min_threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.min_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float max_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.max_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated string concept_relation_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_relation_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AiAssistParameters.concept_relation_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AiAssistParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AiAssistParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_threshold = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_threshold = this->_internal_min_threshold();
  uint32_t raw_min_threshold;
  memcpy(&raw_min_threshold, &tmp_min_threshold, sizeof(tmp_min_threshold));
  if (raw_min_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_min_threshold(), target);
  }

  // float max_threshold = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_threshold = this->_internal_max_threshold();
  uint32_t raw_max_threshold;
  memcpy(&raw_max_threshold, &tmp_max_threshold, sizeof(tmp_max_threshold));
  if (raw_max_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_max_threshold(), target);
  }

  // repeated string concept_relation_ids = 3;
  for (int i = 0, n = this->_internal_concept_relation_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_relation_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AiAssistParameters.concept_relation_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AiAssistParameters)
  return target;
}

size_t AiAssistParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AiAssistParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string concept_relation_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.concept_relation_ids_.size());
  for (int i = 0, n = _impl_.concept_relation_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.concept_relation_ids_.Get(i));
  }

  // float min_threshold = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_threshold = this->_internal_min_threshold();
  uint32_t raw_min_threshold;
  memcpy(&raw_min_threshold, &tmp_min_threshold, sizeof(tmp_min_threshold));
  if (raw_min_threshold != 0) {
    total_size += 1 + 4;
  }

  // float max_threshold = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_threshold = this->_internal_max_threshold();
  uint32_t raw_max_threshold;
  memcpy(&raw_max_threshold, &tmp_max_threshold, sizeof(tmp_max_threshold));
  if (raw_max_threshold != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AiAssistParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AiAssistParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AiAssistParameters::GetClassData() const { return &_class_data_; }


void AiAssistParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AiAssistParameters*>(&to_msg);
  auto& from = static_cast<const AiAssistParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AiAssistParameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concept_relation_ids_.MergeFrom(from._impl_.concept_relation_ids_);
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_threshold = from._internal_min_threshold();
  uint32_t raw_min_threshold;
  memcpy(&raw_min_threshold, &tmp_min_threshold, sizeof(tmp_min_threshold));
  if (raw_min_threshold != 0) {
    _this->_internal_set_min_threshold(from._internal_min_threshold());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_threshold = from._internal_max_threshold();
  uint32_t raw_max_threshold;
  memcpy(&raw_max_threshold, &tmp_max_threshold, sizeof(tmp_max_threshold));
  if (raw_max_threshold != 0) {
    _this->_internal_set_max_threshold(from._internal_max_threshold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AiAssistParameters::CopyFrom(const AiAssistParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AiAssistParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AiAssistParameters::IsInitialized() const {
  return true;
}

void AiAssistParameters::InternalSwap(AiAssistParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concept_relation_ids_.InternalSwap(&other->_impl_.concept_relation_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiAssistParameters, _impl_.max_threshold_)
      + sizeof(AiAssistParameters::_impl_.max_threshold_)
      - PROTOBUF_FIELD_OFFSET(AiAssistParameters, _impl_.min_threshold_)>(
          reinterpret_cast<char*>(&_impl_.min_threshold_),
          reinterpret_cast<char*>(&other->_impl_.min_threshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AiAssistParameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[131]);
}

// ===================================================================

class TaskWorker::_Internal {
 public:
  static const ::clarifai::api::TaskWorkerPartitionedStrategyInfo& partitioned_strategy_info(const TaskWorker* msg);
};

const ::clarifai::api::TaskWorkerPartitionedStrategyInfo&
TaskWorker::_Internal::partitioned_strategy_info(const TaskWorker* msg) {
  return *msg->_impl_.strategy_info_.partitioned_strategy_info_;
}
void TaskWorker::set_allocated_partitioned_strategy_info(::clarifai::api::TaskWorkerPartitionedStrategyInfo* partitioned_strategy_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_strategy_info();
  if (partitioned_strategy_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(partitioned_strategy_info);
    if (message_arena != submessage_arena) {
      partitioned_strategy_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partitioned_strategy_info, submessage_arena);
    }
    set_has_partitioned_strategy_info();
    _impl_.strategy_info_.partitioned_strategy_info_ = partitioned_strategy_info;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TaskWorker.partitioned_strategy_info)
}
TaskWorker::TaskWorker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskWorker)
}
TaskWorker::TaskWorker(const TaskWorker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskWorker* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){from._impl_.user_ids_}
    , decltype(_impl_.users_){from._impl_.users_}
    , decltype(_impl_.models_){from._impl_.models_}
    , decltype(_impl_.workflows_){from._impl_.workflows_}
    , decltype(_impl_.strategy_){}
    , decltype(_impl_.strategy_info_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.strategy_ = from._impl_.strategy_;
  clear_has_strategy_info();
  switch (from.strategy_info_case()) {
    case kPartitionedStrategyInfo: {
      _this->_internal_mutable_partitioned_strategy_info()->::clarifai::api::TaskWorkerPartitionedStrategyInfo::MergeFrom(
          from._internal_partitioned_strategy_info());
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskWorker)
}

inline void TaskWorker::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){arena}
    , decltype(_impl_.users_){arena}
    , decltype(_impl_.models_){arena}
    , decltype(_impl_.workflows_){arena}
    , decltype(_impl_.strategy_){0}
    , decltype(_impl_.strategy_info_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_strategy_info();
}

TaskWorker::~TaskWorker() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskWorker)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskWorker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_ids_.~RepeatedPtrField();
  _impl_.users_.~RepeatedPtrField();
  _impl_.models_.~RepeatedPtrField();
  _impl_.workflows_.~RepeatedPtrField();
  if (has_strategy_info()) {
    clear_strategy_info();
  }
}

void TaskWorker::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskWorker::clear_strategy_info() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.TaskWorker)
  switch (strategy_info_case()) {
    case kPartitionedStrategyInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.strategy_info_.partitioned_strategy_info_;
      }
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STRATEGY_INFO_NOT_SET;
}


void TaskWorker::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskWorker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_ids_.Clear();
  _impl_.users_.Clear();
  _impl_.models_.Clear();
  _impl_.workflows_.Clear();
  _impl_.strategy_ = 0;
  clear_strategy_info();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskWorker::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.TaskWorker.TaskWorkerStrategy strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strategy(static_cast<::clarifai::api::TaskWorker_TaskWorkerStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.TaskWorker.user_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TaskWorkerPartitionedStrategyInfo partitioned_strategy_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_partitioned_strategy_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.User users = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Model models = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Workflow workflows = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskWorker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskWorker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.TaskWorker.TaskWorkerStrategy strategy = 1;
  if (this->_internal_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_strategy(), target);
  }

  // repeated string user_ids = 2 [deprecated = true];
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TaskWorker.user_ids");
    target = stream->WriteString(2, s, target);
  }

  // .clarifai.api.TaskWorkerPartitionedStrategyInfo partitioned_strategy_info = 3;
  if (_internal_has_partitioned_strategy_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::partitioned_strategy_info(this),
        _Internal::partitioned_strategy_info(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.User users = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_users_size()); i < n; i++) {
    const auto& repfield = this->_internal_users(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Model models = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Workflow workflows = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_workflows_size()); i < n; i++) {
    const auto& repfield = this->_internal_workflows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskWorker)
  return target;
}

size_t TaskWorker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskWorker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.user_ids_.size());
  for (int i = 0, n = _impl_.user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.user_ids_.Get(i));
  }

  // repeated .clarifai.api.User users = 4;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->_impl_.users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Model models = 5;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->_impl_.models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Workflow workflows = 6;
  total_size += 1UL * this->_internal_workflows_size();
  for (const auto& msg : this->_impl_.workflows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.TaskWorker.TaskWorkerStrategy strategy = 1;
  if (this->_internal_strategy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_strategy());
  }

  switch (strategy_info_case()) {
    // .clarifai.api.TaskWorkerPartitionedStrategyInfo partitioned_strategy_info = 3;
    case kPartitionedStrategyInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.strategy_info_.partitioned_strategy_info_);
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskWorker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskWorker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskWorker::GetClassData() const { return &_class_data_; }


void TaskWorker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskWorker*>(&to_msg);
  auto& from = static_cast<const TaskWorker&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskWorker)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_ids_.MergeFrom(from._impl_.user_ids_);
  _this->_impl_.users_.MergeFrom(from._impl_.users_);
  _this->_impl_.models_.MergeFrom(from._impl_.models_);
  _this->_impl_.workflows_.MergeFrom(from._impl_.workflows_);
  if (from._internal_strategy() != 0) {
    _this->_internal_set_strategy(from._internal_strategy());
  }
  switch (from.strategy_info_case()) {
    case kPartitionedStrategyInfo: {
      _this->_internal_mutable_partitioned_strategy_info()->::clarifai::api::TaskWorkerPartitionedStrategyInfo::MergeFrom(
          from._internal_partitioned_strategy_info());
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskWorker::CopyFrom(const TaskWorker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskWorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskWorker::IsInitialized() const {
  return true;
}

void TaskWorker::InternalSwap(TaskWorker* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
  _impl_.users_.InternalSwap(&other->_impl_.users_);
  _impl_.models_.InternalSwap(&other->_impl_.models_);
  _impl_.workflows_.InternalSwap(&other->_impl_.workflows_);
  swap(_impl_.strategy_, other->_impl_.strategy_);
  swap(_impl_.strategy_info_, other->_impl_.strategy_info_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskWorker::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[132]);
}

// ===================================================================

class TaskWorkerPartitionedStrategyInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& weights(const TaskWorkerPartitionedStrategyInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
TaskWorkerPartitionedStrategyInfo::_Internal::weights(const TaskWorkerPartitionedStrategyInfo* msg) {
  return *msg->_impl_.weights_;
}
void TaskWorkerPartitionedStrategyInfo::clear_weights() {
  if (GetArenaForAllocation() == nullptr && _impl_.weights_ != nullptr) {
    delete _impl_.weights_;
  }
  _impl_.weights_ = nullptr;
}
TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskWorkerPartitionedStrategyInfo)
}
TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategyInfo(const TaskWorkerPartitionedStrategyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskWorkerPartitionedStrategyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weights_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.workers_per_input_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_weights()) {
    _this->_impl_.weights_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.weights_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.workers_per_input_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.workers_per_input_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskWorkerPartitionedStrategyInfo)
}

inline void TaskWorkerPartitionedStrategyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weights_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.workers_per_input_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TaskWorkerPartitionedStrategyInfo::~TaskWorkerPartitionedStrategyInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskWorkerPartitionedStrategyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.weights_;
}

void TaskWorkerPartitionedStrategyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskWorkerPartitionedStrategyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.weights_ != nullptr) {
    delete _impl_.weights_;
  }
  _impl_.weights_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.workers_per_input_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.workers_per_input_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskWorkerPartitionedStrategyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.TaskWorkerPartitionedStrategyInfo.TaskWorkerPartitionedStrategy type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::clarifai::api::TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 workers_per_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.workers_per_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct weights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskWorkerPartitionedStrategyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.TaskWorkerPartitionedStrategyInfo.TaskWorkerPartitionedStrategy type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 workers_per_input = 2;
  if (this->_internal_workers_per_input() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_workers_per_input(), target);
  }

  // .google.protobuf.Struct weights = 3;
  if (this->_internal_has_weights()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::weights(this),
        _Internal::weights(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  return target;
}

size_t TaskWorkerPartitionedStrategyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct weights = 3;
  if (this->_internal_has_weights()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.weights_);
  }

  // .clarifai.api.TaskWorkerPartitionedStrategyInfo.TaskWorkerPartitionedStrategy type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 workers_per_input = 2;
  if (this->_internal_workers_per_input() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_workers_per_input());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskWorkerPartitionedStrategyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskWorkerPartitionedStrategyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskWorkerPartitionedStrategyInfo::GetClassData() const { return &_class_data_; }


void TaskWorkerPartitionedStrategyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskWorkerPartitionedStrategyInfo*>(&to_msg);
  auto& from = static_cast<const TaskWorkerPartitionedStrategyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_weights()) {
    _this->_internal_mutable_weights()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_weights());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_workers_per_input() != 0) {
    _this->_internal_set_workers_per_input(from._internal_workers_per_input());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskWorkerPartitionedStrategyInfo::CopyFrom(const TaskWorkerPartitionedStrategyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskWorkerPartitionedStrategyInfo::IsInitialized() const {
  return true;
}

void TaskWorkerPartitionedStrategyInfo::InternalSwap(TaskWorkerPartitionedStrategyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskWorkerPartitionedStrategyInfo, _impl_.workers_per_input_)
      + sizeof(TaskWorkerPartitionedStrategyInfo::_impl_.workers_per_input_)
      - PROTOBUF_FIELD_OFFSET(TaskWorkerPartitionedStrategyInfo, _impl_.weights_)>(
          reinterpret_cast<char*>(&_impl_.weights_),
          reinterpret_cast<char*>(&other->_impl_.weights_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskWorkerPartitionedStrategyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[133]);
}

// ===================================================================

class TaskInputSource::_Internal {
 public:
};

TaskInputSource::TaskInputSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskInputSource)
}
TaskInputSource::TaskInputSource(const TaskInputSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskInputSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskInputSource)
}

inline void TaskInputSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskInputSource::~TaskInputSource() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskInputSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskInputSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void TaskInputSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskInputSource::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskInputSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskInputSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.TaskInputSource.TaskInputSourceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::clarifai::api::TaskInputSource_TaskInputSourceType>(val));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.TaskInputSource.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskInputSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskInputSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.TaskInputSource.TaskInputSourceType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TaskInputSource.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskInputSource)
  return target;
}

size_t TaskInputSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskInputSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.TaskInputSource.TaskInputSourceType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskInputSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskInputSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskInputSource::GetClassData() const { return &_class_data_; }


void TaskInputSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskInputSource*>(&to_msg);
  auto& from = static_cast<const TaskInputSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskInputSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskInputSource::CopyFrom(const TaskInputSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskInputSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInputSource::IsInitialized() const {
  return true;
}

void TaskInputSource::InternalSwap(TaskInputSource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskInputSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[134]);
}

// ===================================================================

class TaskReview::_Internal {
 public:
  static const ::clarifai::api::TaskReviewManualStrategyInfo& manual_strategy_info(const TaskReview* msg);
  static const ::clarifai::api::TaskReviewConsensusStrategyInfo& consensus_strategy_info(const TaskReview* msg);
};

const ::clarifai::api::TaskReviewManualStrategyInfo&
TaskReview::_Internal::manual_strategy_info(const TaskReview* msg) {
  return *msg->_impl_.strategy_info_.manual_strategy_info_;
}
const ::clarifai::api::TaskReviewConsensusStrategyInfo&
TaskReview::_Internal::consensus_strategy_info(const TaskReview* msg) {
  return *msg->_impl_.strategy_info_.consensus_strategy_info_;
}
void TaskReview::set_allocated_manual_strategy_info(::clarifai::api::TaskReviewManualStrategyInfo* manual_strategy_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_strategy_info();
  if (manual_strategy_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(manual_strategy_info);
    if (message_arena != submessage_arena) {
      manual_strategy_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manual_strategy_info, submessage_arena);
    }
    set_has_manual_strategy_info();
    _impl_.strategy_info_.manual_strategy_info_ = manual_strategy_info;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TaskReview.manual_strategy_info)
}
void TaskReview::set_allocated_consensus_strategy_info(::clarifai::api::TaskReviewConsensusStrategyInfo* consensus_strategy_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_strategy_info();
  if (consensus_strategy_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(consensus_strategy_info);
    if (message_arena != submessage_arena) {
      consensus_strategy_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus_strategy_info, submessage_arena);
    }
    set_has_consensus_strategy_info();
    _impl_.strategy_info_.consensus_strategy_info_ = consensus_strategy_info;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TaskReview.consensus_strategy_info)
}
TaskReview::TaskReview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskReview)
}
TaskReview::TaskReview(const TaskReview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskReview* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){from._impl_.user_ids_}
    , decltype(_impl_.users_){from._impl_.users_}
    , decltype(_impl_.strategy_){}
    , decltype(_impl_.strategy_info_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.strategy_ = from._impl_.strategy_;
  clear_has_strategy_info();
  switch (from.strategy_info_case()) {
    case kManualStrategyInfo: {
      _this->_internal_mutable_manual_strategy_info()->::clarifai::api::TaskReviewManualStrategyInfo::MergeFrom(
          from._internal_manual_strategy_info());
      break;
    }
    case kConsensusStrategyInfo: {
      _this->_internal_mutable_consensus_strategy_info()->::clarifai::api::TaskReviewConsensusStrategyInfo::MergeFrom(
          from._internal_consensus_strategy_info());
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskReview)
}

inline void TaskReview::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){arena}
    , decltype(_impl_.users_){arena}
    , decltype(_impl_.strategy_){0}
    , decltype(_impl_.strategy_info_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_strategy_info();
}

TaskReview::~TaskReview() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskReview)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskReview::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_ids_.~RepeatedPtrField();
  _impl_.users_.~RepeatedPtrField();
  if (has_strategy_info()) {
    clear_strategy_info();
  }
}

void TaskReview::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskReview::clear_strategy_info() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.TaskReview)
  switch (strategy_info_case()) {
    case kManualStrategyInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.strategy_info_.manual_strategy_info_;
      }
      break;
    }
    case kConsensusStrategyInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.strategy_info_.consensus_strategy_info_;
      }
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STRATEGY_INFO_NOT_SET;
}


void TaskReview::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskReview)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_ids_.Clear();
  _impl_.users_.Clear();
  _impl_.strategy_ = 0;
  clear_strategy_info();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskReview::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.TaskReview.TaskReviewStrategy strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strategy(static_cast<::clarifai::api::TaskReview_TaskReviewStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.TaskReview.user_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TaskReviewManualStrategyInfo manual_strategy_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_manual_strategy_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TaskReviewConsensusStrategyInfo consensus_strategy_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_strategy_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.User users = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskReview::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskReview)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.TaskReview.TaskReviewStrategy strategy = 1;
  if (this->_internal_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_strategy(), target);
  }

  // repeated string user_ids = 2 [deprecated = true];
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TaskReview.user_ids");
    target = stream->WriteString(2, s, target);
  }

  // .clarifai.api.TaskReviewManualStrategyInfo manual_strategy_info = 3;
  if (_internal_has_manual_strategy_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::manual_strategy_info(this),
        _Internal::manual_strategy_info(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.TaskReviewConsensusStrategyInfo consensus_strategy_info = 4;
  if (_internal_has_consensus_strategy_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::consensus_strategy_info(this),
        _Internal::consensus_strategy_info(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.User users = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_users_size()); i < n; i++) {
    const auto& repfield = this->_internal_users(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskReview)
  return target;
}

size_t TaskReview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskReview)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.user_ids_.size());
  for (int i = 0, n = _impl_.user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.user_ids_.Get(i));
  }

  // repeated .clarifai.api.User users = 5;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->_impl_.users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.TaskReview.TaskReviewStrategy strategy = 1;
  if (this->_internal_strategy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_strategy());
  }

  switch (strategy_info_case()) {
    // .clarifai.api.TaskReviewManualStrategyInfo manual_strategy_info = 3;
    case kManualStrategyInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.strategy_info_.manual_strategy_info_);
      break;
    }
    // .clarifai.api.TaskReviewConsensusStrategyInfo consensus_strategy_info = 4;
    case kConsensusStrategyInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.strategy_info_.consensus_strategy_info_);
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskReview::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskReview::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskReview::GetClassData() const { return &_class_data_; }


void TaskReview::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskReview*>(&to_msg);
  auto& from = static_cast<const TaskReview&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskReview)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_ids_.MergeFrom(from._impl_.user_ids_);
  _this->_impl_.users_.MergeFrom(from._impl_.users_);
  if (from._internal_strategy() != 0) {
    _this->_internal_set_strategy(from._internal_strategy());
  }
  switch (from.strategy_info_case()) {
    case kManualStrategyInfo: {
      _this->_internal_mutable_manual_strategy_info()->::clarifai::api::TaskReviewManualStrategyInfo::MergeFrom(
          from._internal_manual_strategy_info());
      break;
    }
    case kConsensusStrategyInfo: {
      _this->_internal_mutable_consensus_strategy_info()->::clarifai::api::TaskReviewConsensusStrategyInfo::MergeFrom(
          from._internal_consensus_strategy_info());
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskReview::CopyFrom(const TaskReview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskReview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskReview::IsInitialized() const {
  return true;
}

void TaskReview::InternalSwap(TaskReview* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
  _impl_.users_.InternalSwap(&other->_impl_.users_);
  swap(_impl_.strategy_, other->_impl_.strategy_);
  swap(_impl_.strategy_info_, other->_impl_.strategy_info_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskReview::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[135]);
}

// ===================================================================

class TaskReviewManualStrategyInfo::_Internal {
 public:
};

TaskReviewManualStrategyInfo::TaskReviewManualStrategyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskReviewManualStrategyInfo)
}
TaskReviewManualStrategyInfo::TaskReviewManualStrategyInfo(const TaskReviewManualStrategyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskReviewManualStrategyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_percentage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sample_percentage_ = from._impl_.sample_percentage_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskReviewManualStrategyInfo)
}

inline void TaskReviewManualStrategyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_percentage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TaskReviewManualStrategyInfo::~TaskReviewManualStrategyInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskReviewManualStrategyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskReviewManualStrategyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TaskReviewManualStrategyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskReviewManualStrategyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskReviewManualStrategyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sample_percentage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskReviewManualStrategyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float sample_percentage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.sample_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskReviewManualStrategyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskReviewManualStrategyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float sample_percentage = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sample_percentage = this->_internal_sample_percentage();
  uint32_t raw_sample_percentage;
  memcpy(&raw_sample_percentage, &tmp_sample_percentage, sizeof(tmp_sample_percentage));
  if (raw_sample_percentage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_sample_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskReviewManualStrategyInfo)
  return target;
}

size_t TaskReviewManualStrategyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskReviewManualStrategyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float sample_percentage = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sample_percentage = this->_internal_sample_percentage();
  uint32_t raw_sample_percentage;
  memcpy(&raw_sample_percentage, &tmp_sample_percentage, sizeof(tmp_sample_percentage));
  if (raw_sample_percentage != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskReviewManualStrategyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskReviewManualStrategyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskReviewManualStrategyInfo::GetClassData() const { return &_class_data_; }


void TaskReviewManualStrategyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskReviewManualStrategyInfo*>(&to_msg);
  auto& from = static_cast<const TaskReviewManualStrategyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskReviewManualStrategyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sample_percentage = from._internal_sample_percentage();
  uint32_t raw_sample_percentage;
  memcpy(&raw_sample_percentage, &tmp_sample_percentage, sizeof(tmp_sample_percentage));
  if (raw_sample_percentage != 0) {
    _this->_internal_set_sample_percentage(from._internal_sample_percentage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskReviewManualStrategyInfo::CopyFrom(const TaskReviewManualStrategyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskReviewManualStrategyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskReviewManualStrategyInfo::IsInitialized() const {
  return true;
}

void TaskReviewManualStrategyInfo::InternalSwap(TaskReviewManualStrategyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sample_percentage_, other->_impl_.sample_percentage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskReviewManualStrategyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[136]);
}

// ===================================================================

class TaskReviewConsensusStrategyInfo::_Internal {
 public:
};

TaskReviewConsensusStrategyInfo::TaskReviewConsensusStrategyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskReviewConsensusStrategyInfo)
}
TaskReviewConsensusStrategyInfo::TaskReviewConsensusStrategyInfo(const TaskReviewConsensusStrategyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskReviewConsensusStrategyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.approval_threshold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.approval_threshold_ = from._impl_.approval_threshold_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskReviewConsensusStrategyInfo)
}

inline void TaskReviewConsensusStrategyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.approval_threshold_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TaskReviewConsensusStrategyInfo::~TaskReviewConsensusStrategyInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskReviewConsensusStrategyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskReviewConsensusStrategyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TaskReviewConsensusStrategyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskReviewConsensusStrategyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.approval_threshold_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskReviewConsensusStrategyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 approval_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.approval_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskReviewConsensusStrategyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 approval_threshold = 2;
  if (this->_internal_approval_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_approval_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskReviewConsensusStrategyInfo)
  return target;
}

size_t TaskReviewConsensusStrategyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 approval_threshold = 2;
  if (this->_internal_approval_threshold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_approval_threshold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskReviewConsensusStrategyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskReviewConsensusStrategyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskReviewConsensusStrategyInfo::GetClassData() const { return &_class_data_; }


void TaskReviewConsensusStrategyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskReviewConsensusStrategyInfo*>(&to_msg);
  auto& from = static_cast<const TaskReviewConsensusStrategyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_approval_threshold() != 0) {
    _this->_internal_set_approval_threshold(from._internal_approval_threshold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskReviewConsensusStrategyInfo::CopyFrom(const TaskReviewConsensusStrategyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskReviewConsensusStrategyInfo::IsInitialized() const {
  return true;
}

void TaskReviewConsensusStrategyInfo::InternalSwap(TaskReviewConsensusStrategyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.approval_threshold_, other->_impl_.approval_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskReviewConsensusStrategyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[137]);
}

// ===================================================================

class TaskAIAssistant::_Internal {
 public:
};

TaskAIAssistant::TaskAIAssistant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskAIAssistant)
}
TaskAIAssistant::TaskAIAssistant(const TaskAIAssistant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskAIAssistant* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    _this->_impl_.workflow_id_.Set(from._internal_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskAIAssistant)
}

inline void TaskAIAssistant::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskAIAssistant::~TaskAIAssistant() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskAIAssistant)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskAIAssistant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.workflow_id_.Destroy();
}

void TaskAIAssistant::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskAIAssistant::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskAIAssistant)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.workflow_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskAIAssistant::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string workflow_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.TaskAIAssistant.workflow_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskAIAssistant::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskAIAssistant)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string workflow_id = 1;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TaskAIAssistant.workflow_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_workflow_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskAIAssistant)
  return target;
}

size_t TaskAIAssistant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskAIAssistant)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workflow_id = 1;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskAIAssistant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskAIAssistant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskAIAssistant::GetClassData() const { return &_class_data_; }


void TaskAIAssistant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskAIAssistant*>(&to_msg);
  auto& from = static_cast<const TaskAIAssistant&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskAIAssistant)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_workflow_id().empty()) {
    _this->_internal_set_workflow_id(from._internal_workflow_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskAIAssistant::CopyFrom(const TaskAIAssistant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskAIAssistant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskAIAssistant::IsInitialized() const {
  return true;
}

void TaskAIAssistant::InternalSwap(TaskAIAssistant* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_id_, lhs_arena,
      &other->_impl_.workflow_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskAIAssistant::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[138]);
}

// ===================================================================

class TaskStatusCountPerUser::_Internal {
 public:
};

TaskStatusCountPerUser::TaskStatusCountPerUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskStatusCountPerUser)
}
TaskStatusCountPerUser::TaskStatusCountPerUser(const TaskStatusCountPerUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskStatusCountPerUser* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.pending_){}
    , decltype(_impl_.awaiting_review_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.review_denied_){}
    , decltype(_impl_.awaiting_consensus_review_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pending_, &from._impl_.pending_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.awaiting_consensus_review_) -
    reinterpret_cast<char*>(&_impl_.pending_)) + sizeof(_impl_.awaiting_consensus_review_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskStatusCountPerUser)
}

inline void TaskStatusCountPerUser::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.pending_){0u}
    , decltype(_impl_.awaiting_review_){0u}
    , decltype(_impl_.success_){0u}
    , decltype(_impl_.review_denied_){0u}
    , decltype(_impl_.awaiting_consensus_review_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskStatusCountPerUser::~TaskStatusCountPerUser() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskStatusCountPerUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskStatusCountPerUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
}

void TaskStatusCountPerUser::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskStatusCountPerUser::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskStatusCountPerUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  ::memset(&_impl_.pending_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.awaiting_consensus_review_) -
      reinterpret_cast<char*>(&_impl_.pending_)) + sizeof(_impl_.awaiting_consensus_review_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskStatusCountPerUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.TaskStatusCountPerUser.user_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 pending = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 awaiting_review = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.awaiting_review_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 success = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 review_denied = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.review_denied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 awaiting_consensus_review = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.awaiting_consensus_review_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskStatusCountPerUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskStatusCountPerUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TaskStatusCountPerUser.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // uint32 pending = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pending(), target);
  }

  // uint32 awaiting_review = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_awaiting_review() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_awaiting_review(), target);
  }

  // uint32 success = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_success(), target);
  }

  // uint32 review_denied = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_review_denied() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_review_denied(), target);
  }

  // uint32 awaiting_consensus_review = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_awaiting_consensus_review() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_awaiting_consensus_review(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskStatusCountPerUser)
  return target;
}

size_t TaskStatusCountPerUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskStatusCountPerUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // uint32 pending = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_pending() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pending());
  }

  // uint32 awaiting_review = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_awaiting_review() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_awaiting_review());
  }

  // uint32 success = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_success() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_success());
  }

  // uint32 review_denied = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_review_denied() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_review_denied());
  }

  // uint32 awaiting_consensus_review = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_awaiting_consensus_review() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_awaiting_consensus_review());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskStatusCountPerUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskStatusCountPerUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskStatusCountPerUser::GetClassData() const { return &_class_data_; }


void TaskStatusCountPerUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskStatusCountPerUser*>(&to_msg);
  auto& from = static_cast<const TaskStatusCountPerUser&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskStatusCountPerUser)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_pending() != 0) {
    _this->_internal_set_pending(from._internal_pending());
  }
  if (from._internal_awaiting_review() != 0) {
    _this->_internal_set_awaiting_review(from._internal_awaiting_review());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_review_denied() != 0) {
    _this->_internal_set_review_denied(from._internal_review_denied());
  }
  if (from._internal_awaiting_consensus_review() != 0) {
    _this->_internal_set_awaiting_consensus_review(from._internal_awaiting_consensus_review());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskStatusCountPerUser::CopyFrom(const TaskStatusCountPerUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskStatusCountPerUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStatusCountPerUser::IsInitialized() const {
  return true;
}

void TaskStatusCountPerUser::InternalSwap(TaskStatusCountPerUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskStatusCountPerUser, _impl_.awaiting_consensus_review_)
      + sizeof(TaskStatusCountPerUser::_impl_.awaiting_consensus_review_)
      - PROTOBUF_FIELD_OFFSET(TaskStatusCountPerUser, _impl_.pending_)>(
          reinterpret_cast<char*>(&_impl_.pending_),
          reinterpret_cast<char*>(&other->_impl_.pending_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskStatusCountPerUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[139]);
}

// ===================================================================

class ThresholdRange::_Internal {
 public:
};

ThresholdRange::ThresholdRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ThresholdRange)
}
ThresholdRange::ThresholdRange(const ThresholdRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThresholdRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.is_lower_inclusive_){}
    , decltype(_impl_.is_upper_inclusive_){}
    , decltype(_impl_.lower_){}
    , decltype(_impl_.upper_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.is_lower_inclusive_, &from._impl_.is_lower_inclusive_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.upper_) -
    reinterpret_cast<char*>(&_impl_.is_lower_inclusive_)) + sizeof(_impl_.upper_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ThresholdRange)
}

inline void ThresholdRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.is_lower_inclusive_){false}
    , decltype(_impl_.is_upper_inclusive_){false}
    , decltype(_impl_.lower_){0}
    , decltype(_impl_.upper_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ThresholdRange::~ThresholdRange() {
  // @@protoc_insertion_point(destructor:clarifai.api.ThresholdRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThresholdRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ThresholdRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThresholdRange::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ThresholdRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.is_lower_inclusive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.upper_) -
      reinterpret_cast<char*>(&_impl_.is_lower_inclusive_)) + sizeof(_impl_.upper_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThresholdRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_lower_inclusive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_lower_inclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_upper_inclusive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_upper_inclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float lower = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float upper = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThresholdRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ThresholdRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_lower_inclusive = 1;
  if (this->_internal_is_lower_inclusive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_lower_inclusive(), target);
  }

  // bool is_upper_inclusive = 2;
  if (this->_internal_is_upper_inclusive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_upper_inclusive(), target);
  }

  // float lower = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lower = this->_internal_lower();
  uint32_t raw_lower;
  memcpy(&raw_lower, &tmp_lower, sizeof(tmp_lower));
  if (raw_lower != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_lower(), target);
  }

  // float upper = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_upper = this->_internal_upper();
  uint32_t raw_upper;
  memcpy(&raw_upper, &tmp_upper, sizeof(tmp_upper));
  if (raw_upper != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_upper(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ThresholdRange)
  return target;
}

size_t ThresholdRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ThresholdRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_lower_inclusive = 1;
  if (this->_internal_is_lower_inclusive() != 0) {
    total_size += 1 + 1;
  }

  // bool is_upper_inclusive = 2;
  if (this->_internal_is_upper_inclusive() != 0) {
    total_size += 1 + 1;
  }

  // float lower = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lower = this->_internal_lower();
  uint32_t raw_lower;
  memcpy(&raw_lower, &tmp_lower, sizeof(tmp_lower));
  if (raw_lower != 0) {
    total_size += 1 + 4;
  }

  // float upper = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_upper = this->_internal_upper();
  uint32_t raw_upper;
  memcpy(&raw_upper, &tmp_upper, sizeof(tmp_upper));
  if (raw_upper != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThresholdRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThresholdRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThresholdRange::GetClassData() const { return &_class_data_; }


void ThresholdRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThresholdRange*>(&to_msg);
  auto& from = static_cast<const ThresholdRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ThresholdRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_lower_inclusive() != 0) {
    _this->_internal_set_is_lower_inclusive(from._internal_is_lower_inclusive());
  }
  if (from._internal_is_upper_inclusive() != 0) {
    _this->_internal_set_is_upper_inclusive(from._internal_is_upper_inclusive());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lower = from._internal_lower();
  uint32_t raw_lower;
  memcpy(&raw_lower, &tmp_lower, sizeof(tmp_lower));
  if (raw_lower != 0) {
    _this->_internal_set_lower(from._internal_lower());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_upper = from._internal_upper();
  uint32_t raw_upper;
  memcpy(&raw_upper, &tmp_upper, sizeof(tmp_upper));
  if (raw_upper != 0) {
    _this->_internal_set_upper(from._internal_upper());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThresholdRange::CopyFrom(const ThresholdRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ThresholdRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThresholdRange::IsInitialized() const {
  return true;
}

void ThresholdRange::InternalSwap(ThresholdRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThresholdRange, _impl_.upper_)
      + sizeof(ThresholdRange::_impl_.upper_)
      - PROTOBUF_FIELD_OFFSET(ThresholdRange, _impl_.is_lower_inclusive_)>(
          reinterpret_cast<char*>(&_impl_.is_lower_inclusive_),
          reinterpret_cast<char*>(&other->_impl_.is_lower_inclusive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThresholdRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[140]);
}

// ===================================================================

class TaskConceptAutoAnnotationConfig::_Internal {
 public:
  static const ::clarifai::api::ThresholdRange& threshold_range(const TaskConceptAutoAnnotationConfig* msg);
};

const ::clarifai::api::ThresholdRange&
TaskConceptAutoAnnotationConfig::_Internal::threshold_range(const TaskConceptAutoAnnotationConfig* msg) {
  return *msg->_impl_.threshold_range_;
}
TaskConceptAutoAnnotationConfig::TaskConceptAutoAnnotationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskConceptAutoAnnotationConfig)
}
TaskConceptAutoAnnotationConfig::TaskConceptAutoAnnotationConfig(const TaskConceptAutoAnnotationConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskConceptAutoAnnotationConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.threshold_range_){nullptr}
    , decltype(_impl_.annotation_data_types_){}
    , decltype(_impl_.status_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_threshold_range()) {
    _this->_impl_.threshold_range_ = new ::clarifai::api::ThresholdRange(*from._impl_.threshold_range_);
  }
  ::memcpy(&_impl_.annotation_data_types_, &from._impl_.annotation_data_types_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_code_) -
    reinterpret_cast<char*>(&_impl_.annotation_data_types_)) + sizeof(_impl_.status_code_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskConceptAutoAnnotationConfig)
}

inline void TaskConceptAutoAnnotationConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.threshold_range_){nullptr}
    , decltype(_impl_.annotation_data_types_){0u}
    , decltype(_impl_.status_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TaskConceptAutoAnnotationConfig::~TaskConceptAutoAnnotationConfig() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskConceptAutoAnnotationConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskConceptAutoAnnotationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.threshold_range_;
}

void TaskConceptAutoAnnotationConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskConceptAutoAnnotationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskConceptAutoAnnotationConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.threshold_range_ != nullptr) {
    delete _impl_.threshold_range_;
  }
  _impl_.threshold_range_ = nullptr;
  ::memset(&_impl_.annotation_data_types_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_code_) -
      reinterpret_cast<char*>(&_impl_.annotation_data_types_)) + sizeof(_impl_.status_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskConceptAutoAnnotationConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 annotation_data_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.annotation_data_types_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ThresholdRange threshold_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_threshold_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.StatusCode status_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status_code(static_cast<::clarifai::api::status::StatusCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskConceptAutoAnnotationConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskConceptAutoAnnotationConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 annotation_data_types = 1;
  if (this->_internal_annotation_data_types() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_annotation_data_types(), target);
  }

  // .clarifai.api.ThresholdRange threshold_range = 2;
  if (this->_internal_has_threshold_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::threshold_range(this),
        _Internal::threshold_range(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.status.StatusCode status_code = 3;
  if (this->_internal_status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskConceptAutoAnnotationConfig)
  return target;
}

size_t TaskConceptAutoAnnotationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskConceptAutoAnnotationConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.ThresholdRange threshold_range = 2;
  if (this->_internal_has_threshold_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.threshold_range_);
  }

  // uint32 annotation_data_types = 1;
  if (this->_internal_annotation_data_types() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_annotation_data_types());
  }

  // .clarifai.api.status.StatusCode status_code = 3;
  if (this->_internal_status_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskConceptAutoAnnotationConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskConceptAutoAnnotationConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskConceptAutoAnnotationConfig::GetClassData() const { return &_class_data_; }


void TaskConceptAutoAnnotationConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskConceptAutoAnnotationConfig*>(&to_msg);
  auto& from = static_cast<const TaskConceptAutoAnnotationConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskConceptAutoAnnotationConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_threshold_range()) {
    _this->_internal_mutable_threshold_range()->::clarifai::api::ThresholdRange::MergeFrom(
        from._internal_threshold_range());
  }
  if (from._internal_annotation_data_types() != 0) {
    _this->_internal_set_annotation_data_types(from._internal_annotation_data_types());
  }
  if (from._internal_status_code() != 0) {
    _this->_internal_set_status_code(from._internal_status_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskConceptAutoAnnotationConfig::CopyFrom(const TaskConceptAutoAnnotationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskConceptAutoAnnotationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskConceptAutoAnnotationConfig::IsInitialized() const {
  return true;
}

void TaskConceptAutoAnnotationConfig::InternalSwap(TaskConceptAutoAnnotationConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskConceptAutoAnnotationConfig, _impl_.status_code_)
      + sizeof(TaskConceptAutoAnnotationConfig::_impl_.status_code_)
      - PROTOBUF_FIELD_OFFSET(TaskConceptAutoAnnotationConfig, _impl_.threshold_range_)>(
          reinterpret_cast<char*>(&_impl_.threshold_range_),
          reinterpret_cast<char*>(&other->_impl_.threshold_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskConceptAutoAnnotationConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[141]);
}

// ===================================================================

class TaskConcept::_Internal {
 public:
  static const ::clarifai::api::Concept& concept(const TaskConcept* msg);
  static const ::clarifai::api::TaskConceptAutoAnnotationConfig& auto_annotation_config(const TaskConcept* msg);
};

const ::clarifai::api::Concept&
TaskConcept::_Internal::concept(const TaskConcept* msg) {
  return *msg->_impl_.concept_;
}
const ::clarifai::api::TaskConceptAutoAnnotationConfig&
TaskConcept::_Internal::auto_annotation_config(const TaskConcept* msg) {
  return *msg->_impl_.auto_annotation_config_;
}
TaskConcept::TaskConcept(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskConcept)
}
TaskConcept::TaskConcept(const TaskConcept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskConcept* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_){nullptr}
    , decltype(_impl_.auto_annotation_config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_concept()) {
    _this->_impl_.concept_ = new ::clarifai::api::Concept(*from._impl_.concept_);
  }
  if (from._internal_has_auto_annotation_config()) {
    _this->_impl_.auto_annotation_config_ = new ::clarifai::api::TaskConceptAutoAnnotationConfig(*from._impl_.auto_annotation_config_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskConcept)
}

inline void TaskConcept::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_){nullptr}
    , decltype(_impl_.auto_annotation_config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TaskConcept::~TaskConcept() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskConcept)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskConcept::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.concept_;
  if (this != internal_default_instance()) delete _impl_.auto_annotation_config_;
}

void TaskConcept::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskConcept::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskConcept)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.concept_ != nullptr) {
    delete _impl_.concept_;
  }
  _impl_.concept_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.auto_annotation_config_ != nullptr) {
    delete _impl_.auto_annotation_config_;
  }
  _impl_.auto_annotation_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskConcept::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Concept concept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TaskConceptAutoAnnotationConfig auto_annotation_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_annotation_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskConcept::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskConcept)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Concept concept = 1;
  if (this->_internal_has_concept()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::concept(this),
        _Internal::concept(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.TaskConceptAutoAnnotationConfig auto_annotation_config = 2;
  if (this->_internal_has_auto_annotation_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::auto_annotation_config(this),
        _Internal::auto_annotation_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskConcept)
  return target;
}

size_t TaskConcept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskConcept)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Concept concept = 1;
  if (this->_internal_has_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.concept_);
  }

  // .clarifai.api.TaskConceptAutoAnnotationConfig auto_annotation_config = 2;
  if (this->_internal_has_auto_annotation_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.auto_annotation_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskConcept::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskConcept::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskConcept::GetClassData() const { return &_class_data_; }


void TaskConcept::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskConcept*>(&to_msg);
  auto& from = static_cast<const TaskConcept&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskConcept)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_concept()) {
    _this->_internal_mutable_concept()->::clarifai::api::Concept::MergeFrom(
        from._internal_concept());
  }
  if (from._internal_has_auto_annotation_config()) {
    _this->_internal_mutable_auto_annotation_config()->::clarifai::api::TaskConceptAutoAnnotationConfig::MergeFrom(
        from._internal_auto_annotation_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskConcept::CopyFrom(const TaskConcept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskConcept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskConcept::IsInitialized() const {
  return true;
}

void TaskConcept::InternalSwap(TaskConcept* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskConcept, _impl_.auto_annotation_config_)
      + sizeof(TaskConcept::_impl_.auto_annotation_config_)
      - PROTOBUF_FIELD_OFFSET(TaskConcept, _impl_.concept_)>(
          reinterpret_cast<char*>(&_impl_.concept_),
          reinterpret_cast<char*>(&other->_impl_.concept_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskConcept::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[142]);
}

// ===================================================================

class Collector::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Collector* msg);
  static const ::clarifai::api::CollectorSource& collector_source(const Collector* msg);
  static const ::clarifai::api::status::Status& status(const Collector* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Collector::_Internal::created_at(const Collector* msg) {
  return *msg->_impl_.created_at_;
}
const ::clarifai::api::CollectorSource&
Collector::_Internal::collector_source(const Collector* msg) {
  return *msg->_impl_.collector_source_;
}
const ::clarifai::api::status::Status&
Collector::_Internal::status(const Collector* msg) {
  return *msg->_impl_.status_;
}
void Collector::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Collector::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
Collector::Collector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Collector)
}
Collector::Collector(const Collector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Collector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.pre_queue_workflow_id_){}
    , decltype(_impl_.post_queue_workflow_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.collector_source_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pre_queue_workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pre_queue_workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pre_queue_workflow_id().empty()) {
    _this->_impl_.pre_queue_workflow_id_.Set(from._internal_pre_queue_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.post_queue_workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.post_queue_workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_post_queue_workflow_id().empty()) {
    _this->_impl_.post_queue_workflow_id_.Set(from._internal_post_queue_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_collector_source()) {
    _this->_impl_.collector_source_ = new ::clarifai::api::CollectorSource(*from._impl_.collector_source_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Collector)
}

inline void Collector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.pre_queue_workflow_id_){}
    , decltype(_impl_.post_queue_workflow_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.collector_source_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pre_queue_workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pre_queue_workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.post_queue_workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.post_queue_workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Collector::~Collector() {
  // @@protoc_insertion_point(destructor:clarifai.api.Collector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Collector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.description_.Destroy();
  _impl_.pre_queue_workflow_id_.Destroy();
  _impl_.post_queue_workflow_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.collector_source_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void Collector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Collector::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Collector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.pre_queue_workflow_id_.ClearToEmpty();
  _impl_.post_queue_workflow_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.collector_source_ != nullptr) {
    delete _impl_.collector_source_;
  }
  _impl_.collector_source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Collector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Collector.id"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Collector.description"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pre_queue_workflow_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pre_queue_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Collector.pre_queue_workflow_id"));
        } else
          goto handle_unusual;
        continue;
      // string post_queue_workflow_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_post_queue_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Collector.post_queue_workflow_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.CollectorSource collector_source = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_collector_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Collector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Collector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collector.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collector.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // string pre_queue_workflow_id = 4;
  if (!this->_internal_pre_queue_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pre_queue_workflow_id().data(), static_cast<int>(this->_internal_pre_queue_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collector.pre_queue_workflow_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pre_queue_workflow_id(), target);
  }

  // string post_queue_workflow_id = 5;
  if (!this->_internal_post_queue_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_queue_workflow_id().data(), static_cast<int>(this->_internal_post_queue_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collector.post_queue_workflow_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_post_queue_workflow_id(), target);
  }

  // .clarifai.api.CollectorSource collector_source = 6;
  if (this->_internal_has_collector_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::collector_source(this),
        _Internal::collector_source(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.status.Status status = 7;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Collector)
  return target;
}

size_t Collector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Collector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string pre_queue_workflow_id = 4;
  if (!this->_internal_pre_queue_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pre_queue_workflow_id());
  }

  // string post_queue_workflow_id = 5;
  if (!this->_internal_post_queue_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_queue_workflow_id());
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .clarifai.api.CollectorSource collector_source = 6;
  if (this->_internal_has_collector_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.collector_source_);
  }

  // .clarifai.api.status.Status status = 7;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Collector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Collector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Collector::GetClassData() const { return &_class_data_; }


void Collector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Collector*>(&to_msg);
  auto& from = static_cast<const Collector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Collector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_pre_queue_workflow_id().empty()) {
    _this->_internal_set_pre_queue_workflow_id(from._internal_pre_queue_workflow_id());
  }
  if (!from._internal_post_queue_workflow_id().empty()) {
    _this->_internal_set_post_queue_workflow_id(from._internal_post_queue_workflow_id());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_collector_source()) {
    _this->_internal_mutable_collector_source()->::clarifai::api::CollectorSource::MergeFrom(
        from._internal_collector_source());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Collector::CopyFrom(const Collector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Collector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collector::IsInitialized() const {
  return true;
}

void Collector::InternalSwap(Collector* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pre_queue_workflow_id_, lhs_arena,
      &other->_impl_.pre_queue_workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.post_queue_workflow_id_, lhs_arena,
      &other->_impl_.post_queue_workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Collector, _impl_.status_)
      + sizeof(Collector::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Collector, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Collector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[143]);
}

// ===================================================================

class CollectorSource::_Internal {
 public:
  static const ::clarifai::api::APIPostModelOutputsCollectorSource& api_post_model_outputs_collector_source(const CollectorSource* msg);
};

const ::clarifai::api::APIPostModelOutputsCollectorSource&
CollectorSource::_Internal::api_post_model_outputs_collector_source(const CollectorSource* msg) {
  return *msg->_impl_.api_post_model_outputs_collector_source_;
}
CollectorSource::CollectorSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.CollectorSource)
}
CollectorSource::CollectorSource(const CollectorSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollectorSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.api_post_model_outputs_collector_source_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_api_post_model_outputs_collector_source()) {
    _this->_impl_.api_post_model_outputs_collector_source_ = new ::clarifai::api::APIPostModelOutputsCollectorSource(*from._impl_.api_post_model_outputs_collector_source_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.CollectorSource)
}

inline void CollectorSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.api_post_model_outputs_collector_source_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollectorSource::~CollectorSource() {
  // @@protoc_insertion_point(destructor:clarifai.api.CollectorSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectorSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.api_post_model_outputs_collector_source_;
}

void CollectorSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollectorSource::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.CollectorSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.api_post_model_outputs_collector_source_ != nullptr) {
    delete _impl_.api_post_model_outputs_collector_source_;
  }
  _impl_.api_post_model_outputs_collector_source_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectorSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.APIPostModelOutputsCollectorSource api_post_model_outputs_collector_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_api_post_model_outputs_collector_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectorSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.CollectorSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.APIPostModelOutputsCollectorSource api_post_model_outputs_collector_source = 2;
  if (this->_internal_has_api_post_model_outputs_collector_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::api_post_model_outputs_collector_source(this),
        _Internal::api_post_model_outputs_collector_source(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.CollectorSource)
  return target;
}

size_t CollectorSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.CollectorSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.APIPostModelOutputsCollectorSource api_post_model_outputs_collector_source = 2;
  if (this->_internal_has_api_post_model_outputs_collector_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.api_post_model_outputs_collector_source_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectorSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollectorSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectorSource::GetClassData() const { return &_class_data_; }


void CollectorSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollectorSource*>(&to_msg);
  auto& from = static_cast<const CollectorSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.CollectorSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_api_post_model_outputs_collector_source()) {
    _this->_internal_mutable_api_post_model_outputs_collector_source()->::clarifai::api::APIPostModelOutputsCollectorSource::MergeFrom(
        from._internal_api_post_model_outputs_collector_source());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectorSource::CopyFrom(const CollectorSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.CollectorSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectorSource::IsInitialized() const {
  return true;
}

void CollectorSource::InternalSwap(CollectorSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.api_post_model_outputs_collector_source_, other->_impl_.api_post_model_outputs_collector_source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectorSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[144]);
}

// ===================================================================

class APIPostModelOutputsCollectorSource::_Internal {
 public:
};

APIPostModelOutputsCollectorSource::APIPostModelOutputsCollectorSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.APIPostModelOutputsCollectorSource)
}
APIPostModelOutputsCollectorSource::APIPostModelOutputsCollectorSource(const APIPostModelOutputsCollectorSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APIPostModelOutputsCollectorSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_user_id_){}
    , decltype(_impl_.model_app_id_){}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.post_inputs_key_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_user_id().empty()) {
    _this->_impl_.model_user_id_.Set(from._internal_model_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_app_id().empty()) {
    _this->_impl_.model_app_id_.Set(from._internal_model_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    _this->_impl_.model_version_id_.Set(from._internal_model_version_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.post_inputs_key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.post_inputs_key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_post_inputs_key_id().empty()) {
    _this->_impl_.post_inputs_key_id_.Set(from._internal_post_inputs_key_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.APIPostModelOutputsCollectorSource)
}

inline void APIPostModelOutputsCollectorSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_user_id_){}
    , decltype(_impl_.model_app_id_){}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.post_inputs_key_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.post_inputs_key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.post_inputs_key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

APIPostModelOutputsCollectorSource::~APIPostModelOutputsCollectorSource() {
  // @@protoc_insertion_point(destructor:clarifai.api.APIPostModelOutputsCollectorSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APIPostModelOutputsCollectorSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_user_id_.Destroy();
  _impl_.model_app_id_.Destroy();
  _impl_.model_id_.Destroy();
  _impl_.model_version_id_.Destroy();
  _impl_.post_inputs_key_id_.Destroy();
}

void APIPostModelOutputsCollectorSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APIPostModelOutputsCollectorSource::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.APIPostModelOutputsCollectorSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_user_id_.ClearToEmpty();
  _impl_.model_app_id_.ClearToEmpty();
  _impl_.model_id_.ClearToEmpty();
  _impl_.model_version_id_.ClearToEmpty();
  _impl_.post_inputs_key_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APIPostModelOutputsCollectorSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.APIPostModelOutputsCollectorSource.model_user_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.APIPostModelOutputsCollectorSource.model_app_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.APIPostModelOutputsCollectorSource.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.APIPostModelOutputsCollectorSource.model_version_id"));
        } else
          goto handle_unusual;
        continue;
      // string post_inputs_key_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_post_inputs_key_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APIPostModelOutputsCollectorSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.APIPostModelOutputsCollectorSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_user_id = 1;
  if (!this->_internal_model_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_user_id().data(), static_cast<int>(this->_internal_model_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.APIPostModelOutputsCollectorSource.model_user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_user_id(), target);
  }

  // string model_app_id = 2;
  if (!this->_internal_model_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_app_id().data(), static_cast<int>(this->_internal_model_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.APIPostModelOutputsCollectorSource.model_app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_app_id(), target);
  }

  // string model_id = 3;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.APIPostModelOutputsCollectorSource.model_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_id(), target);
  }

  // string model_version_id = 4;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.APIPostModelOutputsCollectorSource.model_version_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model_version_id(), target);
  }

  // string post_inputs_key_id = 5;
  if (!this->_internal_post_inputs_key_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_inputs_key_id().data(), static_cast<int>(this->_internal_post_inputs_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_post_inputs_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.APIPostModelOutputsCollectorSource)
  return target;
}

size_t APIPostModelOutputsCollectorSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.APIPostModelOutputsCollectorSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_user_id = 1;
  if (!this->_internal_model_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_user_id());
  }

  // string model_app_id = 2;
  if (!this->_internal_model_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_app_id());
  }

  // string model_id = 3;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_version_id = 4;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // string post_inputs_key_id = 5;
  if (!this->_internal_post_inputs_key_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_inputs_key_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APIPostModelOutputsCollectorSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APIPostModelOutputsCollectorSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APIPostModelOutputsCollectorSource::GetClassData() const { return &_class_data_; }


void APIPostModelOutputsCollectorSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APIPostModelOutputsCollectorSource*>(&to_msg);
  auto& from = static_cast<const APIPostModelOutputsCollectorSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.APIPostModelOutputsCollectorSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_user_id().empty()) {
    _this->_internal_set_model_user_id(from._internal_model_user_id());
  }
  if (!from._internal_model_app_id().empty()) {
    _this->_internal_set_model_app_id(from._internal_model_app_id());
  }
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_model_version_id().empty()) {
    _this->_internal_set_model_version_id(from._internal_model_version_id());
  }
  if (!from._internal_post_inputs_key_id().empty()) {
    _this->_internal_set_post_inputs_key_id(from._internal_post_inputs_key_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APIPostModelOutputsCollectorSource::CopyFrom(const APIPostModelOutputsCollectorSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.APIPostModelOutputsCollectorSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APIPostModelOutputsCollectorSource::IsInitialized() const {
  return true;
}

void APIPostModelOutputsCollectorSource::InternalSwap(APIPostModelOutputsCollectorSource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_user_id_, lhs_arena,
      &other->_impl_.model_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_app_id_, lhs_arena,
      &other->_impl_.model_app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_version_id_, lhs_arena,
      &other->_impl_.model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.post_inputs_key_id_, lhs_arena,
      &other->_impl_.post_inputs_key_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata APIPostModelOutputsCollectorSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[145]);
}

// ===================================================================

class StatValue::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const StatValue* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StatValue::_Internal::time(const StatValue* msg) {
  return *msg->_impl_.time_;
}
void StatValue::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
StatValue::StatValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.StatValue)
}
StatValue::StatValue(const StatValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StatValue)
}

inline void StatValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatValue::~StatValue() {
  // @@protoc_insertion_point(destructor:clarifai.api.StatValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.time_;
}

void StatValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatValue::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StatValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.StatValue.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StatValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // float value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  // repeated string tags = 3;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StatValue.tags");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StatValue)
  return target;
}

size_t StatValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StatValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // float value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatValue::GetClassData() const { return &_class_data_; }


void StatValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatValue*>(&to_msg);
  auto& from = static_cast<const StatValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StatValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatValue::CopyFrom(const StatValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StatValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatValue::IsInitialized() const {
  return true;
}

void StatValue::InternalSwap(StatValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatValue, _impl_.value_)
      + sizeof(StatValue::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(StatValue, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[146]);
}

// ===================================================================

class StatValueAggregateResult::_Internal {
 public:
  static const ::clarifai::api::StatValueAggregateQuery& stat_value_aggregate_query(const StatValueAggregateResult* msg);
};

const ::clarifai::api::StatValueAggregateQuery&
StatValueAggregateResult::_Internal::stat_value_aggregate_query(const StatValueAggregateResult* msg) {
  return *msg->_impl_.stat_value_aggregate_query_;
}
StatValueAggregateResult::StatValueAggregateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.StatValueAggregateResult)
}
StatValueAggregateResult::StatValueAggregateResult(const StatValueAggregateResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatValueAggregateResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_value_aggregates_){from._impl_.stat_value_aggregates_}
    , decltype(_impl_.stat_value_aggregate_query_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stat_value_aggregate_query()) {
    _this->_impl_.stat_value_aggregate_query_ = new ::clarifai::api::StatValueAggregateQuery(*from._impl_.stat_value_aggregate_query_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StatValueAggregateResult)
}

inline void StatValueAggregateResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_value_aggregates_){arena}
    , decltype(_impl_.stat_value_aggregate_query_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatValueAggregateResult::~StatValueAggregateResult() {
  // @@protoc_insertion_point(destructor:clarifai.api.StatValueAggregateResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatValueAggregateResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stat_value_aggregates_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.stat_value_aggregate_query_;
}

void StatValueAggregateResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatValueAggregateResult::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StatValueAggregateResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stat_value_aggregates_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.stat_value_aggregate_query_ != nullptr) {
    delete _impl_.stat_value_aggregate_query_;
  }
  _impl_.stat_value_aggregate_query_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatValueAggregateResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.StatValueAggregate stat_value_aggregates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_value_aggregates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.StatValueAggregateQuery stat_value_aggregate_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat_value_aggregate_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatValueAggregateResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StatValueAggregateResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValueAggregate stat_value_aggregates = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stat_value_aggregates_size()); i < n; i++) {
    const auto& repfield = this->_internal_stat_value_aggregates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.StatValueAggregateQuery stat_value_aggregate_query = 2;
  if (this->_internal_has_stat_value_aggregate_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stat_value_aggregate_query(this),
        _Internal::stat_value_aggregate_query(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StatValueAggregateResult)
  return target;
}

size_t StatValueAggregateResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StatValueAggregateResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValueAggregate stat_value_aggregates = 1;
  total_size += 1UL * this->_internal_stat_value_aggregates_size();
  for (const auto& msg : this->_impl_.stat_value_aggregates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.StatValueAggregateQuery stat_value_aggregate_query = 2;
  if (this->_internal_has_stat_value_aggregate_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stat_value_aggregate_query_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatValueAggregateResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatValueAggregateResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatValueAggregateResult::GetClassData() const { return &_class_data_; }


void StatValueAggregateResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatValueAggregateResult*>(&to_msg);
  auto& from = static_cast<const StatValueAggregateResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StatValueAggregateResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stat_value_aggregates_.MergeFrom(from._impl_.stat_value_aggregates_);
  if (from._internal_has_stat_value_aggregate_query()) {
    _this->_internal_mutable_stat_value_aggregate_query()->::clarifai::api::StatValueAggregateQuery::MergeFrom(
        from._internal_stat_value_aggregate_query());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatValueAggregateResult::CopyFrom(const StatValueAggregateResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StatValueAggregateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatValueAggregateResult::IsInitialized() const {
  return true;
}

void StatValueAggregateResult::InternalSwap(StatValueAggregateResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stat_value_aggregates_.InternalSwap(&other->_impl_.stat_value_aggregates_);
  swap(_impl_.stat_value_aggregate_query_, other->_impl_.stat_value_aggregate_query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatValueAggregateResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[147]);
}

// ===================================================================

class StatValueAggregate::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const StatValueAggregate* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StatValueAggregate::_Internal::time(const StatValueAggregate* msg) {
  return *msg->_impl_.time_;
}
void StatValueAggregate::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
StatValueAggregate::StatValueAggregate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.StatValueAggregate)
}
StatValueAggregate::StatValueAggregate(const StatValueAggregate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatValueAggregate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.count_){}
    , decltype(_impl_.aggregate_value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  ::memcpy(&_impl_.count_, &from._impl_.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.aggregate_value_) -
    reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.aggregate_value_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StatValueAggregate)
}

inline void StatValueAggregate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.count_){uint64_t{0u}}
    , decltype(_impl_.aggregate_value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatValueAggregate::~StatValueAggregate() {
  // @@protoc_insertion_point(destructor:clarifai.api.StatValueAggregate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatValueAggregate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.time_;
}

void StatValueAggregate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatValueAggregate::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StatValueAggregate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  ::memset(&_impl_.count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.aggregate_value_) -
      reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.aggregate_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatValueAggregate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float aggregate_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.aggregate_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.StatValueAggregate.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatValueAggregate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StatValueAggregate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // float aggregate_value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_aggregate_value = this->_internal_aggregate_value();
  uint32_t raw_aggregate_value;
  memcpy(&raw_aggregate_value, &tmp_aggregate_value, sizeof(tmp_aggregate_value));
  if (raw_aggregate_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_aggregate_value(), target);
  }

  // uint64 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_count(), target);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StatValueAggregate.tags");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StatValueAggregate)
  return target;
}

size_t StatValueAggregate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StatValueAggregate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // uint64 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  // float aggregate_value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_aggregate_value = this->_internal_aggregate_value();
  uint32_t raw_aggregate_value;
  memcpy(&raw_aggregate_value, &tmp_aggregate_value, sizeof(tmp_aggregate_value));
  if (raw_aggregate_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatValueAggregate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatValueAggregate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatValueAggregate::GetClassData() const { return &_class_data_; }


void StatValueAggregate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatValueAggregate*>(&to_msg);
  auto& from = static_cast<const StatValueAggregate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StatValueAggregate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_aggregate_value = from._internal_aggregate_value();
  uint32_t raw_aggregate_value;
  memcpy(&raw_aggregate_value, &tmp_aggregate_value, sizeof(tmp_aggregate_value));
  if (raw_aggregate_value != 0) {
    _this->_internal_set_aggregate_value(from._internal_aggregate_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatValueAggregate::CopyFrom(const StatValueAggregate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StatValueAggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatValueAggregate::IsInitialized() const {
  return true;
}

void StatValueAggregate::InternalSwap(StatValueAggregate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatValueAggregate, _impl_.aggregate_value_)
      + sizeof(StatValueAggregate::_impl_.aggregate_value_)
      - PROTOBUF_FIELD_OFFSET(StatValueAggregate, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatValueAggregate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[148]);
}

// ===================================================================

class StatValueAggregateQuery::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const StatValueAggregateQuery* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const StatValueAggregateQuery* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StatValueAggregateQuery::_Internal::start_time(const StatValueAggregateQuery* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StatValueAggregateQuery::_Internal::end_time(const StatValueAggregateQuery* msg) {
  return *msg->_impl_.end_time_;
}
void StatValueAggregateQuery::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void StatValueAggregateQuery::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
}
StatValueAggregateQuery::StatValueAggregateQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.StatValueAggregateQuery)
}
StatValueAggregateQuery::StatValueAggregateQuery(const StatValueAggregateQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatValueAggregateQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.tag_groups_){from._impl_.tag_groups_}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.stat_value_agg_type_){}
    , decltype(_impl_.stat_time_agg_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_end_time()) {
    _this->_impl_.end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_time_);
  }
  ::memcpy(&_impl_.stat_value_agg_type_, &from._impl_.stat_value_agg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stat_time_agg_type_) -
    reinterpret_cast<char*>(&_impl_.stat_value_agg_type_)) + sizeof(_impl_.stat_time_agg_type_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StatValueAggregateQuery)
}

inline void StatValueAggregateQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , decltype(_impl_.tag_groups_){arena}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.stat_value_agg_type_){0}
    , decltype(_impl_.stat_time_agg_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatValueAggregateQuery::~StatValueAggregateQuery() {
  // @@protoc_insertion_point(destructor:clarifai.api.StatValueAggregateQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatValueAggregateQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedPtrField();
  _impl_.tag_groups_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
}

void StatValueAggregateQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatValueAggregateQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StatValueAggregateQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.tag_groups_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
  ::memset(&_impl_.stat_value_agg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stat_time_agg_type_) -
      reinterpret_cast<char*>(&_impl_.stat_value_agg_type_)) + sizeof(_impl_.stat_time_agg_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatValueAggregateQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.StatValueAggregateQuery.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tag_groups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tag_groups();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.StatValueAggregateQuery.tag_groups"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.StatValueAggType stat_value_agg_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stat_value_agg_type(static_cast<::clarifai::api::StatValueAggType>(val));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.StatTimeAggType stat_time_agg_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stat_time_agg_type(static_cast<::clarifai::api::StatTimeAggType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatValueAggregateQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StatValueAggregateQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tags = 1;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StatValueAggregateQuery.tags");
    target = stream->WriteString(1, s, target);
  }

  // repeated string tag_groups = 2;
  for (int i = 0, n = this->_internal_tag_groups_size(); i < n; i++) {
    const auto& s = this->_internal_tag_groups(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StatValueAggregateQuery.tag_groups");
    target = stream->WriteString(2, s, target);
  }

  // .clarifai.api.StatValueAggType stat_value_agg_type = 3;
  if (this->_internal_stat_value_agg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_stat_value_agg_type(), target);
  }

  // .clarifai.api.StatTimeAggType stat_time_agg_type = 4;
  if (this->_internal_stat_time_agg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_stat_time_agg_type(), target);
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->_internal_has_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StatValueAggregateQuery)
  return target;
}

size_t StatValueAggregateQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StatValueAggregateQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // repeated string tag_groups = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tag_groups_.size());
  for (int i = 0, n = _impl_.tag_groups_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tag_groups_.Get(i));
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_time_);
  }

  // .clarifai.api.StatValueAggType stat_value_agg_type = 3;
  if (this->_internal_stat_value_agg_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stat_value_agg_type());
  }

  // .clarifai.api.StatTimeAggType stat_time_agg_type = 4;
  if (this->_internal_stat_time_agg_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stat_time_agg_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatValueAggregateQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatValueAggregateQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatValueAggregateQuery::GetClassData() const { return &_class_data_; }


void StatValueAggregateQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatValueAggregateQuery*>(&to_msg);
  auto& from = static_cast<const StatValueAggregateQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StatValueAggregateQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  _this->_impl_.tag_groups_.MergeFrom(from._impl_.tag_groups_);
  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _this->_internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end_time());
  }
  if (from._internal_stat_value_agg_type() != 0) {
    _this->_internal_set_stat_value_agg_type(from._internal_stat_value_agg_type());
  }
  if (from._internal_stat_time_agg_type() != 0) {
    _this->_internal_set_stat_time_agg_type(from._internal_stat_time_agg_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatValueAggregateQuery::CopyFrom(const StatValueAggregateQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StatValueAggregateQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatValueAggregateQuery::IsInitialized() const {
  return true;
}

void StatValueAggregateQuery::InternalSwap(StatValueAggregateQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  _impl_.tag_groups_.InternalSwap(&other->_impl_.tag_groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatValueAggregateQuery, _impl_.stat_time_agg_type_)
      + sizeof(StatValueAggregateQuery::_impl_.stat_time_agg_type_)
      - PROTOBUF_FIELD_OFFSET(StatValueAggregateQuery, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatValueAggregateQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[149]);
}

// ===================================================================

class DatasetInputsSearchAddJob::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const DatasetInputsSearchAddJob* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const DatasetInputsSearchAddJob* msg);
  static const ::clarifai::api::status::Status& status(const DatasetInputsSearchAddJob* msg);
  static const ::clarifai::api::Search& search(const DatasetInputsSearchAddJob* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DatasetInputsSearchAddJob::_Internal::created_at(const DatasetInputsSearchAddJob* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DatasetInputsSearchAddJob::_Internal::modified_at(const DatasetInputsSearchAddJob* msg) {
  return *msg->_impl_.modified_at_;
}
const ::clarifai::api::status::Status&
DatasetInputsSearchAddJob::_Internal::status(const DatasetInputsSearchAddJob* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Search&
DatasetInputsSearchAddJob::_Internal::search(const DatasetInputsSearchAddJob* msg) {
  return *msg->_impl_.search_;
}
void DatasetInputsSearchAddJob::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void DatasetInputsSearchAddJob::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void DatasetInputsSearchAddJob::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
DatasetInputsSearchAddJob::DatasetInputsSearchAddJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DatasetInputsSearchAddJob)
}
DatasetInputsSearchAddJob::DatasetInputsSearchAddJob(const DatasetInputsSearchAddJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatasetInputsSearchAddJob* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.search_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_search()) {
    _this->_impl_.search_ = new ::clarifai::api::Search(*from._impl_.search_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetInputsSearchAddJob)
}

inline void DatasetInputsSearchAddJob::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.search_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DatasetInputsSearchAddJob::~DatasetInputsSearchAddJob() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetInputsSearchAddJob)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatasetInputsSearchAddJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.dataset_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.search_;
}

void DatasetInputsSearchAddJob::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatasetInputsSearchAddJob::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetInputsSearchAddJob)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.search_ != nullptr) {
    delete _impl_.search_;
  }
  _impl_.search_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetInputsSearchAddJob::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DatasetInputsSearchAddJob.id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DatasetInputsSearchAddJob.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search search = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetInputsSearchAddJob::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetInputsSearchAddJob)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetInputsSearchAddJob.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.status.Status status = 4;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string dataset_id = 5;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetInputsSearchAddJob.dataset_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dataset_id(), target);
  }

  // .clarifai.api.Search search = 6;
  if (this->_internal_has_search()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::search(this),
        _Internal::search(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetInputsSearchAddJob)
  return target;
}

size_t DatasetInputsSearchAddJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetInputsSearchAddJob)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string dataset_id = 5;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .clarifai.api.status.Status status = 4;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Search search = 6;
  if (this->_internal_has_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.search_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetInputsSearchAddJob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatasetInputsSearchAddJob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetInputsSearchAddJob::GetClassData() const { return &_class_data_; }


void DatasetInputsSearchAddJob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatasetInputsSearchAddJob*>(&to_msg);
  auto& from = static_cast<const DatasetInputsSearchAddJob&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetInputsSearchAddJob)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_search()) {
    _this->_internal_mutable_search()->::clarifai::api::Search::MergeFrom(
        from._internal_search());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetInputsSearchAddJob::CopyFrom(const DatasetInputsSearchAddJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetInputsSearchAddJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetInputsSearchAddJob::IsInitialized() const {
  return true;
}

void DatasetInputsSearchAddJob::InternalSwap(DatasetInputsSearchAddJob* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetInputsSearchAddJob, _impl_.search_)
      + sizeof(DatasetInputsSearchAddJob::_impl_.search_)
      - PROTOBUF_FIELD_OFFSET(DatasetInputsSearchAddJob, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetInputsSearchAddJob::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[150]);
}

// ===================================================================

class PCAProjectionComparator::_Internal {
 public:
};

PCAProjectionComparator::PCAProjectionComparator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PCAProjectionComparator)
}
PCAProjectionComparator::PCAProjectionComparator(const PCAProjectionComparator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PCAProjectionComparator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_version_id_){}
    , decltype(_impl_.distance_threshold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    _this->_impl_.model_version_id_.Set(from._internal_model_version_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.distance_threshold_ = from._impl_.distance_threshold_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PCAProjectionComparator)
}

inline void PCAProjectionComparator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_version_id_){}
    , decltype(_impl_.distance_threshold_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PCAProjectionComparator::~PCAProjectionComparator() {
  // @@protoc_insertion_point(destructor:clarifai.api.PCAProjectionComparator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PCAProjectionComparator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_version_id_.Destroy();
}

void PCAProjectionComparator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PCAProjectionComparator::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PCAProjectionComparator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_version_id_.ClearToEmpty();
  _impl_.distance_threshold_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCAProjectionComparator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float distance_threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.distance_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PCAProjectionComparator.model_version_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCAProjectionComparator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PCAProjectionComparator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float distance_threshold = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance_threshold = this->_internal_distance_threshold();
  uint32_t raw_distance_threshold;
  memcpy(&raw_distance_threshold, &tmp_distance_threshold, sizeof(tmp_distance_threshold));
  if (raw_distance_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_distance_threshold(), target);
  }

  // string model_version_id = 2;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PCAProjectionComparator.model_version_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PCAProjectionComparator)
  return target;
}

size_t PCAProjectionComparator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PCAProjectionComparator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_version_id = 2;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // float distance_threshold = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance_threshold = this->_internal_distance_threshold();
  uint32_t raw_distance_threshold;
  memcpy(&raw_distance_threshold, &tmp_distance_threshold, sizeof(tmp_distance_threshold));
  if (raw_distance_threshold != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCAProjectionComparator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PCAProjectionComparator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCAProjectionComparator::GetClassData() const { return &_class_data_; }


void PCAProjectionComparator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PCAProjectionComparator*>(&to_msg);
  auto& from = static_cast<const PCAProjectionComparator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PCAProjectionComparator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_version_id().empty()) {
    _this->_internal_set_model_version_id(from._internal_model_version_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance_threshold = from._internal_distance_threshold();
  uint32_t raw_distance_threshold;
  memcpy(&raw_distance_threshold, &tmp_distance_threshold, sizeof(tmp_distance_threshold));
  if (raw_distance_threshold != 0) {
    _this->_internal_set_distance_threshold(from._internal_distance_threshold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCAProjectionComparator::CopyFrom(const PCAProjectionComparator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PCAProjectionComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCAProjectionComparator::IsInitialized() const {
  return true;
}

void PCAProjectionComparator::InternalSwap(PCAProjectionComparator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_version_id_, lhs_arena,
      &other->_impl_.model_version_id_, rhs_arena
  );
  swap(_impl_.distance_threshold_, other->_impl_.distance_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PCAProjectionComparator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[151]);
}

// ===================================================================

class DuplicateAnnotationsResults::_Internal {
 public:
};

DuplicateAnnotationsResults::DuplicateAnnotationsResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DuplicateAnnotationsResults)
}
DuplicateAnnotationsResults::DuplicateAnnotationsResults(const DuplicateAnnotationsResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DuplicateAnnotationsResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.duplicate_cfid_){from._impl_.duplicate_cfid_}
    , decltype(_impl_.unique_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.unique_count_ = from._impl_.unique_count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DuplicateAnnotationsResults)
}

inline void DuplicateAnnotationsResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.duplicate_cfid_){arena}
    , decltype(_impl_.unique_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DuplicateAnnotationsResults::~DuplicateAnnotationsResults() {
  // @@protoc_insertion_point(destructor:clarifai.api.DuplicateAnnotationsResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DuplicateAnnotationsResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.duplicate_cfid_.~RepeatedPtrField();
}

void DuplicateAnnotationsResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DuplicateAnnotationsResults::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DuplicateAnnotationsResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.duplicate_cfid_.Clear();
  _impl_.unique_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DuplicateAnnotationsResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string duplicate_cfid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_duplicate_cfid();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DuplicateAnnotationsResults.duplicate_cfid"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 unique_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.unique_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DuplicateAnnotationsResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DuplicateAnnotationsResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string duplicate_cfid = 1;
  for (int i = 0, n = this->_internal_duplicate_cfid_size(); i < n; i++) {
    const auto& s = this->_internal_duplicate_cfid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DuplicateAnnotationsResults.duplicate_cfid");
    target = stream->WriteString(1, s, target);
  }

  // int32 unique_count = 2;
  if (this->_internal_unique_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_unique_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DuplicateAnnotationsResults)
  return target;
}

size_t DuplicateAnnotationsResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DuplicateAnnotationsResults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string duplicate_cfid = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.duplicate_cfid_.size());
  for (int i = 0, n = _impl_.duplicate_cfid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.duplicate_cfid_.Get(i));
  }

  // int32 unique_count = 2;
  if (this->_internal_unique_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unique_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DuplicateAnnotationsResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DuplicateAnnotationsResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DuplicateAnnotationsResults::GetClassData() const { return &_class_data_; }


void DuplicateAnnotationsResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DuplicateAnnotationsResults*>(&to_msg);
  auto& from = static_cast<const DuplicateAnnotationsResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DuplicateAnnotationsResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.duplicate_cfid_.MergeFrom(from._impl_.duplicate_cfid_);
  if (from._internal_unique_count() != 0) {
    _this->_internal_set_unique_count(from._internal_unique_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DuplicateAnnotationsResults::CopyFrom(const DuplicateAnnotationsResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DuplicateAnnotationsResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplicateAnnotationsResults::IsInitialized() const {
  return true;
}

void DuplicateAnnotationsResults::InternalSwap(DuplicateAnnotationsResults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.duplicate_cfid_.InternalSwap(&other->_impl_.duplicate_cfid_);
  swap(_impl_.unique_count_, other->_impl_.unique_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DuplicateAnnotationsResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[152]);
}

// ===================================================================

class Visibility::_Internal {
 public:
};

Visibility::Visibility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Visibility)
}
Visibility::Visibility(const Visibility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Visibility* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gettable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gettable_ = from._impl_.gettable_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Visibility)
}

inline void Visibility::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gettable_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Visibility::~Visibility() {
  // @@protoc_insertion_point(destructor:clarifai.api.Visibility)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Visibility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Visibility::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Visibility::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Visibility)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gettable_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Visibility::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Visibility.Gettable gettable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gettable(static_cast<::clarifai::api::Visibility_Gettable>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Visibility::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Visibility)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Visibility.Gettable gettable = 1;
  if (this->_internal_gettable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gettable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Visibility)
  return target;
}

size_t Visibility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Visibility)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Visibility.Gettable gettable = 1;
  if (this->_internal_gettable() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gettable());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Visibility::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Visibility::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Visibility::GetClassData() const { return &_class_data_; }


void Visibility::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Visibility*>(&to_msg);
  auto& from = static_cast<const Visibility&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Visibility)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gettable() != 0) {
    _this->_internal_set_gettable(from._internal_gettable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Visibility::CopyFrom(const Visibility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Visibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visibility::IsInitialized() const {
  return true;
}

void Visibility::InternalSwap(Visibility* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gettable_, other->_impl_.gettable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Visibility::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[153]);
}

// ===================================================================

class TrendingMetric::_Internal {
 public:
};

TrendingMetric::TrendingMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TrendingMetric)
}
TrendingMetric::TrendingMetric(const TrendingMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrendingMetric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.view_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.object_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object_id().empty()) {
    _this->_impl_.object_id_.Set(from._internal_object_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.view_count_ = from._impl_.view_count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TrendingMetric)
}

inline void TrendingMetric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.view_count_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.object_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrendingMetric::~TrendingMetric() {
  // @@protoc_insertion_point(destructor:clarifai.api.TrendingMetric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrendingMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.object_id_.Destroy();
}

void TrendingMetric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrendingMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TrendingMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.object_id_.ClearToEmpty();
  _impl_.view_count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrendingMetric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.TrendingMetric.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.TrendingMetric.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_object_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.TrendingMetric.object_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 view_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.view_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrendingMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TrendingMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TrendingMetric.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TrendingMetric.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // string object_id = 3;
  if (!this->_internal_object_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object_id().data(), static_cast<int>(this->_internal_object_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TrendingMetric.object_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_object_id(), target);
  }

  // uint64 view_count = 4;
  if (this->_internal_view_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_view_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TrendingMetric)
  return target;
}

size_t TrendingMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TrendingMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string object_id = 3;
  if (!this->_internal_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object_id());
  }

  // uint64 view_count = 4;
  if (this->_internal_view_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_view_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrendingMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrendingMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrendingMetric::GetClassData() const { return &_class_data_; }


void TrendingMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrendingMetric*>(&to_msg);
  auto& from = static_cast<const TrendingMetric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TrendingMetric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_object_id().empty()) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_view_count() != 0) {
    _this->_internal_set_view_count(from._internal_view_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrendingMetric::CopyFrom(const TrendingMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TrendingMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendingMetric::IsInitialized() const {
  return true;
}

void TrendingMetric::InternalSwap(TrendingMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.object_id_, lhs_arena,
      &other->_impl_.object_id_, rhs_arena
  );
  swap(_impl_.view_count_, other->_impl_.view_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrendingMetric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[154]);
}

// ===================================================================

class FullTag::_Internal {
 public:
};

FullTag::FullTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.FullTag)
}
FullTag::FullTag(const FullTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FullTag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.FullTag)
}

inline void FullTag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FullTag::~FullTag() {
  // @@protoc_insertion_point(destructor:clarifai.api.FullTag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FullTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.id_.Destroy();
}

void FullTag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FullTag::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.FullTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FullTag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.FullTag.name"));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.FullTag.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FullTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.FullTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.FullTag.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.FullTag.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.FullTag)
  return target;
}

size_t FullTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.FullTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FullTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FullTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FullTag::GetClassData() const { return &_class_data_; }


void FullTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FullTag*>(&to_msg);
  auto& from = static_cast<const FullTag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.FullTag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FullTag::CopyFrom(const FullTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.FullTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullTag::IsInitialized() const {
  return true;
}

void FullTag::InternalSwap(FullTag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FullTag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[155]);
}

// ===================================================================

class TimeSegment::_Internal {
 public:
  static const ::clarifai::api::Data& data(const TimeSegment* msg);
  static const ::clarifai::api::TimeInfo& time_info(const TimeSegment* msg);
};

const ::clarifai::api::Data&
TimeSegment::_Internal::data(const TimeSegment* msg) {
  return *msg->_impl_.data_;
}
const ::clarifai::api::TimeInfo&
TimeSegment::_Internal::time_info(const TimeSegment* msg) {
  return *msg->_impl_.time_info_;
}
TimeSegment::TimeSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TimeSegment)
}
TimeSegment::TimeSegment(const TimeSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeSegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.time_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::clarifai::api::Data(*from._impl_.data_);
  }
  if (from._internal_has_time_info()) {
    _this->_impl_.time_info_ = new ::clarifai::api::TimeInfo(*from._impl_.time_info_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TimeSegment)
}

inline void TimeSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.time_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TimeSegment::~TimeSegment() {
  // @@protoc_insertion_point(destructor:clarifai.api.TimeSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.time_info_;
}

void TimeSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TimeSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_info_ != nullptr) {
    delete _impl_.time_info_;
  }
  _impl_.time_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.TimeSegment.id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TimeInfo time_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TimeSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TimeSegment.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.TimeInfo time_info = 3;
  if (this->_internal_has_time_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::time_info(this),
        _Internal::time_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TimeSegment)
  return target;
}

size_t TimeSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TimeSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .clarifai.api.TimeInfo time_info = 3;
  if (this->_internal_has_time_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeSegment::GetClassData() const { return &_class_data_; }


void TimeSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeSegment*>(&to_msg);
  auto& from = static_cast<const TimeSegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TimeSegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::clarifai::api::Data::MergeFrom(
        from._internal_data());
  }
  if (from._internal_has_time_info()) {
    _this->_internal_mutable_time_info()->::clarifai::api::TimeInfo::MergeFrom(
        from._internal_time_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeSegment::CopyFrom(const TimeSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TimeSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSegment::IsInitialized() const {
  return true;
}

void TimeSegment::InternalSwap(TimeSegment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSegment, _impl_.time_info_)
      + sizeof(TimeSegment::_impl_.time_info_)
      - PROTOBUF_FIELD_OFFSET(TimeSegment, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[156]);
}

// ===================================================================

class TimeInfo::_Internal {
 public:
};

TimeInfo::TimeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TimeInfo)
}
TimeInfo::TimeInfo(const TimeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.num_frames_){}
    , decltype(_impl_.begin_time_){}
    , decltype(_impl_.end_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_frames_, &from._impl_.num_frames_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_time_) -
    reinterpret_cast<char*>(&_impl_.num_frames_)) + sizeof(_impl_.end_time_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TimeInfo)
}

inline void TimeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.num_frames_){0u}
    , decltype(_impl_.begin_time_){0u}
    , decltype(_impl_.end_time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimeInfo::~TimeInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TimeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TimeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.num_frames_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_time_) -
      reinterpret_cast<char*>(&_impl_.num_frames_)) + sizeof(_impl_.end_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 num_frames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 begin_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TimeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_frames = 1;
  if (this->_internal_num_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_frames(), target);
  }

  // uint32 begin_time = 2;
  if (this->_internal_begin_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_begin_time(), target);
  }

  // uint32 end_time = 3;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TimeInfo)
  return target;
}

size_t TimeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TimeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 num_frames = 1;
  if (this->_internal_num_frames() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_frames());
  }

  // uint32 begin_time = 2;
  if (this->_internal_begin_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_begin_time());
  }

  // uint32 end_time = 3;
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_end_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeInfo::GetClassData() const { return &_class_data_; }


void TimeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeInfo*>(&to_msg);
  auto& from = static_cast<const TimeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TimeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num_frames() != 0) {
    _this->_internal_set_num_frames(from._internal_num_frames());
  }
  if (from._internal_begin_time() != 0) {
    _this->_internal_set_begin_time(from._internal_begin_time());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeInfo::CopyFrom(const TimeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeInfo::IsInitialized() const {
  return true;
}

void TimeInfo::InternalSwap(TimeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeInfo, _impl_.end_time_)
      + sizeof(TimeInfo::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(TimeInfo, _impl_.num_frames_)>(
          reinterpret_cast<char*>(&_impl_.num_frames_),
          reinterpret_cast<char*>(&other->_impl_.num_frames_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[157]);
}

// ===================================================================

class DatasetStar::_Internal {
 public:
};

DatasetStar::DatasetStar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DatasetStar)
}
DatasetStar::DatasetStar(const DatasetStar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatasetStar* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetStar)
}

inline void DatasetStar::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DatasetStar::~DatasetStar() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetStar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatasetStar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_id_.Destroy();
}

void DatasetStar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatasetStar::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetStar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetStar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dataset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DatasetStar.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetStar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetStar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataset_id = 1;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetStar.dataset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dataset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetStar)
  return target;
}

size_t DatasetStar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetStar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_id = 1;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetStar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatasetStar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetStar::GetClassData() const { return &_class_data_; }


void DatasetStar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatasetStar*>(&to_msg);
  auto& from = static_cast<const DatasetStar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetStar)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetStar::CopyFrom(const DatasetStar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetStar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetStar::IsInitialized() const {
  return true;
}

void DatasetStar::InternalSwap(DatasetStar* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetStar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[158]);
}

// ===================================================================

class ModuleStar::_Internal {
 public:
};

ModuleStar::ModuleStar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModuleStar)
}
ModuleStar::ModuleStar(const ModuleStar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModuleStar* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.module_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.module_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module_id().empty()) {
    _this->_impl_.module_id_.Set(from._internal_module_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModuleStar)
}

inline void ModuleStar::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.module_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.module_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModuleStar::~ModuleStar() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModuleStar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleStar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.module_id_.Destroy();
}

void ModuleStar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModuleStar::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModuleStar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.module_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleStar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string module_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_module_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModuleStar.module_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModuleStar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModuleStar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_id = 1;
  if (!this->_internal_module_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module_id().data(), static_cast<int>(this->_internal_module_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModuleStar.module_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_module_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModuleStar)
  return target;
}

size_t ModuleStar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModuleStar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string module_id = 1;
  if (!this->_internal_module_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleStar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModuleStar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleStar::GetClassData() const { return &_class_data_; }


void ModuleStar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModuleStar*>(&to_msg);
  auto& from = static_cast<const ModuleStar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModuleStar)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_module_id().empty()) {
    _this->_internal_set_module_id(from._internal_module_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleStar::CopyFrom(const ModuleStar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModuleStar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleStar::IsInitialized() const {
  return true;
}

void ModuleStar::InternalSwap(ModuleStar* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.module_id_, lhs_arena,
      &other->_impl_.module_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleStar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[159]);
}

// ===================================================================

class Module::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Module* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Module* msg);
  static const ::clarifai::api::Visibility& visibility(const Module* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const Module* msg);
  static const ::clarifai::api::ModuleVersion& module_version(const Module* msg);
  static const ::clarifai::api::BookmarkOrigin& bookmark_origin(const Module* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Module::_Internal::created_at(const Module* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Module::_Internal::modified_at(const Module* msg) {
  return *msg->_impl_.modified_at_;
}
const ::clarifai::api::Visibility&
Module::_Internal::visibility(const Module* msg) {
  return *msg->_impl_.visibility_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Module::_Internal::metadata(const Module* msg) {
  return *msg->_impl_.metadata_;
}
const ::clarifai::api::ModuleVersion&
Module::_Internal::module_version(const Module* msg) {
  return *msg->_impl_.module_version_;
}
const ::clarifai::api::BookmarkOrigin&
Module::_Internal::bookmark_origin(const Module* msg) {
  return *msg->_impl_.bookmark_origin_;
}
void Module::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Module::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void Module::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
Module::Module(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Module)
}
Module::Module(const Module& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Module* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.module_version_){nullptr}
    , decltype(_impl_.bookmark_origin_){nullptr}
    , decltype(_impl_.is_starred_){}
    , decltype(_impl_.star_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  if (from._internal_has_module_version()) {
    _this->_impl_.module_version_ = new ::clarifai::api::ModuleVersion(*from._impl_.module_version_);
  }
  if (from._internal_has_bookmark_origin()) {
    _this->_impl_.bookmark_origin_ = new ::clarifai::api::BookmarkOrigin(*from._impl_.bookmark_origin_);
  }
  ::memcpy(&_impl_.is_starred_, &from._impl_.is_starred_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.star_count_) -
    reinterpret_cast<char*>(&_impl_.is_starred_)) + sizeof(_impl_.star_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Module)
}

inline void Module::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.module_version_){nullptr}
    , decltype(_impl_.bookmark_origin_){nullptr}
    , decltype(_impl_.is_starred_){false}
    , decltype(_impl_.star_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Module::~Module() {
  // @@protoc_insertion_point(destructor:clarifai.api.Module)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Module::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.description_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.app_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.module_version_;
  if (this != internal_default_instance()) delete _impl_.bookmark_origin_;
}

void Module::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Module::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Module)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.module_version_ != nullptr) {
    delete _impl_.module_version_;
  }
  _impl_.module_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bookmark_origin_ != nullptr) {
    delete _impl_.bookmark_origin_;
  }
  _impl_.bookmark_origin_ = nullptr;
  ::memset(&_impl_.is_starred_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.star_count_) -
      reinterpret_cast<char*>(&_impl_.is_starred_)) + sizeof(_impl_.star_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Module::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Module.id"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Module.description"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Module.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Module.app_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModuleVersion module_version = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_module_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_starred = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 star_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.star_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.BookmarkOrigin bookmark_origin = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_bookmark_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Module::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Module)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Module.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Module.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 5;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Visibility visibility = 7;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct metadata = 8;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // string user_id = 9;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Module.user_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_user_id(), target);
  }

  // string app_id = 10;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Module.app_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_app_id(), target);
  }

  // .clarifai.api.ModuleVersion module_version = 11;
  if (this->_internal_has_module_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::module_version(this),
        _Internal::module_version(this).GetCachedSize(), target, stream);
  }

  // bool is_starred = 12;
  if (this->_internal_is_starred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_starred(), target);
  }

  // int32 star_count = 13;
  if (this->_internal_star_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_star_count(), target);
  }

  // .clarifai.api.BookmarkOrigin bookmark_origin = 14;
  if (this->_internal_has_bookmark_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::bookmark_origin(this),
        _Internal::bookmark_origin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Module)
  return target;
}

size_t Module::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Module)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string user_id = 9;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string app_id = 10;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 5;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .clarifai.api.Visibility visibility = 7;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  // .google.protobuf.Struct metadata = 8;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .clarifai.api.ModuleVersion module_version = 11;
  if (this->_internal_has_module_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.module_version_);
  }

  // .clarifai.api.BookmarkOrigin bookmark_origin = 14;
  if (this->_internal_has_bookmark_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bookmark_origin_);
  }

  // bool is_starred = 12;
  if (this->_internal_is_starred() != 0) {
    total_size += 1 + 1;
  }

  // int32 star_count = 13;
  if (this->_internal_star_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_star_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Module::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Module::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Module::GetClassData() const { return &_class_data_; }


void Module::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Module*>(&to_msg);
  auto& from = static_cast<const Module&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Module)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_module_version()) {
    _this->_internal_mutable_module_version()->::clarifai::api::ModuleVersion::MergeFrom(
        from._internal_module_version());
  }
  if (from._internal_has_bookmark_origin()) {
    _this->_internal_mutable_bookmark_origin()->::clarifai::api::BookmarkOrigin::MergeFrom(
        from._internal_bookmark_origin());
  }
  if (from._internal_is_starred() != 0) {
    _this->_internal_set_is_starred(from._internal_is_starred());
  }
  if (from._internal_star_count() != 0) {
    _this->_internal_set_star_count(from._internal_star_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Module::CopyFrom(const Module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module::IsInitialized() const {
  return true;
}

void Module::InternalSwap(Module* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Module, _impl_.star_count_)
      + sizeof(Module::_impl_.star_count_)
      - PROTOBUF_FIELD_OFFSET(Module, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Module::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[160]);
}

// ===================================================================

class ModuleVersion_ModuleSubNav::_Internal {
 public:
};

ModuleVersion_ModuleSubNav::ModuleVersion_ModuleSubNav(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModuleVersion.ModuleSubNav)
}
ModuleVersion_ModuleSubNav::ModuleVersion_ModuleSubNav(const ModuleVersion_ModuleSubNav& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModuleVersion_ModuleSubNav* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.query_key_){}
    , decltype(_impl_.query_value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.query_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query_key().empty()) {
    _this->_impl_.query_key_.Set(from._internal_query_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.query_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query_value().empty()) {
    _this->_impl_.query_value_.Set(from._internal_query_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModuleVersion.ModuleSubNav)
}

inline void ModuleVersion_ModuleSubNav::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.query_key_){}
    , decltype(_impl_.query_value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.query_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.query_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModuleVersion_ModuleSubNav::~ModuleVersion_ModuleSubNav() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModuleVersion.ModuleSubNav)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleVersion_ModuleSubNav::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.query_key_.Destroy();
  _impl_.query_value_.Destroy();
}

void ModuleVersion_ModuleSubNav::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModuleVersion_ModuleSubNav::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModuleVersion.ModuleSubNav)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.query_key_.ClearToEmpty();
  _impl_.query_value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleVersion_ModuleSubNav::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModuleVersion.ModuleSubNav.title"));
        } else
          goto handle_unusual;
        continue;
      // string query_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_query_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModuleVersion.ModuleSubNav.query_key"));
        } else
          goto handle_unusual;
        continue;
      // string query_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_query_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModuleVersion.ModuleSubNav.query_value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModuleVersion_ModuleSubNav::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModuleVersion.ModuleSubNav)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModuleVersion.ModuleSubNav.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string query_key = 2;
  if (!this->_internal_query_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_key().data(), static_cast<int>(this->_internal_query_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModuleVersion.ModuleSubNav.query_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_query_key(), target);
  }

  // string query_value = 3;
  if (!this->_internal_query_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_value().data(), static_cast<int>(this->_internal_query_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModuleVersion.ModuleSubNav.query_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_query_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModuleVersion.ModuleSubNav)
  return target;
}

size_t ModuleVersion_ModuleSubNav::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModuleVersion.ModuleSubNav)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string query_key = 2;
  if (!this->_internal_query_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_key());
  }

  // string query_value = 3;
  if (!this->_internal_query_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleVersion_ModuleSubNav::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModuleVersion_ModuleSubNav::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleVersion_ModuleSubNav::GetClassData() const { return &_class_data_; }


void ModuleVersion_ModuleSubNav::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModuleVersion_ModuleSubNav*>(&to_msg);
  auto& from = static_cast<const ModuleVersion_ModuleSubNav&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModuleVersion.ModuleSubNav)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_query_key().empty()) {
    _this->_internal_set_query_key(from._internal_query_key());
  }
  if (!from._internal_query_value().empty()) {
    _this->_internal_set_query_value(from._internal_query_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleVersion_ModuleSubNav::CopyFrom(const ModuleVersion_ModuleSubNav& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModuleVersion.ModuleSubNav)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleVersion_ModuleSubNav::IsInitialized() const {
  return true;
}

void ModuleVersion_ModuleSubNav::InternalSwap(ModuleVersion_ModuleSubNav* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.query_key_, lhs_arena,
      &other->_impl_.query_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.query_value_, lhs_arena,
      &other->_impl_.query_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleVersion_ModuleSubNav::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[161]);
}

// ===================================================================

class ModuleVersion_ModuleNav::_Internal {
 public:
};

ModuleVersion_ModuleNav::ModuleVersion_ModuleNav(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModuleVersion.ModuleNav)
}
ModuleVersion_ModuleNav::ModuleVersion_ModuleNav(const ModuleVersion_ModuleNav& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModuleVersion_ModuleNav* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.module_sub_navs_){from._impl_.module_sub_navs_}
    , decltype(_impl_.title_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModuleVersion.ModuleNav)
}

inline void ModuleVersion_ModuleNav::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.module_sub_navs_){arena}
    , decltype(_impl_.title_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModuleVersion_ModuleNav::~ModuleVersion_ModuleNav() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModuleVersion.ModuleNav)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleVersion_ModuleNav::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.module_sub_navs_.~RepeatedPtrField();
  _impl_.title_.Destroy();
}

void ModuleVersion_ModuleNav::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModuleVersion_ModuleNav::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModuleVersion.ModuleNav)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.module_sub_navs_.Clear();
  _impl_.title_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleVersion_ModuleNav::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModuleVersion.ModuleNav.title"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModuleVersion.ModuleSubNav module_sub_navs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_module_sub_navs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModuleVersion_ModuleNav::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModuleVersion.ModuleNav)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModuleVersion.ModuleNav.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // repeated .clarifai.api.ModuleVersion.ModuleSubNav module_sub_navs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_module_sub_navs_size()); i < n; i++) {
    const auto& repfield = this->_internal_module_sub_navs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModuleVersion.ModuleNav)
  return target;
}

size_t ModuleVersion_ModuleNav::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModuleVersion.ModuleNav)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModuleVersion.ModuleSubNav module_sub_navs = 2;
  total_size += 1UL * this->_internal_module_sub_navs_size();
  for (const auto& msg : this->_impl_.module_sub_navs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleVersion_ModuleNav::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModuleVersion_ModuleNav::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleVersion_ModuleNav::GetClassData() const { return &_class_data_; }


void ModuleVersion_ModuleNav::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModuleVersion_ModuleNav*>(&to_msg);
  auto& from = static_cast<const ModuleVersion_ModuleNav&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModuleVersion.ModuleNav)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.module_sub_navs_.MergeFrom(from._impl_.module_sub_navs_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleVersion_ModuleNav::CopyFrom(const ModuleVersion_ModuleNav& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModuleVersion.ModuleNav)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleVersion_ModuleNav::IsInitialized() const {
  return true;
}

void ModuleVersion_ModuleNav::InternalSwap(ModuleVersion_ModuleNav* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.module_sub_navs_.InternalSwap(&other->_impl_.module_sub_navs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleVersion_ModuleNav::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[162]);
}

// ===================================================================

class ModuleVersion::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const ModuleVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const ModuleVersion* msg);
  static const ::clarifai::api::ModuleVersion_ModuleNav& module_nav(const ModuleVersion* msg);
  static const ::clarifai::api::Visibility& visibility(const ModuleVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const ModuleVersion* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ModuleVersion::_Internal::created_at(const ModuleVersion* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ModuleVersion::_Internal::modified_at(const ModuleVersion* msg) {
  return *msg->_impl_.modified_at_;
}
const ::clarifai::api::ModuleVersion_ModuleNav&
ModuleVersion::_Internal::module_nav(const ModuleVersion* msg) {
  return *msg->_impl_.module_nav_;
}
const ::clarifai::api::Visibility&
ModuleVersion::_Internal::visibility(const ModuleVersion* msg) {
  return *msg->_impl_.visibility_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
ModuleVersion::_Internal::metadata(const ModuleVersion* msg) {
  return *msg->_impl_.metadata_;
}
void ModuleVersion::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void ModuleVersion::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void ModuleVersion::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
ModuleVersion::ModuleVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModuleVersion)
}
ModuleVersion::ModuleVersion(const ModuleVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModuleVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.module_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.git_commit_url_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.module_nav_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.approved_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.module_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module_id().empty()) {
    _this->_impl_.module_id_.Set(from._internal_module_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notes().empty()) {
    _this->_impl_.notes_.Set(from._internal_notes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.git_commit_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.git_commit_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_git_commit_url().empty()) {
    _this->_impl_.git_commit_url_.Set(from._internal_git_commit_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_module_nav()) {
    _this->_impl_.module_nav_ = new ::clarifai::api::ModuleVersion_ModuleNav(*from._impl_.module_nav_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  _this->_impl_.approved_ = from._impl_.approved_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModuleVersion)
}

inline void ModuleVersion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.module_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.git_commit_url_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.module_nav_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.approved_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.module_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.git_commit_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.git_commit_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModuleVersion::~ModuleVersion() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModuleVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.module_id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.description_.Destroy();
  _impl_.notes_.Destroy();
  _impl_.git_commit_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.module_nav_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void ModuleVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModuleVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModuleVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.module_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.notes_.ClearToEmpty();
  _impl_.git_commit_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.module_nav_ != nullptr) {
    delete _impl_.module_nav_;
  }
  _impl_.module_nav_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _impl_.approved_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModuleVersion.id"));
        } else
          goto handle_unusual;
        continue;
      // string module_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_module_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModuleVersion.module_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModuleVersion.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModuleVersion.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModuleVersion.description"));
        } else
          goto handle_unusual;
        continue;
      // string notes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_notes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModuleVersion.notes"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string git_commit_url = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_git_commit_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModuleVersion.git_commit_url"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModuleVersion.ModuleNav module_nav = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_module_nav(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool approved = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.approved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModuleVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModuleVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModuleVersion.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string module_id = 2;
  if (!this->_internal_module_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module_id().data(), static_cast<int>(this->_internal_module_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModuleVersion.module_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_module_id(), target);
  }

  // string app_id = 3;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModuleVersion.app_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_app_id(), target);
  }

  // string user_id = 4;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModuleVersion.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  // string description = 6;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModuleVersion.description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_description(), target);
  }

  // string notes = 7;
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModuleVersion.notes");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_notes(), target);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 9;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // string git_commit_url = 10;
  if (!this->_internal_git_commit_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_git_commit_url().data(), static_cast<int>(this->_internal_git_commit_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModuleVersion.git_commit_url");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_git_commit_url(), target);
  }

  // .clarifai.api.ModuleVersion.ModuleNav module_nav = 11;
  if (this->_internal_has_module_nav()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::module_nav(this),
        _Internal::module_nav(this).GetCachedSize(), target, stream);
  }

  // bool approved = 12;
  if (this->_internal_approved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_approved(), target);
  }

  // .clarifai.api.Visibility visibility = 13;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct metadata = 14;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModuleVersion)
  return target;
}

size_t ModuleVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModuleVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string module_id = 2;
  if (!this->_internal_module_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module_id());
  }

  // string app_id = 3;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 4;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string description = 6;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string notes = 7;
  if (!this->_internal_notes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // string git_commit_url = 10;
  if (!this->_internal_git_commit_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_git_commit_url());
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 9;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .clarifai.api.ModuleVersion.ModuleNav module_nav = 11;
  if (this->_internal_has_module_nav()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.module_nav_);
  }

  // .clarifai.api.Visibility visibility = 13;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  // .google.protobuf.Struct metadata = 14;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // bool approved = 12;
  if (this->_internal_approved() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModuleVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleVersion::GetClassData() const { return &_class_data_; }


void ModuleVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModuleVersion*>(&to_msg);
  auto& from = static_cast<const ModuleVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModuleVersion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_module_id().empty()) {
    _this->_internal_set_module_id(from._internal_module_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_notes().empty()) {
    _this->_internal_set_notes(from._internal_notes());
  }
  if (!from._internal_git_commit_url().empty()) {
    _this->_internal_set_git_commit_url(from._internal_git_commit_url());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_module_nav()) {
    _this->_internal_mutable_module_nav()->::clarifai::api::ModuleVersion_ModuleNav::MergeFrom(
        from._internal_module_nav());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_approved() != 0) {
    _this->_internal_set_approved(from._internal_approved());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleVersion::CopyFrom(const ModuleVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModuleVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleVersion::IsInitialized() const {
  return true;
}

void ModuleVersion::InternalSwap(ModuleVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.module_id_, lhs_arena,
      &other->_impl_.module_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notes_, lhs_arena,
      &other->_impl_.notes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.git_commit_url_, lhs_arena,
      &other->_impl_.git_commit_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModuleVersion, _impl_.approved_)
      + sizeof(ModuleVersion::_impl_.approved_)
      - PROTOBUF_FIELD_OFFSET(ModuleVersion, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[163]);
}

// ===================================================================

class InstalledModuleVersion::_Internal {
 public:
  static const ::clarifai::api::ModuleVersion& module_version(const InstalledModuleVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const InstalledModuleVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const InstalledModuleVersion* msg);
  static const ::clarifai::api::Visibility& visibility(const InstalledModuleVersion* msg);
};

const ::clarifai::api::ModuleVersion&
InstalledModuleVersion::_Internal::module_version(const InstalledModuleVersion* msg) {
  return *msg->_impl_.module_version_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InstalledModuleVersion::_Internal::created_at(const InstalledModuleVersion* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InstalledModuleVersion::_Internal::modified_at(const InstalledModuleVersion* msg) {
  return *msg->_impl_.modified_at_;
}
const ::clarifai::api::Visibility&
InstalledModuleVersion::_Internal::visibility(const InstalledModuleVersion* msg) {
  return *msg->_impl_.visibility_;
}
void InstalledModuleVersion::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void InstalledModuleVersion::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
InstalledModuleVersion::InstalledModuleVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.InstalledModuleVersion)
}
InstalledModuleVersion::InstalledModuleVersion(const InstalledModuleVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstalledModuleVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.deploy_url_){}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.module_version_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deploy_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deploy_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deploy_url().empty()) {
    _this->_impl_.deploy_url_.Set(from._internal_deploy_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_id().empty()) {
    _this->_impl_.key_id_.Set(from._internal_key_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_module_version()) {
    _this->_impl_.module_version_ = new ::clarifai::api::ModuleVersion(*from._impl_.module_version_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_visibility()) {
    _this->_impl_.visibility_ = new ::clarifai::api::Visibility(*from._impl_.visibility_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.InstalledModuleVersion)
}

inline void InstalledModuleVersion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.deploy_url_){}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.module_version_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.visibility_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deploy_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deploy_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstalledModuleVersion::~InstalledModuleVersion() {
  // @@protoc_insertion_point(destructor:clarifai.api.InstalledModuleVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstalledModuleVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.deploy_url_.Destroy();
  _impl_.key_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.module_version_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.visibility_;
}

void InstalledModuleVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstalledModuleVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.InstalledModuleVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.deploy_url_.ClearToEmpty();
  _impl_.key_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.module_version_ != nullptr) {
    delete _impl_.module_version_;
  }
  _impl_.module_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visibility_ != nullptr) {
    delete _impl_.visibility_;
  }
  _impl_.visibility_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstalledModuleVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.InstalledModuleVersion.id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModuleVersion module_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_module_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.InstalledModuleVersion.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.InstalledModuleVersion.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deploy_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_deploy_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.InstalledModuleVersion.deploy_url"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_key_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.InstalledModuleVersion.key_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstalledModuleVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.InstalledModuleVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.InstalledModuleVersion.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.ModuleVersion module_version = 2;
  if (this->_internal_has_module_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::module_version(this),
        _Internal::module_version(this).GetCachedSize(), target, stream);
  }

  // string app_id = 3;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.InstalledModuleVersion.app_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_app_id(), target);
  }

  // string user_id = 4;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.InstalledModuleVersion.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 6;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // string deploy_url = 7;
  if (!this->_internal_deploy_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deploy_url().data(), static_cast<int>(this->_internal_deploy_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.InstalledModuleVersion.deploy_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_deploy_url(), target);
  }

  // .clarifai.api.Visibility visibility = 8;
  if (this->_internal_has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::visibility(this),
        _Internal::visibility(this).GetCachedSize(), target, stream);
  }

  // string key_id = 9;
  if (!this->_internal_key_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.InstalledModuleVersion.key_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.InstalledModuleVersion)
  return target;
}

size_t InstalledModuleVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.InstalledModuleVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string app_id = 3;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 4;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string deploy_url = 7;
  if (!this->_internal_deploy_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deploy_url());
  }

  // string key_id = 9;
  if (!this->_internal_key_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // .clarifai.api.ModuleVersion module_version = 2;
  if (this->_internal_has_module_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.module_version_);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 6;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .clarifai.api.Visibility visibility = 8;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visibility_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstalledModuleVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstalledModuleVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstalledModuleVersion::GetClassData() const { return &_class_data_; }


void InstalledModuleVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstalledModuleVersion*>(&to_msg);
  auto& from = static_cast<const InstalledModuleVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.InstalledModuleVersion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_deploy_url().empty()) {
    _this->_internal_set_deploy_url(from._internal_deploy_url());
  }
  if (!from._internal_key_id().empty()) {
    _this->_internal_set_key_id(from._internal_key_id());
  }
  if (from._internal_has_module_version()) {
    _this->_internal_mutable_module_version()->::clarifai::api::ModuleVersion::MergeFrom(
        from._internal_module_version());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_visibility()) {
    _this->_internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(
        from._internal_visibility());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstalledModuleVersion::CopyFrom(const InstalledModuleVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.InstalledModuleVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstalledModuleVersion::IsInitialized() const {
  return true;
}

void InstalledModuleVersion::InternalSwap(InstalledModuleVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deploy_url_, lhs_arena,
      &other->_impl_.deploy_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_id_, lhs_arena,
      &other->_impl_.key_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstalledModuleVersion, _impl_.visibility_)
      + sizeof(InstalledModuleVersion::_impl_.visibility_)
      - PROTOBUF_FIELD_OFFSET(InstalledModuleVersion, _impl_.module_version_)>(
          reinterpret_cast<char*>(&_impl_.module_version_),
          reinterpret_cast<char*>(&other->_impl_.module_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstalledModuleVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[164]);
}

// ===================================================================

class BulkOperation::_Internal {
 public:
  static const ::clarifai::api::InputIDs& input_ids(const BulkOperation* msg);
  static const ::clarifai::api::Search& search(const BulkOperation* msg);
  static const ::clarifai::api::Dataset& dataset(const BulkOperation* msg);
  static const ::clarifai::api::Operation& operation(const BulkOperation* msg);
  static const ::clarifai::api::status::Status& status(const BulkOperation* msg);
  static const ::clarifai::api::Progress& progress(const BulkOperation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const BulkOperation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_modified_at(const BulkOperation* msg);
};

const ::clarifai::api::InputIDs&
BulkOperation::_Internal::input_ids(const BulkOperation* msg) {
  return *msg->_impl_.input_source_.input_ids_;
}
const ::clarifai::api::Search&
BulkOperation::_Internal::search(const BulkOperation* msg) {
  return *msg->_impl_.input_source_.search_;
}
const ::clarifai::api::Dataset&
BulkOperation::_Internal::dataset(const BulkOperation* msg) {
  return *msg->_impl_.input_source_.dataset_;
}
const ::clarifai::api::Operation&
BulkOperation::_Internal::operation(const BulkOperation* msg) {
  return *msg->_impl_.operation_;
}
const ::clarifai::api::status::Status&
BulkOperation::_Internal::status(const BulkOperation* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Progress&
BulkOperation::_Internal::progress(const BulkOperation* msg) {
  return *msg->_impl_.progress_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BulkOperation::_Internal::created_at(const BulkOperation* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BulkOperation::_Internal::last_modified_at(const BulkOperation* msg) {
  return *msg->_impl_.last_modified_at_;
}
void BulkOperation::set_allocated_input_ids(::clarifai::api::InputIDs* input_ids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_input_source();
  if (input_ids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input_ids);
    if (message_arena != submessage_arena) {
      input_ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_ids, submessage_arena);
    }
    set_has_input_ids();
    _impl_.input_source_.input_ids_ = input_ids;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.BulkOperation.input_ids)
}
void BulkOperation::set_allocated_search(::clarifai::api::Search* search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_input_source();
  if (search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(search);
    if (message_arena != submessage_arena) {
      search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search, submessage_arena);
    }
    set_has_search();
    _impl_.input_source_.search_ = search;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.BulkOperation.search)
}
void BulkOperation::set_allocated_dataset(::clarifai::api::Dataset* dataset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_input_source();
  if (dataset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dataset);
    if (message_arena != submessage_arena) {
      dataset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataset, submessage_arena);
    }
    set_has_dataset();
    _impl_.input_source_.dataset_ = dataset;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.BulkOperation.dataset)
}
void BulkOperation::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void BulkOperation::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void BulkOperation::clear_last_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_modified_at_ != nullptr) {
    delete _impl_.last_modified_at_;
  }
  _impl_.last_modified_at_ = nullptr;
}
BulkOperation::BulkOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.BulkOperation)
}
BulkOperation::BulkOperation(const BulkOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BulkOperation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.created_by_){}
    , decltype(_impl_.operation_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.progress_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.last_modified_at_){nullptr}
    , decltype(_impl_.input_source_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.created_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_by().empty()) {
    _this->_impl_.created_by_.Set(from._internal_created_by(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_operation()) {
    _this->_impl_.operation_ = new ::clarifai::api::Operation(*from._impl_.operation_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_progress()) {
    _this->_impl_.progress_ = new ::clarifai::api::Progress(*from._impl_.progress_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_last_modified_at()) {
    _this->_impl_.last_modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_modified_at_);
  }
  clear_has_input_source();
  switch (from.input_source_case()) {
    case kInputIds: {
      _this->_internal_mutable_input_ids()->::clarifai::api::InputIDs::MergeFrom(
          from._internal_input_ids());
      break;
    }
    case kSearch: {
      _this->_internal_mutable_search()->::clarifai::api::Search::MergeFrom(
          from._internal_search());
      break;
    }
    case kDataset: {
      _this->_internal_mutable_dataset()->::clarifai::api::Dataset::MergeFrom(
          from._internal_dataset());
      break;
    }
    case INPUT_SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.BulkOperation)
}

inline void BulkOperation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.created_by_){}
    , decltype(_impl_.operation_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.progress_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.last_modified_at_){nullptr}
    , decltype(_impl_.input_source_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_input_source();
}

BulkOperation::~BulkOperation() {
  // @@protoc_insertion_point(destructor:clarifai.api.BulkOperation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BulkOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.created_by_.Destroy();
  if (this != internal_default_instance()) delete _impl_.operation_;
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.progress_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.last_modified_at_;
  if (has_input_source()) {
    clear_input_source();
  }
}

void BulkOperation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BulkOperation::clear_input_source() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.BulkOperation)
  switch (input_source_case()) {
    case kInputIds: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.input_source_.input_ids_;
      }
      break;
    }
    case kSearch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.input_source_.search_;
      }
      break;
    }
    case kDataset: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.input_source_.dataset_;
      }
      break;
    }
    case INPUT_SOURCE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INPUT_SOURCE_NOT_SET;
}


void BulkOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.BulkOperation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.created_by_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.operation_ != nullptr) {
    delete _impl_.operation_;
  }
  _impl_.operation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.progress_ != nullptr) {
    delete _impl_.progress_;
  }
  _impl_.progress_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_modified_at_ != nullptr) {
    delete _impl_.last_modified_at_;
  }
  _impl_.last_modified_at_ = nullptr;
  clear_input_source();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkOperation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.BulkOperation.id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.InputIDs input_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Operation operation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_operation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.BulkOperation.app_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Progress progress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string created_by = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_created_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.BulkOperation.created_by"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_modified_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search search = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Dataset dataset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BulkOperation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.BulkOperation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.BulkOperation.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.InputIDs input_ids = 2;
  if (_internal_has_input_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::input_ids(this),
        _Internal::input_ids(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Operation operation = 3;
  if (this->_internal_has_operation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::operation(this),
        _Internal::operation(this).GetCachedSize(), target, stream);
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.BulkOperation.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  // .clarifai.api.status.Status status = 5;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Progress progress = 6;
  if (this->_internal_has_progress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::progress(this),
        _Internal::progress(this).GetCachedSize(), target, stream);
  }

  // string created_by = 7;
  if (!this->_internal_created_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_by().data(), static_cast<int>(this->_internal_created_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.BulkOperation.created_by");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_created_by(), target);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_modified_at = 9;
  if (this->_internal_has_last_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::last_modified_at(this),
        _Internal::last_modified_at(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Search search = 10;
  if (_internal_has_search()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::search(this),
        _Internal::search(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Dataset dataset = 11;
  if (_internal_has_dataset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::dataset(this),
        _Internal::dataset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.BulkOperation)
  return target;
}

size_t BulkOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.BulkOperation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string created_by = 7;
  if (!this->_internal_created_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_by());
  }

  // .clarifai.api.Operation operation = 3;
  if (this->_internal_has_operation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.operation_);
  }

  // .clarifai.api.status.Status status = 5;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Progress progress = 6;
  if (this->_internal_has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.progress_);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp last_modified_at = 9;
  if (this->_internal_has_last_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_modified_at_);
  }

  switch (input_source_case()) {
    // .clarifai.api.InputIDs input_ids = 2;
    case kInputIds: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.input_source_.input_ids_);
      break;
    }
    // .clarifai.api.Search search = 10;
    case kSearch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.input_source_.search_);
      break;
    }
    // .clarifai.api.Dataset dataset = 11;
    case kDataset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.input_source_.dataset_);
      break;
    }
    case INPUT_SOURCE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BulkOperation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BulkOperation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BulkOperation::GetClassData() const { return &_class_data_; }


void BulkOperation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BulkOperation*>(&to_msg);
  auto& from = static_cast<const BulkOperation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.BulkOperation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_created_by().empty()) {
    _this->_internal_set_created_by(from._internal_created_by());
  }
  if (from._internal_has_operation()) {
    _this->_internal_mutable_operation()->::clarifai::api::Operation::MergeFrom(
        from._internal_operation());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_progress()) {
    _this->_internal_mutable_progress()->::clarifai::api::Progress::MergeFrom(
        from._internal_progress());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_last_modified_at()) {
    _this->_internal_mutable_last_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_modified_at());
  }
  switch (from.input_source_case()) {
    case kInputIds: {
      _this->_internal_mutable_input_ids()->::clarifai::api::InputIDs::MergeFrom(
          from._internal_input_ids());
      break;
    }
    case kSearch: {
      _this->_internal_mutable_search()->::clarifai::api::Search::MergeFrom(
          from._internal_search());
      break;
    }
    case kDataset: {
      _this->_internal_mutable_dataset()->::clarifai::api::Dataset::MergeFrom(
          from._internal_dataset());
      break;
    }
    case INPUT_SOURCE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BulkOperation::CopyFrom(const BulkOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.BulkOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkOperation::IsInitialized() const {
  return true;
}

void BulkOperation::InternalSwap(BulkOperation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.created_by_, lhs_arena,
      &other->_impl_.created_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkOperation, _impl_.last_modified_at_)
      + sizeof(BulkOperation::_impl_.last_modified_at_)
      - PROTOBUF_FIELD_OFFSET(BulkOperation, _impl_.operation_)>(
          reinterpret_cast<char*>(&_impl_.operation_),
          reinterpret_cast<char*>(&other->_impl_.operation_));
  swap(_impl_.input_source_, other->_impl_.input_source_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkOperation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[165]);
}

// ===================================================================

class InputIDs::_Internal {
 public:
};

InputIDs::InputIDs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.InputIDs)
}
InputIDs::InputIDs(const InputIDs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputIDs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_ids_){from._impl_.input_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.InputIDs)
}

inline void InputIDs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InputIDs::~InputIDs() {
  // @@protoc_insertion_point(destructor:clarifai.api.InputIDs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputIDs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_ids_.~RepeatedPtrField();
}

void InputIDs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputIDs::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.InputIDs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputIDs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string input_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.InputIDs.input_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputIDs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.InputIDs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input_ids = 1;
  for (int i = 0, n = this->_internal_input_ids_size(); i < n; i++) {
    const auto& s = this->_internal_input_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.InputIDs.input_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.InputIDs)
  return target;
}

size_t InputIDs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.InputIDs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.input_ids_.size());
  for (int i = 0, n = _impl_.input_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.input_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputIDs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputIDs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputIDs::GetClassData() const { return &_class_data_; }


void InputIDs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputIDs*>(&to_msg);
  auto& from = static_cast<const InputIDs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.InputIDs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_ids_.MergeFrom(from._impl_.input_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputIDs::CopyFrom(const InputIDs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.InputIDs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputIDs::IsInitialized() const {
  return true;
}

void InputIDs::InternalSwap(InputIDs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.input_ids_.InternalSwap(&other->_impl_.input_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputIDs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[166]);
}

// ===================================================================

class Progress::_Internal {
 public:
};

Progress::Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Progress)
}
Progress::Progress(const Progress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Progress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.last_processed_id_){}
    , decltype(_impl_.processed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.last_processed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_processed_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_processed_id().empty()) {
    _this->_impl_.last_processed_id_.Set(from._internal_last_processed_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.processed_ = from._impl_.processed_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Progress)
}

inline void Progress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.last_processed_id_){}
    , decltype(_impl_.processed_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.last_processed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_processed_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Progress::~Progress() {
  // @@protoc_insertion_point(destructor:clarifai.api.Progress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Progress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.last_processed_id_.Destroy();
}

void Progress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Progress::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Progress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.last_processed_id_.ClearToEmpty();
  _impl_.processed_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Progress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 processed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string last_processed_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_last_processed_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Progress.last_processed_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Progress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Progress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 processed = 1;
  if (this->_internal_processed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_processed(), target);
  }

  // string last_processed_id = 2;
  if (!this->_internal_last_processed_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_processed_id().data(), static_cast<int>(this->_internal_last_processed_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Progress.last_processed_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_last_processed_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Progress)
  return target;
}

size_t Progress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Progress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string last_processed_id = 2;
  if (!this->_internal_last_processed_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_processed_id());
  }

  // uint32 processed = 1;
  if (this->_internal_processed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_processed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Progress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Progress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Progress::GetClassData() const { return &_class_data_; }


void Progress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Progress*>(&to_msg);
  auto& from = static_cast<const Progress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Progress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_last_processed_id().empty()) {
    _this->_internal_set_last_processed_id(from._internal_last_processed_id());
  }
  if (from._internal_processed() != 0) {
    _this->_internal_set_processed(from._internal_processed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Progress::CopyFrom(const Progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Progress::IsInitialized() const {
  return true;
}

void Progress::InternalSwap(Progress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_processed_id_, lhs_arena,
      &other->_impl_.last_processed_id_, rhs_arena
  );
  swap(_impl_.processed_, other->_impl_.processed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Progress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[167]);
}

// ===================================================================

class Operation::_Internal {
 public:
  static const ::clarifai::api::AddConcepts& add_concepts(const Operation* msg);
  static const ::clarifai::api::DeleteConcepts& delete_concepts(const Operation* msg);
  static const ::clarifai::api::AddMetadata& add_metadata(const Operation* msg);
  static const ::clarifai::api::DeleteMetadata& delete_metadata(const Operation* msg);
  static const ::clarifai::api::OverwriteGeo& overwrite_geo(const Operation* msg);
  static const ::clarifai::api::DeleteGeo& delete_geo(const Operation* msg);
  static const ::clarifai::api::DeleteFromDataset& delete_from_dataset(const Operation* msg);
  static const ::clarifai::api::AddToDataset& add_to_dataset(const Operation* msg);
  static const ::clarifai::api::SplitIntoDatasets& split_into_datasets(const Operation* msg);
};

const ::clarifai::api::AddConcepts&
Operation::_Internal::add_concepts(const Operation* msg) {
  return *msg->_impl_.operation_.add_concepts_;
}
const ::clarifai::api::DeleteConcepts&
Operation::_Internal::delete_concepts(const Operation* msg) {
  return *msg->_impl_.operation_.delete_concepts_;
}
const ::clarifai::api::AddMetadata&
Operation::_Internal::add_metadata(const Operation* msg) {
  return *msg->_impl_.operation_.add_metadata_;
}
const ::clarifai::api::DeleteMetadata&
Operation::_Internal::delete_metadata(const Operation* msg) {
  return *msg->_impl_.operation_.delete_metadata_;
}
const ::clarifai::api::OverwriteGeo&
Operation::_Internal::overwrite_geo(const Operation* msg) {
  return *msg->_impl_.operation_.overwrite_geo_;
}
const ::clarifai::api::DeleteGeo&
Operation::_Internal::delete_geo(const Operation* msg) {
  return *msg->_impl_.operation_.delete_geo_;
}
const ::clarifai::api::DeleteFromDataset&
Operation::_Internal::delete_from_dataset(const Operation* msg) {
  return *msg->_impl_.operation_.delete_from_dataset_;
}
const ::clarifai::api::AddToDataset&
Operation::_Internal::add_to_dataset(const Operation* msg) {
  return *msg->_impl_.operation_.add_to_dataset_;
}
const ::clarifai::api::SplitIntoDatasets&
Operation::_Internal::split_into_datasets(const Operation* msg) {
  return *msg->_impl_.operation_.split_into_datasets_;
}
void Operation::set_allocated_add_concepts(::clarifai::api::AddConcepts* add_concepts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (add_concepts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_concepts);
    if (message_arena != submessage_arena) {
      add_concepts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_concepts, submessage_arena);
    }
    set_has_add_concepts();
    _impl_.operation_.add_concepts_ = add_concepts;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Operation.add_concepts)
}
void Operation::set_allocated_delete_concepts(::clarifai::api::DeleteConcepts* delete_concepts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (delete_concepts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_concepts);
    if (message_arena != submessage_arena) {
      delete_concepts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_concepts, submessage_arena);
    }
    set_has_delete_concepts();
    _impl_.operation_.delete_concepts_ = delete_concepts;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Operation.delete_concepts)
}
void Operation::set_allocated_add_metadata(::clarifai::api::AddMetadata* add_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (add_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_metadata);
    if (message_arena != submessage_arena) {
      add_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_metadata, submessage_arena);
    }
    set_has_add_metadata();
    _impl_.operation_.add_metadata_ = add_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Operation.add_metadata)
}
void Operation::set_allocated_delete_metadata(::clarifai::api::DeleteMetadata* delete_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (delete_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_metadata);
    if (message_arena != submessage_arena) {
      delete_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_metadata, submessage_arena);
    }
    set_has_delete_metadata();
    _impl_.operation_.delete_metadata_ = delete_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Operation.delete_metadata)
}
void Operation::set_allocated_overwrite_geo(::clarifai::api::OverwriteGeo* overwrite_geo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (overwrite_geo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(overwrite_geo);
    if (message_arena != submessage_arena) {
      overwrite_geo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overwrite_geo, submessage_arena);
    }
    set_has_overwrite_geo();
    _impl_.operation_.overwrite_geo_ = overwrite_geo;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Operation.overwrite_geo)
}
void Operation::set_allocated_delete_geo(::clarifai::api::DeleteGeo* delete_geo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (delete_geo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_geo);
    if (message_arena != submessage_arena) {
      delete_geo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_geo, submessage_arena);
    }
    set_has_delete_geo();
    _impl_.operation_.delete_geo_ = delete_geo;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Operation.delete_geo)
}
void Operation::set_allocated_delete_from_dataset(::clarifai::api::DeleteFromDataset* delete_from_dataset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (delete_from_dataset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_from_dataset);
    if (message_arena != submessage_arena) {
      delete_from_dataset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_from_dataset, submessage_arena);
    }
    set_has_delete_from_dataset();
    _impl_.operation_.delete_from_dataset_ = delete_from_dataset;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Operation.delete_from_dataset)
}
void Operation::set_allocated_add_to_dataset(::clarifai::api::AddToDataset* add_to_dataset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (add_to_dataset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_to_dataset);
    if (message_arena != submessage_arena) {
      add_to_dataset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_to_dataset, submessage_arena);
    }
    set_has_add_to_dataset();
    _impl_.operation_.add_to_dataset_ = add_to_dataset;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Operation.add_to_dataset)
}
void Operation::set_allocated_split_into_datasets(::clarifai::api::SplitIntoDatasets* split_into_datasets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (split_into_datasets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(split_into_datasets);
    if (message_arena != submessage_arena) {
      split_into_datasets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, split_into_datasets, submessage_arena);
    }
    set_has_split_into_datasets();
    _impl_.operation_.split_into_datasets_ = split_into_datasets;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Operation.split_into_datasets)
}
Operation::Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Operation)
}
Operation::Operation(const Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Operation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_operation();
  switch (from.operation_case()) {
    case kAddConcepts: {
      _this->_internal_mutable_add_concepts()->::clarifai::api::AddConcepts::MergeFrom(
          from._internal_add_concepts());
      break;
    }
    case kDeleteConcepts: {
      _this->_internal_mutable_delete_concepts()->::clarifai::api::DeleteConcepts::MergeFrom(
          from._internal_delete_concepts());
      break;
    }
    case kAddMetadata: {
      _this->_internal_mutable_add_metadata()->::clarifai::api::AddMetadata::MergeFrom(
          from._internal_add_metadata());
      break;
    }
    case kDeleteMetadata: {
      _this->_internal_mutable_delete_metadata()->::clarifai::api::DeleteMetadata::MergeFrom(
          from._internal_delete_metadata());
      break;
    }
    case kOverwriteGeo: {
      _this->_internal_mutable_overwrite_geo()->::clarifai::api::OverwriteGeo::MergeFrom(
          from._internal_overwrite_geo());
      break;
    }
    case kDeleteGeo: {
      _this->_internal_mutable_delete_geo()->::clarifai::api::DeleteGeo::MergeFrom(
          from._internal_delete_geo());
      break;
    }
    case kDeleteFromDataset: {
      _this->_internal_mutable_delete_from_dataset()->::clarifai::api::DeleteFromDataset::MergeFrom(
          from._internal_delete_from_dataset());
      break;
    }
    case kAddToDataset: {
      _this->_internal_mutable_add_to_dataset()->::clarifai::api::AddToDataset::MergeFrom(
          from._internal_add_to_dataset());
      break;
    }
    case kSplitIntoDatasets: {
      _this->_internal_mutable_split_into_datasets()->::clarifai::api::SplitIntoDatasets::MergeFrom(
          from._internal_split_into_datasets());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Operation)
}

inline void Operation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_operation();
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:clarifai.api.Operation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_operation()) {
    clear_operation();
  }
}

void Operation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Operation::clear_operation() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.Operation)
  switch (operation_case()) {
    case kAddConcepts: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.add_concepts_;
      }
      break;
    }
    case kDeleteConcepts: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.delete_concepts_;
      }
      break;
    }
    case kAddMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.add_metadata_;
      }
      break;
    }
    case kDeleteMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.delete_metadata_;
      }
      break;
    }
    case kOverwriteGeo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.overwrite_geo_;
      }
      break;
    }
    case kDeleteGeo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.delete_geo_;
      }
      break;
    }
    case kDeleteFromDataset: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.delete_from_dataset_;
      }
      break;
    }
    case kAddToDataset: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.add_to_dataset_;
      }
      break;
    }
    case kSplitIntoDatasets: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.split_into_datasets_;
      }
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPERATION_NOT_SET;
}


void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Operation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_operation();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.AddConcepts add_concepts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_concepts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DeleteConcepts delete_concepts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_concepts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AddMetadata add_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DeleteMetadata delete_metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.OverwriteGeo overwrite_geo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_overwrite_geo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DeleteGeo delete_geo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_geo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DeleteFromDataset delete_from_dataset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_from_dataset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AddToDataset add_to_dataset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_to_dataset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.SplitIntoDatasets split_into_datasets = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_split_into_datasets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Operation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Operation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.AddConcepts add_concepts = 1;
  if (_internal_has_add_concepts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::add_concepts(this),
        _Internal::add_concepts(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.DeleteConcepts delete_concepts = 2;
  if (_internal_has_delete_concepts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::delete_concepts(this),
        _Internal::delete_concepts(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.AddMetadata add_metadata = 3;
  if (_internal_has_add_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::add_metadata(this),
        _Internal::add_metadata(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.DeleteMetadata delete_metadata = 4;
  if (_internal_has_delete_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::delete_metadata(this),
        _Internal::delete_metadata(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.OverwriteGeo overwrite_geo = 5;
  if (_internal_has_overwrite_geo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::overwrite_geo(this),
        _Internal::overwrite_geo(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.DeleteGeo delete_geo = 6;
  if (_internal_has_delete_geo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::delete_geo(this),
        _Internal::delete_geo(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.DeleteFromDataset delete_from_dataset = 7;
  if (_internal_has_delete_from_dataset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::delete_from_dataset(this),
        _Internal::delete_from_dataset(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.AddToDataset add_to_dataset = 8;
  if (_internal_has_add_to_dataset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::add_to_dataset(this),
        _Internal::add_to_dataset(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.SplitIntoDatasets split_into_datasets = 9;
  if (_internal_has_split_into_datasets()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::split_into_datasets(this),
        _Internal::split_into_datasets(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Operation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (operation_case()) {
    // .clarifai.api.AddConcepts add_concepts = 1;
    case kAddConcepts: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.add_concepts_);
      break;
    }
    // .clarifai.api.DeleteConcepts delete_concepts = 2;
    case kDeleteConcepts: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.delete_concepts_);
      break;
    }
    // .clarifai.api.AddMetadata add_metadata = 3;
    case kAddMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.add_metadata_);
      break;
    }
    // .clarifai.api.DeleteMetadata delete_metadata = 4;
    case kDeleteMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.delete_metadata_);
      break;
    }
    // .clarifai.api.OverwriteGeo overwrite_geo = 5;
    case kOverwriteGeo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.overwrite_geo_);
      break;
    }
    // .clarifai.api.DeleteGeo delete_geo = 6;
    case kDeleteGeo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.delete_geo_);
      break;
    }
    // .clarifai.api.DeleteFromDataset delete_from_dataset = 7;
    case kDeleteFromDataset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.delete_from_dataset_);
      break;
    }
    // .clarifai.api.AddToDataset add_to_dataset = 8;
    case kAddToDataset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.add_to_dataset_);
      break;
    }
    // .clarifai.api.SplitIntoDatasets split_into_datasets = 9;
    case kSplitIntoDatasets: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.split_into_datasets_);
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Operation::GetClassData() const { return &_class_data_; }


void Operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Operation*>(&to_msg);
  auto& from = static_cast<const Operation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Operation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.operation_case()) {
    case kAddConcepts: {
      _this->_internal_mutable_add_concepts()->::clarifai::api::AddConcepts::MergeFrom(
          from._internal_add_concepts());
      break;
    }
    case kDeleteConcepts: {
      _this->_internal_mutable_delete_concepts()->::clarifai::api::DeleteConcepts::MergeFrom(
          from._internal_delete_concepts());
      break;
    }
    case kAddMetadata: {
      _this->_internal_mutable_add_metadata()->::clarifai::api::AddMetadata::MergeFrom(
          from._internal_add_metadata());
      break;
    }
    case kDeleteMetadata: {
      _this->_internal_mutable_delete_metadata()->::clarifai::api::DeleteMetadata::MergeFrom(
          from._internal_delete_metadata());
      break;
    }
    case kOverwriteGeo: {
      _this->_internal_mutable_overwrite_geo()->::clarifai::api::OverwriteGeo::MergeFrom(
          from._internal_overwrite_geo());
      break;
    }
    case kDeleteGeo: {
      _this->_internal_mutable_delete_geo()->::clarifai::api::DeleteGeo::MergeFrom(
          from._internal_delete_geo());
      break;
    }
    case kDeleteFromDataset: {
      _this->_internal_mutable_delete_from_dataset()->::clarifai::api::DeleteFromDataset::MergeFrom(
          from._internal_delete_from_dataset());
      break;
    }
    case kAddToDataset: {
      _this->_internal_mutable_add_to_dataset()->::clarifai::api::AddToDataset::MergeFrom(
          from._internal_add_to_dataset());
      break;
    }
    case kSplitIntoDatasets: {
      _this->_internal_mutable_split_into_datasets()->::clarifai::api::SplitIntoDatasets::MergeFrom(
          from._internal_split_into_datasets());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::InternalSwap(Operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.operation_, other->_impl_.operation_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[168]);
}

// ===================================================================

class AddConcepts::_Internal {
 public:
};

AddConcepts::AddConcepts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AddConcepts)
}
AddConcepts::AddConcepts(const AddConcepts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddConcepts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concepts_){from._impl_.concepts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AddConcepts)
}

inline void AddConcepts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concepts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddConcepts::~AddConcepts() {
  // @@protoc_insertion_point(destructor:clarifai.api.AddConcepts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddConcepts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concepts_.~RepeatedPtrField();
}

void AddConcepts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddConcepts::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AddConcepts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concepts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddConcepts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.Concept concepts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddConcepts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AddConcepts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_concepts_size()); i < n; i++) {
    const auto& repfield = this->_internal_concepts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AddConcepts)
  return target;
}

size_t AddConcepts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AddConcepts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 1;
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->_impl_.concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddConcepts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddConcepts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddConcepts::GetClassData() const { return &_class_data_; }


void AddConcepts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddConcepts*>(&to_msg);
  auto& from = static_cast<const AddConcepts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AddConcepts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concepts_.MergeFrom(from._impl_.concepts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddConcepts::CopyFrom(const AddConcepts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AddConcepts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddConcepts::IsInitialized() const {
  return true;
}

void AddConcepts::InternalSwap(AddConcepts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concepts_.InternalSwap(&other->_impl_.concepts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddConcepts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[169]);
}

// ===================================================================

class DeleteConcepts::_Internal {
 public:
};

DeleteConcepts::DeleteConcepts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteConcepts)
}
DeleteConcepts::DeleteConcepts(const DeleteConcepts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteConcepts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concepts_){from._impl_.concepts_}
    , decltype(_impl_.user_ids_){from._impl_.user_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteConcepts)
}

inline void DeleteConcepts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concepts_){arena}
    , decltype(_impl_.user_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteConcepts::~DeleteConcepts() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteConcepts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteConcepts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concepts_.~RepeatedPtrField();
  _impl_.user_ids_.~RepeatedPtrField();
}

void DeleteConcepts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteConcepts::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteConcepts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concepts_.Clear();
  _impl_.user_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteConcepts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.Concept concepts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteConcepts.user_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteConcepts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteConcepts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_concepts_size()); i < n; i++) {
    const auto& repfield = this->_internal_concepts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteConcepts.user_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteConcepts)
  return target;
}

size_t DeleteConcepts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteConcepts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 1;
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->_impl_.concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string user_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.user_ids_.size());
  for (int i = 0, n = _impl_.user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.user_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteConcepts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteConcepts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteConcepts::GetClassData() const { return &_class_data_; }


void DeleteConcepts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteConcepts*>(&to_msg);
  auto& from = static_cast<const DeleteConcepts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteConcepts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concepts_.MergeFrom(from._impl_.concepts_);
  _this->_impl_.user_ids_.MergeFrom(from._impl_.user_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteConcepts::CopyFrom(const DeleteConcepts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteConcepts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteConcepts::IsInitialized() const {
  return true;
}

void DeleteConcepts::InternalSwap(DeleteConcepts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concepts_.InternalSwap(&other->_impl_.concepts_);
  _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteConcepts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[170]);
}

// ===================================================================

class AddMetadata::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const AddMetadata* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
AddMetadata::_Internal::metadata(const AddMetadata* msg) {
  return *msg->_impl_.metadata_;
}
void AddMetadata::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
AddMetadata::AddMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AddMetadata)
}
AddMetadata::AddMetadata(const AddMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AddMetadata)
}

inline void AddMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddMetadata::~AddMetadata() {
  // @@protoc_insertion_point(destructor:clarifai.api.AddMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void AddMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AddMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AddMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct metadata = 1;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AddMetadata)
  return target;
}

size_t AddMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AddMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddMetadata::GetClassData() const { return &_class_data_; }


void AddMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddMetadata*>(&to_msg);
  auto& from = static_cast<const AddMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AddMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddMetadata::CopyFrom(const AddMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AddMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMetadata::IsInitialized() const {
  return true;
}

void AddMetadata::InternalSwap(AddMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.metadata_, other->_impl_.metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[171]);
}

// ===================================================================

class DeleteMetadata::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const DeleteMetadata* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
DeleteMetadata::_Internal::metadata(const DeleteMetadata* msg) {
  return *msg->_impl_.metadata_;
}
void DeleteMetadata::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
DeleteMetadata::DeleteMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteMetadata)
}
DeleteMetadata::DeleteMetadata(const DeleteMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteMetadata)
}

inline void DeleteMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteMetadata::~DeleteMetadata() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void DeleteMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct metadata = 1;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteMetadata)
  return target;
}

size_t DeleteMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteMetadata::GetClassData() const { return &_class_data_; }


void DeleteMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteMetadata*>(&to_msg);
  auto& from = static_cast<const DeleteMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteMetadata::CopyFrom(const DeleteMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMetadata::IsInitialized() const {
  return true;
}

void DeleteMetadata::InternalSwap(DeleteMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.metadata_, other->_impl_.metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[172]);
}

// ===================================================================

class OverwriteGeo::_Internal {
 public:
  static const ::clarifai::api::Geo& geo(const OverwriteGeo* msg);
};

const ::clarifai::api::Geo&
OverwriteGeo::_Internal::geo(const OverwriteGeo* msg) {
  return *msg->_impl_.geo_;
}
OverwriteGeo::OverwriteGeo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.OverwriteGeo)
}
OverwriteGeo::OverwriteGeo(const OverwriteGeo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OverwriteGeo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.geo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_geo()) {
    _this->_impl_.geo_ = new ::clarifai::api::Geo(*from._impl_.geo_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.OverwriteGeo)
}

inline void OverwriteGeo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.geo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OverwriteGeo::~OverwriteGeo() {
  // @@protoc_insertion_point(destructor:clarifai.api.OverwriteGeo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OverwriteGeo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.geo_;
}

void OverwriteGeo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OverwriteGeo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.OverwriteGeo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.geo_ != nullptr) {
    delete _impl_.geo_;
  }
  _impl_.geo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverwriteGeo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Geo geo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OverwriteGeo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.OverwriteGeo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Geo geo = 1;
  if (this->_internal_has_geo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::geo(this),
        _Internal::geo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.OverwriteGeo)
  return target;
}

size_t OverwriteGeo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.OverwriteGeo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Geo geo = 1;
  if (this->_internal_has_geo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.geo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OverwriteGeo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OverwriteGeo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OverwriteGeo::GetClassData() const { return &_class_data_; }


void OverwriteGeo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OverwriteGeo*>(&to_msg);
  auto& from = static_cast<const OverwriteGeo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.OverwriteGeo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_geo()) {
    _this->_internal_mutable_geo()->::clarifai::api::Geo::MergeFrom(
        from._internal_geo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OverwriteGeo::CopyFrom(const OverwriteGeo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.OverwriteGeo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverwriteGeo::IsInitialized() const {
  return true;
}

void OverwriteGeo::InternalSwap(OverwriteGeo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.geo_, other->_impl_.geo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverwriteGeo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[173]);
}

// ===================================================================

class DeleteGeo::_Internal {
 public:
};

DeleteGeo::DeleteGeo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteGeo)
}
DeleteGeo::DeleteGeo(const DeleteGeo& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DeleteGeo* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteGeo)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteGeo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteGeo::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DeleteGeo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[174]);
}

// ===================================================================

class AddToDataset::_Internal {
 public:
};

AddToDataset::AddToDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AddToDataset)
}
AddToDataset::AddToDataset(const AddToDataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddToDataset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AddToDataset)
}

inline void AddToDataset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddToDataset::~AddToDataset() {
  // @@protoc_insertion_point(destructor:clarifai.api.AddToDataset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddToDataset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_id_.Destroy();
}

void AddToDataset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddToDataset::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AddToDataset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddToDataset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dataset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AddToDataset.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddToDataset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AddToDataset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataset_id = 1;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AddToDataset.dataset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dataset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AddToDataset)
  return target;
}

size_t AddToDataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AddToDataset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_id = 1;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddToDataset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddToDataset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddToDataset::GetClassData() const { return &_class_data_; }


void AddToDataset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddToDataset*>(&to_msg);
  auto& from = static_cast<const AddToDataset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AddToDataset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddToDataset::CopyFrom(const AddToDataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AddToDataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddToDataset::IsInitialized() const {
  return true;
}

void AddToDataset::InternalSwap(AddToDataset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AddToDataset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[175]);
}

// ===================================================================

class DeleteFromDataset::_Internal {
 public:
};

DeleteFromDataset::DeleteFromDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteFromDataset)
}
DeleteFromDataset::DeleteFromDataset(const DeleteFromDataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteFromDataset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteFromDataset)
}

inline void DeleteFromDataset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteFromDataset::~DeleteFromDataset() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteFromDataset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteFromDataset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_id_.Destroy();
}

void DeleteFromDataset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteFromDataset::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteFromDataset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteFromDataset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dataset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteFromDataset.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteFromDataset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteFromDataset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataset_id = 1;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteFromDataset.dataset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dataset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteFromDataset)
  return target;
}

size_t DeleteFromDataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteFromDataset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_id = 1;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteFromDataset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteFromDataset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteFromDataset::GetClassData() const { return &_class_data_; }


void DeleteFromDataset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteFromDataset*>(&to_msg);
  auto& from = static_cast<const DeleteFromDataset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteFromDataset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteFromDataset::CopyFrom(const DeleteFromDataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteFromDataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFromDataset::IsInitialized() const {
  return true;
}

void DeleteFromDataset::InternalSwap(DeleteFromDataset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFromDataset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[176]);
}

// ===================================================================

class SplitIntoDatasets::_Internal {
 public:
};

SplitIntoDatasets::SplitIntoDatasets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SplitIntoDatasets)
}
SplitIntoDatasets::SplitIntoDatasets(const SplitIntoDatasets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SplitIntoDatasets* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_splits_){from._impl_.dataset_splits_}
    , decltype(_impl_.method_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.method_ = from._impl_.method_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SplitIntoDatasets)
}

inline void SplitIntoDatasets::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_splits_){arena}
    , decltype(_impl_.method_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SplitIntoDatasets::~SplitIntoDatasets() {
  // @@protoc_insertion_point(destructor:clarifai.api.SplitIntoDatasets)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SplitIntoDatasets::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_splits_.~RepeatedPtrField();
}

void SplitIntoDatasets::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SplitIntoDatasets::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SplitIntoDatasets)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_splits_.Clear();
  _impl_.method_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SplitIntoDatasets::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.DatasetSplit dataset_splits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dataset_splits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.SplitIntoDatasets.DatasetSplitMethod method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_method(static_cast<::clarifai::api::SplitIntoDatasets_DatasetSplitMethod>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SplitIntoDatasets::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SplitIntoDatasets)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetSplit dataset_splits = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dataset_splits_size()); i < n; i++) {
    const auto& repfield = this->_internal_dataset_splits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.SplitIntoDatasets.DatasetSplitMethod method = 2;
  if (this->_internal_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SplitIntoDatasets)
  return target;
}

size_t SplitIntoDatasets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SplitIntoDatasets)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetSplit dataset_splits = 1;
  total_size += 1UL * this->_internal_dataset_splits_size();
  for (const auto& msg : this->_impl_.dataset_splits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.SplitIntoDatasets.DatasetSplitMethod method = 2;
  if (this->_internal_method() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_method());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SplitIntoDatasets::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SplitIntoDatasets::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SplitIntoDatasets::GetClassData() const { return &_class_data_; }


void SplitIntoDatasets::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SplitIntoDatasets*>(&to_msg);
  auto& from = static_cast<const SplitIntoDatasets&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SplitIntoDatasets)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dataset_splits_.MergeFrom(from._impl_.dataset_splits_);
  if (from._internal_method() != 0) {
    _this->_internal_set_method(from._internal_method());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SplitIntoDatasets::CopyFrom(const SplitIntoDatasets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SplitIntoDatasets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitIntoDatasets::IsInitialized() const {
  return true;
}

void SplitIntoDatasets::InternalSwap(SplitIntoDatasets* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dataset_splits_.InternalSwap(&other->_impl_.dataset_splits_);
  swap(_impl_.method_, other->_impl_.method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitIntoDatasets::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[177]);
}

// ===================================================================

class DatasetSplit::_Internal {
 public:
  static const ::clarifai::api::Dataset& dataset(const DatasetSplit* msg);
};

const ::clarifai::api::Dataset&
DatasetSplit::_Internal::dataset(const DatasetSplit* msg) {
  return *msg->_impl_.dataset_;
}
DatasetSplit::DatasetSplit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DatasetSplit)
}
DatasetSplit::DatasetSplit(const DatasetSplit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatasetSplit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_){nullptr}
    , decltype(_impl_.method_info_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dataset()) {
    _this->_impl_.dataset_ = new ::clarifai::api::Dataset(*from._impl_.dataset_);
  }
  clear_has_method_info();
  switch (from.method_info_case()) {
    case kPercentage: {
      _this->_internal_set_percentage(from._internal_percentage());
      break;
    }
    case METHOD_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetSplit)
}

inline void DatasetSplit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_){nullptr}
    , decltype(_impl_.method_info_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_method_info();
}

DatasetSplit::~DatasetSplit() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetSplit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatasetSplit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.dataset_;
  if (has_method_info()) {
    clear_method_info();
  }
}

void DatasetSplit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatasetSplit::clear_method_info() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.DatasetSplit)
  switch (method_info_case()) {
    case kPercentage: {
      // No need to clear
      break;
    }
    case METHOD_INFO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = METHOD_INFO_NOT_SET;
}


void DatasetSplit::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetSplit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.dataset_ != nullptr) {
    delete _impl_.dataset_;
  }
  _impl_.dataset_ = nullptr;
  clear_method_info();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetSplit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Dataset dataset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 percentage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_percentage(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetSplit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetSplit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Dataset dataset = 1;
  if (this->_internal_has_dataset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::dataset(this),
        _Internal::dataset(this).GetCachedSize(), target, stream);
  }

  // uint32 percentage = 2;
  if (_internal_has_percentage()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetSplit)
  return target;
}

size_t DatasetSplit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetSplit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Dataset dataset = 1;
  if (this->_internal_has_dataset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dataset_);
  }

  switch (method_info_case()) {
    // uint32 percentage = 2;
    case kPercentage: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_percentage());
      break;
    }
    case METHOD_INFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetSplit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatasetSplit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetSplit::GetClassData() const { return &_class_data_; }


void DatasetSplit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatasetSplit*>(&to_msg);
  auto& from = static_cast<const DatasetSplit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetSplit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dataset()) {
    _this->_internal_mutable_dataset()->::clarifai::api::Dataset::MergeFrom(
        from._internal_dataset());
  }
  switch (from.method_info_case()) {
    case kPercentage: {
      _this->_internal_set_percentage(from._internal_percentage());
      break;
    }
    case METHOD_INFO_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetSplit::CopyFrom(const DatasetSplit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetSplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetSplit::IsInitialized() const {
  return true;
}

void DatasetSplit::InternalSwap(DatasetSplit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.dataset_, other->_impl_.dataset_);
  swap(_impl_.method_info_, other->_impl_.method_info_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetSplit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[178]);
}

// ===================================================================

class InputsAddJob::_Internal {
 public:
  static const ::clarifai::api::InputsAddJobProgress& progress(const InputsAddJob* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const InputsAddJob* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const InputsAddJob* msg);
  static const ::clarifai::api::status::Status& status(const InputsAddJob* msg);
};

const ::clarifai::api::InputsAddJobProgress&
InputsAddJob::_Internal::progress(const InputsAddJob* msg) {
  return *msg->_impl_.progress_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InputsAddJob::_Internal::created_at(const InputsAddJob* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InputsAddJob::_Internal::modified_at(const InputsAddJob* msg) {
  return *msg->_impl_.modified_at_;
}
const ::clarifai::api::status::Status&
InputsAddJob::_Internal::status(const InputsAddJob* msg) {
  return *msg->_impl_.status_;
}
void InputsAddJob::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void InputsAddJob::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void InputsAddJob::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
InputsAddJob::InputsAddJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.InputsAddJob)
}
InputsAddJob::InputsAddJob(const InputsAddJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputsAddJob* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extraction_jobs_){from._impl_.extraction_jobs_}
    , decltype(_impl_.uploads_){from._impl_.uploads_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.call_back_url_){}
    , decltype(_impl_.app_pat_){}
    , decltype(_impl_.progress_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.call_back_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.call_back_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_call_back_url().empty()) {
    _this->_impl_.call_back_url_.Set(from._internal_call_back_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_pat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_pat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_pat().empty()) {
    _this->_impl_.app_pat_.Set(from._internal_app_pat(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_progress()) {
    _this->_impl_.progress_ = new ::clarifai::api::InputsAddJobProgress(*from._impl_.progress_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.InputsAddJob)
}

inline void InputsAddJob::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extraction_jobs_){arena}
    , decltype(_impl_.uploads_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.call_back_url_){}
    , decltype(_impl_.app_pat_){}
    , decltype(_impl_.progress_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.call_back_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.call_back_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_pat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_pat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InputsAddJob::~InputsAddJob() {
  // @@protoc_insertion_point(destructor:clarifai.api.InputsAddJob)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputsAddJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extraction_jobs_.~RepeatedPtrField();
  _impl_.uploads_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.call_back_url_.Destroy();
  _impl_.app_pat_.Destroy();
  if (this != internal_default_instance()) delete _impl_.progress_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void InputsAddJob::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputsAddJob::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.InputsAddJob)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extraction_jobs_.Clear();
  _impl_.uploads_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.call_back_url_.ClearToEmpty();
  _impl_.app_pat_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.progress_ != nullptr) {
    delete _impl_.progress_;
  }
  _impl_.progress_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputsAddJob::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.InputsAddJob.id"));
        } else
          goto handle_unusual;
        continue;
      // string call_back_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_call_back_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.InputsAddJob.call_back_url"));
        } else
          goto handle_unusual;
        continue;
      // string app_pat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_pat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.InputsAddJob.app_pat"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.InputsAddJobProgress progress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.InputsExtractionJob extraction_jobs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extraction_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Upload uploads = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uploads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputsAddJob::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.InputsAddJob)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.InputsAddJob.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string call_back_url = 3;
  if (!this->_internal_call_back_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_call_back_url().data(), static_cast<int>(this->_internal_call_back_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.InputsAddJob.call_back_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_call_back_url(), target);
  }

  // string app_pat = 4;
  if (!this->_internal_app_pat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_pat().data(), static_cast<int>(this->_internal_app_pat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.InputsAddJob.app_pat");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_pat(), target);
  }

  // .clarifai.api.InputsAddJobProgress progress = 7;
  if (this->_internal_has_progress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::progress(this),
        _Internal::progress(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 9;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.InputsExtractionJob extraction_jobs = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extraction_jobs_size()); i < n; i++) {
    const auto& repfield = this->_internal_extraction_jobs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Upload uploads = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uploads_size()); i < n; i++) {
    const auto& repfield = this->_internal_uploads(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.status.Status status = 12;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.InputsAddJob)
  return target;
}

size_t InputsAddJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.InputsAddJob)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.InputsExtractionJob extraction_jobs = 10;
  total_size += 1UL * this->_internal_extraction_jobs_size();
  for (const auto& msg : this->_impl_.extraction_jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Upload uploads = 11;
  total_size += 1UL * this->_internal_uploads_size();
  for (const auto& msg : this->_impl_.uploads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string call_back_url = 3;
  if (!this->_internal_call_back_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_call_back_url());
  }

  // string app_pat = 4;
  if (!this->_internal_app_pat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_pat());
  }

  // .clarifai.api.InputsAddJobProgress progress = 7;
  if (this->_internal_has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.progress_);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 9;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .clarifai.api.status.Status status = 12;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputsAddJob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputsAddJob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputsAddJob::GetClassData() const { return &_class_data_; }


void InputsAddJob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputsAddJob*>(&to_msg);
  auto& from = static_cast<const InputsAddJob&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.InputsAddJob)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extraction_jobs_.MergeFrom(from._impl_.extraction_jobs_);
  _this->_impl_.uploads_.MergeFrom(from._impl_.uploads_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_call_back_url().empty()) {
    _this->_internal_set_call_back_url(from._internal_call_back_url());
  }
  if (!from._internal_app_pat().empty()) {
    _this->_internal_set_app_pat(from._internal_app_pat());
  }
  if (from._internal_has_progress()) {
    _this->_internal_mutable_progress()->::clarifai::api::InputsAddJobProgress::MergeFrom(
        from._internal_progress());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputsAddJob::CopyFrom(const InputsAddJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.InputsAddJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputsAddJob::IsInitialized() const {
  return true;
}

void InputsAddJob::InternalSwap(InputsAddJob* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.extraction_jobs_.InternalSwap(&other->_impl_.extraction_jobs_);
  _impl_.uploads_.InternalSwap(&other->_impl_.uploads_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.call_back_url_, lhs_arena,
      &other->_impl_.call_back_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_pat_, lhs_arena,
      &other->_impl_.app_pat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputsAddJob, _impl_.status_)
      + sizeof(InputsAddJob::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(InputsAddJob, _impl_.progress_)>(
          reinterpret_cast<char*>(&_impl_.progress_),
          reinterpret_cast<char*>(&other->_impl_.progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputsAddJob::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[179]);
}

// ===================================================================

class InputsAddJobProgress::_Internal {
 public:
};

InputsAddJobProgress::InputsAddJobProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.InputsAddJobProgress)
}
InputsAddJobProgress::InputsAddJobProgress(const InputsAddJobProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputsAddJobProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pending_count_){}
    , decltype(_impl_.in_progress_count_){}
    , decltype(_impl_.success_count_){}
    , decltype(_impl_.failed_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pending_count_, &from._impl_.pending_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.failed_count_) -
    reinterpret_cast<char*>(&_impl_.pending_count_)) + sizeof(_impl_.failed_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.InputsAddJobProgress)
}

inline void InputsAddJobProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pending_count_){uint64_t{0u}}
    , decltype(_impl_.in_progress_count_){uint64_t{0u}}
    , decltype(_impl_.success_count_){uint64_t{0u}}
    , decltype(_impl_.failed_count_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InputsAddJobProgress::~InputsAddJobProgress() {
  // @@protoc_insertion_point(destructor:clarifai.api.InputsAddJobProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputsAddJobProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InputsAddJobProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputsAddJobProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.InputsAddJobProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pending_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.failed_count_) -
      reinterpret_cast<char*>(&_impl_.pending_count_)) + sizeof(_impl_.failed_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputsAddJobProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pending_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pending_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_progress_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.in_progress_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 success_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.success_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 failed_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.failed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputsAddJobProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.InputsAddJobProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pending_count = 1;
  if (this->_internal_pending_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pending_count(), target);
  }

  // uint64 in_progress_count = 2;
  if (this->_internal_in_progress_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_in_progress_count(), target);
  }

  // uint64 success_count = 3;
  if (this->_internal_success_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_success_count(), target);
  }

  // uint64 failed_count = 4;
  if (this->_internal_failed_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_failed_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.InputsAddJobProgress)
  return target;
}

size_t InputsAddJobProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.InputsAddJobProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pending_count = 1;
  if (this->_internal_pending_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_count());
  }

  // uint64 in_progress_count = 2;
  if (this->_internal_in_progress_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_in_progress_count());
  }

  // uint64 success_count = 3;
  if (this->_internal_success_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_success_count());
  }

  // uint64 failed_count = 4;
  if (this->_internal_failed_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_failed_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputsAddJobProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputsAddJobProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputsAddJobProgress::GetClassData() const { return &_class_data_; }


void InputsAddJobProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputsAddJobProgress*>(&to_msg);
  auto& from = static_cast<const InputsAddJobProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.InputsAddJobProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pending_count() != 0) {
    _this->_internal_set_pending_count(from._internal_pending_count());
  }
  if (from._internal_in_progress_count() != 0) {
    _this->_internal_set_in_progress_count(from._internal_in_progress_count());
  }
  if (from._internal_success_count() != 0) {
    _this->_internal_set_success_count(from._internal_success_count());
  }
  if (from._internal_failed_count() != 0) {
    _this->_internal_set_failed_count(from._internal_failed_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputsAddJobProgress::CopyFrom(const InputsAddJobProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.InputsAddJobProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputsAddJobProgress::IsInitialized() const {
  return true;
}

void InputsAddJobProgress::InternalSwap(InputsAddJobProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputsAddJobProgress, _impl_.failed_count_)
      + sizeof(InputsAddJobProgress::_impl_.failed_count_)
      - PROTOBUF_FIELD_OFFSET(InputsAddJobProgress, _impl_.pending_count_)>(
          reinterpret_cast<char*>(&_impl_.pending_count_),
          reinterpret_cast<char*>(&other->_impl_.pending_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputsAddJobProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[180]);
}

// ===================================================================

class Upload::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Upload* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Upload* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expires_at(const Upload* msg);
  static const ::clarifai::api::status::Status& status(const Upload* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Upload::_Internal::created_at(const Upload* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Upload::_Internal::modified_at(const Upload* msg) {
  return *msg->_impl_.modified_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Upload::_Internal::expires_at(const Upload* msg) {
  return *msg->_impl_.expires_at_;
}
const ::clarifai::api::status::Status&
Upload::_Internal::status(const Upload* msg) {
  return *msg->_impl_.status_;
}
void Upload::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Upload::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void Upload::clear_expires_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.expires_at_ != nullptr) {
    delete _impl_.expires_at_;
  }
  _impl_.expires_at_ = nullptr;
}
void Upload::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
Upload::Upload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Upload)
}
Upload::Upload(const Upload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Upload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.content_url_){}
    , decltype(_impl_.content_name_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.expires_at_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.content_length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_url().empty()) {
    _this->_impl_.content_url_.Set(from._internal_content_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_name().empty()) {
    _this->_impl_.content_name_.Set(from._internal_content_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_expires_at()) {
    _this->_impl_.expires_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expires_at_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  _this->_impl_.content_length_ = from._impl_.content_length_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Upload)
}

inline void Upload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.content_url_){}
    , decltype(_impl_.content_name_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.expires_at_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.content_length_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Upload::~Upload() {
  // @@protoc_insertion_point(destructor:clarifai.api.Upload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Upload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.content_url_.Destroy();
  _impl_.content_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.expires_at_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void Upload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Upload::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Upload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.content_url_.ClearToEmpty();
  _impl_.content_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expires_at_ != nullptr) {
    delete _impl_.expires_at_;
  }
  _impl_.expires_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.content_length_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Upload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Upload.id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expires_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 content_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.content_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_content_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Upload.content_url"));
        } else
          goto handle_unusual;
        continue;
      // string content_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_content_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Upload.content_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Upload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Upload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Upload.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp expires_at = 4;
  if (this->_internal_has_expires_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::expires_at(this),
        _Internal::expires_at(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.status.Status status = 5;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // uint64 content_length = 6;
  if (this->_internal_content_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_content_length(), target);
  }

  // string content_url = 7;
  if (!this->_internal_content_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_url().data(), static_cast<int>(this->_internal_content_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Upload.content_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_content_url(), target);
  }

  // string content_name = 8;
  if (!this->_internal_content_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_name().data(), static_cast<int>(this->_internal_content_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Upload.content_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_content_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Upload)
  return target;
}

size_t Upload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Upload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string content_url = 7;
  if (!this->_internal_content_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_url());
  }

  // string content_name = 8;
  if (!this->_internal_content_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_name());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .google.protobuf.Timestamp expires_at = 4;
  if (this->_internal_has_expires_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expires_at_);
  }

  // .clarifai.api.status.Status status = 5;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // uint64 content_length = 6;
  if (this->_internal_content_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_content_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Upload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Upload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Upload::GetClassData() const { return &_class_data_; }


void Upload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Upload*>(&to_msg);
  auto& from = static_cast<const Upload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Upload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_content_url().empty()) {
    _this->_internal_set_content_url(from._internal_content_url());
  }
  if (!from._internal_content_name().empty()) {
    _this->_internal_set_content_name(from._internal_content_name());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_expires_at()) {
    _this->_internal_mutable_expires_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expires_at());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_content_length() != 0) {
    _this->_internal_set_content_length(from._internal_content_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Upload::CopyFrom(const Upload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Upload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Upload::IsInitialized() const {
  return true;
}

void Upload::InternalSwap(Upload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_url_, lhs_arena,
      &other->_impl_.content_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_name_, lhs_arena,
      &other->_impl_.content_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Upload, _impl_.content_length_)
      + sizeof(Upload::_impl_.content_length_)
      - PROTOBUF_FIELD_OFFSET(Upload, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Upload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[181]);
}

// ===================================================================

class UploadContentPart::_Internal {
 public:
};

UploadContentPart::UploadContentPart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.UploadContentPart)
}
UploadContentPart::UploadContentPart(const UploadContentPart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadContentPart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.range_start_){}
    , decltype(_impl_.part_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.range_start_, &from._impl_.range_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.part_number_) -
    reinterpret_cast<char*>(&_impl_.range_start_)) + sizeof(_impl_.part_number_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.UploadContentPart)
}

inline void UploadContentPart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.range_start_){uint64_t{0u}}
    , decltype(_impl_.part_number_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UploadContentPart::~UploadContentPart() {
  // @@protoc_insertion_point(destructor:clarifai.api.UploadContentPart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadContentPart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void UploadContentPart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadContentPart::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.UploadContentPart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.range_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.part_number_) -
      reinterpret_cast<char*>(&_impl_.range_start_)) + sizeof(_impl_.part_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadContentPart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 range_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.range_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 part_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.part_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadContentPart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.UploadContentPart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_start = 1;
  if (this->_internal_range_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_range_start(), target);
  }

  // int64 part_number = 2;
  if (this->_internal_part_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_part_number(), target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.UploadContentPart)
  return target;
}

size_t UploadContentPart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.UploadContentPart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 range_start = 1;
  if (this->_internal_range_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_range_start());
  }

  // int64 part_number = 2;
  if (this->_internal_part_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_part_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadContentPart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadContentPart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadContentPart::GetClassData() const { return &_class_data_; }


void UploadContentPart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadContentPart*>(&to_msg);
  auto& from = static_cast<const UploadContentPart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.UploadContentPart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_range_start() != 0) {
    _this->_internal_set_range_start(from._internal_range_start());
  }
  if (from._internal_part_number() != 0) {
    _this->_internal_set_part_number(from._internal_part_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadContentPart::CopyFrom(const UploadContentPart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.UploadContentPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadContentPart::IsInitialized() const {
  return true;
}

void UploadContentPart::InternalSwap(UploadContentPart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadContentPart, _impl_.part_number_)
      + sizeof(UploadContentPart::_impl_.part_number_)
      - PROTOBUF_FIELD_OFFSET(UploadContentPart, _impl_.range_start_)>(
          reinterpret_cast<char*>(&_impl_.range_start_),
          reinterpret_cast<char*>(&other->_impl_.range_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadContentPart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[182]);
}

// ===================================================================

class CustomCodeOperatorRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const CustomCodeOperatorRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
CustomCodeOperatorRequest::_Internal::metadata(const CustomCodeOperatorRequest* msg) {
  return *msg->_impl_.metadata_;
}
void CustomCodeOperatorRequest::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
CustomCodeOperatorRequest::CustomCodeOperatorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.CustomCodeOperatorRequest)
}
CustomCodeOperatorRequest::CustomCodeOperatorRequest(const CustomCodeOperatorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomCodeOperatorRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){from._impl_.inputs_}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.CustomCodeOperatorRequest)
}

inline void CustomCodeOperatorRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){arena}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CustomCodeOperatorRequest::~CustomCodeOperatorRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.CustomCodeOperatorRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomCodeOperatorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void CustomCodeOperatorRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomCodeOperatorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.CustomCodeOperatorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomCodeOperatorRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.Input inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomCodeOperatorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.CustomCodeOperatorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_inputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct metadata = 1002;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1002, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.CustomCodeOperatorRequest)
  return target;
}

size_t CustomCodeOperatorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.CustomCodeOperatorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 1;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->_impl_.inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Struct metadata = 1002;
  if (this->_internal_has_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomCodeOperatorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomCodeOperatorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomCodeOperatorRequest::GetClassData() const { return &_class_data_; }


void CustomCodeOperatorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomCodeOperatorRequest*>(&to_msg);
  auto& from = static_cast<const CustomCodeOperatorRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.CustomCodeOperatorRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inputs_.MergeFrom(from._impl_.inputs_);
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomCodeOperatorRequest::CopyFrom(const CustomCodeOperatorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.CustomCodeOperatorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomCodeOperatorRequest::IsInitialized() const {
  return true;
}

void CustomCodeOperatorRequest::InternalSwap(CustomCodeOperatorRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inputs_.InternalSwap(&other->_impl_.inputs_);
  swap(_impl_.metadata_, other->_impl_.metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomCodeOperatorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[183]);
}

// ===================================================================

class InputsExtractionJob::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const InputsExtractionJob* msg);
  static const ::clarifai::api::InputsExtractionJobProgress& progress(const InputsExtractionJob* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const InputsExtractionJob* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const InputsExtractionJob* msg);
};

const ::clarifai::api::status::Status&
InputsExtractionJob::_Internal::status(const InputsExtractionJob* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::InputsExtractionJobProgress&
InputsExtractionJob::_Internal::progress(const InputsExtractionJob* msg) {
  return *msg->_impl_.progress_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InputsExtractionJob::_Internal::created_at(const InputsExtractionJob* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InputsExtractionJob::_Internal::modified_at(const InputsExtractionJob* msg) {
  return *msg->_impl_.modified_at_;
}
void InputsExtractionJob::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void InputsExtractionJob::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void InputsExtractionJob::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
InputsExtractionJob::InputsExtractionJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.InputsExtractionJob)
}
InputsExtractionJob::InputsExtractionJob(const InputsExtractionJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputsExtractionJob* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.progress_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.input_id_conflict_resolution_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_progress()) {
    _this->_impl_.progress_ = new ::clarifai::api::InputsExtractionJobProgress(*from._impl_.progress_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  _this->_impl_.input_id_conflict_resolution_ = from._impl_.input_id_conflict_resolution_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.InputsExtractionJob)
}

inline void InputsExtractionJob::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.progress_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.input_id_conflict_resolution_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InputsExtractionJob::~InputsExtractionJob() {
  // @@protoc_insertion_point(destructor:clarifai.api.InputsExtractionJob)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputsExtractionJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.progress_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
}

void InputsExtractionJob::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputsExtractionJob::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.InputsExtractionJob)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.progress_ != nullptr) {
    delete _impl_.progress_;
  }
  _impl_.progress_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  _impl_.input_id_conflict_resolution_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputsExtractionJob::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.InputsExtractionJob.id"));
        } else
          goto handle_unusual;
        continue;
      // string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.InputsExtractionJob.url"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.InputsExtractionJobProgress progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.InputIDConflictResolution input_id_conflict_resolution = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_input_id_conflict_resolution(static_cast<::clarifai::api::InputIDConflictResolution>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputsExtractionJob::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.InputsExtractionJob)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.InputsExtractionJob.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.InputsExtractionJob.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // .clarifai.api.InputsExtractionJobProgress progress = 4;
  if (this->_internal_has_progress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::progress(this),
        _Internal::progress(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 6;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.InputIDConflictResolution input_id_conflict_resolution = 7;
  if (this->_internal_input_id_conflict_resolution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_input_id_conflict_resolution(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.InputsExtractionJob)
  return target;
}

size_t InputsExtractionJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.InputsExtractionJob)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.InputsExtractionJobProgress progress = 4;
  if (this->_internal_has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.progress_);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 6;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .clarifai.api.InputIDConflictResolution input_id_conflict_resolution = 7;
  if (this->_internal_input_id_conflict_resolution() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_input_id_conflict_resolution());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputsExtractionJob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputsExtractionJob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputsExtractionJob::GetClassData() const { return &_class_data_; }


void InputsExtractionJob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputsExtractionJob*>(&to_msg);
  auto& from = static_cast<const InputsExtractionJob&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.InputsExtractionJob)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_progress()) {
    _this->_internal_mutable_progress()->::clarifai::api::InputsExtractionJobProgress::MergeFrom(
        from._internal_progress());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_input_id_conflict_resolution() != 0) {
    _this->_internal_set_input_id_conflict_resolution(from._internal_input_id_conflict_resolution());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputsExtractionJob::CopyFrom(const InputsExtractionJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.InputsExtractionJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputsExtractionJob::IsInitialized() const {
  return true;
}

void InputsExtractionJob::InternalSwap(InputsExtractionJob* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputsExtractionJob, _impl_.input_id_conflict_resolution_)
      + sizeof(InputsExtractionJob::_impl_.input_id_conflict_resolution_)
      - PROTOBUF_FIELD_OFFSET(InputsExtractionJob, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputsExtractionJob::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[184]);
}

// ===================================================================

class InputsExtractionJobProgress::_Internal {
 public:
};

InputsExtractionJobProgress::InputsExtractionJobProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.InputsExtractionJobProgress)
}
InputsExtractionJobProgress::InputsExtractionJobProgress(const InputsExtractionJobProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputsExtractionJobProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.audio_inputs_count_){}
    , decltype(_impl_.image_inputs_count_){}
    , decltype(_impl_.video_inputs_count_){}
    , decltype(_impl_.text_inputs_count_){}
    , decltype(_impl_.pending_archives_count_){}
    , decltype(_impl_.in_progress_archives_count_){}
    , decltype(_impl_.completed_archives_count_){}
    , decltype(_impl_.failed_archives_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.audio_inputs_count_, &from._impl_.audio_inputs_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.failed_archives_count_) -
    reinterpret_cast<char*>(&_impl_.audio_inputs_count_)) + sizeof(_impl_.failed_archives_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.InputsExtractionJobProgress)
}

inline void InputsExtractionJobProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.audio_inputs_count_){uint64_t{0u}}
    , decltype(_impl_.image_inputs_count_){uint64_t{0u}}
    , decltype(_impl_.video_inputs_count_){uint64_t{0u}}
    , decltype(_impl_.text_inputs_count_){uint64_t{0u}}
    , decltype(_impl_.pending_archives_count_){uint64_t{0u}}
    , decltype(_impl_.in_progress_archives_count_){uint64_t{0u}}
    , decltype(_impl_.completed_archives_count_){uint64_t{0u}}
    , decltype(_impl_.failed_archives_count_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InputsExtractionJobProgress::~InputsExtractionJobProgress() {
  // @@protoc_insertion_point(destructor:clarifai.api.InputsExtractionJobProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputsExtractionJobProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InputsExtractionJobProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputsExtractionJobProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.InputsExtractionJobProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.audio_inputs_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.failed_archives_count_) -
      reinterpret_cast<char*>(&_impl_.audio_inputs_count_)) + sizeof(_impl_.failed_archives_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputsExtractionJobProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 audio_inputs_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.audio_inputs_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 image_inputs_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.image_inputs_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 video_inputs_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.video_inputs_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 text_inputs_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.text_inputs_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pending_archives_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.pending_archives_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_progress_archives_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.in_progress_archives_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 completed_archives_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.completed_archives_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 failed_archives_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.failed_archives_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputsExtractionJobProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.InputsExtractionJobProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 audio_inputs_count = 2;
  if (this->_internal_audio_inputs_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_audio_inputs_count(), target);
  }

  // uint64 image_inputs_count = 3;
  if (this->_internal_image_inputs_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_image_inputs_count(), target);
  }

  // uint64 video_inputs_count = 4;
  if (this->_internal_video_inputs_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_video_inputs_count(), target);
  }

  // uint64 text_inputs_count = 5;
  if (this->_internal_text_inputs_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_text_inputs_count(), target);
  }

  // uint64 pending_archives_count = 6;
  if (this->_internal_pending_archives_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_pending_archives_count(), target);
  }

  // uint64 in_progress_archives_count = 7;
  if (this->_internal_in_progress_archives_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_in_progress_archives_count(), target);
  }

  // uint64 completed_archives_count = 8;
  if (this->_internal_completed_archives_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_completed_archives_count(), target);
  }

  // uint64 failed_archives_count = 9;
  if (this->_internal_failed_archives_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_failed_archives_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.InputsExtractionJobProgress)
  return target;
}

size_t InputsExtractionJobProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.InputsExtractionJobProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 audio_inputs_count = 2;
  if (this->_internal_audio_inputs_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_audio_inputs_count());
  }

  // uint64 image_inputs_count = 3;
  if (this->_internal_image_inputs_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_image_inputs_count());
  }

  // uint64 video_inputs_count = 4;
  if (this->_internal_video_inputs_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_video_inputs_count());
  }

  // uint64 text_inputs_count = 5;
  if (this->_internal_text_inputs_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_text_inputs_count());
  }

  // uint64 pending_archives_count = 6;
  if (this->_internal_pending_archives_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_archives_count());
  }

  // uint64 in_progress_archives_count = 7;
  if (this->_internal_in_progress_archives_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_in_progress_archives_count());
  }

  // uint64 completed_archives_count = 8;
  if (this->_internal_completed_archives_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_completed_archives_count());
  }

  // uint64 failed_archives_count = 9;
  if (this->_internal_failed_archives_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_failed_archives_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputsExtractionJobProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputsExtractionJobProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputsExtractionJobProgress::GetClassData() const { return &_class_data_; }


void InputsExtractionJobProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputsExtractionJobProgress*>(&to_msg);
  auto& from = static_cast<const InputsExtractionJobProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.InputsExtractionJobProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_audio_inputs_count() != 0) {
    _this->_internal_set_audio_inputs_count(from._internal_audio_inputs_count());
  }
  if (from._internal_image_inputs_count() != 0) {
    _this->_internal_set_image_inputs_count(from._internal_image_inputs_count());
  }
  if (from._internal_video_inputs_count() != 0) {
    _this->_internal_set_video_inputs_count(from._internal_video_inputs_count());
  }
  if (from._internal_text_inputs_count() != 0) {
    _this->_internal_set_text_inputs_count(from._internal_text_inputs_count());
  }
  if (from._internal_pending_archives_count() != 0) {
    _this->_internal_set_pending_archives_count(from._internal_pending_archives_count());
  }
  if (from._internal_in_progress_archives_count() != 0) {
    _this->_internal_set_in_progress_archives_count(from._internal_in_progress_archives_count());
  }
  if (from._internal_completed_archives_count() != 0) {
    _this->_internal_set_completed_archives_count(from._internal_completed_archives_count());
  }
  if (from._internal_failed_archives_count() != 0) {
    _this->_internal_set_failed_archives_count(from._internal_failed_archives_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputsExtractionJobProgress::CopyFrom(const InputsExtractionJobProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.InputsExtractionJobProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputsExtractionJobProgress::IsInitialized() const {
  return true;
}

void InputsExtractionJobProgress::InternalSwap(InputsExtractionJobProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputsExtractionJobProgress, _impl_.failed_archives_count_)
      + sizeof(InputsExtractionJobProgress::_impl_.failed_archives_count_)
      - PROTOBUF_FIELD_OFFSET(InputsExtractionJobProgress, _impl_.audio_inputs_count_)>(
          reinterpret_cast<char*>(&_impl_.audio_inputs_count_),
          reinterpret_cast<char*>(&other->_impl_.audio_inputs_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputsExtractionJobProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[185]);
}

// ===================================================================

class InputsDataSource::_Internal {
 public:
  static const ::clarifai::api::DataSourceURL& url(const InputsDataSource* msg);
};

const ::clarifai::api::DataSourceURL&
InputsDataSource::_Internal::url(const InputsDataSource* msg) {
  return *msg->_impl_.url_;
}
InputsDataSource::InputsDataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.InputsDataSource)
}
InputsDataSource::InputsDataSource(const InputsDataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputsDataSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_add_job_id_){}
    , decltype(_impl_.url_){nullptr}
    , decltype(_impl_.input_id_conflict_resolution_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.inputs_add_job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inputs_add_job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inputs_add_job_id().empty()) {
    _this->_impl_.inputs_add_job_id_.Set(from._internal_inputs_add_job_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_url()) {
    _this->_impl_.url_ = new ::clarifai::api::DataSourceURL(*from._impl_.url_);
  }
  _this->_impl_.input_id_conflict_resolution_ = from._impl_.input_id_conflict_resolution_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.InputsDataSource)
}

inline void InputsDataSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_add_job_id_){}
    , decltype(_impl_.url_){nullptr}
    , decltype(_impl_.input_id_conflict_resolution_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.inputs_add_job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inputs_add_job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InputsDataSource::~InputsDataSource() {
  // @@protoc_insertion_point(destructor:clarifai.api.InputsDataSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputsDataSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_add_job_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.url_;
}

void InputsDataSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputsDataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.InputsDataSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_add_job_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.url_ != nullptr) {
    delete _impl_.url_;
  }
  _impl_.url_ = nullptr;
  _impl_.input_id_conflict_resolution_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputsDataSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string inputs_add_job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_inputs_add_job_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.InputsDataSource.inputs_add_job_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DataSourceURL url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_url(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.InputIDConflictResolution input_id_conflict_resolution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_input_id_conflict_resolution(static_cast<::clarifai::api::InputIDConflictResolution>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputsDataSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.InputsDataSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string inputs_add_job_id = 1;
  if (!this->_internal_inputs_add_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inputs_add_job_id().data(), static_cast<int>(this->_internal_inputs_add_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.InputsDataSource.inputs_add_job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_inputs_add_job_id(), target);
  }

  // .clarifai.api.DataSourceURL url = 2;
  if (this->_internal_has_url()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::url(this),
        _Internal::url(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.InputIDConflictResolution input_id_conflict_resolution = 3;
  if (this->_internal_input_id_conflict_resolution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_input_id_conflict_resolution(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.InputsDataSource)
  return target;
}

size_t InputsDataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.InputsDataSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string inputs_add_job_id = 1;
  if (!this->_internal_inputs_add_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inputs_add_job_id());
  }

  // .clarifai.api.DataSourceURL url = 2;
  if (this->_internal_has_url()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.url_);
  }

  // .clarifai.api.InputIDConflictResolution input_id_conflict_resolution = 3;
  if (this->_internal_input_id_conflict_resolution() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_input_id_conflict_resolution());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputsDataSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputsDataSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputsDataSource::GetClassData() const { return &_class_data_; }


void InputsDataSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputsDataSource*>(&to_msg);
  auto& from = static_cast<const InputsDataSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.InputsDataSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_inputs_add_job_id().empty()) {
    _this->_internal_set_inputs_add_job_id(from._internal_inputs_add_job_id());
  }
  if (from._internal_has_url()) {
    _this->_internal_mutable_url()->::clarifai::api::DataSourceURL::MergeFrom(
        from._internal_url());
  }
  if (from._internal_input_id_conflict_resolution() != 0) {
    _this->_internal_set_input_id_conflict_resolution(from._internal_input_id_conflict_resolution());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputsDataSource::CopyFrom(const InputsDataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.InputsDataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputsDataSource::IsInitialized() const {
  return true;
}

void InputsDataSource::InternalSwap(InputsDataSource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inputs_add_job_id_, lhs_arena,
      &other->_impl_.inputs_add_job_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputsDataSource, _impl_.input_id_conflict_resolution_)
      + sizeof(InputsDataSource::_impl_.input_id_conflict_resolution_)
      - PROTOBUF_FIELD_OFFSET(InputsDataSource, _impl_.url_)>(
          reinterpret_cast<char*>(&_impl_.url_),
          reinterpret_cast<char*>(&other->_impl_.url_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputsDataSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[186]);
}

// ===================================================================

class DataSourceURL::_Internal {
 public:
  static const ::clarifai::api::DataSourceCredentials& credentials(const DataSourceURL* msg);
};

const ::clarifai::api::DataSourceCredentials&
DataSourceURL::_Internal::credentials(const DataSourceURL* msg) {
  return *msg->_impl_.credentials_;
}
DataSourceURL::DataSourceURL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DataSourceURL)
}
DataSourceURL::DataSourceURL(const DataSourceURL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataSourceURL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.credentials_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_credentials()) {
    _this->_impl_.credentials_ = new ::clarifai::api::DataSourceCredentials(*from._impl_.credentials_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DataSourceURL)
}

inline void DataSourceURL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.credentials_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataSourceURL::~DataSourceURL() {
  // @@protoc_insertion_point(destructor:clarifai.api.DataSourceURL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataSourceURL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.credentials_;
}

void DataSourceURL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataSourceURL::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DataSourceURL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.credentials_ != nullptr) {
    delete _impl_.credentials_;
  }
  _impl_.credentials_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataSourceURL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DataSourceURL.url"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DataSourceCredentials credentials = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_credentials(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataSourceURL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DataSourceURL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DataSourceURL.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // .clarifai.api.DataSourceCredentials credentials = 2;
  if (this->_internal_has_credentials()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::credentials(this),
        _Internal::credentials(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DataSourceURL)
  return target;
}

size_t DataSourceURL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DataSourceURL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .clarifai.api.DataSourceCredentials credentials = 2;
  if (this->_internal_has_credentials()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.credentials_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataSourceURL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataSourceURL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataSourceURL::GetClassData() const { return &_class_data_; }


void DataSourceURL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataSourceURL*>(&to_msg);
  auto& from = static_cast<const DataSourceURL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DataSourceURL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_has_credentials()) {
    _this->_internal_mutable_credentials()->::clarifai::api::DataSourceCredentials::MergeFrom(
        from._internal_credentials());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataSourceURL::CopyFrom(const DataSourceURL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DataSourceURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceURL::IsInitialized() const {
  return true;
}

void DataSourceURL::InternalSwap(DataSourceURL* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  swap(_impl_.credentials_, other->_impl_.credentials_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataSourceURL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[187]);
}

// ===================================================================

class DataSourceCredentials::_Internal {
 public:
  static const ::clarifai::api::AWSCreds& s3_creds(const DataSourceCredentials* msg);
  static const ::clarifai::api::AzureBlobCreds& azure_blob_creds(const DataSourceCredentials* msg);
};

const ::clarifai::api::AWSCreds&
DataSourceCredentials::_Internal::s3_creds(const DataSourceCredentials* msg) {
  return *msg->_impl_.credentials_.s3_creds_;
}
const ::clarifai::api::AzureBlobCreds&
DataSourceCredentials::_Internal::azure_blob_creds(const DataSourceCredentials* msg) {
  return *msg->_impl_.credentials_.azure_blob_creds_;
}
void DataSourceCredentials::set_allocated_s3_creds(::clarifai::api::AWSCreds* s3_creds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_credentials();
  if (s3_creds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(s3_creds);
    if (message_arena != submessage_arena) {
      s3_creds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s3_creds, submessage_arena);
    }
    set_has_s3_creds();
    _impl_.credentials_.s3_creds_ = s3_creds;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DataSourceCredentials.s3_creds)
}
void DataSourceCredentials::set_allocated_azure_blob_creds(::clarifai::api::AzureBlobCreds* azure_blob_creds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_credentials();
  if (azure_blob_creds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(azure_blob_creds);
    if (message_arena != submessage_arena) {
      azure_blob_creds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, azure_blob_creds, submessage_arena);
    }
    set_has_azure_blob_creds();
    _impl_.credentials_.azure_blob_creds_ = azure_blob_creds;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DataSourceCredentials.azure_blob_creds)
}
DataSourceCredentials::DataSourceCredentials(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DataSourceCredentials)
}
DataSourceCredentials::DataSourceCredentials(const DataSourceCredentials& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataSourceCredentials* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.credentials_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_credentials();
  switch (from.credentials_case()) {
    case kS3Creds: {
      _this->_internal_mutable_s3_creds()->::clarifai::api::AWSCreds::MergeFrom(
          from._internal_s3_creds());
      break;
    }
    case kGcpCreds: {
      _this->_internal_set_gcp_creds(from._internal_gcp_creds());
      break;
    }
    case kAzureBlobCreds: {
      _this->_internal_mutable_azure_blob_creds()->::clarifai::api::AzureBlobCreds::MergeFrom(
          from._internal_azure_blob_creds());
      break;
    }
    case CREDENTIALS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DataSourceCredentials)
}

inline void DataSourceCredentials::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.credentials_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_credentials();
}

DataSourceCredentials::~DataSourceCredentials() {
  // @@protoc_insertion_point(destructor:clarifai.api.DataSourceCredentials)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataSourceCredentials::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_credentials()) {
    clear_credentials();
  }
}

void DataSourceCredentials::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataSourceCredentials::clear_credentials() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.DataSourceCredentials)
  switch (credentials_case()) {
    case kS3Creds: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.credentials_.s3_creds_;
      }
      break;
    }
    case kGcpCreds: {
      _impl_.credentials_.gcp_creds_.Destroy();
      break;
    }
    case kAzureBlobCreds: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.credentials_.azure_blob_creds_;
      }
      break;
    }
    case CREDENTIALS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CREDENTIALS_NOT_SET;
}


void DataSourceCredentials::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DataSourceCredentials)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_credentials();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataSourceCredentials::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.AWSCreds s3_creds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_s3_creds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes gcp_creds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gcp_creds();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AzureBlobCreds azure_blob_creds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_azure_blob_creds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataSourceCredentials::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DataSourceCredentials)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.AWSCreds s3_creds = 1;
  if (_internal_has_s3_creds()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::s3_creds(this),
        _Internal::s3_creds(this).GetCachedSize(), target, stream);
  }

  // bytes gcp_creds = 2;
  if (_internal_has_gcp_creds()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_gcp_creds(), target);
  }

  // .clarifai.api.AzureBlobCreds azure_blob_creds = 4;
  if (_internal_has_azure_blob_creds()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::azure_blob_creds(this),
        _Internal::azure_blob_creds(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DataSourceCredentials)
  return target;
}

size_t DataSourceCredentials::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DataSourceCredentials)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (credentials_case()) {
    // .clarifai.api.AWSCreds s3_creds = 1;
    case kS3Creds: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.credentials_.s3_creds_);
      break;
    }
    // bytes gcp_creds = 2;
    case kGcpCreds: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gcp_creds());
      break;
    }
    // .clarifai.api.AzureBlobCreds azure_blob_creds = 4;
    case kAzureBlobCreds: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.credentials_.azure_blob_creds_);
      break;
    }
    case CREDENTIALS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataSourceCredentials::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataSourceCredentials::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataSourceCredentials::GetClassData() const { return &_class_data_; }


void DataSourceCredentials::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataSourceCredentials*>(&to_msg);
  auto& from = static_cast<const DataSourceCredentials&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DataSourceCredentials)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.credentials_case()) {
    case kS3Creds: {
      _this->_internal_mutable_s3_creds()->::clarifai::api::AWSCreds::MergeFrom(
          from._internal_s3_creds());
      break;
    }
    case kGcpCreds: {
      _this->_internal_set_gcp_creds(from._internal_gcp_creds());
      break;
    }
    case kAzureBlobCreds: {
      _this->_internal_mutable_azure_blob_creds()->::clarifai::api::AzureBlobCreds::MergeFrom(
          from._internal_azure_blob_creds());
      break;
    }
    case CREDENTIALS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataSourceCredentials::CopyFrom(const DataSourceCredentials& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DataSourceCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceCredentials::IsInitialized() const {
  return true;
}

void DataSourceCredentials::InternalSwap(DataSourceCredentials* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.credentials_, other->_impl_.credentials_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataSourceCredentials::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[188]);
}

// ===================================================================

class AWSCreds::_Internal {
 public:
};

AWSCreds::AWSCreds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AWSCreds)
}
AWSCreds::AWSCreds(const AWSCreds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AWSCreds* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.secret_){}
    , decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret().empty()) {
    _this->_impl_.secret_.Set(from._internal_secret(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AWSCreds)
}

inline void AWSCreds::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.secret_){}
    , decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AWSCreds::~AWSCreds() {
  // @@protoc_insertion_point(destructor:clarifai.api.AWSCreds)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AWSCreds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.region_.Destroy();
  _impl_.id_.Destroy();
  _impl_.secret_.Destroy();
  _impl_.token_.Destroy();
}

void AWSCreds::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AWSCreds::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AWSCreds)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.region_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.secret_.ClearToEmpty();
  _impl_.token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AWSCreds::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AWSCreds.region"));
        } else
          goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AWSCreds.id"));
        } else
          goto handle_unusual;
        continue;
      // string secret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AWSCreds.secret"));
        } else
          goto handle_unusual;
        continue;
      // string token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AWSCreds.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AWSCreds::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AWSCreds)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string region = 2;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AWSCreds.region");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_region(), target);
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AWSCreds.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // string secret = 4;
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AWSCreds.secret");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_secret(), target);
  }

  // string token = 5;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AWSCreds.token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AWSCreds)
  return target;
}

size_t AWSCreds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AWSCreds)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string region = 2;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string secret = 4;
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string token = 5;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AWSCreds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AWSCreds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AWSCreds::GetClassData() const { return &_class_data_; }


void AWSCreds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AWSCreds*>(&to_msg);
  auto& from = static_cast<const AWSCreds&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AWSCreds)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_secret().empty()) {
    _this->_internal_set_secret(from._internal_secret());
  }
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AWSCreds::CopyFrom(const AWSCreds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AWSCreds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AWSCreds::IsInitialized() const {
  return true;
}

void AWSCreds::InternalSwap(AWSCreds* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secret_, lhs_arena,
      &other->_impl_.secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AWSCreds::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[189]);
}

// ===================================================================

class AzureBlobCreds::_Internal {
 public:
};

AzureBlobCreds::AzureBlobCreds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AzureBlobCreds)
}
AzureBlobCreds::AzureBlobCreds(const AzureBlobCreds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AzureBlobCreds* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_name_){}
    , decltype(_impl_.account_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_name().empty()) {
    _this->_impl_.account_name_.Set(from._internal_account_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.account_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_key().empty()) {
    _this->_impl_.account_key_.Set(from._internal_account_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AzureBlobCreds)
}

inline void AzureBlobCreds::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_name_){}
    , decltype(_impl_.account_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AzureBlobCreds::~AzureBlobCreds() {
  // @@protoc_insertion_point(destructor:clarifai.api.AzureBlobCreds)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AzureBlobCreds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_name_.Destroy();
  _impl_.account_key_.Destroy();
}

void AzureBlobCreds::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AzureBlobCreds::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AzureBlobCreds)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_name_.ClearToEmpty();
  _impl_.account_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AzureBlobCreds::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AzureBlobCreds.account_name"));
        } else
          goto handle_unusual;
        continue;
      // string account_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.AzureBlobCreds.account_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AzureBlobCreds::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AzureBlobCreds)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_name = 1;
  if (!this->_internal_account_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AzureBlobCreds.account_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_name(), target);
  }

  // string account_key = 2;
  if (!this->_internal_account_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_key().data(), static_cast<int>(this->_internal_account_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AzureBlobCreds.account_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AzureBlobCreds)
  return target;
}

size_t AzureBlobCreds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AzureBlobCreds)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_name = 1;
  if (!this->_internal_account_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_name());
  }

  // string account_key = 2;
  if (!this->_internal_account_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AzureBlobCreds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AzureBlobCreds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AzureBlobCreds::GetClassData() const { return &_class_data_; }


void AzureBlobCreds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AzureBlobCreds*>(&to_msg);
  auto& from = static_cast<const AzureBlobCreds&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AzureBlobCreds)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_name().empty()) {
    _this->_internal_set_account_name(from._internal_account_name());
  }
  if (!from._internal_account_key().empty()) {
    _this->_internal_set_account_key(from._internal_account_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AzureBlobCreds::CopyFrom(const AzureBlobCreds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AzureBlobCreds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AzureBlobCreds::IsInitialized() const {
  return true;
}

void AzureBlobCreds::InternalSwap(AzureBlobCreds* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_name_, lhs_arena,
      &other->_impl_.account_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_key_, lhs_arena,
      &other->_impl_.account_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AzureBlobCreds::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[190]);
}

// ===================================================================

class InputsUpload::_Internal {
 public:
  static const ::clarifai::api::Upload& upload(const InputsUpload* msg);
};

const ::clarifai::api::Upload&
InputsUpload::_Internal::upload(const InputsUpload* msg) {
  return *msg->_impl_.upload_;
}
InputsUpload::InputsUpload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.InputsUpload)
}
InputsUpload::InputsUpload(const InputsUpload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputsUpload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_add_job_id_){}
    , decltype(_impl_.app_pat_){}
    , decltype(_impl_.upload_){nullptr}
    , decltype(_impl_.input_id_conflict_resolution_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.inputs_add_job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inputs_add_job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inputs_add_job_id().empty()) {
    _this->_impl_.inputs_add_job_id_.Set(from._internal_inputs_add_job_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_pat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_pat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_pat().empty()) {
    _this->_impl_.app_pat_.Set(from._internal_app_pat(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_upload()) {
    _this->_impl_.upload_ = new ::clarifai::api::Upload(*from._impl_.upload_);
  }
  _this->_impl_.input_id_conflict_resolution_ = from._impl_.input_id_conflict_resolution_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.InputsUpload)
}

inline void InputsUpload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_add_job_id_){}
    , decltype(_impl_.app_pat_){}
    , decltype(_impl_.upload_){nullptr}
    , decltype(_impl_.input_id_conflict_resolution_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.inputs_add_job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inputs_add_job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_pat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_pat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InputsUpload::~InputsUpload() {
  // @@protoc_insertion_point(destructor:clarifai.api.InputsUpload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputsUpload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_add_job_id_.Destroy();
  _impl_.app_pat_.Destroy();
  if (this != internal_default_instance()) delete _impl_.upload_;
}

void InputsUpload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputsUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.InputsUpload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_add_job_id_.ClearToEmpty();
  _impl_.app_pat_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.upload_ != nullptr) {
    delete _impl_.upload_;
  }
  _impl_.upload_ = nullptr;
  _impl_.input_id_conflict_resolution_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputsUpload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string inputs_add_job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_inputs_add_job_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.InputsUpload.inputs_add_job_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_pat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_pat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.InputsUpload.app_pat"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Upload upload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_upload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.InputIDConflictResolution input_id_conflict_resolution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_input_id_conflict_resolution(static_cast<::clarifai::api::InputIDConflictResolution>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputsUpload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.InputsUpload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string inputs_add_job_id = 1;
  if (!this->_internal_inputs_add_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inputs_add_job_id().data(), static_cast<int>(this->_internal_inputs_add_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.InputsUpload.inputs_add_job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_inputs_add_job_id(), target);
  }

  // string app_pat = 2;
  if (!this->_internal_app_pat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_pat().data(), static_cast<int>(this->_internal_app_pat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.InputsUpload.app_pat");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_pat(), target);
  }

  // .clarifai.api.Upload upload = 3;
  if (this->_internal_has_upload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::upload(this),
        _Internal::upload(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.InputIDConflictResolution input_id_conflict_resolution = 4;
  if (this->_internal_input_id_conflict_resolution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_input_id_conflict_resolution(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.InputsUpload)
  return target;
}

size_t InputsUpload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.InputsUpload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string inputs_add_job_id = 1;
  if (!this->_internal_inputs_add_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inputs_add_job_id());
  }

  // string app_pat = 2;
  if (!this->_internal_app_pat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_pat());
  }

  // .clarifai.api.Upload upload = 3;
  if (this->_internal_has_upload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upload_);
  }

  // .clarifai.api.InputIDConflictResolution input_id_conflict_resolution = 4;
  if (this->_internal_input_id_conflict_resolution() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_input_id_conflict_resolution());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputsUpload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputsUpload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputsUpload::GetClassData() const { return &_class_data_; }


void InputsUpload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputsUpload*>(&to_msg);
  auto& from = static_cast<const InputsUpload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.InputsUpload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_inputs_add_job_id().empty()) {
    _this->_internal_set_inputs_add_job_id(from._internal_inputs_add_job_id());
  }
  if (!from._internal_app_pat().empty()) {
    _this->_internal_set_app_pat(from._internal_app_pat());
  }
  if (from._internal_has_upload()) {
    _this->_internal_mutable_upload()->::clarifai::api::Upload::MergeFrom(
        from._internal_upload());
  }
  if (from._internal_input_id_conflict_resolution() != 0) {
    _this->_internal_set_input_id_conflict_resolution(from._internal_input_id_conflict_resolution());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputsUpload::CopyFrom(const InputsUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.InputsUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputsUpload::IsInitialized() const {
  return true;
}

void InputsUpload::InternalSwap(InputsUpload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inputs_add_job_id_, lhs_arena,
      &other->_impl_.inputs_add_job_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_pat_, lhs_arena,
      &other->_impl_.app_pat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputsUpload, _impl_.input_id_conflict_resolution_)
      + sizeof(InputsUpload::_impl_.input_id_conflict_resolution_)
      - PROTOBUF_FIELD_OFFSET(InputsUpload, _impl_.upload_)>(
          reinterpret_cast<char*>(&_impl_.upload_),
          reinterpret_cast<char*>(&other->_impl_.upload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputsUpload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[191]);
}

// ===================================================================

class BookmarkOrigin::_Internal {
 public:
};

BookmarkOrigin::BookmarkOrigin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.BookmarkOrigin)
}
BookmarkOrigin::BookmarkOrigin(const BookmarkOrigin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BookmarkOrigin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.resource_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.resource_type_ = from._impl_.resource_type_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.BookmarkOrigin)
}

inline void BookmarkOrigin::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.resource_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BookmarkOrigin::~BookmarkOrigin() {
  // @@protoc_insertion_point(destructor:clarifai.api.BookmarkOrigin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BookmarkOrigin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.user_id_.Destroy();
}

void BookmarkOrigin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BookmarkOrigin::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.BookmarkOrigin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.resource_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BookmarkOrigin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.BookmarkOrigin.id"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.BookmarkOrigin.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.BookmarkOrigin.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.BookmarkOrigin.BookmarkType resource_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource_type(static_cast<::clarifai::api::BookmarkOrigin_BookmarkType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BookmarkOrigin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.BookmarkOrigin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.BookmarkOrigin.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.BookmarkOrigin.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.BookmarkOrigin.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // .clarifai.api.BookmarkOrigin.BookmarkType resource_type = 4;
  if (this->_internal_resource_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_resource_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.BookmarkOrigin)
  return target;
}

size_t BookmarkOrigin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.BookmarkOrigin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .clarifai.api.BookmarkOrigin.BookmarkType resource_type = 4;
  if (this->_internal_resource_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_resource_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BookmarkOrigin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BookmarkOrigin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BookmarkOrigin::GetClassData() const { return &_class_data_; }


void BookmarkOrigin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BookmarkOrigin*>(&to_msg);
  auto& from = static_cast<const BookmarkOrigin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.BookmarkOrigin)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_resource_type() != 0) {
    _this->_internal_set_resource_type(from._internal_resource_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BookmarkOrigin::CopyFrom(const BookmarkOrigin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.BookmarkOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookmarkOrigin::IsInitialized() const {
  return true;
}

void BookmarkOrigin::InternalSwap(BookmarkOrigin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  swap(_impl_.resource_type_, other->_impl_.resource_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BookmarkOrigin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[192]);
}

// ===================================================================

class Runner::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Runner* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Runner* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const Runner* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Runner::_Internal::created_at(const Runner* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Runner::_Internal::modified_at(const Runner* msg) {
  return *msg->_impl_.modified_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Runner::_Internal::metadata(const Runner* msg) {
  return *msg->_impl_.metadata_;
}
void Runner::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Runner::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
}
void Runner::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
Runner::Runner(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Runner)
}
Runner::Runner(const Runner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Runner* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.labels_){from._impl_.labels_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_modified_at()) {
    _this->_impl_.modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.modified_at_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Runner)
}

inline void Runner::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.labels_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.modified_at_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Runner::~Runner() {
  // @@protoc_insertion_point(destructor:clarifai.api.Runner)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Runner::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.labels_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.description_.Destroy();
  _impl_.user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.modified_at_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void Runner::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Runner::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Runner)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.labels_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modified_at_ != nullptr) {
    delete _impl_.modified_at_;
  }
  _impl_.modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Runner::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Runner.id"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Runner.description"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Runner.user_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string labels = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_labels();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.Runner.labels"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Runner::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Runner)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Runner.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Runner.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 4;
  if (this->_internal_has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::modified_at(this),
        _Internal::modified_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // string user_id = 6;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Runner.user_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_id(), target);
  }

  // repeated string labels = 7;
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    const auto& s = this->_internal_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Runner.labels");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Runner)
  return target;
}

size_t Runner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Runner)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string labels = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.labels_.size());
  for (int i = 0, n = _impl_.labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.labels_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string user_id = 6;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 4;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modified_at_);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Runner::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Runner::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Runner::GetClassData() const { return &_class_data_; }


void Runner::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Runner*>(&to_msg);
  auto& from = static_cast<const Runner&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Runner)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _this->_internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_modified_at());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Runner::CopyFrom(const Runner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Runner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Runner::IsInitialized() const {
  return true;
}

void Runner::InternalSwap(Runner* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Runner, _impl_.metadata_)
      + sizeof(Runner::_impl_.metadata_)
      - PROTOBUF_FIELD_OFFSET(Runner, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Runner::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[193]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::api::Annotation*
Arena::CreateMaybeMessage< ::clarifai::api::Annotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Annotation >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::App*
Arena::CreateMaybeMessage< ::clarifai::api::App >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::App >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AppQuery*
Arena::CreateMaybeMessage< ::clarifai::api::AppQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AppQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Collaborator*
Arena::CreateMaybeMessage< ::clarifai::api::Collaborator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Collaborator >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Collaboration*
Arena::CreateMaybeMessage< ::clarifai::api::Collaboration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Collaboration >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Audio*
Arena::CreateMaybeMessage< ::clarifai::api::Audio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Audio >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AudioInfo*
Arena::CreateMaybeMessage< ::clarifai::api::AudioInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AudioInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Track*
Arena::CreateMaybeMessage< ::clarifai::api::Track >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Track >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Cluster*
Arena::CreateMaybeMessage< ::clarifai::api::Cluster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Cluster >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Color*
Arena::CreateMaybeMessage< ::clarifai::api::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::W3C*
Arena::CreateMaybeMessage< ::clarifai::api::W3C >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::W3C >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::UserAppIDSet*
Arena::CreateMaybeMessage< ::clarifai::api::UserAppIDSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::UserAppIDSet >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAction*
Arena::CreateMaybeMessage< ::clarifai::api::PatchAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAction >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Concept*
Arena::CreateMaybeMessage< ::clarifai::api::Concept >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Concept >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::KeypointInfo*
Arena::CreateMaybeMessage< ::clarifai::api::KeypointInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::KeypointInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::KeypointEdge*
Arena::CreateMaybeMessage< ::clarifai::api::KeypointEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::KeypointEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptExtraInfo*
Arena::CreateMaybeMessage< ::clarifai::api::ConceptExtraInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConceptExtraInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptCount*
Arena::CreateMaybeMessage< ::clarifai::api::ConceptCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConceptCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptTypeCount*
Arena::CreateMaybeMessage< ::clarifai::api::ConceptTypeCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConceptTypeCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DetailConceptCount*
Arena::CreateMaybeMessage< ::clarifai::api::DetailConceptCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DetailConceptCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptQuery*
Arena::CreateMaybeMessage< ::clarifai::api::ConceptQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConceptQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptRelation*
Arena::CreateMaybeMessage< ::clarifai::api::ConceptRelation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConceptRelation >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::KnowledgeGraph*
Arena::CreateMaybeMessage< ::clarifai::api::KnowledgeGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::KnowledgeGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptMappingJob*
Arena::CreateMaybeMessage< ::clarifai::api::ConceptMappingJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConceptMappingJob >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptLanguage*
Arena::CreateMaybeMessage< ::clarifai::api::ConceptLanguage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConceptLanguage >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Data*
Arena::CreateMaybeMessage< ::clarifai::api::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Data >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Region*
Arena::CreateMaybeMessage< ::clarifai::api::Region >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Region >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::RegionInfo*
Arena::CreateMaybeMessage< ::clarifai::api::RegionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::RegionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::BoundingBox*
Arena::CreateMaybeMessage< ::clarifai::api::BoundingBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::BoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::FrameInfo*
Arena::CreateMaybeMessage< ::clarifai::api::FrameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::FrameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Frame*
Arena::CreateMaybeMessage< ::clarifai::api::Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Mask*
Arena::CreateMaybeMessage< ::clarifai::api::Mask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Mask >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Polygon*
Arena::CreateMaybeMessage< ::clarifai::api::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Point*
Arena::CreateMaybeMessage< ::clarifai::api::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Span*
Arena::CreateMaybeMessage< ::clarifai::api::Span >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Span >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Token*
Arena::CreateMaybeMessage< ::clarifai::api::Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Token >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Embedding*
Arena::CreateMaybeMessage< ::clarifai::api::Embedding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Embedding >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GeoPoint*
Arena::CreateMaybeMessage< ::clarifai::api::GeoPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GeoPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GeoLimit*
Arena::CreateMaybeMessage< ::clarifai::api::GeoLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GeoLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GeoBoxedPoint*
Arena::CreateMaybeMessage< ::clarifai::api::GeoBoxedPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GeoBoxedPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Geo*
Arena::CreateMaybeMessage< ::clarifai::api::Geo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Geo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Image*
Arena::CreateMaybeMessage< ::clarifai::api::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ImageInfo*
Arena::CreateMaybeMessage< ::clarifai::api::ImageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ImageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::HostedURL*
Arena::CreateMaybeMessage< ::clarifai::api::HostedURL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::HostedURL >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Input*
Arena::CreateMaybeMessage< ::clarifai::api::Input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Input >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::InputBatch*
Arena::CreateMaybeMessage< ::clarifai::api::InputBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::InputBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::InputCount*
Arena::CreateMaybeMessage< ::clarifai::api::InputCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::InputCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Dataset*
Arena::CreateMaybeMessage< ::clarifai::api::Dataset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Dataset >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AnnotationFilter*
Arena::CreateMaybeMessage< ::clarifai::api::AnnotationFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AnnotationFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetInput*
Arena::CreateMaybeMessage< ::clarifai::api::DatasetInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetInput >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetVersion*
Arena::CreateMaybeMessage< ::clarifai::api::DatasetVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AnnotationFilterConfig*
Arena::CreateMaybeMessage< ::clarifai::api::AnnotationFilterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AnnotationFilterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelPredictConfig*
Arena::CreateMaybeMessage< ::clarifai::api::ModelPredictConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelPredictConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetVersionMetrics*
Arena::CreateMaybeMessage< ::clarifai::api::DatasetVersionMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetVersionMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetVersionMetricsGroup*
Arena::CreateMaybeMessage< ::clarifai::api::DatasetVersionMetricsGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetVersionMetricsGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetVersionExportInfo*
Arena::CreateMaybeMessage< ::clarifai::api::DatasetVersionExportInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetVersionExportInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetVersionExport*
Arena::CreateMaybeMessage< ::clarifai::api::DatasetVersionExport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetVersionExport >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetVersionProcessingInfo*
Arena::CreateMaybeMessage< ::clarifai::api::DatasetVersionProcessingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetVersionProcessingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::FrameInterpolationInfo*
Arena::CreateMaybeMessage< ::clarifai::api::FrameInterpolationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::FrameInterpolationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowResultsSimilarity*
Arena::CreateMaybeMessage< ::clarifai::api::WorkflowResultsSimilarity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::WorkflowResultsSimilarity >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Key*
Arena::CreateMaybeMessage< ::clarifai::api::Key >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Key >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Model*
Arena::CreateMaybeMessage< ::clarifai::api::Model >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Model >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelReference*
Arena::CreateMaybeMessage< ::clarifai::api::ModelReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelReference >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelVersionInputExample*
Arena::CreateMaybeMessage< ::clarifai::api::ModelVersionInputExample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelVersionInputExample >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::OutputInfo*
Arena::CreateMaybeMessage< ::clarifai::api::OutputInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::OutputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::InputInfo*
Arena::CreateMaybeMessage< ::clarifai::api::InputInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::InputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TrainInfo*
Arena::CreateMaybeMessage< ::clarifai::api::TrainInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TrainInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::EvalInfo*
Arena::CreateMaybeMessage< ::clarifai::api::EvalInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::EvalInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ImportInfo*
Arena::CreateMaybeMessage< ::clarifai::api::ImportInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ImportInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::OutputConfig*
Arena::CreateMaybeMessage< ::clarifai::api::OutputConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::OutputConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelType*
Arena::CreateMaybeMessage< ::clarifai::api::ModelType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelType >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelLayerInfo*
Arena::CreateMaybeMessage< ::clarifai::api::ModelLayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelLayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TritonCondaEnvInfo*
Arena::CreateMaybeMessage< ::clarifai::api::TritonCondaEnvInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TritonCondaEnvInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LayerShape*
Arena::CreateMaybeMessage< ::clarifai::api::LayerShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::LayerShape >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelTypeField*
Arena::CreateMaybeMessage< ::clarifai::api::ModelTypeField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelTypeField >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelTypeRangeInfo*
Arena::CreateMaybeMessage< ::clarifai::api::ModelTypeRangeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelTypeRangeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelTypeEnumOption*
Arena::CreateMaybeMessage< ::clarifai::api::ModelTypeEnumOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelTypeEnumOption >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelTypeEnumOptionAlias*
Arena::CreateMaybeMessage< ::clarifai::api::ModelTypeEnumOptionAlias >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelTypeEnumOptionAlias >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelQuery*
Arena::CreateMaybeMessage< ::clarifai::api::ModelQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelVersion*
Arena::CreateMaybeMessage< ::clarifai::api::ModelVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PretrainedModelConfig*
Arena::CreateMaybeMessage< ::clarifai::api::PretrainedModelConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PretrainedModelConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TrainStats*
Arena::CreateMaybeMessage< ::clarifai::api::TrainStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TrainStats >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LossCurveEntry*
Arena::CreateMaybeMessage< ::clarifai::api::LossCurveEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::LossCurveEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LabelCount*
Arena::CreateMaybeMessage< ::clarifai::api::LabelCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::LabelCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LabelDistribution*
Arena::CreateMaybeMessage< ::clarifai::api::LabelDistribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::LabelDistribution >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::CooccurrenceMatrixEntry*
Arena::CreateMaybeMessage< ::clarifai::api::CooccurrenceMatrixEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::CooccurrenceMatrixEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::CooccurrenceMatrix*
Arena::CreateMaybeMessage< ::clarifai::api::CooccurrenceMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::CooccurrenceMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConfusionMatrixEntry*
Arena::CreateMaybeMessage< ::clarifai::api::ConfusionMatrixEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConfusionMatrixEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConfusionMatrix*
Arena::CreateMaybeMessage< ::clarifai::api::ConfusionMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConfusionMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ROC*
Arena::CreateMaybeMessage< ::clarifai::api::ROC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ROC >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PrecisionRecallCurve*
Arena::CreateMaybeMessage< ::clarifai::api::PrecisionRecallCurve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PrecisionRecallCurve >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::BinaryMetrics*
Arena::CreateMaybeMessage< ::clarifai::api::BinaryMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::BinaryMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TrackerMetrics*
Arena::CreateMaybeMessage< ::clarifai::api::TrackerMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TrackerMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::EvalTestSetEntry*
Arena::CreateMaybeMessage< ::clarifai::api::EvalTestSetEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::EvalTestSetEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LOPQEvalResult*
Arena::CreateMaybeMessage< ::clarifai::api::LOPQEvalResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::LOPQEvalResult >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MetricsSummary*
Arena::CreateMaybeMessage< ::clarifai::api::MetricsSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MetricsSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::EvalMetrics*
Arena::CreateMaybeMessage< ::clarifai::api::EvalMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::EvalMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::FieldsValue*
Arena::CreateMaybeMessage< ::clarifai::api::FieldsValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::FieldsValue >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Output*
Arena::CreateMaybeMessage< ::clarifai::api::Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Output >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ScopeDeps*
Arena::CreateMaybeMessage< ::clarifai::api::ScopeDeps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ScopeDeps >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::EndpointDeps*
Arena::CreateMaybeMessage< ::clarifai::api::EndpointDeps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::EndpointDeps >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Hit*
Arena::CreateMaybeMessage< ::clarifai::api::Hit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Hit >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::HitCount*
Arena::CreateMaybeMessage< ::clarifai::api::HitCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::HitCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::And*
Arena::CreateMaybeMessage< ::clarifai::api::And >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::And >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Query*
Arena::CreateMaybeMessage< ::clarifai::api::Query >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Query >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Search*
Arena::CreateMaybeMessage< ::clarifai::api::Search >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Search >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Filter*
Arena::CreateMaybeMessage< ::clarifai::api::Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TimeRange*
Arena::CreateMaybeMessage< ::clarifai::api::TimeRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TimeRange >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Rank*
Arena::CreateMaybeMessage< ::clarifai::api::Rank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Rank >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AnnotationSearchMetrics*
Arena::CreateMaybeMessage< ::clarifai::api::AnnotationSearchMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AnnotationSearchMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Text*
Arena::CreateMaybeMessage< ::clarifai::api::Text >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Text >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TextInfo*
Arena::CreateMaybeMessage< ::clarifai::api::TextInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TextInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::User*
Arena::CreateMaybeMessage< ::clarifai::api::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::User >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::UserDetail*
Arena::CreateMaybeMessage< ::clarifai::api::UserDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::UserDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::EmailAddress*
Arena::CreateMaybeMessage< ::clarifai::api::EmailAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::EmailAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Password*
Arena::CreateMaybeMessage< ::clarifai::api::Password >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Password >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PasswordViolations*
Arena::CreateMaybeMessage< ::clarifai::api::PasswordViolations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PasswordViolations >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Video*
Arena::CreateMaybeMessage< ::clarifai::api::Video >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Video >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::VideoInfo*
Arena::CreateMaybeMessage< ::clarifai::api::VideoInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::VideoInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Workflow*
Arena::CreateMaybeMessage< ::clarifai::api::Workflow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Workflow >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowVersion*
Arena::CreateMaybeMessage< ::clarifai::api::WorkflowVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::WorkflowVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowNode*
Arena::CreateMaybeMessage< ::clarifai::api::WorkflowNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::WorkflowNode >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::NodeInput*
Arena::CreateMaybeMessage< ::clarifai::api::NodeInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::NodeInput >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowResult*
Arena::CreateMaybeMessage< ::clarifai::api::WorkflowResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::WorkflowResult >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowState*
Arena::CreateMaybeMessage< ::clarifai::api::WorkflowState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::WorkflowState >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AppDuplication*
Arena::CreateMaybeMessage< ::clarifai::api::AppDuplication >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AppDuplication >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AppCopyProgress*
Arena::CreateMaybeMessage< ::clarifai::api::AppCopyProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AppCopyProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AppDuplicationFilters*
Arena::CreateMaybeMessage< ::clarifai::api::AppDuplicationFilters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AppDuplicationFilters >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LabelOrder*
Arena::CreateMaybeMessage< ::clarifai::api::LabelOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::LabelOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Task*
Arena::CreateMaybeMessage< ::clarifai::api::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AiAssistParameters*
Arena::CreateMaybeMessage< ::clarifai::api::AiAssistParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AiAssistParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskWorker*
Arena::CreateMaybeMessage< ::clarifai::api::TaskWorker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskWorker >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskWorkerPartitionedStrategyInfo*
Arena::CreateMaybeMessage< ::clarifai::api::TaskWorkerPartitionedStrategyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskWorkerPartitionedStrategyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskInputSource*
Arena::CreateMaybeMessage< ::clarifai::api::TaskInputSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskInputSource >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskReview*
Arena::CreateMaybeMessage< ::clarifai::api::TaskReview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskReview >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskReviewManualStrategyInfo*
Arena::CreateMaybeMessage< ::clarifai::api::TaskReviewManualStrategyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskReviewManualStrategyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskReviewConsensusStrategyInfo*
Arena::CreateMaybeMessage< ::clarifai::api::TaskReviewConsensusStrategyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskReviewConsensusStrategyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskAIAssistant*
Arena::CreateMaybeMessage< ::clarifai::api::TaskAIAssistant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskAIAssistant >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskStatusCountPerUser*
Arena::CreateMaybeMessage< ::clarifai::api::TaskStatusCountPerUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskStatusCountPerUser >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ThresholdRange*
Arena::CreateMaybeMessage< ::clarifai::api::ThresholdRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ThresholdRange >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskConceptAutoAnnotationConfig*
Arena::CreateMaybeMessage< ::clarifai::api::TaskConceptAutoAnnotationConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskConceptAutoAnnotationConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskConcept*
Arena::CreateMaybeMessage< ::clarifai::api::TaskConcept >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskConcept >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Collector*
Arena::CreateMaybeMessage< ::clarifai::api::Collector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Collector >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::CollectorSource*
Arena::CreateMaybeMessage< ::clarifai::api::CollectorSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::CollectorSource >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::APIPostModelOutputsCollectorSource*
Arena::CreateMaybeMessage< ::clarifai::api::APIPostModelOutputsCollectorSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::APIPostModelOutputsCollectorSource >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StatValue*
Arena::CreateMaybeMessage< ::clarifai::api::StatValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::StatValue >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StatValueAggregateResult*
Arena::CreateMaybeMessage< ::clarifai::api::StatValueAggregateResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::StatValueAggregateResult >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StatValueAggregate*
Arena::CreateMaybeMessage< ::clarifai::api::StatValueAggregate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::StatValueAggregate >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StatValueAggregateQuery*
Arena::CreateMaybeMessage< ::clarifai::api::StatValueAggregateQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::StatValueAggregateQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetInputsSearchAddJob*
Arena::CreateMaybeMessage< ::clarifai::api::DatasetInputsSearchAddJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetInputsSearchAddJob >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PCAProjectionComparator*
Arena::CreateMaybeMessage< ::clarifai::api::PCAProjectionComparator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PCAProjectionComparator >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DuplicateAnnotationsResults*
Arena::CreateMaybeMessage< ::clarifai::api::DuplicateAnnotationsResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DuplicateAnnotationsResults >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Visibility*
Arena::CreateMaybeMessage< ::clarifai::api::Visibility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Visibility >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TrendingMetric*
Arena::CreateMaybeMessage< ::clarifai::api::TrendingMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TrendingMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::FullTag*
Arena::CreateMaybeMessage< ::clarifai::api::FullTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::FullTag >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TimeSegment*
Arena::CreateMaybeMessage< ::clarifai::api::TimeSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TimeSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TimeInfo*
Arena::CreateMaybeMessage< ::clarifai::api::TimeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TimeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetStar*
Arena::CreateMaybeMessage< ::clarifai::api::DatasetStar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetStar >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModuleStar*
Arena::CreateMaybeMessage< ::clarifai::api::ModuleStar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModuleStar >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Module*
Arena::CreateMaybeMessage< ::clarifai::api::Module >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Module >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModuleVersion_ModuleSubNav*
Arena::CreateMaybeMessage< ::clarifai::api::ModuleVersion_ModuleSubNav >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModuleVersion_ModuleSubNav >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModuleVersion_ModuleNav*
Arena::CreateMaybeMessage< ::clarifai::api::ModuleVersion_ModuleNav >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModuleVersion_ModuleNav >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModuleVersion*
Arena::CreateMaybeMessage< ::clarifai::api::ModuleVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModuleVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::InstalledModuleVersion*
Arena::CreateMaybeMessage< ::clarifai::api::InstalledModuleVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::InstalledModuleVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::BulkOperation*
Arena::CreateMaybeMessage< ::clarifai::api::BulkOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::BulkOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::InputIDs*
Arena::CreateMaybeMessage< ::clarifai::api::InputIDs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::InputIDs >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Progress*
Arena::CreateMaybeMessage< ::clarifai::api::Progress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Progress >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Operation*
Arena::CreateMaybeMessage< ::clarifai::api::Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AddConcepts*
Arena::CreateMaybeMessage< ::clarifai::api::AddConcepts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AddConcepts >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteConcepts*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteConcepts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteConcepts >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AddMetadata*
Arena::CreateMaybeMessage< ::clarifai::api::AddMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AddMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteMetadata*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::OverwriteGeo*
Arena::CreateMaybeMessage< ::clarifai::api::OverwriteGeo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::OverwriteGeo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteGeo*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteGeo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteGeo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AddToDataset*
Arena::CreateMaybeMessage< ::clarifai::api::AddToDataset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AddToDataset >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteFromDataset*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteFromDataset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteFromDataset >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SplitIntoDatasets*
Arena::CreateMaybeMessage< ::clarifai::api::SplitIntoDatasets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SplitIntoDatasets >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetSplit*
Arena::CreateMaybeMessage< ::clarifai::api::DatasetSplit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetSplit >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::InputsAddJob*
Arena::CreateMaybeMessage< ::clarifai::api::InputsAddJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::InputsAddJob >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::InputsAddJobProgress*
Arena::CreateMaybeMessage< ::clarifai::api::InputsAddJobProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::InputsAddJobProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Upload*
Arena::CreateMaybeMessage< ::clarifai::api::Upload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Upload >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::UploadContentPart*
Arena::CreateMaybeMessage< ::clarifai::api::UploadContentPart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::UploadContentPart >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::CustomCodeOperatorRequest*
Arena::CreateMaybeMessage< ::clarifai::api::CustomCodeOperatorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::CustomCodeOperatorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::InputsExtractionJob*
Arena::CreateMaybeMessage< ::clarifai::api::InputsExtractionJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::InputsExtractionJob >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::InputsExtractionJobProgress*
Arena::CreateMaybeMessage< ::clarifai::api::InputsExtractionJobProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::InputsExtractionJobProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::InputsDataSource*
Arena::CreateMaybeMessage< ::clarifai::api::InputsDataSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::InputsDataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DataSourceURL*
Arena::CreateMaybeMessage< ::clarifai::api::DataSourceURL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DataSourceURL >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DataSourceCredentials*
Arena::CreateMaybeMessage< ::clarifai::api::DataSourceCredentials >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DataSourceCredentials >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AWSCreds*
Arena::CreateMaybeMessage< ::clarifai::api::AWSCreds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AWSCreds >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AzureBlobCreds*
Arena::CreateMaybeMessage< ::clarifai::api::AzureBlobCreds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AzureBlobCreds >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::InputsUpload*
Arena::CreateMaybeMessage< ::clarifai::api::InputsUpload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::InputsUpload >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::BookmarkOrigin*
Arena::CreateMaybeMessage< ::clarifai::api::BookmarkOrigin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::BookmarkOrigin >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Runner*
Arena::CreateMaybeMessage< ::clarifai::api::Runner >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Runner >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
