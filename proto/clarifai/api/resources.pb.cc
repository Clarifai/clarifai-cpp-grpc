// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/resources.proto

#include "proto/clarifai/api/resources.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fmatrix_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatrixUint64_proto_2futils_2fmatrix_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_APIPostModelOutputsCollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AiAssistParameters_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppDuplicationFilters_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Audio_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BinaryMetrics_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoundingBox_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Color_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptTypeCount_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfusionMatrix_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfusionMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CooccurrenceMatrix_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CooccurrenceMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DatasetVersionMetrics_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetailConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmailAddress_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Embedding_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_EvalMetrics_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EvalTestSetEntry_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Filter_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Geo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoBoxedPoint_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoLimit_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoPoint_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostedURL_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Image_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImportInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LOPQEvalResult_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelCount_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelDistribution_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LossCurveEntry_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Mask_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricsSummary_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModelTypeEnumOption_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelTypeEnumOptionAlias_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelTypeRangeInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInput_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OutputConfig_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OutputInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrecisionRecallCurve_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROC_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rank_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_RegionInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Span_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatValueAggregate_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatValueAggregateQuery_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskAIAssistant_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskInputSource_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TaskReview_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskReviewConsensusStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskReviewManualStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskWorker_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskWorkerPartitionedStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Text_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeRange_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Token_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackerMetrics_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_User_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UserDetail_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Video_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Visibility_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_W3C_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WorkflowNode_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_WorkflowVersion_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UInt64Value_google_2fprotobuf_2fwrappers_2eproto;
namespace clarifai {
namespace api {
class AnnotationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Annotation> _instance;
} _Annotation_default_instance_;
class AppDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<App> _instance;
} _App_default_instance_;
class AppQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppQuery> _instance;
} _AppQuery_default_instance_;
class CollaboratorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Collaborator> _instance;
} _Collaborator_default_instance_;
class CollaborationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Collaboration> _instance;
} _Collaboration_default_instance_;
class AudioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Audio> _instance;
} _Audio_default_instance_;
class AudioInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioInfo> _instance;
} _AudioInfo_default_instance_;
class TrackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Track> _instance;
} _Track_default_instance_;
class ClusterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cluster> _instance;
} _Cluster_default_instance_;
class ColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Color> _instance;
} _Color_default_instance_;
class W3CDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<W3C> _instance;
} _W3C_default_instance_;
class UserAppIDSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserAppIDSet> _instance;
} _UserAppIDSet_default_instance_;
class PatchActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchAction> _instance;
} _PatchAction_default_instance_;
class ConceptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Concept> _instance;
} _Concept_default_instance_;
class ConceptCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConceptCount> _instance;
} _ConceptCount_default_instance_;
class ConceptTypeCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConceptTypeCount> _instance;
} _ConceptTypeCount_default_instance_;
class DetailConceptCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetailConceptCount> _instance;
} _DetailConceptCount_default_instance_;
class ConceptQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConceptQuery> _instance;
} _ConceptQuery_default_instance_;
class ConceptRelationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConceptRelation> _instance;
} _ConceptRelation_default_instance_;
class KnowledgeGraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KnowledgeGraph> _instance;
} _KnowledgeGraph_default_instance_;
class ConceptMappingJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConceptMappingJob> _instance;
} _ConceptMappingJob_default_instance_;
class ConceptLanguageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConceptLanguage> _instance;
} _ConceptLanguage_default_instance_;
class DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Data> _instance;
} _Data_default_instance_;
class RegionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Region> _instance;
} _Region_default_instance_;
class RegionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionInfo> _instance;
} _RegionInfo_default_instance_;
class BoundingBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundingBox> _instance;
} _BoundingBox_default_instance_;
class FrameInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameInfo> _instance;
} _FrameInfo_default_instance_;
class FrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Frame> _instance;
} _Frame_default_instance_;
class MaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mask> _instance;
} _Mask_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Polygon> _instance;
} _Polygon_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class SpanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Span> _instance;
} _Span_default_instance_;
class TokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Token> _instance;
} _Token_default_instance_;
class EmbeddingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Embedding> _instance;
} _Embedding_default_instance_;
class GeoPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoPoint> _instance;
} _GeoPoint_default_instance_;
class GeoLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoLimit> _instance;
} _GeoLimit_default_instance_;
class GeoBoxedPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoBoxedPoint> _instance;
} _GeoBoxedPoint_default_instance_;
class GeoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Geo> _instance;
} _Geo_default_instance_;
class ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Image> _instance;
} _Image_default_instance_;
class ImageInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageInfo> _instance;
} _ImageInfo_default_instance_;
class HostedURLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostedURL> _instance;
} _HostedURL_default_instance_;
class InputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input> _instance;
} _Input_default_instance_;
class InputCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputCount> _instance;
} _InputCount_default_instance_;
class AnnotationFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnnotationFilter> _instance;
} _AnnotationFilter_default_instance_;
class DatasetVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatasetVersion> _instance;
  const ::clarifai::api::AnnotationFilterConfig* annotation_filter_config_;
} _DatasetVersion_default_instance_;
class AnnotationFilterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnnotationFilterConfig> _instance;
} _AnnotationFilterConfig_default_instance_;
class DatasetVersionMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatasetVersionMetrics> _instance;
} _DatasetVersionMetrics_default_instance_;
class WorkflowResultsSimilarityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkflowResultsSimilarity> _instance;
} _WorkflowResultsSimilarity_default_instance_;
class KeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Key> _instance;
} _Key_default_instance_;
class ModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Model> _instance;
} _Model_default_instance_;
class ModelReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelReference> _instance;
} _ModelReference_default_instance_;
class ModelVersionInputExampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelVersionInputExample> _instance;
} _ModelVersionInputExample_default_instance_;
class OutputInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputInfo> _instance;
} _OutputInfo_default_instance_;
class InputInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputInfo> _instance;
} _InputInfo_default_instance_;
class TrainInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainInfo> _instance;
} _TrainInfo_default_instance_;
class ImportInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImportInfo> _instance;
} _ImportInfo_default_instance_;
class OutputConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputConfig> _instance;
} _OutputConfig_default_instance_;
class ModelTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelType> _instance;
} _ModelType_default_instance_;
class ModelTypeFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelTypeField> _instance;
} _ModelTypeField_default_instance_;
class ModelTypeRangeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelTypeRangeInfo> _instance;
} _ModelTypeRangeInfo_default_instance_;
class ModelTypeEnumOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelTypeEnumOption> _instance;
} _ModelTypeEnumOption_default_instance_;
class ModelTypeEnumOptionAliasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelTypeEnumOptionAlias> _instance;
} _ModelTypeEnumOptionAlias_default_instance_;
class ModelQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelQuery> _instance;
} _ModelQuery_default_instance_;
class ModelVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelVersion> _instance;
} _ModelVersion_default_instance_;
class PretrainedModelConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PretrainedModelConfig> _instance;
} _PretrainedModelConfig_default_instance_;
class TrainStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainStats> _instance;
} _TrainStats_default_instance_;
class LossCurveEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LossCurveEntry> _instance;
} _LossCurveEntry_default_instance_;
class LabelCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelCount> _instance;
} _LabelCount_default_instance_;
class LabelDistributionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelDistribution> _instance;
} _LabelDistribution_default_instance_;
class CooccurrenceMatrixEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CooccurrenceMatrixEntry> _instance;
} _CooccurrenceMatrixEntry_default_instance_;
class CooccurrenceMatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CooccurrenceMatrix> _instance;
} _CooccurrenceMatrix_default_instance_;
class ConfusionMatrixEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfusionMatrixEntry> _instance;
} _ConfusionMatrixEntry_default_instance_;
class ConfusionMatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfusionMatrix> _instance;
} _ConfusionMatrix_default_instance_;
class ROCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ROC> _instance;
} _ROC_default_instance_;
class PrecisionRecallCurveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrecisionRecallCurve> _instance;
} _PrecisionRecallCurve_default_instance_;
class BinaryMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinaryMetrics> _instance;
} _BinaryMetrics_default_instance_;
class TrackerMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackerMetrics> _instance;
} _TrackerMetrics_default_instance_;
class EvalTestSetEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EvalTestSetEntry> _instance;
} _EvalTestSetEntry_default_instance_;
class LOPQEvalResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQEvalResult> _instance;
} _LOPQEvalResult_default_instance_;
class MetricsSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricsSummary> _instance;
} _MetricsSummary_default_instance_;
class EvalMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EvalMetrics> _instance;
} _EvalMetrics_default_instance_;
class FieldsValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldsValue> _instance;
} _FieldsValue_default_instance_;
class OutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Output> _instance;
} _Output_default_instance_;
class ScopeDepsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScopeDeps> _instance;
} _ScopeDeps_default_instance_;
class EndpointDepsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndpointDeps> _instance;
} _EndpointDeps_default_instance_;
class HitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hit> _instance;
} _Hit_default_instance_;
class AndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<And> _instance;
} _And_default_instance_;
class QueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Query> _instance;
} _Query_default_instance_;
class SearchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Search> _instance;
} _Search_default_instance_;
class FilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Filter> _instance;
} _Filter_default_instance_;
class TimeRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeRange> _instance;
} _TimeRange_default_instance_;
class RankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rank> _instance;
} _Rank_default_instance_;
class AnnotationSearchMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnnotationSearchMetrics> _instance;
} _AnnotationSearchMetrics_default_instance_;
class TextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Text> _instance;
} _Text_default_instance_;
class TextInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextInfo> _instance;
} _TextInfo_default_instance_;
class UserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<User> _instance;
} _User_default_instance_;
class UserDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserDetail> _instance;
} _UserDetail_default_instance_;
class EmailAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmailAddress> _instance;
} _EmailAddress_default_instance_;
class PasswordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Password> _instance;
} _Password_default_instance_;
class PasswordViolationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PasswordViolations> _instance;
} _PasswordViolations_default_instance_;
class VideoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Video> _instance;
} _Video_default_instance_;
class VideoInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoInfo> _instance;
} _VideoInfo_default_instance_;
class WorkflowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Workflow> _instance;
} _Workflow_default_instance_;
class WorkflowVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkflowVersion> _instance;
} _WorkflowVersion_default_instance_;
class WorkflowNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkflowNode> _instance;
} _WorkflowNode_default_instance_;
class NodeInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInput> _instance;
} _NodeInput_default_instance_;
class WorkflowResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkflowResult> _instance;
} _WorkflowResult_default_instance_;
class WorkflowStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkflowState> _instance;
} _WorkflowState_default_instance_;
class AppDuplicationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppDuplication> _instance;
} _AppDuplication_default_instance_;
class AppDuplicationFiltersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppDuplicationFilters> _instance;
} _AppDuplicationFilters_default_instance_;
class LabelOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelOrder> _instance;
} _LabelOrder_default_instance_;
class TaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Task> _instance;
} _Task_default_instance_;
class AiAssistParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AiAssistParameters> _instance;
} _AiAssistParameters_default_instance_;
class TaskWorkerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskWorker> _instance;
  const ::clarifai::api::TaskWorkerPartitionedStrategyInfo* partitioned_strategy_info_;
} _TaskWorker_default_instance_;
class TaskWorkerPartitionedStrategyInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskWorkerPartitionedStrategyInfo> _instance;
} _TaskWorkerPartitionedStrategyInfo_default_instance_;
class TaskInputSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskInputSource> _instance;
} _TaskInputSource_default_instance_;
class TaskReviewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskReview> _instance;
  const ::clarifai::api::TaskReviewManualStrategyInfo* manual_strategy_info_;
  const ::clarifai::api::TaskReviewConsensusStrategyInfo* consensus_strategy_info_;
} _TaskReview_default_instance_;
class TaskReviewManualStrategyInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskReviewManualStrategyInfo> _instance;
} _TaskReviewManualStrategyInfo_default_instance_;
class TaskReviewConsensusStrategyInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskReviewConsensusStrategyInfo> _instance;
} _TaskReviewConsensusStrategyInfo_default_instance_;
class TaskAIAssistantDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskAIAssistant> _instance;
} _TaskAIAssistant_default_instance_;
class TaskStatusCountPerUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskStatusCountPerUser> _instance;
} _TaskStatusCountPerUser_default_instance_;
class CollectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Collector> _instance;
} _Collector_default_instance_;
class CollectorSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectorSource> _instance;
} _CollectorSource_default_instance_;
class APIPostModelOutputsCollectorSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<APIPostModelOutputsCollectorSource> _instance;
} _APIPostModelOutputsCollectorSource_default_instance_;
class StatValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatValue> _instance;
} _StatValue_default_instance_;
class StatValueAggregateResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatValueAggregateResult> _instance;
} _StatValueAggregateResult_default_instance_;
class StatValueAggregateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatValueAggregate> _instance;
} _StatValueAggregate_default_instance_;
class StatValueAggregateQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatValueAggregateQuery> _instance;
} _StatValueAggregateQuery_default_instance_;
class VisibilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Visibility> _instance;
} _Visibility_default_instance_;
class TrendingMetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrendingMetric> _instance;
} _TrendingMetric_default_instance_;
class TimeSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeSegment> _instance;
} _TimeSegment_default_instance_;
class TimeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeInfo> _instance;
} _TimeInfo_default_instance_;
}  // namespace api
}  // namespace clarifai
static void InitDefaultsscc_info_APIPostModelOutputsCollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_APIPostModelOutputsCollectorSource_default_instance_;
    new (ptr) ::clarifai::api::APIPostModelOutputsCollectorSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::APIPostModelOutputsCollectorSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_APIPostModelOutputsCollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_APIPostModelOutputsCollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_AiAssistParameters_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_AiAssistParameters_default_instance_;
    new (ptr) ::clarifai::api::AiAssistParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::AiAssistParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AiAssistParameters_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AiAssistParameters_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_AnnotationFilter_default_instance_;
    new (ptr) ::clarifai::api::AnnotationFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_DatasetVersion_default_instance_;
    new (ptr) ::clarifai::api::DatasetVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_AnnotationFilterConfig_default_instance_;
    new (ptr) ::clarifai::api::AnnotationFilterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_Model_default_instance_;
    new (ptr) ::clarifai::api::Model();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_ModelVersion_default_instance_;
    new (ptr) ::clarifai::api::ModelVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_Output_default_instance_;
    new (ptr) ::clarifai::api::Output();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_And_default_instance_;
    new (ptr) ::clarifai::api::And();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_Query_default_instance_;
    new (ptr) ::clarifai::api::Query();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_Search_default_instance_;
    new (ptr) ::clarifai::api::Search();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::AnnotationFilter::InitAsDefaultInstance();
  ::clarifai::api::DatasetVersion::InitAsDefaultInstance();
  ::clarifai::api::AnnotationFilterConfig::InitAsDefaultInstance();
  ::clarifai::api::Model::InitAsDefaultInstance();
  ::clarifai::api::ModelVersion::InitAsDefaultInstance();
  ::clarifai::api::Output::InitAsDefaultInstance();
  ::clarifai::api::And::InitAsDefaultInstance();
  ::clarifai::api::Query::InitAsDefaultInstance();
  ::clarifai::api::Search::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, 0, InitDefaultsscc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_DatasetVersionMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_Visibility_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_OutputInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_InputInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_TrainInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ImportInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_EvalMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Filter_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Rank_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Annotation_default_instance_;
    new (ptr) ::clarifai::api::Annotation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_Track_default_instance_;
    new (ptr) ::clarifai::api::Track();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_Cluster_default_instance_;
    new (ptr) ::clarifai::api::Cluster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_Data_default_instance_;
    new (ptr) ::clarifai::api::Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_Region_default_instance_;
    new (ptr) ::clarifai::api::Region();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_Frame_default_instance_;
    new (ptr) ::clarifai::api::Frame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_Input_default_instance_;
    new (ptr) ::clarifai::api::Input();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_Hit_default_instance_;
    new (ptr) ::clarifai::api::Hit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_TimeSegment_default_instance_;
    new (ptr) ::clarifai::api::TimeSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Annotation::InitAsDefaultInstance();
  ::clarifai::api::Track::InitAsDefaultInstance();
  ::clarifai::api::Cluster::InitAsDefaultInstance();
  ::clarifai::api::Data::InitAsDefaultInstance();
  ::clarifai::api::Region::InitAsDefaultInstance();
  ::clarifai::api::Frame::InitAsDefaultInstance();
  ::clarifai::api::Input::InitAsDefaultInstance();
  ::clarifai::api::Hit::InitAsDefaultInstance();
  ::clarifai::api::TimeSegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Image_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Video_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Geo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Color_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Embedding_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Text_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Audio_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_FrameInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_RegionInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_TimeInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_AnnotationSearchMetrics_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_AnnotationSearchMetrics_default_instance_;
    new (ptr) ::clarifai::api::AnnotationSearchMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::AnnotationSearchMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AnnotationSearchMetrics_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AnnotationSearchMetrics_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_EvalMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Visibility_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_App_default_instance_;
    new (ptr) ::clarifai::api::App();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::App::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_Visibility_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_AppDuplication_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_AppDuplication_default_instance_;
    new (ptr) ::clarifai::api::AppDuplication();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::AppDuplication::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AppDuplication_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AppDuplication_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_AppDuplicationFilters_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_AppDuplicationFilters_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_AppDuplicationFilters_default_instance_;
    new (ptr) ::clarifai::api::AppDuplicationFilters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::AppDuplicationFilters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppDuplicationFilters_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppDuplicationFilters_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_AppQuery_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_AppQuery_default_instance_;
    new (ptr) ::clarifai::api::AppQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::AppQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppQuery_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppQuery_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_Audio_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Audio_default_instance_;
    new (ptr) ::clarifai::api::Audio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Audio::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Audio_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Audio_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_HostedURL_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_AudioInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_AudioInfo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_AudioInfo_default_instance_;
    new (ptr) ::clarifai::api::AudioInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::AudioInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioInfo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioInfo_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_BinaryMetrics_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_BinaryMetrics_default_instance_;
    new (ptr) ::clarifai::api::BinaryMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::BinaryMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BinaryMetrics_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_BinaryMetrics_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ROC_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_PrecisionRecallCurve_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_BoundingBox_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_BoundingBox_default_instance_;
    new (ptr) ::clarifai::api::BoundingBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::BoundingBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoundingBox_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BoundingBox_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_Collaboration_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Collaboration_default_instance_;
    new (ptr) ::clarifai::api::Collaboration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Collaboration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Collaboration_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Collaboration_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_User_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_Collaborator_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Collaborator_default_instance_;
    new (ptr) ::clarifai::api::Collaborator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Collaborator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Collaborator_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Collaborator_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_User_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Collector_default_instance_;
    new (ptr) ::clarifai::api::Collector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Collector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_CollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_CollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_CollectorSource_default_instance_;
    new (ptr) ::clarifai::api::CollectorSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::CollectorSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_APIPostModelOutputsCollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_Color_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Color_default_instance_;
    new (ptr) ::clarifai::api::Color();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Color::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Color_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Color_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_W3C_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Concept_default_instance_;
    new (ptr) ::clarifai::api::Concept();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Concept::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Visibility_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ConceptCount_default_instance_;
    new (ptr) ::clarifai::api::ConceptCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ConceptCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_ConceptTypeCount_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_DetailConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ConceptLanguage_default_instance_;
    new (ptr) ::clarifai::api::ConceptLanguage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ConceptLanguage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_ConceptMappingJob_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ConceptMappingJob_default_instance_;
    new (ptr) ::clarifai::api::ConceptMappingJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ConceptMappingJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptMappingJob_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConceptMappingJob_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_ConceptQuery_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ConceptQuery_default_instance_;
    new (ptr) ::clarifai::api::ConceptQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ConceptQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptQuery_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConceptQuery_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_ConceptRelation_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ConceptRelation_default_instance_;
    new (ptr) ::clarifai::api::ConceptRelation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ConceptRelation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConceptRelation_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConceptRelation_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Visibility_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ConceptTypeCount_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ConceptTypeCount_default_instance_;
    new (ptr) ::clarifai::api::ConceptTypeCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ConceptTypeCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptTypeCount_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConceptTypeCount_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_ConfusionMatrix_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ConfusionMatrix_default_instance_;
    new (ptr) ::clarifai::api::ConfusionMatrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ConfusionMatrix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfusionMatrix_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConfusionMatrix_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_ConfusionMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ConfusionMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ConfusionMatrixEntry_default_instance_;
    new (ptr) ::clarifai::api::ConfusionMatrixEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ConfusionMatrixEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfusionMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfusionMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_CooccurrenceMatrix_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_CooccurrenceMatrix_default_instance_;
    new (ptr) ::clarifai::api::CooccurrenceMatrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::CooccurrenceMatrix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CooccurrenceMatrix_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CooccurrenceMatrix_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_CooccurrenceMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_CooccurrenceMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_CooccurrenceMatrixEntry_default_instance_;
    new (ptr) ::clarifai::api::CooccurrenceMatrixEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::CooccurrenceMatrixEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CooccurrenceMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CooccurrenceMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_DatasetVersionMetrics_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DatasetVersionMetrics_default_instance_;
    new (ptr) ::clarifai::api::DatasetVersionMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DatasetVersionMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DatasetVersionMetrics_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DatasetVersionMetrics_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_UInt64Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_MatrixUint64_proto_2futils_2fmatrix_2eproto.base,}};

static void InitDefaultsscc_info_DetailConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DetailConceptCount_default_instance_;
    new (ptr) ::clarifai::api::DetailConceptCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DetailConceptCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetailConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DetailConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_ConceptTypeCount_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_EmailAddress_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_EmailAddress_default_instance_;
    new (ptr) ::clarifai::api::EmailAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::EmailAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmailAddress_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EmailAddress_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_Embedding_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Embedding_default_instance_;
    new (ptr) ::clarifai::api::Embedding();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Embedding::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Embedding_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Embedding_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_EndpointDeps_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_EndpointDeps_default_instance_;
    new (ptr) ::clarifai::api::EndpointDeps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::EndpointDeps::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndpointDeps_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EndpointDeps_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_EvalMetrics_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_EvalMetrics_default_instance_;
    new (ptr) ::clarifai::api::EvalMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::EvalMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_EvalMetrics_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_EvalMetrics_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_MetricsSummary_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ConfusionMatrix_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_CooccurrenceMatrix_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_LabelDistribution_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_BinaryMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_EvalTestSetEntry_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_TrackerMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_EvalTestSetEntry_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_EvalTestSetEntry_default_instance_;
    new (ptr) ::clarifai::api::EvalTestSetEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::EvalTestSetEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EvalTestSetEntry_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EvalTestSetEntry_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_FieldsValue_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_FieldsValue_default_instance_;
    new (ptr) ::clarifai::api::FieldsValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::FieldsValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldsValue_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FieldsValue_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_Filter_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Filter_default_instance_;
    new (ptr) ::clarifai::api::Filter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Filter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Filter_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Filter_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_TimeRange_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_FrameInfo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_FrameInfo_default_instance_;
    new (ptr) ::clarifai::api::FrameInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::FrameInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameInfo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrameInfo_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_Geo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Geo_default_instance_;
    new (ptr) ::clarifai::api::Geo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Geo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Geo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Geo_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_GeoPoint_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_GeoLimit_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_GeoBoxedPoint_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GeoBoxedPoint_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GeoBoxedPoint_default_instance_;
    new (ptr) ::clarifai::api::GeoBoxedPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GeoBoxedPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoBoxedPoint_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoBoxedPoint_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_GeoPoint_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GeoLimit_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GeoLimit_default_instance_;
    new (ptr) ::clarifai::api::GeoLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GeoLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoLimit_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeoLimit_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_GeoPoint_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GeoPoint_default_instance_;
    new (ptr) ::clarifai::api::GeoPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GeoPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoPoint_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeoPoint_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_HostedURL_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_HostedURL_default_instance_;
    new (ptr) ::clarifai::api::HostedURL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::HostedURL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostedURL_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostedURL_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_Image_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Image_default_instance_;
    new (ptr) ::clarifai::api::Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Image::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Image_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Image_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_HostedURL_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ImageInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ImageInfo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ImageInfo_default_instance_;
    new (ptr) ::clarifai::api::ImageInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ImageInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageInfo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageInfo_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_ImportInfo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ImportInfo_default_instance_;
    new (ptr) ::clarifai::api::ImportInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ImportInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImportInfo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImportInfo_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_InputCount_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_InputCount_default_instance_;
    new (ptr) ::clarifai::api::InputCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::InputCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputCount_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputCount_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_InputInfo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_InputInfo_default_instance_;
    new (ptr) ::clarifai::api::InputInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::InputInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputInfo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InputInfo_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Key_default_instance_;
    new (ptr) ::clarifai::api::Key();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Key::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_KnowledgeGraph_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_KnowledgeGraph_default_instance_;
    new (ptr) ::clarifai::api::KnowledgeGraph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::KnowledgeGraph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KnowledgeGraph_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KnowledgeGraph_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_LOPQEvalResult_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_LOPQEvalResult_default_instance_;
    new (ptr) ::clarifai::api::LOPQEvalResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::LOPQEvalResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LOPQEvalResult_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LOPQEvalResult_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_LabelCount_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_LabelCount_default_instance_;
    new (ptr) ::clarifai::api::LabelCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::LabelCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelCount_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelCount_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_LabelDistribution_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_LabelDistribution_default_instance_;
    new (ptr) ::clarifai::api::LabelDistribution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::LabelDistribution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelDistribution_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LabelDistribution_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_LabelCount_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_LabelOrder_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_LabelOrder_default_instance_;
    new (ptr) ::clarifai::api::LabelOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::LabelOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LabelOrder_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LabelOrder_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_LossCurveEntry_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_LossCurveEntry_default_instance_;
    new (ptr) ::clarifai::api::LossCurveEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::LossCurveEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LossCurveEntry_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LossCurveEntry_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_Mask_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Mask_default_instance_;
    new (ptr) ::clarifai::api::Mask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Mask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Mask_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Mask_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Image_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MetricsSummary_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MetricsSummary_default_instance_;
    new (ptr) ::clarifai::api::MetricsSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MetricsSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricsSummary_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MetricsSummary_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_LOPQEvalResult_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ModelQuery_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ModelQuery_default_instance_;
    new (ptr) ::clarifai::api::ModelQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ModelQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelQuery_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelQuery_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_ModelReference_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ModelReference_default_instance_;
    new (ptr) ::clarifai::api::ModelReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ModelReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelReference_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelReference_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_ModelType_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ModelType_default_instance_;
    new (ptr) ::clarifai::api::ModelType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ModelType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelType_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModelType_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_ModelTypeEnumOption_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_ModelTypeEnumOption_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ModelTypeField_default_instance_;
    new (ptr) ::clarifai::api::ModelTypeField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::clarifai::api::_ModelTypeEnumOption_default_instance_;
    new (ptr) ::clarifai::api::ModelTypeEnumOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ModelTypeField::InitAsDefaultInstance();
  ::clarifai::api::ModelTypeEnumOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModelTypeEnumOption_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ModelTypeEnumOption_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_ModelTypeEnumOptionAlias_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_ModelTypeRangeInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ModelTypeEnumOptionAlias_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ModelTypeEnumOptionAlias_default_instance_;
    new (ptr) ::clarifai::api::ModelTypeEnumOptionAlias();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ModelTypeEnumOptionAlias::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelTypeEnumOptionAlias_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelTypeEnumOptionAlias_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_ModelTypeRangeInfo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ModelTypeRangeInfo_default_instance_;
    new (ptr) ::clarifai::api::ModelTypeRangeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ModelTypeRangeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelTypeRangeInfo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelTypeRangeInfo_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_ModelVersionInputExample_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ModelVersionInputExample_default_instance_;
    new (ptr) ::clarifai::api::ModelVersionInputExample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ModelVersionInputExample::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelVersionInputExample_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelVersionInputExample_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_NodeInput_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_NodeInput_default_instance_;
    new (ptr) ::clarifai::api::NodeInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::NodeInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInput_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeInput_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_OutputConfig_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_OutputConfig_default_instance_;
    new (ptr) ::clarifai::api::OutputConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::OutputConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OutputConfig_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OutputConfig_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_OutputInfo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_OutputInfo_default_instance_;
    new (ptr) ::clarifai::api::OutputInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::OutputInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OutputInfo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_OutputInfo_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_OutputConfig_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_Password_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Password_default_instance_;
    new (ptr) ::clarifai::api::Password();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Password::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Password_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Password_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_PasswordViolations_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PasswordViolations_default_instance_;
    new (ptr) ::clarifai::api::PasswordViolations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PasswordViolations::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PasswordViolations_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PasswordViolations_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_PatchAction_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchAction_default_instance_;
    new (ptr) ::clarifai::api::PatchAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PatchAction_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PatchAction_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_Point_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Point_default_instance_;
    new (ptr) ::clarifai::api::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_Polygon_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Polygon_default_instance_;
    new (ptr) ::clarifai::api::Polygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Polygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Polygon_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Point_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PrecisionRecallCurve_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PrecisionRecallCurve_default_instance_;
    new (ptr) ::clarifai::api::PrecisionRecallCurve();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PrecisionRecallCurve::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrecisionRecallCurve_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrecisionRecallCurve_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_PretrainedModelConfig_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PretrainedModelConfig_default_instance_;
    new (ptr) ::clarifai::api::PretrainedModelConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PretrainedModelConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PretrainedModelConfig_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PretrainedModelConfig_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_ROC_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ROC_default_instance_;
    new (ptr) ::clarifai::api::ROC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ROC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROC_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ROC_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_Rank_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Rank_default_instance_;
    new (ptr) ::clarifai::api::Rank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Rank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rank_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Rank_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_RegionInfo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_RegionInfo_default_instance_;
    new (ptr) ::clarifai::api::RegionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::RegionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_RegionInfo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_RegionInfo_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_BoundingBox_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Mask_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Polygon_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Point_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Span_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Token_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ScopeDeps_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ScopeDeps_default_instance_;
    new (ptr) ::clarifai::api::ScopeDeps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ScopeDeps::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScopeDeps_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScopeDeps_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_Span_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Span_default_instance_;
    new (ptr) ::clarifai::api::Span();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Span::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Span_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Span_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_StatValue_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_StatValue_default_instance_;
    new (ptr) ::clarifai::api::StatValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::StatValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatValue_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StatValue_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_StatValueAggregate_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_StatValueAggregate_default_instance_;
    new (ptr) ::clarifai::api::StatValueAggregate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::StatValueAggregate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatValueAggregate_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StatValueAggregate_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_StatValueAggregateQuery_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_StatValueAggregateQuery_default_instance_;
    new (ptr) ::clarifai::api::StatValueAggregateQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::StatValueAggregateQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatValueAggregateQuery_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StatValueAggregateQuery_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_StatValueAggregateResult_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_StatValueAggregateResult_default_instance_;
    new (ptr) ::clarifai::api::StatValueAggregateResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::StatValueAggregateResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StatValueAggregateResult_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StatValueAggregateResult_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_StatValueAggregate_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_StatValueAggregateQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Task_default_instance_;
    new (ptr) ::clarifai::api::Task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_TaskWorker_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_TaskInputSource_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_TaskAIAssistant_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_TaskReview_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_AiAssistParameters_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Visibility_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_TaskAIAssistant_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TaskAIAssistant_default_instance_;
    new (ptr) ::clarifai::api::TaskAIAssistant();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TaskAIAssistant::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskAIAssistant_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaskAIAssistant_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_TaskInputSource_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TaskInputSource_default_instance_;
    new (ptr) ::clarifai::api::TaskInputSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TaskInputSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskInputSource_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaskInputSource_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_TaskReview_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TaskReview_default_instance_;
    new (ptr) ::clarifai::api::TaskReview();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TaskReview::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TaskReview_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TaskReview_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_TaskReviewManualStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_TaskReviewConsensusStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_TaskReviewConsensusStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TaskReviewConsensusStrategyInfo_default_instance_;
    new (ptr) ::clarifai::api::TaskReviewConsensusStrategyInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TaskReviewConsensusStrategyInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskReviewConsensusStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaskReviewConsensusStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_TaskReviewManualStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TaskReviewManualStrategyInfo_default_instance_;
    new (ptr) ::clarifai::api::TaskReviewManualStrategyInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TaskReviewManualStrategyInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskReviewManualStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaskReviewManualStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_TaskStatusCountPerUser_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TaskStatusCountPerUser_default_instance_;
    new (ptr) ::clarifai::api::TaskStatusCountPerUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TaskStatusCountPerUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskStatusCountPerUser_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaskStatusCountPerUser_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_TaskWorker_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TaskWorker_default_instance_;
    new (ptr) ::clarifai::api::TaskWorker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TaskWorker::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskWorker_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TaskWorker_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_TaskWorkerPartitionedStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_TaskWorkerPartitionedStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TaskWorkerPartitionedStrategyInfo_default_instance_;
    new (ptr) ::clarifai::api::TaskWorkerPartitionedStrategyInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TaskWorkerPartitionedStrategyInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskWorkerPartitionedStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TaskWorkerPartitionedStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_Text_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Text_default_instance_;
    new (ptr) ::clarifai::api::Text();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Text::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Text_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Text_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_HostedURL_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_TextInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_TextInfo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TextInfo_default_instance_;
    new (ptr) ::clarifai::api::TextInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TextInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextInfo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TextInfo_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_TimeInfo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TimeInfo_default_instance_;
    new (ptr) ::clarifai::api::TimeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TimeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeInfo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeInfo_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_TimeRange_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TimeRange_default_instance_;
    new (ptr) ::clarifai::api::TimeRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TimeRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeRange_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimeRange_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_Token_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Token_default_instance_;
    new (ptr) ::clarifai::api::Token();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Token::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Token_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Token_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_TrackerMetrics_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TrackerMetrics_default_instance_;
    new (ptr) ::clarifai::api::TrackerMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TrackerMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackerMetrics_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrackerMetrics_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_TrainInfo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TrainInfo_default_instance_;
    new (ptr) ::clarifai::api::TrainInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TrainInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainInfo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrainInfo_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_TrainStats_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TrainStats_default_instance_;
    new (ptr) ::clarifai::api::TrainStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TrainStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainStats_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrainStats_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_LossCurveEntry_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_TrendingMetric_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TrendingMetric_default_instance_;
    new (ptr) ::clarifai::api::TrendingMetric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TrendingMetric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrendingMetric_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrendingMetric_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_User_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_User_default_instance_;
    new (ptr) ::clarifai::api::User();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::User::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_User_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_User_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_EmailAddress_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Visibility_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_UserDetail_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_UserAppIDSet_default_instance_;
    new (ptr) ::clarifai::api::UserAppIDSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::UserAppIDSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_UserDetail_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_UserDetail_default_instance_;
    new (ptr) ::clarifai::api::UserDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::UserDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UserDetail_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UserDetail_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_EmailAddress_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_Video_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Video_default_instance_;
    new (ptr) ::clarifai::api::Video();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Video::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Video_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Video_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_HostedURL_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_VideoInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_VideoInfo_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_VideoInfo_default_instance_;
    new (ptr) ::clarifai::api::VideoInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::VideoInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoInfo_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoInfo_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_Visibility_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Visibility_default_instance_;
    new (ptr) ::clarifai::api::Visibility();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Visibility::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Visibility_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Visibility_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_W3C_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_W3C_default_instance_;
    new (ptr) ::clarifai::api::W3C();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::W3C::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_W3C_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_W3C_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Workflow_default_instance_;
    new (ptr) ::clarifai::api::Workflow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Workflow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_WorkflowNode_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_Visibility_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_WorkflowVersion_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_WorkflowNode_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_WorkflowNode_default_instance_;
    new (ptr) ::clarifai::api::WorkflowNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::WorkflowNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WorkflowNode_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WorkflowNode_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_NodeInput_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_WorkflowResult_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_WorkflowResult_default_instance_;
    new (ptr) ::clarifai::api::WorkflowResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::WorkflowResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_WorkflowResult_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_WorkflowResult_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_WorkflowResultsSimilarity_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_WorkflowResultsSimilarity_default_instance_;
    new (ptr) ::clarifai::api::WorkflowResultsSimilarity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::WorkflowResultsSimilarity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkflowResultsSimilarity_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkflowResultsSimilarity_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_WorkflowState_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_WorkflowState_default_instance_;
    new (ptr) ::clarifai::api::WorkflowState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::WorkflowState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkflowState_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkflowState_proto_2fclarifai_2fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_WorkflowVersion_proto_2fclarifai_2fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_WorkflowVersion_default_instance_;
    new (ptr) ::clarifai::api::WorkflowVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::WorkflowVersion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_WorkflowVersion_proto_2fclarifai_2fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_WorkflowVersion_proto_2fclarifai_2fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Visibility_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_WorkflowNode_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[132];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, input_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, annotation_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, embed_model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, trusted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, input_level_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, consensus_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, default_language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, default_workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, legal_consent_status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, sample_ms_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, data_tier_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, is_starred_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, star_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, notes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppQuery, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, app_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, user_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, endpoints_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, deleted_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, app_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, app_owner_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, endpoints_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, base64_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, allow_duplicate_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, hosted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, audio_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AudioInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AudioInfo, audio_format_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AudioInfo, sample_rate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AudioInfo, duration_seconds_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AudioInfo, bit_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Track, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Track, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Track, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Track, time_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Track, quality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, score_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, hits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, projection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Color, raw_hex_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Color, w3c_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Color, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::W3C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::W3C, hex_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::W3C, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserAppIDSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserAppIDSet, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserAppIDSet, app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAction, op_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAction, merge_conflict_resolution_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAction, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, definition_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, vocab_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptCount, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptCount, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptCount, concept_type_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptCount, detail_concept_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptTypeCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptTypeCount, positive_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptTypeCount, negative_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DetailConceptCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DetailConceptCount, processed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DetailConceptCount, to_process_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DetailConceptCount, errors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DetailConceptCount, processing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptQuery, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptQuery, language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptQuery, workflow_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, subject_concept_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, object_concept_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, predicate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, knowledge_graph_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, visibility_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, examples_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, sampled_examples_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptMappingJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptMappingJob, knowledge_graph_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptMappingJob, concept_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptLanguage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptLanguage, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptLanguage, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptLanguage, definition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, image_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, video_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, geo_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, colors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, clusters_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, embeddings_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, regions_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, frames_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, text_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, audio_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, tracks_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, time_segments_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, hits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, region_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, track_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, bounding_box_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, mask_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, polygon_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, point_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, span_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BoundingBox, top_row_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BoundingBox, left_col_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BoundingBox, bottom_row_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BoundingBox, right_col_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FrameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FrameInfo, index_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FrameInfo, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Frame, frame_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Frame, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Frame, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Mask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Mask, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Polygon, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Point, row_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Point, col_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Point, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Span, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Span, char_start_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Span, char_end_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Span, raw_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Token, char_start_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Token, char_end_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Token, raw_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Embedding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Embedding, vector_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Embedding, num_dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoPoint, longitude_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoPoint, latitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoLimit, type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoLimit, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoBoxedPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoBoxedPoint, geo_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Geo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Geo, geo_point_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Geo, geo_limit_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Geo, geo_box_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, base64_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, allow_duplicate_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, hosted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, image_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImageInfo, width_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImageInfo, height_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImageInfo, format_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImageInfo, color_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HostedURL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HostedURL, prefix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HostedURL, suffix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HostedURL, sizes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HostedURL, crossorigin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, dataset_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, processed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, to_process_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, errors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, processing_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, reindexed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, to_reindex_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, reindex_errors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, reindexing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, saved_search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, dataset_id_),
  offsetof(::clarifai::api::DatasetVersionDefaultTypeInternal, annotation_filter_config_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, embed_model_version_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, data_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilterConfig, annotation_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, unlabeled_inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, inputs_with_metadata_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, inputs_with_geo_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, regions_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, region_location_matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, bounding_boxes_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, polygons_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, points_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, masks_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, region_inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, region_frames_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, frames_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, frame_inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, embeddings_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, positive_input_tags_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, positive_region_tags_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, positive_frame_tags_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResultsSimilarity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResultsSimilarity, probe_input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResultsSimilarity, pool_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, endpoints_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, apps_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, expires_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, authorized_idp_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, output_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, model_version_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, display_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, input_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, train_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, model_type_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, task_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, notes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, toolkits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, use_cases_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, languages_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, is_starred_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, star_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, import_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, output_config_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, message_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, fields_map_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputInfo, fields_map_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputInfo, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainInfo, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImportInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImportInfo, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, concepts_mutually_exclusive_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, closed_environment_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, existing_model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, hyper_parameters_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, max_concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, min_value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, select_concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, training_timeout_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, sample_ms_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, hyper_params_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, embed_model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, fail_on_missing_positive_examples_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, model_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, title_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, input_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, output_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, trainable_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, creatable_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, internal_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, model_type_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, requires_sequential_frames_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, evaluable_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, expected_pretrained_input_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, expected_pretrained_output_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, path_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, field_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, default_value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, placeholder_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, model_type_enum_options_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, internal_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, required_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, model_type_range_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeRangeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeRangeInfo, min_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeRangeInfo, max_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeRangeInfo, step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, aliases_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, model_type_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, internal_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOptionAlias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOptionAlias, id_int_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelQuery, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelQuery, model_type_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, active_concept_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, total_input_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, completed_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, license_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, dataset_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, input_fields_map_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, output_fields_map_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, data_provider_params_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, model_zip_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, overwrite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainStats, loss_curve_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LossCurveEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LossCurveEntry, epoch_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LossCurveEntry, global_step_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LossCurveEntry, cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelCount, concept_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelCount, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelDistribution, positive_label_counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrixEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrixEntry, row_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrixEntry, col_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrixEntry, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrix, matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrix, concept_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrixEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrixEntry, predicted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrixEntry, actual_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrixEntry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrix, matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrix, concept_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, fpr_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, tpr_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, thresholds_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, fpr_per_image_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, fpr_per_object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PrecisionRecallCurve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PrecisionRecallCurve, recall_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PrecisionRecallCurve, precision_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PrecisionRecallCurve, thresholds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, num_pos_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, num_neg_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, num_tot_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, roc_auc_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, f1_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, concept_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, roc_curve_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, precision_recall_curve_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, avg_precision_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, area_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, area_min_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, area_max_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, iou_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, mot_mota_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, mot_num_switches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, morse_frag_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, avg_precision_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, aiid_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, unique_switch_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, predicted_concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, ground_truth_concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, annotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, k_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, recall_vs_brute_force_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, kendall_tau_vs_brute_force_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, most_frequent_code_percent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, lopq_ndcg_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, brute_force_ndcg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, top1_accuracy_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, top5_accuracy_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, macro_avg_roc_auc_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, macro_std_roc_auc_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, macro_avg_f1_score_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, macro_std_f1_score_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, macro_avg_precision_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, macro_avg_recall_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, mean_avg_precision_iou_50_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, mean_avg_precision_iou_range_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, lopq_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, summary_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, confusion_matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, cooccurrence_matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, label_counts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, binary_metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, test_set_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, metrics_by_area_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, metrics_by_class_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, tracker_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, confusion_matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, cooccurrence_matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, label_counts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, binary_metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, test_set_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, metrics_by_area_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, metrics_by_class_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ScopeDeps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ScopeDeps, scope_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ScopeDeps, depending_scopes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EndpointDeps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EndpointDeps, endpoint_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EndpointDeps, depending_scopes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, score_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, annotation_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::And, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::And, input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::And, output_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::And, negate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::And, annotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Query, ands_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Query, language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Query, filters_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Query, ranks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, application_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, as_of_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, git_hash_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, algorithm_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, save_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, min_value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, visibility_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Filter, negate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Filter, annotation_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Filter, input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Filter, last_updated_time_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeRange, start_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeRange, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Rank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Rank, negate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Rank, annotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, ground_truth_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, search_to_eval_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, active_concept_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, visibility_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, raw_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, allow_duplicate_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, hosted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, text_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TextInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TextInfo, char_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TextInfo, encoding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, primary_email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, first_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, last_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, company_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, job_title_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, job_role_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, bill_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, date_gdpr_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, date_tos_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, date_marketing_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, email_addresses_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, is_org_admin_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, two_factor_auth_enabled_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, teams_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, is_starred_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, star_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, user_detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, primary_email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, bill_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, date_gdpr_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, date_tos_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, date_marketing_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, email_addresses_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, is_org_admin_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, two_factor_auth_enabled_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, teams_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, country_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EmailAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EmailAddress, email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EmailAddress, primary_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EmailAddress, verified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Password, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Password, plaintext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, minimum_length_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, maximum_length_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, upper_case_needed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, lower_case_needed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, numeric_needed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, non_alphanumeric_needed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, password_reuse_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, exclude_names_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, exclude_email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, no_confusing_letters_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, no_simple_passwords_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, no_common_vocabs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, no_overlap_with_old_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, password_lifespan_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, base64_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, allow_duplicate_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, hosted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, video_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, width_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, height_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, fps_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, video_format_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, bit_rate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, frame_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, duration_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, nodes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, version_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, is_starred_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, star_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, notes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, use_cases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, nodes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, license_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, node_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, suppress_output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::NodeInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::NodeInput, node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, outputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, suppress_output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowState, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, new_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, new_app_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, last_modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, filter_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, existing_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, copy_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, copy_concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, copy_annotations_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, copy_models_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, copy_workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, auto_release_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, allow_empty_tag_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, desired_fulfill_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, estimate_fulfill_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, task_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, modified_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, worker_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, concept_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, input_source_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, sample_ms_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, ai_assistant_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, review_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, ai_assist_params_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AiAssistParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AiAssistParameters, min_threshold_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AiAssistParameters, max_threshold_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AiAssistParameters, concept_relation_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, strategy_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, user_ids_),
  offsetof(::clarifai::api::TaskWorkerDefaultTypeInternal, partitioned_strategy_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, strategy_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorkerPartitionedStrategyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorkerPartitionedStrategyInfo, type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorkerPartitionedStrategyInfo, workers_per_input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorkerPartitionedStrategyInfo, weights_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskInputSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskInputSource, type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskInputSource, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, strategy_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, user_ids_),
  offsetof(::clarifai::api::TaskReviewDefaultTypeInternal, manual_strategy_info_),
  offsetof(::clarifai::api::TaskReviewDefaultTypeInternal, consensus_strategy_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, strategy_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReviewManualStrategyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReviewManualStrategyInfo, sample_percentage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReviewConsensusStrategyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReviewConsensusStrategyInfo, approval_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskAIAssistant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskAIAssistant, workflow_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, pending_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, awaiting_review_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, success_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, review_denied_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, awaiting_consensus_review_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, pre_queue_workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, post_queue_workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, collector_source_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CollectorSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CollectorSource, api_post_model_outputs_collector_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, model_user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, model_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, post_inputs_key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValue, time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValue, value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValue, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateResult, stat_value_aggregates_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateResult, stat_value_aggregate_query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregate, time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregate, aggregate_value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregate, count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregate, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, tags_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, tag_groups_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, stat_value_agg_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, stat_time_agg_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, start_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Visibility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Visibility, gettable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrendingMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrendingMetric, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrendingMetric, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrendingMetric, object_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrendingMetric, view_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeSegment, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeSegment, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeSegment, time_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeInfo, num_frames_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeInfo, begin_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeInfo, end_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clarifai::api::Annotation)},
  { 19, -1, sizeof(::clarifai::api::App)},
  { 40, -1, sizeof(::clarifai::api::AppQuery)},
  { 46, -1, sizeof(::clarifai::api::Collaborator)},
  { 59, -1, sizeof(::clarifai::api::Collaboration)},
  { 69, -1, sizeof(::clarifai::api::Audio)},
  { 79, -1, sizeof(::clarifai::api::AudioInfo)},
  { 88, -1, sizeof(::clarifai::api::Track)},
  { 97, -1, sizeof(::clarifai::api::Cluster)},
  { 107, -1, sizeof(::clarifai::api::Color)},
  { 115, -1, sizeof(::clarifai::api::W3C)},
  { 122, -1, sizeof(::clarifai::api::UserAppIDSet)},
  { 129, -1, sizeof(::clarifai::api::PatchAction)},
  { 137, -1, sizeof(::clarifai::api::Concept)},
  { 152, -1, sizeof(::clarifai::api::ConceptCount)},
  { 161, -1, sizeof(::clarifai::api::ConceptTypeCount)},
  { 168, -1, sizeof(::clarifai::api::DetailConceptCount)},
  { 177, -1, sizeof(::clarifai::api::ConceptQuery)},
  { 185, -1, sizeof(::clarifai::api::ConceptRelation)},
  { 196, -1, sizeof(::clarifai::api::KnowledgeGraph)},
  { 206, -1, sizeof(::clarifai::api::ConceptMappingJob)},
  { 213, -1, sizeof(::clarifai::api::ConceptLanguage)},
  { 221, -1, sizeof(::clarifai::api::Data)},
  { 241, -1, sizeof(::clarifai::api::Region)},
  { 251, -1, sizeof(::clarifai::api::RegionInfo)},
  { 262, -1, sizeof(::clarifai::api::BoundingBox)},
  { 271, -1, sizeof(::clarifai::api::FrameInfo)},
  { 278, -1, sizeof(::clarifai::api::Frame)},
  { 286, -1, sizeof(::clarifai::api::Mask)},
  { 292, -1, sizeof(::clarifai::api::Polygon)},
  { 298, -1, sizeof(::clarifai::api::Point)},
  { 306, -1, sizeof(::clarifai::api::Span)},
  { 314, -1, sizeof(::clarifai::api::Token)},
  { 322, -1, sizeof(::clarifai::api::Embedding)},
  { 329, -1, sizeof(::clarifai::api::GeoPoint)},
  { 336, -1, sizeof(::clarifai::api::GeoLimit)},
  { 343, -1, sizeof(::clarifai::api::GeoBoxedPoint)},
  { 349, -1, sizeof(::clarifai::api::Geo)},
  { 357, -1, sizeof(::clarifai::api::Image)},
  { 367, -1, sizeof(::clarifai::api::ImageInfo)},
  { 376, -1, sizeof(::clarifai::api::HostedURL)},
  { 385, -1, sizeof(::clarifai::api::Input)},
  { 396, -1, sizeof(::clarifai::api::InputCount)},
  { 409, -1, sizeof(::clarifai::api::AnnotationFilter)},
  { 420, -1, sizeof(::clarifai::api::DatasetVersion)},
  { 439, -1, sizeof(::clarifai::api::AnnotationFilterConfig)},
  { 445, -1, sizeof(::clarifai::api::DatasetVersionMetrics)},
  { 468, -1, sizeof(::clarifai::api::WorkflowResultsSimilarity)},
  { 475, -1, sizeof(::clarifai::api::Key)},
  { 489, -1, sizeof(::clarifai::api::Model)},
  { 517, -1, sizeof(::clarifai::api::ModelReference)},
  { 527, -1, sizeof(::clarifai::api::ModelVersionInputExample)},
  { 538, -1, sizeof(::clarifai::api::OutputInfo)},
  { 548, -1, sizeof(::clarifai::api::InputInfo)},
  { 555, -1, sizeof(::clarifai::api::TrainInfo)},
  { 561, -1, sizeof(::clarifai::api::ImportInfo)},
  { 567, -1, sizeof(::clarifai::api::OutputConfig)},
  { 586, -1, sizeof(::clarifai::api::ModelType)},
  { 604, -1, sizeof(::clarifai::api::ModelTypeField)},
  { 618, -1, sizeof(::clarifai::api::ModelTypeRangeInfo)},
  { 626, -1, sizeof(::clarifai::api::ModelTypeEnumOption)},
  { 636, -1, sizeof(::clarifai::api::ModelTypeEnumOptionAlias)},
  { 642, -1, sizeof(::clarifai::api::ModelQuery)},
  { 649, -1, sizeof(::clarifai::api::ModelVersion)},
  { 669, -1, sizeof(::clarifai::api::PretrainedModelConfig)},
  { 681, -1, sizeof(::clarifai::api::TrainStats)},
  { 687, -1, sizeof(::clarifai::api::LossCurveEntry)},
  { 695, -1, sizeof(::clarifai::api::LabelCount)},
  { 702, -1, sizeof(::clarifai::api::LabelDistribution)},
  { 708, -1, sizeof(::clarifai::api::CooccurrenceMatrixEntry)},
  { 716, -1, sizeof(::clarifai::api::CooccurrenceMatrix)},
  { 723, -1, sizeof(::clarifai::api::ConfusionMatrixEntry)},
  { 731, -1, sizeof(::clarifai::api::ConfusionMatrix)},
  { 738, -1, sizeof(::clarifai::api::ROC)},
  { 748, -1, sizeof(::clarifai::api::PrecisionRecallCurve)},
  { 756, -1, sizeof(::clarifai::api::BinaryMetrics)},
  { 774, -1, sizeof(::clarifai::api::TrackerMetrics)},
  { 785, -1, sizeof(::clarifai::api::EvalTestSetEntry)},
  { 796, -1, sizeof(::clarifai::api::LOPQEvalResult)},
  { 807, -1, sizeof(::clarifai::api::MetricsSummary)},
  { 823, -1, sizeof(::clarifai::api::EvalMetrics)},
  { 839, -1, sizeof(::clarifai::api::FieldsValue)},
  { 851, -1, sizeof(::clarifai::api::Output)},
  { 862, -1, sizeof(::clarifai::api::ScopeDeps)},
  { 869, -1, sizeof(::clarifai::api::EndpointDeps)},
  { 876, -1, sizeof(::clarifai::api::Hit)},
  { 886, -1, sizeof(::clarifai::api::And)},
  { 895, -1, sizeof(::clarifai::api::Query)},
  { 904, -1, sizeof(::clarifai::api::Search)},
  { 921, -1, sizeof(::clarifai::api::Filter)},
  { 930, -1, sizeof(::clarifai::api::TimeRange)},
  { 937, -1, sizeof(::clarifai::api::Rank)},
  { 944, -1, sizeof(::clarifai::api::AnnotationSearchMetrics)},
  { 955, -1, sizeof(::clarifai::api::Text)},
  { 965, -1, sizeof(::clarifai::api::TextInfo)},
  { 972, -1, sizeof(::clarifai::api::User)},
  { 998, -1, sizeof(::clarifai::api::UserDetail)},
  { 1015, -1, sizeof(::clarifai::api::EmailAddress)},
  { 1023, -1, sizeof(::clarifai::api::Password)},
  { 1029, -1, sizeof(::clarifai::api::PasswordViolations)},
  { 1048, -1, sizeof(::clarifai::api::Video)},
  { 1059, -1, sizeof(::clarifai::api::VideoInfo)},
  { 1071, -1, sizeof(::clarifai::api::Workflow)},
  { 1090, -1, sizeof(::clarifai::api::WorkflowVersion)},
  { 1106, -1, sizeof(::clarifai::api::WorkflowNode)},
  { 1115, -1, sizeof(::clarifai::api::NodeInput)},
  { 1121, -1, sizeof(::clarifai::api::WorkflowResult)},
  { 1133, -1, sizeof(::clarifai::api::WorkflowState)},
  { 1139, -1, sizeof(::clarifai::api::AppDuplication)},
  { 1152, -1, sizeof(::clarifai::api::AppDuplicationFilters)},
  { 1162, -1, sizeof(::clarifai::api::LabelOrder)},
  { 1177, -1, sizeof(::clarifai::api::Task)},
  { 1199, -1, sizeof(::clarifai::api::AiAssistParameters)},
  { 1207, -1, sizeof(::clarifai::api::TaskWorker)},
  { 1216, -1, sizeof(::clarifai::api::TaskWorkerPartitionedStrategyInfo)},
  { 1224, -1, sizeof(::clarifai::api::TaskInputSource)},
  { 1231, -1, sizeof(::clarifai::api::TaskReview)},
  { 1241, -1, sizeof(::clarifai::api::TaskReviewManualStrategyInfo)},
  { 1247, -1, sizeof(::clarifai::api::TaskReviewConsensusStrategyInfo)},
  { 1253, -1, sizeof(::clarifai::api::TaskAIAssistant)},
  { 1259, -1, sizeof(::clarifai::api::TaskStatusCountPerUser)},
  { 1270, -1, sizeof(::clarifai::api::Collector)},
  { 1282, -1, sizeof(::clarifai::api::CollectorSource)},
  { 1288, -1, sizeof(::clarifai::api::APIPostModelOutputsCollectorSource)},
  { 1298, -1, sizeof(::clarifai::api::StatValue)},
  { 1306, -1, sizeof(::clarifai::api::StatValueAggregateResult)},
  { 1313, -1, sizeof(::clarifai::api::StatValueAggregate)},
  { 1322, -1, sizeof(::clarifai::api::StatValueAggregateQuery)},
  { 1333, -1, sizeof(::clarifai::api::Visibility)},
  { 1339, -1, sizeof(::clarifai::api::TrendingMetric)},
  { 1348, -1, sizeof(::clarifai::api::TimeSegment)},
  { 1356, -1, sizeof(::clarifai::api::TimeInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Annotation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_App_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AppQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Collaborator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Collaboration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Audio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AudioInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Track_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Cluster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_W3C_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_UserAppIDSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Concept_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConceptCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConceptTypeCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DetailConceptCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConceptQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConceptRelation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_KnowledgeGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConceptMappingJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConceptLanguage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Region_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_RegionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_BoundingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_FrameInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Frame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Mask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Span_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Token_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Embedding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GeoPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GeoLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GeoBoxedPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Geo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ImageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_HostedURL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Input_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_InputCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AnnotationFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DatasetVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AnnotationFilterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DatasetVersionMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_WorkflowResultsSimilarity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Key_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Model_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelVersionInputExample_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_OutputInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_InputInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TrainInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ImportInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_OutputConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelTypeField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelTypeRangeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelTypeEnumOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelTypeEnumOptionAlias_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PretrainedModelConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TrainStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_LossCurveEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_LabelCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_LabelDistribution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_CooccurrenceMatrixEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_CooccurrenceMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConfusionMatrixEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConfusionMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ROC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PrecisionRecallCurve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_BinaryMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TrackerMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_EvalTestSetEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_LOPQEvalResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MetricsSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_EvalMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_FieldsValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Output_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ScopeDeps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_EndpointDeps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Hit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_And_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Query_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Search_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TimeRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Rank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AnnotationSearchMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Text_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TextInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_UserDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_EmailAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Password_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PasswordViolations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Video_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_VideoInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Workflow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_WorkflowVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_WorkflowNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_NodeInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_WorkflowResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_WorkflowState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AppDuplication_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AppDuplicationFilters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_LabelOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AiAssistParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskWorker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskWorkerPartitionedStrategyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskInputSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskReview_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskReviewManualStrategyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskReviewConsensusStrategyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskAIAssistant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskStatusCountPerUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Collector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_CollectorSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_APIPostModelOutputsCollectorSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_StatValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_StatValueAggregateResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_StatValueAggregate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_StatValueAggregateQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Visibility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TrendingMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TimeSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TimeInfo_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fapi_2fresources_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"proto/clarifai/api/resources.proto\022\014cl"
  "arifai.api\032&proto/clarifai/api/status/st"
  "atus.proto\032)proto/clarifai/api/utils/ext"
  "ensions.proto\032\030proto/utils/matrix.proto\032"
  "(proto/clarifai/auth/util/extension.prot"
  "o\032\034google/protobuf/struct.proto\032\037google/"
  "protobuf/timestamp.proto\032\036google/protobu"
  "f/wrappers.proto\"\345\003\n\nAnnotation\022\n\n\002id\030\001 "
  "\001(\t\022\020\n\010input_id\030\002 \001(\t\022 \n\004data\030\003 \001(\0132\022.cl"
  "arifai.api.Data\0220\n\017annotation_info\030\r \001(\013"
  "2\027.google.protobuf.Struct\022\017\n\007user_id\030\017 \001"
  "(\t\022\030\n\020model_version_id\030\020 \001(\t\022\"\n\026embed_mo"
  "del_version_id\030\016 \001(\tB\002\030\001\022+\n\006status\030\007 \001(\013"
  "2\033.clarifai.api.status.Status\022.\n\ncreated"
  "_at\030\010 \001(\0132\032.google.protobuf.Timestamp\022/\n"
  "\013modified_at\030\t \001(\0132\032.google.protobuf.Tim"
  "estamp\022\023\n\007trusted\030\n \001(\010B\002\030\001\022\023\n\013input_lev"
  "el\030\021 \001(\010\022/\n\016consensus_info\030\022 \001(\0132\027.googl"
  "e.protobuf.Struct\022\017\n\007task_id\030\023 \001(\tJ\004\010\004\020\005"
  "J\004\010\005\020\006J\004\010\006\020\007J\004\010\013\020\014J\004\010\014\020\r\"\306\003\n\003App\022\n\n\002id\030\001"
  " \001(\t\022\014\n\004name\030\002 \001(\t\022\030\n\020default_language\030\003"
  " \001(\t\022\033\n\023default_workflow_id\030\004 \001(\t\022\017\n\007use"
  "r_id\030\005 \001(\t\022.\n\ncreated_at\030\006 \001(\0132\032.google."
  "protobuf.Timestamp\022/\n\013modified_at\030\021 \001(\0132"
  "\032.google.protobuf.Timestamp\022\034\n\024legal_con"
  "sent_status\030\007 \001(\r\022)\n\010metadata\030\r \001(\0132\027.go"
  "ogle.protobuf.Struct\022\023\n\013description\030\016 \001("
  "\t\022\021\n\tsample_ms\030\017 \001(\r\022,\n\nvisibility\030\020 \001(\013"
  "2\030.clarifai.api.Visibility\022\024\n\014data_tier_"
  "id\030\022 \001(\t\022\022\n\nis_starred\030\023 \001(\010\022\022\n\nstar_cou"
  "nt\030\024 \001(\005\022\r\n\005notes\030\025 \001(\tJ\004\010\n\020\013J\004\010\013\020\014J\004\010\014\020"
  "\r\"\030\n\010AppQuery\022\014\n\004name\030\001 \001(\t\"\220\002\n\014Collabor"
  "ator\022\n\n\002id\030\001 \001(\t\022\036\n\003app\030\002 \001(\0132\021.clarifai"
  ".api.App\022 \n\004user\030\003 \001(\0132\022.clarifai.api.Us"
  "er\022\016\n\006scopes\030\004 \003(\t\022\021\n\tendpoints\030\005 \003(\t\022.\n"
  "\ncreated_at\030\006 \001(\0132\032.google.protobuf.Time"
  "stamp\022/\n\013modified_at\030\007 \001(\0132\032.google.prot"
  "obuf.Timestamp\022.\n\ndeleted_at\030\010 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\"\251\001\n\rCollaboration"
  "\022\036\n\003app\030\001 \001(\0132\021.clarifai.api.App\022%\n\tapp_"
  "owner\030\002 \001(\0132\022.clarifai.api.User\022\016\n\006scope"
  "s\030\003 \003(\t\022\021\n\tendpoints\030\004 \003(\t\022.\n\ncreated_at"
  "\030\005 \001(\0132\032.google.protobuf.Timestamp\"\227\001\n\005A"
  "udio\022\013\n\003url\030\001 \001(\t\022\016\n\006base64\030\002 \001(\014\022\033\n\023all"
  "ow_duplicate_url\030\004 \001(\010\022\'\n\006hosted\030\005 \001(\0132\027"
  ".clarifai.api.HostedURL\022+\n\naudio_info\030\006 "
  "\001(\0132\027.clarifai.api.AudioInfo\"b\n\tAudioInf"
  "o\022\024\n\014audio_format\030\001 \001(\t\022\023\n\013sample_rate\030\002"
  " \001(\005\022\030\n\020duration_seconds\030\003 \001(\002\022\020\n\010bit_ra"
  "te\030\004 \001(\005\"w\n\005Track\022\n\n\002id\030\001 \001(\t\022 \n\004data\030\002 "
  "\001(\0132\022.clarifai.api.Data\022)\n\ttime_info\030\004 \001"
  "(\0132\026.clarifai.api.TimeInfo\022\017\n\007quality\030\005 "
  "\001(\002J\004\010\003\020\004\"h\n\007Cluster\022\n\n\002id\030\001 \001(\t\022\r\n\005coun"
  "t\030\002 \001(\r\022\r\n\005score\030\003 \001(\002\022\037\n\004hits\030\004 \003(\0132\021.c"
  "larifai.api.Hit\022\022\n\nprojection\030\005 \003(\002\"M\n\005C"
  "olor\022\017\n\007raw_hex\030\001 \001(\t\022\036\n\003w3c\030\002 \001(\0132\021.cla"
  "rifai.api.W3C\022\023\n\005value\030\003 \001(\002B\004\200\265\030\001\" \n\003W3"
  "C\022\013\n\003hex\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"/\n\014UserAppI"
  "DSet\022\017\n\007user_id\030\001 \001(\t\022\016\n\006app_id\030\002 \001(\t\"J\n"
  "\013PatchAction\022\n\n\002op\030\001 \001(\t\022!\n\031merge_confli"
  "ct_resolution\030\002 \001(\t\022\014\n\004path\030\003 \001(\t\"\366\001\n\007Co"
  "ncept\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\032\n\005value"
  "\030\003 \001(\002B\013\325\265\030\000\000\200\?\200\265\030\001\022.\n\ncreated_at\030\004 \001(\0132"
  "\032.google.protobuf.Timestamp\022\020\n\010language\030"
  "\005 \001(\t\022\016\n\006app_id\030\006 \001(\t\022\022\n\ndefinition\030\007 \001("
  "\t\022\020\n\010vocab_id\030\010 \001(\t\022,\n\nvisibility\030\t \001(\0132"
  "\030.clarifai.api.Visibility\022\017\n\007user_id\030\n \001"
  "(\t\"\244\001\n\014ConceptCount\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030"
  "\002 \001(\t\022:\n\022concept_type_count\030\003 \001(\0132\036.clar"
  "ifai.api.ConceptTypeCount\022>\n\024detail_conc"
  "ept_count\030\004 \001(\0132 .clarifai.api.DetailCon"
  "ceptCount\"B\n\020ConceptTypeCount\022\026\n\010positiv"
  "e\030\001 \001(\rB\004\200\265\030\001\022\026\n\010negative\030\002 \001(\rB\004\200\265\030\001\"\337\001"
  "\n\022DetailConceptCount\0221\n\tprocessed\030\001 \001(\0132"
  "\036.clarifai.api.ConceptTypeCount\0222\n\nto_pr"
  "ocess\030\002 \001(\0132\036.clarifai.api.ConceptTypeCo"
  "unt\022.\n\006errors\030\003 \001(\0132\036.clarifai.api.Conce"
  "ptTypeCount\0222\n\nprocessing\030\004 \001(\0132\036.clarif"
  "ai.api.ConceptTypeCount\"C\n\014ConceptQuery\022"
  "\014\n\004name\030\001 \001(\t\022\020\n\010language\030\002 \001(\t\022\023\n\013workf"
  "low_id\030\003 \001(\t\"\331\001\n\017ConceptRelation\022\n\n\002id\030\001"
  " \001(\t\022.\n\017subject_concept\030\002 \001(\0132\025.clarifai"
  ".api.Concept\022-\n\016object_concept\030\003 \001(\0132\025.c"
  "larifai.api.Concept\022\021\n\tpredicate\030\004 \001(\t\022\032"
  "\n\022knowledge_graph_id\030\005 \001(\t\022,\n\nvisibility"
  "\030\006 \001(\0132\030.clarifai.api.Visibility\"y\n\016Know"
  "ledgeGraph\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\023\n\013"
  "description\030\003 \001(\t\022\027\n\017examples_app_id\030\004 \001"
  "(\t\022\037\n\027sampled_examples_app_id\030\005 \001(\t\"D\n\021C"
  "onceptMappingJob\022\032\n\022knowledge_graph_id\030\001"
  " \001(\t\022\023\n\013concept_ids\030\002 \003(\t\"\?\n\017ConceptLang"
  "uage\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\022\n\ndefini"
  "tion\030\003 \001(\t\"\323\004\n\004Data\022\"\n\005image\030\001 \001(\0132\023.cla"
  "rifai.api.Image\022\"\n\005video\030\002 \001(\0132\023.clarifa"
  "i.api.Video\022\'\n\010concepts\030\003 \003(\0132\025.clarifai"
  ".api.Concept\022)\n\010metadata\030\005 \001(\0132\027.google."
  "protobuf.Struct\022\036\n\003geo\030\006 \001(\0132\021.clarifai."
  "api.Geo\022#\n\006colors\030\007 \003(\0132\023.clarifai.api.C"
  "olor\022\'\n\010clusters\030\010 \003(\0132\025.clarifai.api.Cl"
  "uster\022+\n\nembeddings\030\t \003(\0132\027.clarifai.api"
  ".Embedding\022%\n\007regions\030\013 \003(\0132\024.clarifai.a"
  "pi.Region\022#\n\006frames\030\014 \003(\0132\023.clarifai.api"
  ".Frame\022 \n\004text\030\r \001(\0132\022.clarifai.api.Text"
  "\022\"\n\005audio\030\016 \001(\0132\023.clarifai.api.Audio\022#\n\006"
  "tracks\030\017 \003(\0132\023.clarifai.api.Track\0220\n\rtim"
  "e_segments\030\020 \003(\0132\031.clarifai.api.TimeSegm"
  "ent\022\037\n\004hits\030\021 \003(\0132\021.clarifai.api.HitJ\004\010\004"
  "\020\005J\004\010\n\020\013\"\206\001\n\006Region\022\n\n\002id\030\001 \001(\t\022-\n\013regio"
  "n_info\030\002 \001(\0132\030.clarifai.api.RegionInfo\022 "
  "\n\004data\030\003 \001(\0132\022.clarifai.api.Data\022\r\n\005valu"
  "e\030\004 \001(\002\022\020\n\010track_id\030\005 \001(\t\"\375\001\n\nRegionInfo"
  "\022/\n\014bounding_box\030\001 \001(\0132\031.clarifai.api.Bo"
  "undingBox\022 \n\004mask\030\004 \001(\0132\022.clarifai.api.M"
  "ask\022&\n\007polygon\030\005 \001(\0132\025.clarifai.api.Poly"
  "gon\022\"\n\005point\030\006 \001(\0132\023.clarifai.api.Point\022"
  " \n\004span\030\007 \001(\0132\022.clarifai.api.Span\022\"\n\005tok"
  "en\030\010 \001(\0132\023.clarifai.api.TokenJ\004\010\002\020\003J\004\010\003\020"
  "\004\"o\n\013BoundingBox\022\025\n\007top_row\030\001 \001(\002B\004\200\265\030\001\022"
  "\026\n\010left_col\030\002 \001(\002B\004\200\265\030\001\022\030\n\nbottom_row\030\003 "
  "\001(\002B\004\200\265\030\001\022\027\n\tright_col\030\004 \001(\002B\004\200\265\030\001\"4\n\tFr"
  "ameInfo\022\023\n\005index\030\001 \001(\rB\004\200\265\030\001\022\022\n\004time\030\002 \001"
  "(\rB\004\200\265\030\001\"b\n\005Frame\022+\n\nframe_info\030\001 \001(\0132\027."
  "clarifai.api.FrameInfo\022 \n\004data\030\002 \001(\0132\022.c"
  "larifai.api.Data\022\n\n\002id\030\003 \001(\t\"0\n\004Mask\022\"\n\005"
  "image\030\002 \001(\0132\023.clarifai.api.ImageJ\004\010\001\020\002\"."
  "\n\007Polygon\022#\n\006points\030\001 \003(\0132\023.clarifai.api"
  ".Point\"8\n\005Point\022\021\n\003row\030\001 \001(\002B\004\200\265\030\001\022\021\n\003co"
  "l\030\002 \001(\002B\004\200\265\030\001\022\t\n\001z\030\003 \001(\002\"J\n\004Span\022\030\n\nchar"
  "_start\030\001 \001(\rB\004\200\265\030\001\022\026\n\010char_end\030\002 \001(\rB\004\200\265"
  "\030\001\022\020\n\010raw_text\030\003 \001(\t\"K\n\005Token\022\030\n\nchar_st"
  "art\030\001 \001(\rB\004\200\265\030\001\022\026\n\010char_end\030\002 \001(\rB\004\200\265\030\001\022"
  "\020\n\010raw_text\030\003 \001(\t\"7\n\tEmbedding\022\022\n\006vector"
  "\030\001 \003(\002B\002\020\001\022\026\n\016num_dimensions\030\002 \001(\r\";\n\010Ge"
  "oPoint\022\027\n\tlongitude\030\001 \001(\002B\004\200\265\030\001\022\026\n\010latit"
  "ude\030\002 \001(\002B\004\200\265\030\001\"-\n\010GeoLimit\022\014\n\004type\030\001 \001("
  "\t\022\023\n\005value\030\002 \001(\002B\004\200\265\030\001\":\n\rGeoBoxedPoint\022"
  ")\n\tgeo_point\030\001 \001(\0132\026.clarifai.api.GeoPoi"
  "nt\"\211\001\n\003Geo\022)\n\tgeo_point\030\001 \001(\0132\026.clarifai"
  ".api.GeoPoint\022)\n\tgeo_limit\030\002 \001(\0132\026.clari"
  "fai.api.GeoLimit\022,\n\007geo_box\030\003 \003(\0132\033.clar"
  "ifai.api.GeoBoxedPoint\"\235\001\n\005Image\022\013\n\003url\030"
  "\001 \001(\t\022\016\n\006base64\030\002 \001(\014\022\033\n\023allow_duplicate"
  "_url\030\004 \001(\010\022\'\n\006hosted\030\005 \001(\0132\027.clarifai.ap"
  "i.HostedURL\022+\n\nimage_info\030\006 \001(\0132\027.clarif"
  "ai.api.ImageInfoJ\004\010\003\020\004\"N\n\tImageInfo\022\r\n\005w"
  "idth\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\016\n\006format\030\003 \001"
  "(\t\022\022\n\ncolor_mode\030\004 \001(\t\"O\n\tHostedURL\022\016\n\006p"
  "refix\030\001 \001(\t\022\016\n\006suffix\030\002 \001(\t\022\r\n\005sizes\030\003 \003"
  "(\t\022\023\n\013crossorigin\030\004 \001(\t\"\336\001\n\005Input\022\n\n\002id\030"
  "\001 \001(\t\022 \n\004data\030\002 \001(\0132\022.clarifai.api.Data\022"
  ".\n\ncreated_at\030\004 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022/\n\013modified_at\030\005 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022+\n\006status\030\006 \001(\0132\033.clari"
  "fai.api.status.Status\022\023\n\013dataset_ids\030\007 \003"
  "(\tJ\004\010\003\020\004\"\332\001\n\nInputCount\022\027\n\tprocessed\030\001 \001"
  "(\rB\004\200\265\030\001\022\030\n\nto_process\030\002 \001(\rB\004\200\265\030\001\022\024\n\006er"
  "rors\030\003 \001(\rB\004\200\265\030\001\022\030\n\nprocessing\030\004 \001(\rB\004\200\265"
  "\030\001\022\027\n\treindexed\030\005 \001(\rB\004\200\265\030\001\022\030\n\nto_reinde"
  "x\030\006 \001(\rB\004\200\265\030\001\022\034\n\016reindex_errors\030\007 \001(\rB\004\200"
  "\265\030\001\022\030\n\nreindexing\030\010 \001(\rB\004\200\265\030\001\"\330\001\n\020Annota"
  "tionFilter\022\n\n\002id\030\001 \001(\t\022.\n\ncreated_at\030\002 \001"
  "(\0132\032.google.protobuf.Timestamp\022/\n\013modifi"
  "ed_at\030\003 \001(\0132\032.google.protobuf.Timestamp\022"
  "\017\n\007user_id\030\004 \001(\t\022\016\n\006app_id\030\005 \001(\t\022*\n\014save"
  "d_search\030\010 \001(\0132\024.clarifai.api.SearchJ\004\010\006"
  "\020\007J\004\010\007\020\010\"\211\004\n\016DatasetVersion\022\n\n\002id\030\001 \001(\t\022"
  ".\n\ncreated_at\030\002 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022/\n\013modified_at\030\003 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022\016\n\006app_id\030\004 \001(\t\022\017\n\007user"
  "_id\030\005 \001(\t\022\022\n\ndataset_id\030\006 \001(\t\022H\n\030annotat"
  "ion_filter_config\030\017 \001(\0132$.clarifai.api.A"
  "nnotationFilterConfigH\000\022+\n\006status\030\010 \001(\0132"
  "\033.clarifai.api.status.Status\022\023\n\013descript"
  "ion\030\n \001(\t\0224\n\007metrics\030\013 \001(\0132#.clarifai.ap"
  "i.DatasetVersionMetrics\022)\n\010metadata\030\014 \001("
  "\0132\027.google.protobuf.Struct\022,\n\nvisibility"
  "\030\r \001(\0132\030.clarifai.api.Visibility\022\037\n\027embe"
  "d_model_version_ids\030\016 \003(\tB\r\n\013data_config"
  "J\004\010\007\020\010J\004\010\t\020\n\"S\n\026AnnotationFilterConfig\0229"
  "\n\021annotation_filter\030\001 \001(\0132\036.clarifai.api"
  ".AnnotationFilter\"\303\010\n\025DatasetVersionMetr"
  "ics\0222\n\014inputs_count\030\001 \001(\0132\034.google.proto"
  "buf.UInt64Value\022<\n\026unlabeled_inputs_coun"
  "t\030\006 \001(\0132\034.google.protobuf.UInt64Value\022@\n"
  "\032inputs_with_metadata_count\030\010 \001(\0132\034.goog"
  "le.protobuf.UInt64Value\022;\n\025inputs_with_g"
  "eo_count\030\t \001(\0132\034.google.protobuf.UInt64V"
  "alue\0223\n\rregions_count\030\024 \001(\0132\034.google.pro"
  "tobuf.UInt64Value\022-\n\026region_location_mat"
  "rix\030\025 \001(\0132\r.MatrixUint64\022:\n\024bounding_box"
  "es_count\030\026 \001(\0132\034.google.protobuf.UInt64V"
  "alue\0224\n\016polygons_count\030\027 \001(\0132\034.google.pr"
  "otobuf.UInt64Value\0222\n\014points_count\030\030 \001(\013"
  "2\034.google.protobuf.UInt64Value\0221\n\013masks_"
  "count\030\031 \001(\0132\034.google.protobuf.UInt64Valu"
  "e\0229\n\023region_inputs_count\030< \001(\0132\034.google."
  "protobuf.UInt64Value\0229\n\023region_frames_co"
  "unt\030= \001(\0132\034.google.protobuf.UInt64Value\022"
  "2\n\014frames_count\030\036 \001(\0132\034.google.protobuf."
  "UInt64Value\0228\n\022frame_inputs_count\030F \001(\0132"
  "\034.google.protobuf.UInt64Value\0226\n\020embeddi"
  "ngs_count\030( \001(\0132\034.google.protobuf.UInt64"
  "Value\022\?\n\031positive_input_tags_count\0302 \001(\013"
  "2\034.google.protobuf.UInt64Value\022@\n\032positi"
  "ve_region_tags_count\0303 \001(\0132\034.google.prot"
  "obuf.UInt64Value\022\?\n\031positive_frame_tags_"
  "count\0304 \001(\0132\034.google.protobuf.UInt64Valu"
  "eJ\004\010\002\020\003J\004\010\003\020\004J\004\010\004\020\005J\004\010\005\020\006J\004\010\007\020\010\"n\n\031Workf"
  "lowResultsSimilarity\022(\n\013probe_input\030\001 \001("
  "\0132\023.clarifai.api.Input\022\'\n\014pool_results\030\002"
  " \003(\0132\021.clarifai.api.Hit\"\364\001\n\003Key\022\n\n\002id\030\001 "
  "\001(\t\022\014\n\004type\030\010 \001(\t\022\023\n\013description\030\002 \001(\t\022\016"
  "\n\006scopes\030\003 \003(\t\022\021\n\tendpoints\030\007 \003(\t\022\037\n\004app"
  "s\030\004 \003(\0132\021.clarifai.api.App\022.\n\ncreated_at"
  "\030\005 \001(\0132\032.google.protobuf.Timestamp\022.\n\nex"
  "pires_at\030\006 \001(\0132\032.google.protobuf.Timesta"
  "mp\022\032\n\022authorized_idp_ids\030\t \003(\t\"\330\005\n\005Model"
  "\022\n\n\002id\030\001 \001(\t\022\020\n\004name\030\002 \001(\tB\002\030\001\022.\n\ncreate"
  "d_at\030\003 \001(\0132\032.google.protobuf.Timestamp\022/"
  "\n\013modified_at\030\023 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022\024\n\006app_id\030\004 \001(\tB\004\200\265\030\001\022-\n\013output_"
  "info\030\005 \001(\0132\030.clarifai.api.OutputInfo\0221\n\r"
  "model_version\030\006 \001(\0132\032.clarifai.api.Model"
  "Version\022\030\n\014display_name\030\007 \001(\tB\002\030\001\022\017\n\007use"
  "r_id\030\t \001(\t\022+\n\ninput_info\030\014 \001(\0132\027.clarifa"
  "i.api.InputInfo\022+\n\ntrain_info\030\r \001(\0132\027.cl"
  "arifai.api.TrainInfo\022\025\n\rmodel_type_id\030\016 "
  "\001(\t\022\014\n\004task\030\032 \001(\t\022,\n\nvisibility\030\017 \001(\0132\030."
  "clarifai.api.Visibility\022\023\n\013description\030\020"
  " \001(\t\022)\n\010metadata\030\021 \001(\0132\027.google.protobuf"
  ".Struct\022\r\n\005notes\030\022 \001(\t\022\026\n\010toolkits\030\024 \003(\t"
  "B\004\200\265\030\001\022\027\n\tuse_cases\030\025 \003(\tB\004\200\265\030\001\022\027\n\tlangu"
  "ages\030\031 \003(\tB\004\200\265\030\001\022\022\n\nis_starred\030\026 \001(\010\022\022\n\n"
  "star_count\030\027 \001(\005\022-\n\013import_info\030\030 \001(\0132\030."
  "clarifai.api.ImportInfoJ\004\010\010\020\tJ\004\010\n\020\013J\004\010\013\020"
  "\014\"t\n\016ModelReference\022\n\n\002id\030\001 \001(\t\022\020\n\010model"
  "_id\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\022)\n\010"
  "metadata\030\005 \001(\0132\027.google.protobuf.Struct\""
  "\227\001\n\030ModelVersionInputExample\022\n\n\002id\030\001 \001(\t"
  "\022\020\n\010model_id\030\002 \001(\t\022\030\n\020model_version_id\030\003"
  " \001(\t\022 \n\004data\030\004 \001(\0132\022.clarifai.api.Data\022\014"
  "\n\004name\030\005 \001(\t\022\023\n\013description\030\006 \001(\t\"\324\001\n\nOu"
  "tputInfo\022 \n\004data\030\001 \001(\0132\022.clarifai.api.Da"
  "ta\0221\n\routput_config\030\002 \001(\0132\032.clarifai.api"
  ".OutputConfig\022\017\n\007message\030\003 \001(\t\022+\n\nfields"
  "_map\030\006 \001(\0132\027.google.protobuf.Struct\022\'\n\006p"
  "arams\030\007 \001(\0132\027.google.protobuf.StructJ\004\010\004"
  "\020\005J\004\010\005\020\006\"a\n\tInputInfo\022+\n\nfields_map\030\001 \001("
  "\0132\027.google.protobuf.Struct\022\'\n\006params\030\002 \001"
  "(\0132\027.google.protobuf.Struct\"4\n\tTrainInfo"
  "\022\'\n\006params\030\001 \001(\0132\027.google.protobuf.Struc"
  "t\"5\n\nImportInfo\022\'\n\006params\030\001 \001(\0132\027.google"
  ".protobuf.Struct\"\203\004\n\014OutputConfig\022)\n\033con"
  "cepts_mutually_exclusive\030\001 \001(\010B\004\200\265\030\001\022 \n\022"
  "closed_environment\030\002 \001(\010B\004\200\265\030\001\022\035\n\021existi"
  "ng_model_id\030\003 \001(\tB\002\030\001\022\020\n\010language\030\004 \001(\t\022"
  "\034\n\020hyper_parameters\030\005 \001(\tB\002\030\001\022\032\n\014max_con"
  "cepts\030\006 \001(\rB\004\200\265\030\001\022\027\n\tmin_value\030\007 \001(\002B\004\200\265"
  "\030\001\022.\n\017select_concepts\030\010 \003(\0132\025.clarifai.a"
  "pi.Concept\022\030\n\020training_timeout\030\t \001(\r\022\021\n\t"
  "sample_ms\030\n \001(\r\022-\n\014hyper_params\030\r \001(\0132\027."
  "google.protobuf.Struct\022\036\n\026embed_model_ve"
  "rsion_id\030\016 \001(\t\022)\n!fail_on_missing_positi"
  "ve_examples\030\017 \001(\010\0223\n\016model_metadata\030\021 \001("
  "\0132\027.google.protobuf.StructB\002\030\001J\004\010\013\020\014J\004\010\014"
  "\020\rJ\004\010\020\020\021J\004\010\022\020\023\"\250\003\n\tModelType\022\n\n\002id\030\001 \001(\t"
  "\022\r\n\005title\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\024\n\014"
  "input_fields\030\005 \003(\t\022\025\n\routput_fields\030\006 \003("
  "\t\022\021\n\ttrainable\030\010 \001(\010\022\021\n\tcreatable\030\t \001(\010\022"
  "\025\n\rinternal_only\030\n \001(\010\0227\n\021model_type_fie"
  "lds\030\013 \003(\0132\034.clarifai.api.ModelTypeField\022"
  "\"\n\032requires_sequential_frames\030\014 \001(\010\022\021\n\te"
  "valuable\030\r \001(\010\022A\n expected_pretrained_in"
  "put_fields\030\016 \001(\0132\027.google.protobuf.Struc"
  "t\022B\n!expected_pretrained_output_fields\030\017"
  " \001(\0132\027.google.protobuf.StructJ\004\010\007\020\010J\004\010\004\020"
  "\005\"\231\005\n\016ModelTypeField\022\014\n\004path\030\001 \001(\t\022C\n\nfi"
  "eld_type\030\002 \001(\0162/.clarifai.api.ModelTypeF"
  "ield.ModelTypeFieldType\022-\n\rdefault_value"
  "\030\003 \001(\0132\026.google.protobuf.Value\022\023\n\013descri"
  "ption\030\004 \001(\t\022\023\n\013placeholder\030\005 \001(\t\022B\n\027mode"
  "l_type_enum_options\030\006 \003(\0132!.clarifai.api"
  ".ModelTypeEnumOption\022\025\n\rinternal_only\030\007 "
  "\001(\010\022\020\n\010required\030\010 \001(\010\022\?\n\025model_type_rang"
  "e_info\030\t \001(\0132 .clarifai.api.ModelTypeRan"
  "geInfo\"\254\002\n\022ModelTypeFieldType\022!\n\035INVALID"
  "_MODEL_TYPE_FIELD_TYPE\020\000\022\013\n\007BOOLEAN\020\001\022\n\n"
  "\006STRING\020\002\022\n\n\006NUMBER\020\003\022\025\n\021ARRAY_OF_CONCEP"
  "TS\020\004\022$\n ARRAY_OF_CONCEPTS_WITH_THRESHOLD"
  "\020\005\022\t\n\005RANGE\020\007\022\010\n\004ENUM\020\010\022\021\n\rCOLLABORATORS"
  "\020\t\022\010\n\004JSON\020\n\022\024\n\020ARRAY_OF_NUMBERS\020\013\022\031\n\025WO"
  "RKFLOW_EMBED_MODELS\020\014\022\024\n\020ARRAY_OF_STRING"
  "S\020\r\022\022\n\016RECURSIVE_ENUM\020\016\"\004\010\006\020\006\"<\n\022ModelTy"
  "peRangeInfo\022\013\n\003min\030\001 \001(\002\022\013\n\003max\030\002 \001(\002\022\014\n"
  "\004step\030\003 \001(\002\"\277\001\n\023ModelTypeEnumOption\022\n\n\002i"
  "d\030\001 \001(\t\0227\n\007aliases\030\005 \003(\0132&.clarifai.api."
  "ModelTypeEnumOptionAlias\022\023\n\013description\030"
  "\002 \001(\t\0227\n\021model_type_fields\030\003 \003(\0132\034.clari"
  "fai.api.ModelTypeField\022\025\n\rinternal_only\030"
  "\004 \001(\010\"*\n\030ModelTypeEnumOptionAlias\022\016\n\006id_"
  "int\030\001 \001(\003\"7\n\nModelQuery\022\014\n\004name\030\001 \001(\t\022\025\n"
  "\rmodel_type_id\030\003 \001(\tJ\004\010\002\020\003\"\234\004\n\014ModelVers"
  "ion\022\n\n\002id\030\001 \001(\t\022.\n\ncreated_at\030\002 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022+\n\006status\030\003 \001(\0132"
  "\033.clarifai.api.status.Status\022\034\n\024active_c"
  "oncept_count\030\004 \001(\r\022*\n\007metrics\030\005 \001(\0132\031.cl"
  "arifai.api.EvalMetrics\022\031\n\021total_input_co"
  "unt\030\006 \001(\r\0220\n\014completed_at\030\n \001(\0132\032.google"
  ".protobuf.Timestamp\022\023\n\013description\030\013 \001(\t"
  "\022,\n\nvisibility\030\014 \001(\0132\030.clarifai.api.Visi"
  "bility\022\016\n\006app_id\030\r \001(\t\022\017\n\007user_id\030\016 \001(\t\022"
  "/\n\013modified_at\030\017 \001(\0132\032.google.protobuf.T"
  "imestamp\022)\n\010metadata\030\020 \001(\0132\027.google.prot"
  "obuf.Struct\022\017\n\007license\030\021 \001(\t\0225\n\017dataset_"
  "version\030\022 \001(\0132\034.clarifai.api.DatasetVers"
  "ionJ\004\010\t\020\n\"\340\001\n\025PretrainedModelConfig\022\n\n\002i"
  "d\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\0221\n\020input_fields_ma"
  "p\030\003 \001(\0132\027.google.protobuf.Struct\0222\n\021outp"
  "ut_fields_map\030\004 \001(\0132\027.google.protobuf.St"
  "ruct\022\034\n\024data_provider_params\030\005 \001(\t\022\025\n\rmo"
  "del_zip_url\030\006 \001(\t\022\021\n\toverwrite\030\007 \001(\010\">\n\n"
  "TrainStats\0220\n\nloss_curve\030\001 \003(\0132\034.clarifa"
  "i.api.LossCurveEntry\"B\n\016LossCurveEntry\022\r"
  "\n\005epoch\030\001 \001(\r\022\023\n\013global_step\030\002 \001(\r\022\014\n\004co"
  "st\030\003 \001(\002\"1\n\nLabelCount\022\024\n\014concept_name\030\001"
  " \001(\t\022\r\n\005count\030\002 \001(\r\"L\n\021LabelDistribution"
  "\0227\n\025positive_label_counts\030\001 \003(\0132\030.clarif"
  "ai.api.LabelCount\"B\n\027CooccurrenceMatrixE"
  "ntry\022\013\n\003row\030\001 \001(\t\022\013\n\003col\030\002 \001(\t\022\r\n\005count\030"
  "\003 \001(\r\"`\n\022CooccurrenceMatrix\0225\n\006matrix\030\001 "
  "\003(\0132%.clarifai.api.CooccurrenceMatrixEnt"
  "ry\022\023\n\013concept_ids\030\002 \003(\t\"N\n\024ConfusionMatr"
  "ixEntry\022\021\n\tpredicted\030\001 \001(\t\022\016\n\006actual\030\002 \001"
  "(\t\022\023\n\005value\030\004 \001(\002B\004\200\265\030\001\"Z\n\017ConfusionMatr"
  "ix\0222\n\006matrix\030\001 \003(\0132\".clarifai.api.Confus"
  "ionMatrixEntry\022\023\n\013concept_ids\030\002 \003(\t\"t\n\003R"
  "OC\022\021\n\003fpr\030\001 \003(\002B\004\200\265\030\001\022\021\n\003tpr\030\002 \003(\002B\004\200\265\030\001"
  "\022\030\n\nthresholds\030\003 \003(\002B\004\200\265\030\001\022\025\n\rfpr_per_im"
  "age\030\004 \003(\002\022\026\n\016fpr_per_object\030\005 \003(\002\"_\n\024Pre"
  "cisionRecallCurve\022\024\n\006recall\030\001 \003(\002B\004\200\265\030\001\022"
  "\027\n\tprecision\030\002 \003(\002B\004\200\265\030\001\022\030\n\nthresholds\030\003"
  " \003(\002B\004\200\265\030\001\"\352\002\n\rBinaryMetrics\022\025\n\007num_pos\030"
  "\001 \001(\rB\004\200\265\030\001\022\025\n\007num_neg\030\002 \001(\rB\004\200\265\030\001\022\025\n\007nu"
  "m_tot\030\003 \001(\rB\004\200\265\030\001\022\025\n\007roc_auc\030\004 \001(\002B\004\200\265\030\001"
  "\022\020\n\002f1\030\005 \001(\002B\004\200\265\030\001\022&\n\007concept\030\006 \001(\0132\025.cl"
  "arifai.api.Concept\022$\n\troc_curve\030\007 \001(\0132\021."
  "clarifai.api.ROC\022B\n\026precision_recall_cur"
  "ve\030\010 \001(\0132\".clarifai.api.PrecisionRecallC"
  "urve\022\025\n\ravg_precision\030\t \001(\002\022\021\n\tarea_name"
  "\030\n \001(\t\022\020\n\010area_min\030\013 \001(\001\022\020\n\010area_max\030\014 \001"
  "(\001\022\013\n\003iou\030\r \001(\002\"\221\001\n\016TrackerMetrics\022\020\n\010mo"
  "t_mota\030\001 \001(\002\022\030\n\020mot_num_switches\030\002 \001(\005\022\022"
  "\n\nmorse_frag\030\003 \001(\002\022\025\n\ravg_precision\030\004 \001("
  "\002\022\014\n\004aiid\030\005 \001(\t\022\032\n\022unique_switch_rate\030\006 "
  "\001(\002\"\356\001\n\020EvalTestSetEntry\022\016\n\002id\030\001 \001(\tB\002\030\001"
  "\022\017\n\003url\030\002 \001(\tB\002\030\001\022\"\n\005input\030\006 \001(\0132\023.clari"
  "fai.api.Input\0221\n\022predicted_concepts\030\003 \003("
  "\0132\025.clarifai.api.Concept\0224\n\025ground_truth"
  "_concepts\030\004 \003(\0132\025.clarifai.api.Concept\022,"
  "\n\nannotation\030\005 \001(\0132\030.clarifai.api.Annota"
  "tion\"\315\001\n\016LOPQEvalResult\022\t\n\001k\030\001 \001(\005\022#\n\025re"
  "call_vs_brute_force\030\002 \001(\002B\004\200\265\030\001\022(\n\032kenda"
  "ll_tau_vs_brute_force\030\003 \001(\002B\004\200\265\030\001\022(\n\032mos"
  "t_frequent_code_percent\030\004 \001(\002B\004\200\265\030\001\022\027\n\tl"
  "opq_ndcg\030\005 \001(\002B\004\200\265\030\001\022\036\n\020brute_force_ndcg"
  "\030\006 \001(\002B\004\200\265\030\001\"\214\003\n\016MetricsSummary\022\031\n\rtop1_"
  "accuracy\030\001 \001(\002B\002\030\001\022\031\n\rtop5_accuracy\030\002 \001("
  "\002B\002\030\001\022\037\n\021macro_avg_roc_auc\030\003 \001(\002B\004\200\265\030\001\022\037"
  "\n\021macro_std_roc_auc\030\004 \001(\002B\004\200\265\030\001\022 \n\022macro"
  "_avg_f1_score\030\005 \001(\002B\004\200\265\030\001\022 \n\022macro_std_f"
  "1_score\030\006 \001(\002B\004\200\265\030\001\022!\n\023macro_avg_precisi"
  "on\030\007 \001(\002B\004\200\265\030\001\022\036\n\020macro_avg_recall\030\010 \001(\002"
  "B\004\200\265\030\001\022!\n\031mean_avg_precision_iou_50\030\n \001("
  "\002\022$\n\034mean_avg_precision_iou_range\030\013 \001(\002\022"
  "2\n\014lopq_metrics\030\t \003(\0132\034.clarifai.api.LOP"
  "QEvalResult\"\257\004\n\013EvalMetrics\022+\n\006status\030\001 "
  "\001(\0132\033.clarifai.api.status.Status\022\n\n\002id\030\n"
  " \001(\t\022-\n\007summary\030\002 \001(\0132\034.clarifai.api.Met"
  "ricsSummary\0227\n\020confusion_matrix\030\003 \001(\0132\035."
  "clarifai.api.ConfusionMatrix\022=\n\023cooccurr"
  "ence_matrix\030\004 \001(\0132 .clarifai.api.Cooccur"
  "renceMatrix\0225\n\014label_counts\030\005 \001(\0132\037.clar"
  "ifai.api.LabelDistribution\0223\n\016binary_met"
  "rics\030\006 \003(\0132\033.clarifai.api.BinaryMetrics\022"
  "0\n\010test_set\030\007 \003(\0132\036.clarifai.api.EvalTes"
  "tSetEntry\0224\n\017metrics_by_area\030\010 \003(\0132\033.cla"
  "rifai.api.BinaryMetrics\0225\n\020metrics_by_cl"
  "ass\030\t \003(\0132\033.clarifai.api.BinaryMetrics\0225"
  "\n\017tracker_metrics\030\013 \003(\0132\034.clarifai.api.T"
  "rackerMetrics\"\267\001\n\013FieldsValue\022\030\n\020confusi"
  "on_matrix\030\001 \001(\010\022\033\n\023cooccurrence_matrix\030\002"
  " \001(\010\022\024\n\014label_counts\030\003 \001(\010\022\026\n\016binary_met"
  "rics\030\004 \001(\010\022\020\n\010test_set\030\005 \001(\010\022\027\n\017metrics_"
  "by_area\030\006 \001(\010\022\030\n\020metrics_by_class\030\007 \001(\010\""
  "\333\001\n\006Output\022\n\n\002id\030\001 \001(\t\022+\n\006status\030\002 \001(\0132\033"
  ".clarifai.api.status.Status\022.\n\ncreated_a"
  "t\030\003 \001(\0132\032.google.protobuf.Timestamp\022\"\n\005m"
  "odel\030\004 \001(\0132\023.clarifai.api.Model\022\"\n\005input"
  "\030\005 \001(\0132\023.clarifai.api.Input\022 \n\004data\030\006 \001("
  "\0132\022.clarifai.api.Data\"4\n\tScopeDeps\022\r\n\005sc"
  "ope\030\001 \001(\t\022\030\n\020depending_scopes\030\002 \003(\t\":\n\014E"
  "ndpointDeps\022\020\n\010endpoint\030\001 \001(\t\022\030\n\020dependi"
  "ng_scopes\030\002 \003(\t\"\215\001\n\003Hit\022\023\n\005score\030\001 \001(\002B\004"
  "\200\265\030\001\022\"\n\005input\030\002 \001(\0132\023.clarifai.api.Input"
  "\022,\n\nannotation\030\003 \001(\0132\030.clarifai.api.Anno"
  "tation\022\017\n\007user_id\030\004 \001(\t\022\016\n\006app_id\030\005 \001(\t\""
  "\215\001\n\003And\022\"\n\005input\030\001 \001(\0132\023.clarifai.api.In"
  "put\022$\n\006output\030\002 \001(\0132\024.clarifai.api.Outpu"
  "t\022\016\n\006negate\030\003 \001(\010\022,\n\nannotation\030\004 \001(\0132\030."
  "clarifai.api.Annotation\"\204\001\n\005Query\022\037\n\004and"
  "s\030\001 \003(\0132\021.clarifai.api.And\022\020\n\010language\030\002"
  " \001(\t\022%\n\007filters\030\003 \003(\0132\024.clarifai.api.Fil"
  "ter\022!\n\005ranks\030\004 \003(\0132\022.clarifai.api.Rank\"\336"
  "\002\n\006Search\022\"\n\005query\030\001 \001(\0132\023.clarifai.api."
  "Query\022\n\n\002id\030\002 \001(\t\022\026\n\016application_id\030\003 \001("
  "\t\022\014\n\004name\030\004 \001(\t\022)\n\005as_of\030\005 \001(\0132\032.google."
  "protobuf.Timestamp\022\020\n\010git_hash\030\006 \001(\t\022.\n\n"
  "created_at\030\007 \001(\0132\032.google.protobuf.Times"
  "tamp\022/\n\013modified_at\030\010 \001(\0132\032.google.proto"
  "buf.Timestamp\022\021\n\talgorithm\030\t \001(\t\022\014\n\004save"
  "\030\n \001(\010\022\021\n\tmin_value\030\013 \001(\002\022,\n\nvisibility\030"
  "\014 \001(\0132\030.clarifai.api.Visibility\"\244\001\n\006Filt"
  "er\022\016\n\006negate\030\003 \001(\010\022,\n\nannotation\030\004 \001(\0132\030"
  ".clarifai.api.Annotation\022\"\n\005input\030\005 \001(\0132"
  "\023.clarifai.api.Input\0228\n\027last_updated_tim"
  "e_range\030\006 \001(\0132\027.clarifai.api.TimeRange\"i"
  "\n\tTimeRange\022.\n\nstart_time\030\001 \001(\0132\032.google"
  ".protobuf.Timestamp\022,\n\010end_time\030\002 \001(\0132\032."
  "google.protobuf.Timestamp\"D\n\004Rank\022\016\n\006neg"
  "ate\030\003 \001(\010\022,\n\nannotation\030\004 \001(\0132\030.clarifai"
  ".api.Annotation\"\215\002\n\027AnnotationSearchMetr"
  "ics\022*\n\014ground_truth\030\001 \001(\0132\024.clarifai.api"
  ".Search\022,\n\016search_to_eval\030\002 \001(\0132\024.clarif"
  "ai.api.Search\022*\n\007metrics\030\003 \001(\0132\031.clarifa"
  "i.api.EvalMetrics\022 \n\004data\030\004 \001(\0132\022.clarif"
  "ai.api.Data\022\034\n\024active_concept_count\030\005 \001("
  "\r\022,\n\nvisibility\030\006 \001(\0132\030.clarifai.api.Vis"
  "ibility\"\221\001\n\004Text\022\013\n\003raw\030\001 \001(\t\022\013\n\003url\030\002 \001"
  "(\t\022\033\n\023allow_duplicate_url\030\003 \001(\010\022\'\n\006hoste"
  "d\030\004 \001(\0132\027.clarifai.api.HostedURL\022)\n\ttext"
  "_info\030\005 \001(\0132\026.clarifai.api.TextInfo\"0\n\010T"
  "extInfo\022\022\n\nchar_count\030\001 \001(\005\022\020\n\010encoding\030"
  "\002 \001(\t\"\326\005\n\004User\022\n\n\002id\030\001 \001(\t\022\031\n\rprimary_em"
  "ail\030\002 \001(\tB\002\030\001\022\022\n\nfirst_name\030\003 \001(\t\022\021\n\tlas"
  "t_name\030\004 \001(\t\022\024\n\014company_name\030\005 \001(\t\022\021\n\tjo"
  "b_title\030\023 \001(\t\022\020\n\010job_role\030\024 \001(\t\022\025\n\tbill_"
  "type\030\007 \001(\tB\002\030\001\022.\n\ncreated_at\030\006 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\0229\n\021date_gdpr_cons"
  "ent\030\010 \001(\0132\032.google.protobuf.TimestampB\002\030"
  "\001\0228\n\020date_tos_consent\030\t \001(\0132\032.google.pro"
  "tobuf.TimestampB\002\030\001\022>\n\026date_marketing_co"
  "nsent\030\n \001(\0132\032.google.protobuf.TimestampB"
  "\002\030\001\022-\n\010metadata\030\013 \001(\0132\027.google.protobuf."
  "StructB\002\030\001\0227\n\017email_addresses\030\014 \003(\0132\032.cl"
  "arifai.api.EmailAddressB\002\030\001\022\030\n\014is_org_ad"
  "min\030\016 \001(\010B\002\030\001\022#\n\027two_factor_auth_enabled"
  "\030\017 \001(\010B\002\030\001\022\027\n\013teams_count\030\020 \001(\rB\002\030\001\022\022\n\ni"
  "s_starred\030\025 \001(\010\022\022\n\nstar_count\030\026 \001(\005\022,\n\nv"
  "isibility\030\021 \001(\0132\030.clarifai.api.Visibilit"
  "y\022-\n\013user_detail\030\022 \001(\0132\030.clarifai.api.Us"
  "erDetailJ\004\010\r\020\016\"\253\003\n\nUserDetail\022\025\n\rprimary"
  "_email\030\001 \001(\t\022\021\n\tbill_type\030\002 \001(\t\0225\n\021date_"
  "gdpr_consent\030\003 \001(\0132\032.google.protobuf.Tim"
  "estamp\0224\n\020date_tos_consent\030\004 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022:\n\026date_marketing_c"
  "onsent\030\005 \001(\0132\032.google.protobuf.Timestamp"
  "\022)\n\010metadata\030\006 \001(\0132\027.google.protobuf.Str"
  "uct\0223\n\017email_addresses\030\007 \003(\0132\032.clarifai."
  "api.EmailAddress\022\024\n\014is_org_admin\030\010 \001(\010\022\037"
  "\n\027two_factor_auth_enabled\030\t \001(\010\022\023\n\013teams"
  "_count\030\n \001(\r\022\017\n\007country\030\013 \001(\t\022\r\n\005state\030\014"
  " \001(\t\"R\n\014EmailAddress\022\023\n\005email\030\001 \001(\tB\004\200\265\030"
  "\001\022\025\n\007primary\030\002 \001(\010B\004\200\265\030\001\022\026\n\010verified\030\003 \001"
  "(\010B\004\200\265\030\001\"\035\n\010Password\022\021\n\tplaintext\030\001 \001(\t\""
  "\206\003\n\022PasswordViolations\022\026\n\016minimum_length"
  "\030\001 \001(\010\022\026\n\016maximum_length\030\002 \001(\010\022\031\n\021upper_"
  "case_needed\030\003 \001(\010\022\031\n\021lower_case_needed\030\004"
  " \001(\010\022\026\n\016numeric_needed\030\005 \001(\010\022\037\n\027non_alph"
  "anumeric_needed\030\006 \001(\010\022\026\n\016password_reuse\030"
  "\007 \001(\010\022\025\n\rexclude_names\030\010 \001(\010\022\025\n\rexclude_"
  "email\030\t \001(\010\022\034\n\024no_confusing_letters\030\n \001("
  "\010\022\033\n\023no_simple_passwords\030\013 \001(\010\022\030\n\020no_com"
  "mon_vocabs\030\014 \001(\010\022\033\n\023no_overlap_with_old\030"
  "\r \001(\010\022\031\n\021password_lifespan\030\016 \001(\010\"\256\001\n\005Vid"
  "eo\022\013\n\003url\030\001 \001(\t\022\016\n\006base64\030\002 \001(\014\022\033\n\023allow"
  "_duplicate_url\030\004 \001(\010\022\025\n\rthumbnail_url\030\005 "
  "\001(\t\022\'\n\006hosted\030\006 \001(\0132\027.clarifai.api.Hoste"
  "dURL\022+\n\nvideo_info\030\007 \001(\0132\027.clarifai.api."
  "VideoInfo\"\216\001\n\tVideoInfo\022\r\n\005width\030\001 \001(\005\022\016"
  "\n\006height\030\002 \001(\005\022\013\n\003fps\030\003 \001(\002\022\024\n\014video_for"
  "mat\030\004 \001(\t\022\020\n\010bit_rate\030\005 \001(\005\022\023\n\013frame_cou"
  "nt\030\006 \001(\005\022\030\n\020duration_seconds\030\007 \001(\002\"\261\003\n\010W"
  "orkflow\022\n\n\002id\030\001 \001(\t\022\016\n\006app_id\030\002 \001(\t\022.\n\nc"
  "reated_at\030\003 \001(\0132\032.google.protobuf.Timest"
  "amp\022)\n\005nodes\030\004 \003(\0132\032.clarifai.api.Workfl"
  "owNode\022)\n\010metadata\030\005 \001(\0132\027.google.protob"
  "uf.Struct\022,\n\nvisibility\030\006 \001(\0132\030.clarifai"
  ".api.Visibility\022\017\n\007user_id\030\007 \001(\t\022/\n\013modi"
  "fied_at\030\010 \001(\0132\032.google.protobuf.Timestam"
  "p\022.\n\007version\030\t \001(\0132\035.clarifai.api.Workfl"
  "owVersion\022\022\n\nis_starred\030\n \001(\010\022\022\n\nstar_co"
  "unt\030\013 \001(\005\022\023\n\013description\030\014 \001(\t\022\r\n\005notes\030"
  "\r \001(\t\022\027\n\tuse_cases\030\016 \003(\tB\004\200\265\030\001\"\336\002\n\017Workf"
  "lowVersion\022\n\n\002id\030\001 \001(\t\022\023\n\013workflow_id\030\002 "
  "\001(\t\022.\n\ncreated_at\030\003 \001(\0132\032.google.protobu"
  "f.Timestamp\022/\n\013modified_at\030\004 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022,\n\nvisibility\030\005 \001(\013"
  "2\030.clarifai.api.Visibility\022)\n\005nodes\030\006 \003("
  "\0132\032.clarifai.api.WorkflowNode\022)\n\010metadat"
  "a\030\007 \001(\0132\027.google.protobuf.Struct\022\016\n\006app_"
  "id\030\010 \001(\t\022\017\n\007user_id\030\t \001(\t\022\023\n\013description"
  "\030\n \001(\t\022\017\n\007license\030\013 \001(\t\"\205\001\n\014WorkflowNode"
  "\022\n\n\002id\030\001 \001(\t\022\"\n\005model\030\002 \001(\0132\023.clarifai.a"
  "pi.Model\022,\n\013node_inputs\030\003 \003(\0132\027.clarifai"
  ".api.NodeInput\022\027\n\017suppress_output\030\004 \001(\010\""
  "\034\n\tNodeInput\022\017\n\007node_id\030\001 \001(\t\"\201\002\n\016Workfl"
  "owResult\022\n\n\002id\030\001 \001(\t\022+\n\006status\030\002 \001(\0132\033.c"
  "larifai.api.status.Status\022.\n\ncreated_at\030"
  "\003 \001(\0132\032.google.protobuf.Timestamp\022\"\n\005mod"
  "el\030\004 \001(\0132\023.clarifai.api.Model\022\"\n\005input\030\005"
  " \001(\0132\023.clarifai.api.Input\022%\n\007outputs\030\006 \003"
  "(\0132\024.clarifai.api.Output\022\027\n\017suppress_out"
  "put\030\007 \001(\010\"\033\n\rWorkflowState\022\n\n\002id\030\001 \001(\t\"\247"
  "\002\n\016AppDuplication\022\n\n\002id\030\001 \001(\t\022\022\n\nnew_app"
  "_id\030\002 \001(\t\022\024\n\014new_app_name\030\003 \001(\t\022+\n\006statu"
  "s\030\004 \001(\0132\033.clarifai.api.status.Status\022.\n\n"
  "created_at\030\005 \001(\0132\032.google.protobuf.Times"
  "tamp\0224\n\020last_modified_at\030\006 \001(\0132\032.google."
  "protobuf.Timestamp\0223\n\006filter\030\007 \001(\0132#.cla"
  "rifai.api.AppDuplicationFilters\022\027\n\017exist"
  "ing_app_id\030\010 \001(\t\"\212\001\n\025AppDuplicationFilte"
  "rs\022\023\n\013copy_inputs\030\001 \001(\010\022\025\n\rcopy_concepts"
  "\030\002 \001(\010\022\030\n\020copy_annotations\030\003 \001(\010\022\023\n\013copy"
  "_models\030\004 \001(\010\022\026\n\016copy_workflows\030\005 \001(\010\"\372\002"
  "\n\nLabelOrder\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022+"
  "\n\006status\030\003 \001(\0132\033.clarifai.api.status.Sta"
  "tus\022\024\n\014auto_release\030\004 \001(\010\022\027\n\017allow_empty"
  "_tag\030\005 \001(\010\0228\n\024desired_fulfill_time\030\006 \001(\013"
  "2\032.google.protobuf.Timestamp\0229\n\025estimate"
  "_fulfill_time\030\007 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022 \n\004task\030\010 \001(\0132\022.clarifai.api.Tas"
  "k\022.\n\ncreated_at\030\t \001(\0132\032.google.protobuf."
  "Timestamp\022/\n\013modified_at\030\n \001(\0132\032.google."
  "protobuf.Timestamp\"\315\005\n\004Task\022\n\n\002id\030\001 \001(\t\022"
  ".\n\ncreated_at\030\002 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022/\n\013modified_at\030\003 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022)\n\004type\030\004 \001(\0162\033.clarifa"
  "i.api.Task.TaskType\022\023\n\013description\030\005 \001(\t"
  "\022(\n\006worker\030\006 \001(\0132\030.clarifai.api.TaskWork"
  "er\022\023\n\013concept_ids\030\007 \003(\t\0223\n\014input_source\030"
  "\010 \001(\0132\035.clarifai.api.TaskInputSource\022\021\n\t"
  "sample_ms\030\t \001(\r\0223\n\014ai_assistant\030\n \001(\0132\035."
  "clarifai.api.TaskAIAssistant\022(\n\006review\030\013"
  " \001(\0132\030.clarifai.api.TaskReview\022+\n\006status"
  "\030\014 \001(\0132\033.clarifai.api.status.Status\022\014\n\004n"
  "ame\030\r \001(\t\022:\n\020ai_assist_params\030\016 \001(\0132 .cl"
  "arifai.api.AiAssistParameters\022,\n\nvisibil"
  "ity\030\017 \001(\0132\030.clarifai.api.Visibility\022\016\n\006a"
  "pp_id\030\020 \001(\t\022\017\n\007user_id\030\021 \001(\t\"l\n\010TaskType"
  "\022\020\n\014TYPE_NOT_SET\020\000\022\033\n\027CONCEPTS_CLASSIFIC"
  "ATION\020\001\022\032\n\026BOUNDING_BOX_DETECTION\020\002\022\025\n\021P"
  "OLYGON_DETECTION\020\003\"`\n\022AiAssistParameters"
  "\022\025\n\rmin_threshold\030\001 \001(\002\022\025\n\rmax_threshold"
  "\030\002 \001(\002\022\034\n\024concept_relation_ids\030\003 \003(\t\"\230\002\n"
  "\nTaskWorker\022=\n\010strategy\030\001 \001(\0162+.clarifai"
  ".api.TaskWorker.TaskWorkerStrategy\022\020\n\010us"
  "er_ids\030\002 \003(\t\022T\n\031partitioned_strategy_inf"
  "o\030\003 \001(\0132/.clarifai.api.TaskWorkerPartiti"
  "onedStrategyInfoH\000\"R\n\022TaskWorkerStrategy"
  "\022\033\n\027WORKER_STRATEGY_NOT_SET\020\000\022\017\n\013PARTITI"
  "ONED\020\002\022\010\n\004FULL\020\003\"\004\010\001\020\001B\017\n\rstrategy_info\""
  "\251\002\n!TaskWorkerPartitionedStrategyInfo\022[\n"
  "\004type\030\001 \001(\0162M.clarifai.api.TaskWorkerPar"
  "titionedStrategyInfo.TaskWorkerPartition"
  "edStrategy\022\031\n\021workers_per_input\030\002 \001(\005\022(\n"
  "\007weights\030\003 \001(\0132\027.google.protobuf.Struct\""
  "b\n\035TaskWorkerPartitionedStrategy\022\'\n#PART"
  "ITIONED_WORKER_STRATEGY_NOT_SET\020\000\022\n\n\006EVE"
  "NLY\020\001\022\014\n\010WEIGHTED\020\002\"\303\001\n\017TaskInputSource\022"
  "\?\n\004type\030\001 \001(\01621.clarifai.api.TaskInputSo"
  "urce.TaskInputSourceType\022\n\n\002id\030\002 \001(\t\"c\n\023"
  "TaskInputSourceType\022\035\n\031INPUT_SOURCE_TYPE"
  "_NOT_SET\020\000\022\016\n\nALL_INPUTS\020\001\022\020\n\014SAVED_SEAR"
  "CH\020\002\022\013\n\007DATASET\020\003\"\351\002\n\nTaskReview\022=\n\010stra"
  "tegy\030\001 \001(\0162+.clarifai.api.TaskReview.Tas"
  "kReviewStrategy\022\020\n\010user_ids\030\002 \003(\t\022J\n\024man"
  "ual_strategy_info\030\003 \001(\0132*.clarifai.api.T"
  "askReviewManualStrategyInfoH\000\022P\n\027consens"
  "us_strategy_info\030\004 \001(\0132-.clarifai.api.Ta"
  "skReviewConsensusStrategyInfoH\000\"[\n\022TaskR"
  "eviewStrategy\022 \n\034TASK_REVIEW_STRATEGY_NO"
  "T_SET\020\000\022\010\n\004NONE\020\001\022\n\n\006MANUAL\020\002\022\r\n\tCONSENS"
  "US\020\003B\017\n\rstrategy_info\"9\n\034TaskReviewManua"
  "lStrategyInfo\022\031\n\021sample_percentage\030\001 \001(\002"
  "\"C\n\037TaskReviewConsensusStrategyInfo\022\032\n\022a"
  "pproval_threshold\030\002 \001(\rJ\004\010\001\020\002\"&\n\017TaskAIA"
  "ssistant\022\023\n\013workflow_id\030\001 \001(\t\"\274\001\n\026TaskSt"
  "atusCountPerUser\022\017\n\007user_id\030\001 \001(\t\022\025\n\007pen"
  "ding\030\002 \001(\rB\004\200\265\030\001\022\035\n\017awaiting_review\030\003 \001("
  "\rB\004\200\265\030\001\022\025\n\007success\030\004 \001(\rB\004\200\265\030\001\022\033\n\rreview"
  "_denied\030\005 \001(\rB\004\200\265\030\001\022\'\n\031awaiting_consensu"
  "s_review\030\006 \001(\rB\004\200\265\030\001\"\201\002\n\tCollector\022\n\n\002id"
  "\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022.\n\ncreated_a"
  "t\030\003 \001(\0132\032.google.protobuf.Timestamp\022\035\n\025p"
  "re_queue_workflow_id\030\004 \001(\t\022\036\n\026post_queue"
  "_workflow_id\030\005 \001(\t\0227\n\020collector_source\030\006"
  " \001(\0132\035.clarifai.api.CollectorSource\022+\n\006s"
  "tatus\030\007 \001(\0132\033.clarifai.api.status.Status"
  "\"t\n\017CollectorSource\022a\n\'api_post_model_ou"
  "tputs_collector_source\030\002 \001(\01320.clarifai."
  "api.APIPostModelOutputsCollectorSource\"\231"
  "\001\n\"APIPostModelOutputsCollectorSource\022\025\n"
  "\rmodel_user_id\030\001 \001(\t\022\024\n\014model_app_id\030\002 \001"
  "(\t\022\020\n\010model_id\030\003 \001(\t\022\030\n\020model_version_id"
  "\030\004 \001(\t\022\032\n\022post_inputs_key_id\030\005 \001(\t\"R\n\tSt"
  "atValue\022(\n\004time\030\001 \001(\0132\032.google.protobuf."
  "Timestamp\022\r\n\005value\030\002 \001(\002\022\014\n\004tags\030\003 \003(\t\"\246"
  "\001\n\030StatValueAggregateResult\022\?\n\025stat_valu"
  "e_aggregates\030\001 \003(\0132 .clarifai.api.StatVa"
  "lueAggregate\022I\n\032stat_value_aggregate_que"
  "ry\030\002 \001(\0132%.clarifai.api.StatValueAggrega"
  "teQuery\"t\n\022StatValueAggregate\022(\n\004time\030\001 "
  "\001(\0132\032.google.protobuf.Timestamp\022\027\n\017aggre"
  "gate_value\030\002 \001(\002\022\r\n\005count\030\003 \001(\004\022\014\n\004tags\030"
  "\004 \003(\t\"\221\002\n\027StatValueAggregateQuery\022\014\n\004tag"
  "s\030\001 \003(\t\022\022\n\ntag_groups\030\002 \003(\t\022;\n\023stat_valu"
  "e_agg_type\030\003 \001(\0162\036.clarifai.api.StatValu"
  "eAggType\0229\n\022stat_time_agg_type\030\004 \001(\0162\035.c"
  "larifai.api.StatTimeAggType\022.\n\nstart_tim"
  "e\030\005 \001(\0132\032.google.protobuf.Timestamp\022,\n\010e"
  "nd_time\030\006 \001(\0132\032.google.protobuf.Timestam"
  "p\"\207\001\n\nVisibility\0223\n\010gettable\030\001 \001(\0162!.cla"
  "rifai.api.Visibility.Gettable\"D\n\010Gettabl"
  "e\022\026\n\022UNKNOWN_VISIBILITY\020\000\022\013\n\007PRIVATE\020\n\022\007"
  "\n\003ORG\020\036\022\n\n\006PUBLIC\0202\"X\n\016TrendingMetric\022\017\n"
  "\007user_id\030\001 \001(\t\022\016\n\006app_id\030\002 \001(\t\022\021\n\tobject"
  "_id\030\003 \001(\t\022\022\n\nview_count\030\004 \001(\004\"f\n\013TimeSeg"
  "ment\022\n\n\002id\030\001 \001(\t\022 \n\004data\030\002 \001(\0132\022.clarifa"
  "i.api.Data\022)\n\ttime_info\030\003 \001(\0132\026.clarifai"
  ".api.TimeInfo\"D\n\010TimeInfo\022\022\n\nnum_frames\030"
  "\001 \001(\r\022\022\n\nbegin_time\030\002 \001(\r\022\020\n\010end_time\030\003 "
  "\001(\r*\371\001\n\036DatasetVersionMetricsGroupType\022."
  "\n*DATASET_VERSION_METRICS_GROUP_TYPE_NOT"
  "_SET\020\000\022\016\n\nINPUT_TYPE\020\002\022\016\n\nCONCEPT_ID\020\n\022\022"
  "\n\016CONCEPTS_COUNT\020\013\022\030\n\024BOUNDING_BOXES_COU"
  "NT\020\024\022\022\n\016POLYGONS_COUNT\020\025\022\020\n\014POINTS_COUNT"
  "\020\026\022\017\n\013MASKS_COUNT\020\027\022\020\n\014PIXELS_COUNT\020\036\022\020\n"
  "\014ASPECT_RATIO\020\037*H\n\020ExpirationAction\022\035\n\031E"
  "XPIRATION_ACTION_NOT_SET\020\000\022\t\n\005DELAY\020\001\022\n\n"
  "\006EXPIRY\020\002*M\n\014LicenseScope\022\031\n\025LICENSE_SCO"
  "PE_NOT_SET\020\000\022\013\n\007PREDICT\020\001\022\t\n\005TRAIN\020\002\022\n\n\006"
  "SEARCH\020\003*\217\001\n\017ValueComparator\022\035\n\031CONCEPT_"
  "THRESHOLD_NOT_SET\020\000\022\020\n\014GREATER_THAN\020\001\022\031\n"
  "\025GREATER_THAN_OR_EQUAL\020\002\022\r\n\tLESS_THAN\020\003\022"
  "\026\n\022LESS_THAN_OR_EQUAL\020\004\022\t\n\005EQUAL\020\005*3\n\016Ev"
  "aluationType\022\022\n\016Classification\020\000\022\r\n\tDete"
  "ction\020\001*f\n\014APIEventType\022\032\n\026API_EVENT_TYP"
  "E_NOT_SET\020\000\022\023\n\017ON_PREM_PREDICT\020\001\022\021\n\rON_P"
  "REM_TRAIN\020\002\022\022\n\016ON_PREM_SEARCH\020\003*<\n\021Usage"
  "IntervalType\022\t\n\005undef\020\000\022\007\n\003day\020\001\022\t\n\005mont"
  "h\020\002\022\010\n\004year\020\003*\035\n\010RoleType\022\010\n\004TEAM\020\000\022\007\n\003O"
  "RG\020\001*$\n\020StatValueAggType\022\007\n\003SUM\020\000\022\007\n\003AVG"
  "\020\001*`\n\017StatTimeAggType\022\017\n\013NO_TIME_AGG\020\000\022\010"
  "\n\004YEAR\020\001\022\t\n\005MONTH\020\002\022\010\n\004WEEK\020\003\022\007\n\003DAY\020\004\022\010"
  "\n\004HOUR\020\005\022\n\n\006MINUTE\020\006*b\n\023ValidationErrorT"
  "ype\022!\n\035VALIDATION_ERROR_TYPE_NOT_SET\020\000\022\016"
  "\n\nRESTRICTED\020\001\022\014\n\010DATABASE\020\002\022\n\n\006FORMAT\020\003"
  "BY\n\025com.clarifai.grpc.apiP\001Z7github.com/"
  "Clarifai/clarifai-go-grpc/proto/clarifai"
  "/api\242\002\004CAIPb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_deps[7] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2futils_2fextensions_2eproto,
  &::descriptor_table_proto_2fclarifai_2fauth_2futil_2fextension_2eproto,
  &::descriptor_table_proto_2futils_2fmatrix_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_sccs[115] = {
  &scc_info_APIPostModelOutputsCollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_AiAssistParameters_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_AnnotationSearchMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_AppDuplication_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_AppDuplicationFilters_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_AppQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Audio_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_AudioInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_BinaryMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_BoundingBox_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Collaboration_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Collaborator_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_CollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Color_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ConceptMappingJob_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ConceptQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ConceptRelation_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ConceptTypeCount_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ConfusionMatrix_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ConfusionMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_CooccurrenceMatrix_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_CooccurrenceMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_DatasetVersionMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_DetailConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_EmailAddress_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Embedding_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_EndpointDeps_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_EvalMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_EvalTestSetEntry_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_FieldsValue_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Filter_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_FrameInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Geo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_GeoBoxedPoint_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_GeoLimit_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_GeoPoint_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_HostedURL_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Image_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ImageInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ImportInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_InputCount_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_InputInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_KnowledgeGraph_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_LOPQEvalResult_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_LabelCount_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_LabelDistribution_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_LabelOrder_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_LossCurveEntry_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Mask_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_MetricsSummary_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ModelQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ModelReference_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ModelType_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ModelTypeEnumOption_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ModelTypeEnumOptionAlias_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ModelTypeRangeInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ModelVersionInputExample_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_NodeInput_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_OutputConfig_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_OutputInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Password_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_PasswordViolations_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_PatchAction_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Point_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Polygon_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_PrecisionRecallCurve_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_PretrainedModelConfig_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ROC_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Rank_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_RegionInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_ScopeDeps_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Span_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_StatValue_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_StatValueAggregate_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_StatValueAggregateQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_StatValueAggregateResult_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_TaskAIAssistant_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_TaskInputSource_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_TaskReview_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_TaskReviewConsensusStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_TaskReviewManualStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_TaskStatusCountPerUser_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_TaskWorker_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_TaskWorkerPartitionedStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Text_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_TextInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_TimeInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_TimeRange_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Token_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_TrackerMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_TrainInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_TrainStats_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_TrendingMetric_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_User_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_UserDetail_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Video_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_VideoInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Visibility_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_W3C_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_WorkflowNode_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_WorkflowResult_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_WorkflowResultsSimilarity_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_WorkflowState_proto_2fclarifai_2fapi_2fresources_2eproto.base,
  &scc_info_WorkflowVersion_proto_2fclarifai_2fapi_2fresources_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once;
static bool descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto = {
  &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_initialized, descriptor_table_protodef_proto_2fclarifai_2fapi_2fresources_2eproto, "proto/clarifai/api/resources.proto", 26779,
  &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once, descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_sccs, descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_deps, 115, 7,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto, 132, file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto, file_level_service_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fclarifai_2fapi_2fresources_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto), true);
namespace clarifai {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelTypeField_ModelTypeFieldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[0];
}
bool ModelTypeField_ModelTypeFieldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::INVALID_MODEL_TYPE_FIELD_TYPE;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::BOOLEAN;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::STRING;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::NUMBER;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ARRAY_OF_CONCEPTS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ARRAY_OF_CONCEPTS_WITH_THRESHOLD;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::RANGE;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ENUM;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::COLLABORATORS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::JSON;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ARRAY_OF_NUMBERS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::WORKFLOW_EMBED_MODELS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ARRAY_OF_STRINGS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::RECURSIVE_ENUM;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ModelTypeFieldType_MIN;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ModelTypeFieldType_MAX;
constexpr int ModelTypeField::ModelTypeFieldType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Task_TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[1];
}
bool Task_TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Task_TaskType Task::TYPE_NOT_SET;
constexpr Task_TaskType Task::CONCEPTS_CLASSIFICATION;
constexpr Task_TaskType Task::BOUNDING_BOX_DETECTION;
constexpr Task_TaskType Task::POLYGON_DETECTION;
constexpr Task_TaskType Task::TaskType_MIN;
constexpr Task_TaskType Task::TaskType_MAX;
constexpr int Task::TaskType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskWorker_TaskWorkerStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[2];
}
bool TaskWorker_TaskWorkerStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TaskWorker_TaskWorkerStrategy TaskWorker::WORKER_STRATEGY_NOT_SET;
constexpr TaskWorker_TaskWorkerStrategy TaskWorker::PARTITIONED;
constexpr TaskWorker_TaskWorkerStrategy TaskWorker::FULL;
constexpr TaskWorker_TaskWorkerStrategy TaskWorker::TaskWorkerStrategy_MIN;
constexpr TaskWorker_TaskWorkerStrategy TaskWorker::TaskWorkerStrategy_MAX;
constexpr int TaskWorker::TaskWorkerStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[3];
}
bool TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::PARTITIONED_WORKER_STRATEGY_NOT_SET;
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::EVENLY;
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::WEIGHTED;
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategy_MIN;
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategy_MAX;
constexpr int TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskInputSource_TaskInputSourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[4];
}
bool TaskInputSource_TaskInputSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::INPUT_SOURCE_TYPE_NOT_SET;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::ALL_INPUTS;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::SAVED_SEARCH;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::DATASET;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::TaskInputSourceType_MIN;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::TaskInputSourceType_MAX;
constexpr int TaskInputSource::TaskInputSourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskReview_TaskReviewStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[5];
}
bool TaskReview_TaskReviewStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TaskReview_TaskReviewStrategy TaskReview::TASK_REVIEW_STRATEGY_NOT_SET;
constexpr TaskReview_TaskReviewStrategy TaskReview::NONE;
constexpr TaskReview_TaskReviewStrategy TaskReview::MANUAL;
constexpr TaskReview_TaskReviewStrategy TaskReview::CONSENSUS;
constexpr TaskReview_TaskReviewStrategy TaskReview::TaskReviewStrategy_MIN;
constexpr TaskReview_TaskReviewStrategy TaskReview::TaskReviewStrategy_MAX;
constexpr int TaskReview::TaskReviewStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Visibility_Gettable_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[6];
}
bool Visibility_Gettable_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 30:
    case 50:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Visibility_Gettable Visibility::UNKNOWN_VISIBILITY;
constexpr Visibility_Gettable Visibility::PRIVATE;
constexpr Visibility_Gettable Visibility::ORG;
constexpr Visibility_Gettable Visibility::PUBLIC;
constexpr Visibility_Gettable Visibility::Gettable_MIN;
constexpr Visibility_Gettable Visibility::Gettable_MAX;
constexpr int Visibility::Gettable_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatasetVersionMetricsGroupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[7];
}
bool DatasetVersionMetricsGroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 10:
    case 11:
    case 20:
    case 21:
    case 22:
    case 23:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExpirationAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[8];
}
bool ExpirationAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LicenseScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[9];
}
bool LicenseScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValueComparator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[10];
}
bool ValueComparator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EvaluationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[11];
}
bool EvaluationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APIEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[12];
}
bool APIEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UsageIntervalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[13];
}
bool UsageIntervalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[14];
}
bool RoleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatValueAggType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[15];
}
bool StatValueAggType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatTimeAggType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[16];
}
bool StatTimeAggType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidationErrorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[17];
}
bool ValidationErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Annotation::InitAsDefaultInstance() {
  ::clarifai::api::_Annotation_default_instance_._instance.get_mutable()->data_ = const_cast< ::clarifai::api::Data*>(
      ::clarifai::api::Data::internal_default_instance());
  ::clarifai::api::_Annotation_default_instance_._instance.get_mutable()->annotation_info_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::clarifai::api::_Annotation_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_Annotation_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Annotation_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Annotation_default_instance_._instance.get_mutable()->consensus_info_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class Annotation::_Internal {
 public:
  static const ::clarifai::api::Data& data(const Annotation* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& annotation_info(const Annotation* msg);
  static const ::clarifai::api::status::Status& status(const Annotation* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Annotation* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Annotation* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& consensus_info(const Annotation* msg);
};

const ::clarifai::api::Data&
Annotation::_Internal::data(const Annotation* msg) {
  return *msg->data_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
Annotation::_Internal::annotation_info(const Annotation* msg) {
  return *msg->annotation_info_;
}
const ::clarifai::api::status::Status&
Annotation::_Internal::status(const Annotation* msg) {
  return *msg->status_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Annotation::_Internal::created_at(const Annotation* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Annotation::_Internal::modified_at(const Annotation* msg) {
  return *msg->modified_at_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
Annotation::_Internal::consensus_info(const Annotation* msg) {
  return *msg->consensus_info_;
}
void Annotation::clear_annotation_info() {
  if (GetArenaNoVirtual() == nullptr && annotation_info_ != nullptr) {
    delete annotation_info_;
  }
  annotation_info_ = nullptr;
}
void Annotation::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void Annotation::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Annotation::clear_modified_at() {
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void Annotation::clear_consensus_info() {
  if (GetArenaNoVirtual() == nullptr && consensus_info_ != nullptr) {
    delete consensus_info_;
  }
  consensus_info_ = nullptr;
}
Annotation::Annotation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Annotation)
}
Annotation::Annotation(const Annotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_id().empty()) {
    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  embed_model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_embed_model_version_id().empty()) {
    embed_model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.embed_model_version_id_);
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_version_id_);
  }
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_annotation_info()) {
    annotation_info_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.annotation_info_);
  } else {
    annotation_info_ = nullptr;
  }
  if (from._internal_has_consensus_info()) {
    consensus_info_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.consensus_info_);
  } else {
    consensus_info_ = nullptr;
  }
  ::memcpy(&trusted_, &from.trusted_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_level_) -
    reinterpret_cast<char*>(&trusted_)) + sizeof(input_level_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Annotation)
}

void Annotation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embed_model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_level_) -
      reinterpret_cast<char*>(&data_)) + sizeof(input_level_));
}

Annotation::~Annotation() {
  // @@protoc_insertion_point(destructor:clarifai.api.Annotation)
  SharedDtor();
}

void Annotation::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embed_model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete annotation_info_;
  if (this != internal_default_instance()) delete consensus_info_;
}

void Annotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Annotation& Annotation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Annotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embed_model_version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && annotation_info_ != nullptr) {
    delete annotation_info_;
  }
  annotation_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && consensus_info_ != nullptr) {
    delete consensus_info_;
  }
  consensus_info_ = nullptr;
  ::memset(&trusted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_level_) -
      reinterpret_cast<char*>(&trusted_)) + sizeof(input_level_));
  _internal_metadata_.Clear();
}

const char* Annotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Annotation.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_input_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Annotation.input_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool trusted = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          trusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct annotation_info = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string embed_model_version_id = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_embed_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Annotation.embed_model_version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Annotation.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_version_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Annotation.model_version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool input_level = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          input_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct consensus_info = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string task_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Annotation.task_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Annotation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Annotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string input_id = 2;
  if (this->input_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.input_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_id(), target);
  }

  // .clarifai.api.Data data = 3;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  // .clarifai.api.status.Status status = 7;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::status(this), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 9;
  if (this->has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::modified_at(this), target, stream);
  }

  // bool trusted = 10 [deprecated = true];
  if (this->trusted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_trusted(), target);
  }

  // .google.protobuf.Struct annotation_info = 13;
  if (this->has_annotation_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::annotation_info(this), target, stream);
  }

  // string embed_model_version_id = 14 [deprecated = true];
  if (this->embed_model_version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_embed_model_version_id().data(), static_cast<int>(this->_internal_embed_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.embed_model_version_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_embed_model_version_id(), target);
  }

  // string user_id = 15;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.user_id");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_user_id(), target);
  }

  // string model_version_id = 16;
  if (this->model_version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.model_version_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_model_version_id(), target);
  }

  // bool input_level = 17;
  if (this->input_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_input_level(), target);
  }

  // .google.protobuf.Struct consensus_info = 18;
  if (this->has_consensus_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::consensus_info(this), target, stream);
  }

  // string task_id = 19;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.task_id");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Annotation)
  return target;
}

size_t Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Annotation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string input_id = 2;
  if (this->input_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // string embed_model_version_id = 14 [deprecated = true];
  if (this->embed_model_version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_embed_model_version_id());
  }

  // string user_id = 15;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string model_version_id = 16;
  if (this->model_version_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // string task_id = 19;
  if (this->task_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.Data data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .clarifai.api.status.Status status = 7;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 9;
  if (this->has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .google.protobuf.Struct annotation_info = 13;
  if (this->has_annotation_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_info_);
  }

  // .google.protobuf.Struct consensus_info = 18;
  if (this->has_consensus_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consensus_info_);
  }

  // bool trusted = 10 [deprecated = true];
  if (this->trusted() != 0) {
    total_size += 1 + 1;
  }

  // bool input_level = 17;
  if (this->input_level() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Annotation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  const Annotation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Annotation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Annotation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Annotation)
    MergeFrom(*source);
  }
}

void Annotation::MergeFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.input_id().size() > 0) {

    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  if (from.embed_model_version_id().size() > 0) {

    embed_model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.embed_model_version_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.model_version_id().size() > 0) {

    model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_version_id_);
  }
  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from.has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_modified_at()) {
    _internal_mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from.has_annotation_info()) {
    _internal_mutable_annotation_info()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_annotation_info());
  }
  if (from.has_consensus_info()) {
    _internal_mutable_consensus_info()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_consensus_info());
  }
  if (from.trusted() != 0) {
    _internal_set_trusted(from._internal_trusted());
  }
  if (from.input_level() != 0) {
    _internal_set_input_level(from._internal_input_level());
  }
}

void Annotation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotation::CopyFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotation::IsInitialized() const {
  return true;
}

void Annotation::InternalSwap(Annotation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  input_id_.Swap(&other->input_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  embed_model_version_id_.Swap(&other->embed_model_version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_version_id_.Swap(&other->model_version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(status_, other->status_);
  swap(created_at_, other->created_at_);
  swap(modified_at_, other->modified_at_);
  swap(annotation_info_, other->annotation_info_);
  swap(consensus_info_, other->consensus_info_);
  swap(trusted_, other->trusted_);
  swap(input_level_, other->input_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Annotation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void App::InitAsDefaultInstance() {
  ::clarifai::api::_App_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_App_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_App_default_instance_._instance.get_mutable()->metadata_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::clarifai::api::_App_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::clarifai::api::Visibility*>(
      ::clarifai::api::Visibility::internal_default_instance());
}
class App::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const App* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const App* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& metadata(const App* msg);
  static const ::clarifai::api::Visibility& visibility(const App* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
App::_Internal::created_at(const App* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
App::_Internal::modified_at(const App* msg) {
  return *msg->modified_at_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
App::_Internal::metadata(const App* msg) {
  return *msg->metadata_;
}
const ::clarifai::api::Visibility&
App::_Internal::visibility(const App* msg) {
  return *msg->visibility_;
}
void App::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void App::clear_modified_at() {
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void App::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
App::App()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.App)
}
App::App(const App& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  default_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_default_language().empty()) {
    default_language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.default_language_);
  }
  default_workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_default_workflow_id().empty()) {
    default_workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.default_workflow_id_);
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  data_tier_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_tier_id().empty()) {
    data_tier_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_tier_id_);
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notes().empty()) {
    notes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  ::memcpy(&legal_consent_status_, &from.legal_consent_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&star_count_) -
    reinterpret_cast<char*>(&legal_consent_status_)) + sizeof(star_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.App)
}

void App::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_tier_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_count_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(star_count_));
}

App::~App() {
  // @@protoc_insertion_point(destructor:clarifai.api.App)
  SharedDtor();
}

void App::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_tier_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete visibility_;
  if (this != internal_default_instance()) delete modified_at_;
}

void App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const App& App::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void App::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_tier_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  ::memset(&legal_consent_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_count_) -
      reinterpret_cast<char*>(&legal_consent_status_)) + sizeof(star_count_));
  _internal_metadata_.Clear();
}

const char* App::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string default_language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_default_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.default_language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string default_workflow_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_default_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.default_workflow_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 legal_consent_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          legal_consent_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sample_ms = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          sample_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data_tier_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_data_tier_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.data_tier_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_starred = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 star_count = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          star_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notes = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.notes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* App::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string default_language = 3;
  if (this->default_language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_language().data(), static_cast<int>(this->_internal_default_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.default_language");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_default_language(), target);
  }

  // string default_workflow_id = 4;
  if (this->default_workflow_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_workflow_id().data(), static_cast<int>(this->_internal_default_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.default_workflow_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_default_workflow_id(), target);
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::created_at(this), target, stream);
  }

  // uint32 legal_consent_status = 7;
  if (this->legal_consent_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_legal_consent_status(), target);
  }

  // .google.protobuf.Struct metadata = 13;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::metadata(this), target, stream);
  }

  // string description = 14;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.description");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_description(), target);
  }

  // uint32 sample_ms = 15;
  if (this->sample_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_sample_ms(), target);
  }

  // .clarifai.api.Visibility visibility = 16;
  if (this->has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::visibility(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 17;
  if (this->has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::modified_at(this), target, stream);
  }

  // string data_tier_id = 18;
  if (this->data_tier_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_tier_id().data(), static_cast<int>(this->_internal_data_tier_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.data_tier_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_data_tier_id(), target);
  }

  // bool is_starred = 19;
  if (this->is_starred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_is_starred(), target);
  }

  // int32 star_count = 20;
  if (this->star_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_star_count(), target);
  }

  // string notes = 21;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.notes");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_notes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.App)
  return target;
}

size_t App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.App)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string default_language = 3;
  if (this->default_language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_language());
  }

  // string default_workflow_id = 4;
  if (this->default_workflow_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_workflow_id());
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string description = 14;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string data_tier_id = 18;
  if (this->data_tier_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_tier_id());
  }

  // string notes = 21;
  if (this->notes().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Struct metadata = 13;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .clarifai.api.Visibility visibility = 16;
  if (this->has_visibility()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .google.protobuf.Timestamp modified_at = 17;
  if (this->has_modified_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // uint32 legal_consent_status = 7;
  if (this->legal_consent_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_legal_consent_status());
  }

  // uint32 sample_ms = 15;
  if (this->sample_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sample_ms());
  }

  // bool is_starred = 19;
  if (this->is_starred() != 0) {
    total_size += 2 + 1;
  }

  // int32 star_count = 20;
  if (this->star_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_star_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void App::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.App)
  GOOGLE_DCHECK_NE(&from, this);
  const App* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<App>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.App)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.App)
    MergeFrom(*source);
  }
}

void App::MergeFrom(const App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.default_language().size() > 0) {

    default_language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.default_language_);
  }
  if (from.default_workflow_id().size() > 0) {

    default_workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.default_workflow_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.data_tier_id().size() > 0) {

    data_tier_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_tier_id_);
  }
  if (from.notes().size() > 0) {

    notes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from.has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from.has_modified_at()) {
    _internal_mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from.legal_consent_status() != 0) {
    _internal_set_legal_consent_status(from._internal_legal_consent_status());
  }
  if (from.sample_ms() != 0) {
    _internal_set_sample_ms(from._internal_sample_ms());
  }
  if (from.is_starred() != 0) {
    _internal_set_is_starred(from._internal_is_starred());
  }
  if (from.star_count() != 0) {
    _internal_set_star_count(from._internal_star_count());
  }
}

void App::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void App::CopyFrom(const App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool App::IsInitialized() const {
  return true;
}

void App::InternalSwap(App* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  default_language_.Swap(&other->default_language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  default_workflow_id_.Swap(&other->default_workflow_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_tier_id_.Swap(&other->data_tier_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(created_at_, other->created_at_);
  swap(metadata_, other->metadata_);
  swap(visibility_, other->visibility_);
  swap(modified_at_, other->modified_at_);
  swap(legal_consent_status_, other->legal_consent_status_);
  swap(sample_ms_, other->sample_ms_);
  swap(is_starred_, other->is_starred_);
  swap(star_count_, other->star_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata App::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppQuery::InitAsDefaultInstance() {
}
class AppQuery::_Internal {
 public:
};

AppQuery::AppQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.AppQuery)
}
AppQuery::AppQuery(const AppQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AppQuery)
}

void AppQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppQuery::~AppQuery() {
  // @@protoc_insertion_point(destructor:clarifai.api.AppQuery)
  SharedDtor();
}

void AppQuery::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppQuery& AppQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void AppQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AppQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AppQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AppQuery.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AppQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppQuery.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AppQuery)
  return target;
}

size_t AppQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AppQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.AppQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const AppQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.AppQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.AppQuery)
    MergeFrom(*source);
  }
}

void AppQuery::MergeFrom(const AppQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AppQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void AppQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.AppQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppQuery::CopyFrom(const AppQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AppQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppQuery::IsInitialized() const {
  return true;
}

void AppQuery::InternalSwap(AppQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AppQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Collaborator::InitAsDefaultInstance() {
  ::clarifai::api::_Collaborator_default_instance_._instance.get_mutable()->app_ = const_cast< ::clarifai::api::App*>(
      ::clarifai::api::App::internal_default_instance());
  ::clarifai::api::_Collaborator_default_instance_._instance.get_mutable()->user_ = const_cast< ::clarifai::api::User*>(
      ::clarifai::api::User::internal_default_instance());
  ::clarifai::api::_Collaborator_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Collaborator_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Collaborator_default_instance_._instance.get_mutable()->deleted_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Collaborator::_Internal {
 public:
  static const ::clarifai::api::App& app(const Collaborator* msg);
  static const ::clarifai::api::User& user(const Collaborator* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Collaborator* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Collaborator* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const Collaborator* msg);
};

const ::clarifai::api::App&
Collaborator::_Internal::app(const Collaborator* msg) {
  return *msg->app_;
}
const ::clarifai::api::User&
Collaborator::_Internal::user(const Collaborator* msg) {
  return *msg->user_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Collaborator::_Internal::created_at(const Collaborator* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Collaborator::_Internal::modified_at(const Collaborator* msg) {
  return *msg->modified_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Collaborator::_Internal::deleted_at(const Collaborator* msg) {
  return *msg->deleted_at_;
}
void Collaborator::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Collaborator::clear_modified_at() {
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void Collaborator::clear_deleted_at() {
  if (GetArenaNoVirtual() == nullptr && deleted_at_ != nullptr) {
    delete deleted_at_;
  }
  deleted_at_ = nullptr;
}
Collaborator::Collaborator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Collaborator)
}
Collaborator::Collaborator(const Collaborator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      scopes_(from.scopes_),
      endpoints_(from.endpoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_app()) {
    app_ = new ::clarifai::api::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  if (from._internal_has_user()) {
    user_ = new ::clarifai::api::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_deleted_at()) {
    deleted_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.deleted_at_);
  } else {
    deleted_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Collaborator)
}

void Collaborator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Collaborator_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deleted_at_) -
      reinterpret_cast<char*>(&app_)) + sizeof(deleted_at_));
}

Collaborator::~Collaborator() {
  // @@protoc_insertion_point(destructor:clarifai.api.Collaborator)
  SharedDtor();
}

void Collaborator::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete app_;
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete deleted_at_;
}

void Collaborator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Collaborator& Collaborator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Collaborator_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Collaborator::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Collaborator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  endpoints_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && deleted_at_ != nullptr) {
    delete deleted_at_;
  }
  deleted_at_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Collaborator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collaborator.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.App app = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.User user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string scopes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collaborator.scopes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string endpoints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collaborator.endpoints"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp deleted_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Collaborator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Collaborator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collaborator.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.App app = 2;
  if (this->has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app(this), target, stream);
  }

  // .clarifai.api.User user = 3;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user(this), target, stream);
  }

  // repeated string scopes = 4;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collaborator.scopes");
    target = stream->WriteString(4, s, target);
  }

  // repeated string endpoints = 5;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collaborator.endpoints");
    target = stream->WriteString(5, s, target);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 7;
  if (this->has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::modified_at(this), target, stream);
  }

  // .google.protobuf.Timestamp deleted_at = 8;
  if (this->has_deleted_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::deleted_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Collaborator)
  return target;
}

size_t Collaborator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Collaborator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(scopes_.size());
  for (int i = 0, n = scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      scopes_.Get(i));
  }

  // repeated string endpoints = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(endpoints_.size());
  for (int i = 0, n = endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      endpoints_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.App app = 2;
  if (this->has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  // .clarifai.api.User user = 3;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 7;
  if (this->has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .google.protobuf.Timestamp deleted_at = 8;
  if (this->has_deleted_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deleted_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Collaborator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Collaborator)
  GOOGLE_DCHECK_NE(&from, this);
  const Collaborator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Collaborator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Collaborator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Collaborator)
    MergeFrom(*source);
  }
}

void Collaborator::MergeFrom(const Collaborator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Collaborator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  endpoints_.MergeFrom(from.endpoints_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_app()) {
    _internal_mutable_app()->::clarifai::api::App::MergeFrom(from._internal_app());
  }
  if (from.has_user()) {
    _internal_mutable_user()->::clarifai::api::User::MergeFrom(from._internal_user());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_modified_at()) {
    _internal_mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from.has_deleted_at()) {
    _internal_mutable_deleted_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_deleted_at());
  }
}

void Collaborator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Collaborator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collaborator::CopyFrom(const Collaborator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Collaborator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collaborator::IsInitialized() const {
  return true;
}

void Collaborator::InternalSwap(Collaborator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  scopes_.InternalSwap(&other->scopes_);
  endpoints_.InternalSwap(&other->endpoints_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_, other->app_);
  swap(user_, other->user_);
  swap(created_at_, other->created_at_);
  swap(modified_at_, other->modified_at_);
  swap(deleted_at_, other->deleted_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Collaborator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Collaboration::InitAsDefaultInstance() {
  ::clarifai::api::_Collaboration_default_instance_._instance.get_mutable()->app_ = const_cast< ::clarifai::api::App*>(
      ::clarifai::api::App::internal_default_instance());
  ::clarifai::api::_Collaboration_default_instance_._instance.get_mutable()->app_owner_ = const_cast< ::clarifai::api::User*>(
      ::clarifai::api::User::internal_default_instance());
  ::clarifai::api::_Collaboration_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Collaboration::_Internal {
 public:
  static const ::clarifai::api::App& app(const Collaboration* msg);
  static const ::clarifai::api::User& app_owner(const Collaboration* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Collaboration* msg);
};

const ::clarifai::api::App&
Collaboration::_Internal::app(const Collaboration* msg) {
  return *msg->app_;
}
const ::clarifai::api::User&
Collaboration::_Internal::app_owner(const Collaboration* msg) {
  return *msg->app_owner_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Collaboration::_Internal::created_at(const Collaboration* msg) {
  return *msg->created_at_;
}
void Collaboration::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
Collaboration::Collaboration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Collaboration)
}
Collaboration::Collaboration(const Collaboration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      scopes_(from.scopes_),
      endpoints_(from.endpoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_app()) {
    app_ = new ::clarifai::api::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  if (from._internal_has_app_owner()) {
    app_owner_ = new ::clarifai::api::User(*from.app_owner_);
  } else {
    app_owner_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Collaboration)
}

void Collaboration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Collaboration_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&app_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&created_at_) -
      reinterpret_cast<char*>(&app_)) + sizeof(created_at_));
}

Collaboration::~Collaboration() {
  // @@protoc_insertion_point(destructor:clarifai.api.Collaboration)
  SharedDtor();
}

void Collaboration::SharedDtor() {
  if (this != internal_default_instance()) delete app_;
  if (this != internal_default_instance()) delete app_owner_;
  if (this != internal_default_instance()) delete created_at_;
}

void Collaboration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Collaboration& Collaboration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Collaboration_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Collaboration::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Collaboration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  endpoints_.Clear();
  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && app_owner_ != nullptr) {
    delete app_owner_;
  }
  app_owner_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Collaboration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.App app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.User app_owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string scopes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collaboration.scopes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string endpoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collaboration.endpoints"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Collaboration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Collaboration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.App app = 1;
  if (this->has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::app(this), target, stream);
  }

  // .clarifai.api.User app_owner = 2;
  if (this->has_app_owner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app_owner(this), target, stream);
  }

  // repeated string scopes = 3;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collaboration.scopes");
    target = stream->WriteString(3, s, target);
  }

  // repeated string endpoints = 4;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collaboration.endpoints");
    target = stream->WriteString(4, s, target);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::created_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Collaboration)
  return target;
}

size_t Collaboration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Collaboration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(scopes_.size());
  for (int i = 0, n = scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      scopes_.Get(i));
  }

  // repeated string endpoints = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(endpoints_.size());
  for (int i = 0, n = endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      endpoints_.Get(i));
  }

  // .clarifai.api.App app = 1;
  if (this->has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  // .clarifai.api.User app_owner = 2;
  if (this->has_app_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_owner_);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Collaboration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Collaboration)
  GOOGLE_DCHECK_NE(&from, this);
  const Collaboration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Collaboration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Collaboration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Collaboration)
    MergeFrom(*source);
  }
}

void Collaboration::MergeFrom(const Collaboration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Collaboration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  endpoints_.MergeFrom(from.endpoints_);
  if (from.has_app()) {
    _internal_mutable_app()->::clarifai::api::App::MergeFrom(from._internal_app());
  }
  if (from.has_app_owner()) {
    _internal_mutable_app_owner()->::clarifai::api::User::MergeFrom(from._internal_app_owner());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
}

void Collaboration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Collaboration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collaboration::CopyFrom(const Collaboration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Collaboration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collaboration::IsInitialized() const {
  return true;
}

void Collaboration::InternalSwap(Collaboration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  scopes_.InternalSwap(&other->scopes_);
  endpoints_.InternalSwap(&other->endpoints_);
  swap(app_, other->app_);
  swap(app_owner_, other->app_owner_);
  swap(created_at_, other->created_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Collaboration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Audio::InitAsDefaultInstance() {
  ::clarifai::api::_Audio_default_instance_._instance.get_mutable()->hosted_ = const_cast< ::clarifai::api::HostedURL*>(
      ::clarifai::api::HostedURL::internal_default_instance());
  ::clarifai::api::_Audio_default_instance_._instance.get_mutable()->audio_info_ = const_cast< ::clarifai::api::AudioInfo*>(
      ::clarifai::api::AudioInfo::internal_default_instance());
}
class Audio::_Internal {
 public:
  static const ::clarifai::api::HostedURL& hosted(const Audio* msg);
  static const ::clarifai::api::AudioInfo& audio_info(const Audio* msg);
};

const ::clarifai::api::HostedURL&
Audio::_Internal::hosted(const Audio* msg) {
  return *msg->hosted_;
}
const ::clarifai::api::AudioInfo&
Audio::_Internal::audio_info(const Audio* msg) {
  return *msg->audio_info_;
}
Audio::Audio()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Audio)
}
Audio::Audio(const Audio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  base64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base64().empty()) {
    base64_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base64_);
  }
  if (from._internal_has_hosted()) {
    hosted_ = new ::clarifai::api::HostedURL(*from.hosted_);
  } else {
    hosted_ = nullptr;
  }
  if (from._internal_has_audio_info()) {
    audio_info_ = new ::clarifai::api::AudioInfo(*from.audio_info_);
  } else {
    audio_info_ = nullptr;
  }
  allow_duplicate_url_ = from.allow_duplicate_url_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Audio)
}

void Audio::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Audio_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hosted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_duplicate_url_) -
      reinterpret_cast<char*>(&hosted_)) + sizeof(allow_duplicate_url_));
}

Audio::~Audio() {
  // @@protoc_insertion_point(destructor:clarifai.api.Audio)
  SharedDtor();
}

void Audio::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base64_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hosted_;
  if (this != internal_default_instance()) delete audio_info_;
}

void Audio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Audio& Audio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Audio_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Audio::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Audio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base64_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hosted_ != nullptr) {
    delete hosted_;
  }
  hosted_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && audio_info_ != nullptr) {
    delete audio_info_;
  }
  audio_info_ = nullptr;
  allow_duplicate_url_ = false;
  _internal_metadata_.Clear();
}

const char* Audio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Audio.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes base64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_base64();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_duplicate_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          allow_duplicate_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.HostedURL hosted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hosted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.AudioInfo audio_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Audio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Audio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Audio.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // bytes base64 = 2;
  if (this->base64().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_base64(), target);
  }

  // bool allow_duplicate_url = 4;
  if (this->allow_duplicate_url() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_duplicate_url(), target);
  }

  // .clarifai.api.HostedURL hosted = 5;
  if (this->has_hosted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hosted(this), target, stream);
  }

  // .clarifai.api.AudioInfo audio_info = 6;
  if (this->has_audio_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::audio_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Audio)
  return target;
}

size_t Audio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Audio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // bytes base64 = 2;
  if (this->base64().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_base64());
  }

  // .clarifai.api.HostedURL hosted = 5;
  if (this->has_hosted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hosted_);
  }

  // .clarifai.api.AudioInfo audio_info = 6;
  if (this->has_audio_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_info_);
  }

  // bool allow_duplicate_url = 4;
  if (this->allow_duplicate_url() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Audio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  const Audio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Audio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Audio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Audio)
    MergeFrom(*source);
  }
}

void Audio::MergeFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.base64().size() > 0) {

    base64_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base64_);
  }
  if (from.has_hosted()) {
    _internal_mutable_hosted()->::clarifai::api::HostedURL::MergeFrom(from._internal_hosted());
  }
  if (from.has_audio_info()) {
    _internal_mutable_audio_info()->::clarifai::api::AudioInfo::MergeFrom(from._internal_audio_info());
  }
  if (from.allow_duplicate_url() != 0) {
    _internal_set_allow_duplicate_url(from._internal_allow_duplicate_url());
  }
}

void Audio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Audio::CopyFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Audio::IsInitialized() const {
  return true;
}

void Audio::InternalSwap(Audio* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  base64_.Swap(&other->base64_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hosted_, other->hosted_);
  swap(audio_info_, other->audio_info_);
  swap(allow_duplicate_url_, other->allow_duplicate_url_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Audio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioInfo::InitAsDefaultInstance() {
}
class AudioInfo::_Internal {
 public:
};

AudioInfo::AudioInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.AudioInfo)
}
AudioInfo::AudioInfo(const AudioInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  audio_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio_format().empty()) {
    audio_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_format_);
  }
  ::memcpy(&sample_rate_, &from.sample_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&bit_rate_) -
    reinterpret_cast<char*>(&sample_rate_)) + sizeof(bit_rate_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AudioInfo)
}

void AudioInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  audio_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sample_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bit_rate_) -
      reinterpret_cast<char*>(&sample_rate_)) + sizeof(bit_rate_));
}

AudioInfo::~AudioInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.AudioInfo)
  SharedDtor();
}

void AudioInfo::SharedDtor() {
  audio_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioInfo& AudioInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void AudioInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AudioInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sample_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bit_rate_) -
      reinterpret_cast<char*>(&sample_rate_)) + sizeof(bit_rate_));
  _internal_metadata_.Clear();
}

const char* AudioInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string audio_format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_audio_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AudioInfo.audio_format"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sample_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float duration_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 bit_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bit_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AudioInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string audio_format = 1;
  if (this->audio_format().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_format().data(), static_cast<int>(this->_internal_audio_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AudioInfo.audio_format");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_audio_format(), target);
  }

  // int32 sample_rate = 2;
  if (this->sample_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sample_rate(), target);
  }

  // float duration_seconds = 3;
  if (!(this->duration_seconds() <= 0 && this->duration_seconds() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_duration_seconds(), target);
  }

  // int32 bit_rate = 4;
  if (this->bit_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bit_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AudioInfo)
  return target;
}

size_t AudioInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AudioInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string audio_format = 1;
  if (this->audio_format().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_format());
  }

  // int32 sample_rate = 2;
  if (this->sample_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sample_rate());
  }

  // float duration_seconds = 3;
  if (!(this->duration_seconds() <= 0 && this->duration_seconds() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 bit_rate = 4;
  if (this->bit_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bit_rate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.AudioInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.AudioInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.AudioInfo)
    MergeFrom(*source);
  }
}

void AudioInfo::MergeFrom(const AudioInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AudioInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audio_format().size() > 0) {

    audio_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_format_);
  }
  if (from.sample_rate() != 0) {
    _internal_set_sample_rate(from._internal_sample_rate());
  }
  if (!(from.duration_seconds() <= 0 && from.duration_seconds() >= 0)) {
    _internal_set_duration_seconds(from._internal_duration_seconds());
  }
  if (from.bit_rate() != 0) {
    _internal_set_bit_rate(from._internal_bit_rate());
  }
}

void AudioInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.AudioInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioInfo::CopyFrom(const AudioInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AudioInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioInfo::IsInitialized() const {
  return true;
}

void AudioInfo::InternalSwap(AudioInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  audio_format_.Swap(&other->audio_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sample_rate_, other->sample_rate_);
  swap(duration_seconds_, other->duration_seconds_);
  swap(bit_rate_, other->bit_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Track::InitAsDefaultInstance() {
  ::clarifai::api::_Track_default_instance_._instance.get_mutable()->data_ = const_cast< ::clarifai::api::Data*>(
      ::clarifai::api::Data::internal_default_instance());
  ::clarifai::api::_Track_default_instance_._instance.get_mutable()->time_info_ = const_cast< ::clarifai::api::TimeInfo*>(
      ::clarifai::api::TimeInfo::internal_default_instance());
}
class Track::_Internal {
 public:
  static const ::clarifai::api::Data& data(const Track* msg);
  static const ::clarifai::api::TimeInfo& time_info(const Track* msg);
};

const ::clarifai::api::Data&
Track::_Internal::data(const Track* msg) {
  return *msg->data_;
}
const ::clarifai::api::TimeInfo&
Track::_Internal::time_info(const Track* msg) {
  return *msg->time_info_;
}
Track::Track()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Track)
}
Track::Track(const Track& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_time_info()) {
    time_info_ = new ::clarifai::api::TimeInfo(*from.time_info_);
  } else {
    time_info_ = nullptr;
  }
  quality_ = from.quality_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Track)
}

void Track::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quality_) -
      reinterpret_cast<char*>(&data_)) + sizeof(quality_));
}

Track::~Track() {
  // @@protoc_insertion_point(destructor:clarifai.api.Track)
  SharedDtor();
}

void Track::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete time_info_;
}

void Track::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Track& Track::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Track::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Track)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_info_ != nullptr) {
    delete time_info_;
  }
  time_info_ = nullptr;
  quality_ = 0;
  _internal_metadata_.Clear();
}

const char* Track::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Track.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.TimeInfo time_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float quality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Track::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Track)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Track.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.Data data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // .clarifai.api.TimeInfo time_info = 4;
  if (this->has_time_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::time_info(this), target, stream);
  }

  // float quality = 5;
  if (!(this->quality() <= 0 && this->quality() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Track)
  return target;
}

size_t Track::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Track)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.Data data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .clarifai.api.TimeInfo time_info = 4;
  if (this->has_time_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_info_);
  }

  // float quality = 5;
  if (!(this->quality() <= 0 && this->quality() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Track::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Track)
  GOOGLE_DCHECK_NE(&from, this);
  const Track* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Track>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Track)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Track)
    MergeFrom(*source);
  }
}

void Track::MergeFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Track)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (from.has_time_info()) {
    _internal_mutable_time_info()->::clarifai::api::TimeInfo::MergeFrom(from._internal_time_info());
  }
  if (!(from.quality() <= 0 && from.quality() >= 0)) {
    _internal_set_quality(from._internal_quality());
  }
}

void Track::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Track::CopyFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {
  return true;
}

void Track::InternalSwap(Track* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(time_info_, other->time_info_);
  swap(quality_, other->quality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Track::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Cluster::InitAsDefaultInstance() {
}
class Cluster::_Internal {
 public:
};

Cluster::Cluster()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Cluster)
}
Cluster::Cluster(const Cluster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      hits_(from.hits_),
      projection_(from.projection_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&count_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Cluster)
}

void Cluster::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&count_)) + sizeof(score_));
}

Cluster::~Cluster() {
  // @@protoc_insertion_point(destructor:clarifai.api.Cluster)
  SharedDtor();
}

void Cluster::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Cluster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cluster& Cluster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Cluster::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Cluster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_.Clear();
  projection_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&count_)) + sizeof(score_));
  _internal_metadata_.Clear();
}

const char* Cluster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Cluster.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit hits = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float projection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_projection(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_projection(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cluster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Cluster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Cluster.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // float score = 3;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_score(), target);
  }

  // repeated .clarifai.api.Hit hits = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_hits(i), target, stream);
  }

  // repeated float projection = 5;
  if (this->_internal_projection_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_projection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Cluster)
  return target;
}

size_t Cluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Cluster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Hit hits = 4;
  total_size += 1UL * this->_internal_hits_size();
  for (const auto& msg : this->hits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float projection = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_projection_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _projection_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  // float score = 3;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cluster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Cluster)
  GOOGLE_DCHECK_NE(&from, this);
  const Cluster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cluster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Cluster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Cluster)
    MergeFrom(*source);
  }
}

void Cluster::MergeFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Cluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hits_.MergeFrom(from.hits_);
  projection_.MergeFrom(from.projection_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    _internal_set_score(from._internal_score());
  }
}

void Cluster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cluster::CopyFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster::IsInitialized() const {
  return true;
}

void Cluster::InternalSwap(Cluster* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hits_.InternalSwap(&other->hits_);
  projection_.InternalSwap(&other->projection_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cluster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Color::InitAsDefaultInstance() {
  ::clarifai::api::_Color_default_instance_._instance.get_mutable()->w3c_ = const_cast< ::clarifai::api::W3C*>(
      ::clarifai::api::W3C::internal_default_instance());
}
class Color::_Internal {
 public:
  static const ::clarifai::api::W3C& w3c(const Color* msg);
};

const ::clarifai::api::W3C&
Color::_Internal::w3c(const Color* msg) {
  return *msg->w3c_;
}
Color::Color()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_hex().empty()) {
    raw_hex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_hex_);
  }
  if (from._internal_has_w3c()) {
    w3c_ = new ::clarifai::api::W3C(*from.w3c_);
  } else {
    w3c_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Color)
}

void Color::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Color_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  raw_hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&w3c_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&w3c_)) + sizeof(value_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:clarifai.api.Color)
  SharedDtor();
}

void Color::SharedDtor() {
  raw_hex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete w3c_;
}

void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Color& Color::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Color_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_hex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && w3c_ != nullptr) {
    delete w3c_;
  }
  w3c_ = nullptr;
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string raw_hex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_raw_hex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Color.raw_hex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.W3C w3c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_w3c(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string raw_hex = 1;
  if (this->raw_hex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_hex().data(), static_cast<int>(this->_internal_raw_hex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Color.raw_hex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_raw_hex(), target);
  }

  // .clarifai.api.W3C w3c = 2;
  if (this->has_w3c()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::w3c(this), target, stream);
  }

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Color)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string raw_hex = 1;
  if (this->raw_hex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_hex());
  }

  // .clarifai.api.W3C w3c = 2;
  if (this->has_w3c()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *w3c_);
  }

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Color)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw_hex().size() > 0) {

    raw_hex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_hex_);
  }
  if (from.has_w3c()) {
    _internal_mutable_w3c()->::clarifai::api::W3C::MergeFrom(from._internal_w3c());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void Color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  raw_hex_.Swap(&other->raw_hex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(w3c_, other->w3c_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void W3C::InitAsDefaultInstance() {
}
class W3C::_Internal {
 public:
};

W3C::W3C()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.W3C)
}
W3C::W3C(const W3C& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hex().empty()) {
    hex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hex_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.W3C)
}

void W3C::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_W3C_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

W3C::~W3C() {
  // @@protoc_insertion_point(destructor:clarifai.api.W3C)
  SharedDtor();
}

void W3C::SharedDtor() {
  hex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void W3C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const W3C& W3C::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_W3C_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void W3C::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.W3C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* W3C::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.W3C.hex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.W3C.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* W3C::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.W3C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hex = 1;
  if (this->hex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hex().data(), static_cast<int>(this->_internal_hex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.W3C.hex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hex(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.W3C.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.W3C)
  return target;
}

size_t W3C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.W3C)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hex = 1;
  if (this->hex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hex());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void W3C::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.W3C)
  GOOGLE_DCHECK_NE(&from, this);
  const W3C* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<W3C>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.W3C)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.W3C)
    MergeFrom(*source);
  }
}

void W3C::MergeFrom(const W3C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.W3C)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hex().size() > 0) {

    hex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hex_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void W3C::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.W3C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void W3C::CopyFrom(const W3C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.W3C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool W3C::IsInitialized() const {
  return true;
}

void W3C::InternalSwap(W3C* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hex_.Swap(&other->hex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata W3C::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserAppIDSet::InitAsDefaultInstance() {
}
class UserAppIDSet::_Internal {
 public:
};

UserAppIDSet::UserAppIDSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.UserAppIDSet)
}
UserAppIDSet::UserAppIDSet(const UserAppIDSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.UserAppIDSet)
}

void UserAppIDSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserAppIDSet::~UserAppIDSet() {
  // @@protoc_insertion_point(destructor:clarifai.api.UserAppIDSet)
  SharedDtor();
}

void UserAppIDSet::SharedDtor() {
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserAppIDSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserAppIDSet& UserAppIDSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void UserAppIDSet::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.UserAppIDSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UserAppIDSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.UserAppIDSet.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.UserAppIDSet.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserAppIDSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.UserAppIDSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserAppIDSet.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserAppIDSet.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.UserAppIDSet)
  return target;
}

size_t UserAppIDSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.UserAppIDSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserAppIDSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.UserAppIDSet)
  GOOGLE_DCHECK_NE(&from, this);
  const UserAppIDSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserAppIDSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.UserAppIDSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.UserAppIDSet)
    MergeFrom(*source);
  }
}

void UserAppIDSet::MergeFrom(const UserAppIDSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.UserAppIDSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
}

void UserAppIDSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.UserAppIDSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAppIDSet::CopyFrom(const UserAppIDSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.UserAppIDSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAppIDSet::IsInitialized() const {
  return true;
}

void UserAppIDSet::InternalSwap(UserAppIDSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAppIDSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchAction::InitAsDefaultInstance() {
}
class PatchAction::_Internal {
 public:
};

PatchAction::PatchAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchAction)
}
PatchAction::PatchAction(const PatchAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op().empty()) {
    op_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_);
  }
  merge_conflict_resolution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_merge_conflict_resolution().empty()) {
    merge_conflict_resolution_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merge_conflict_resolution_);
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAction)
}

void PatchAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchAction_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merge_conflict_resolution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PatchAction::~PatchAction() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAction)
  SharedDtor();
}

void PatchAction::SharedDtor() {
  op_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merge_conflict_resolution_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PatchAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchAction& PatchAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchAction_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void PatchAction::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merge_conflict_resolution_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PatchAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_op();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAction.op"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string merge_conflict_resolution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_merge_conflict_resolution();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAction.merge_conflict_resolution"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAction.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string op = 1;
  if (this->op().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op().data(), static_cast<int>(this->_internal_op().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAction.op");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_op(), target);
  }

  // string merge_conflict_resolution = 2;
  if (this->merge_conflict_resolution().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_merge_conflict_resolution().data(), static_cast<int>(this->_internal_merge_conflict_resolution().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAction.merge_conflict_resolution");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_merge_conflict_resolution(), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAction.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAction)
  return target;
}

size_t PatchAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string op = 1;
  if (this->op().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op());
  }

  // string merge_conflict_resolution = 2;
  if (this->merge_conflict_resolution().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_merge_conflict_resolution());
  }

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchAction)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchAction)
    MergeFrom(*source);
  }
}

void PatchAction::MergeFrom(const PatchAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op().size() > 0) {

    op_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_);
  }
  if (from.merge_conflict_resolution().size() > 0) {

    merge_conflict_resolution_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merge_conflict_resolution_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void PatchAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchAction::CopyFrom(const PatchAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAction::IsInitialized() const {
  return true;
}

void PatchAction::InternalSwap(PatchAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  op_.Swap(&other->op_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  merge_conflict_resolution_.Swap(&other->merge_conflict_resolution_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Concept::InitAsDefaultInstance() {
  ::clarifai::api::_Concept_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Concept_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::clarifai::api::Visibility*>(
      ::clarifai::api::Visibility::internal_default_instance());
}
class Concept::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Concept* msg);
  static const ::clarifai::api::Visibility& visibility(const Concept* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Concept::_Internal::created_at(const Concept* msg) {
  return *msg->created_at_;
}
const ::clarifai::api::Visibility&
Concept::_Internal::visibility(const Concept* msg) {
  return *msg->visibility_;
}
void Concept::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
Concept::Concept()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Concept)
}
Concept::Concept(const Concept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  definition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_definition().empty()) {
    definition_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.definition_);
  }
  vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vocab_id().empty()) {
    vocab_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vocab_id_);
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Concept)
}

void Concept::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  definition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(value_));
}

Concept::~Concept() {
  // @@protoc_insertion_point(destructor:clarifai.api.Concept)
  SharedDtor();
}

void Concept::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  definition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vocab_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete visibility_;
}

void Concept::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Concept& Concept::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Concept::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Concept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  definition_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vocab_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* Concept::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Concept.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Concept.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_default_float) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Concept.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Concept.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string definition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_definition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Concept.definition"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vocab_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_vocab_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Concept.vocab_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Concept.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Concept::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Concept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_default_float) = 1];
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_value(), target);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::created_at(this), target, stream);
  }

  // string language = 5;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.language");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language(), target);
  }

  // string app_id = 6;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.app_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_app_id(), target);
  }

  // string definition = 7;
  if (this->definition().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_definition().data(), static_cast<int>(this->_internal_definition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.definition");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_definition(), target);
  }

  // string vocab_id = 8;
  if (this->vocab_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vocab_id().data(), static_cast<int>(this->_internal_vocab_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.vocab_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_vocab_id(), target);
  }

  // .clarifai.api.Visibility visibility = 9;
  if (this->has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::visibility(this), target, stream);
  }

  // string user_id = 10;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.user_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Concept)
  return target;
}

size_t Concept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Concept)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string language = 5;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string app_id = 6;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string definition = 7;
  if (this->definition().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_definition());
  }

  // string vocab_id = 8;
  if (this->vocab_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vocab_id());
  }

  // string user_id = 10;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .clarifai.api.Visibility visibility = 9;
  if (this->has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_default_float) = 1];
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Concept::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Concept)
  GOOGLE_DCHECK_NE(&from, this);
  const Concept* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Concept>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Concept)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Concept)
    MergeFrom(*source);
  }
}

void Concept::MergeFrom(const Concept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Concept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.definition().size() > 0) {

    definition_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.definition_);
  }
  if (from.vocab_id().size() > 0) {

    vocab_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vocab_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void Concept::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Concept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Concept::CopyFrom(const Concept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Concept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Concept::IsInitialized() const {
  return true;
}

void Concept::InternalSwap(Concept* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  definition_.Swap(&other->definition_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vocab_id_.Swap(&other->vocab_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(created_at_, other->created_at_);
  swap(visibility_, other->visibility_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Concept::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConceptCount::InitAsDefaultInstance() {
  ::clarifai::api::_ConceptCount_default_instance_._instance.get_mutable()->concept_type_count_ = const_cast< ::clarifai::api::ConceptTypeCount*>(
      ::clarifai::api::ConceptTypeCount::internal_default_instance());
  ::clarifai::api::_ConceptCount_default_instance_._instance.get_mutable()->detail_concept_count_ = const_cast< ::clarifai::api::DetailConceptCount*>(
      ::clarifai::api::DetailConceptCount::internal_default_instance());
}
class ConceptCount::_Internal {
 public:
  static const ::clarifai::api::ConceptTypeCount& concept_type_count(const ConceptCount* msg);
  static const ::clarifai::api::DetailConceptCount& detail_concept_count(const ConceptCount* msg);
};

const ::clarifai::api::ConceptTypeCount&
ConceptCount::_Internal::concept_type_count(const ConceptCount* msg) {
  return *msg->concept_type_count_;
}
const ::clarifai::api::DetailConceptCount&
ConceptCount::_Internal::detail_concept_count(const ConceptCount* msg) {
  return *msg->detail_concept_count_;
}
ConceptCount::ConceptCount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ConceptCount)
}
ConceptCount::ConceptCount(const ConceptCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_concept_type_count()) {
    concept_type_count_ = new ::clarifai::api::ConceptTypeCount(*from.concept_type_count_);
  } else {
    concept_type_count_ = nullptr;
  }
  if (from._internal_has_detail_concept_count()) {
    detail_concept_count_ = new ::clarifai::api::DetailConceptCount(*from.detail_concept_count_);
  } else {
    detail_concept_count_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptCount)
}

void ConceptCount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&concept_type_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detail_concept_count_) -
      reinterpret_cast<char*>(&concept_type_count_)) + sizeof(detail_concept_count_));
}

ConceptCount::~ConceptCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptCount)
  SharedDtor();
}

void ConceptCount::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete concept_type_count_;
  if (this != internal_default_instance()) delete detail_concept_count_;
}

void ConceptCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConceptCount& ConceptCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ConceptCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && concept_type_count_ != nullptr) {
    delete concept_type_count_;
  }
  concept_type_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && detail_concept_count_ != nullptr) {
    delete detail_concept_count_;
  }
  detail_concept_count_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ConceptCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptCount.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptCount.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ConceptTypeCount concept_type_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept_type_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.DetailConceptCount detail_concept_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail_concept_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConceptCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptCount.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptCount.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .clarifai.api.ConceptTypeCount concept_type_count = 3;
  if (this->has_concept_type_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::concept_type_count(this), target, stream);
  }

  // .clarifai.api.DetailConceptCount detail_concept_count = 4;
  if (this->has_detail_concept_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::detail_concept_count(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptCount)
  return target;
}

size_t ConceptCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .clarifai.api.ConceptTypeCount concept_type_count = 3;
  if (this->has_concept_type_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_type_count_);
  }

  // .clarifai.api.DetailConceptCount detail_concept_count = 4;
  if (this->has_detail_concept_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_concept_count_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConceptCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ConceptCount)
  GOOGLE_DCHECK_NE(&from, this);
  const ConceptCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConceptCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ConceptCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ConceptCount)
    MergeFrom(*source);
  }
}

void ConceptCount::MergeFrom(const ConceptCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_concept_type_count()) {
    _internal_mutable_concept_type_count()->::clarifai::api::ConceptTypeCount::MergeFrom(from._internal_concept_type_count());
  }
  if (from.has_detail_concept_count()) {
    _internal_mutable_detail_concept_count()->::clarifai::api::DetailConceptCount::MergeFrom(from._internal_detail_concept_count());
  }
}

void ConceptCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ConceptCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConceptCount::CopyFrom(const ConceptCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptCount::IsInitialized() const {
  return true;
}

void ConceptCount::InternalSwap(ConceptCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(concept_type_count_, other->concept_type_count_);
  swap(detail_concept_count_, other->detail_concept_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConceptTypeCount::InitAsDefaultInstance() {
}
class ConceptTypeCount::_Internal {
 public:
};

ConceptTypeCount::ConceptTypeCount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ConceptTypeCount)
}
ConceptTypeCount::ConceptTypeCount(const ConceptTypeCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&positive_, &from.positive_,
    static_cast<size_t>(reinterpret_cast<char*>(&negative_) -
    reinterpret_cast<char*>(&positive_)) + sizeof(negative_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptTypeCount)
}

void ConceptTypeCount::SharedCtor() {
  ::memset(&positive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&negative_) -
      reinterpret_cast<char*>(&positive_)) + sizeof(negative_));
}

ConceptTypeCount::~ConceptTypeCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptTypeCount)
  SharedDtor();
}

void ConceptTypeCount::SharedDtor() {
}

void ConceptTypeCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConceptTypeCount& ConceptTypeCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConceptTypeCount_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ConceptTypeCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptTypeCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&positive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&negative_) -
      reinterpret_cast<char*>(&positive_)) + sizeof(negative_));
  _internal_metadata_.Clear();
}

const char* ConceptTypeCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 positive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          positive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 negative = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConceptTypeCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptTypeCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 positive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->positive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_positive(), target);
  }

  // uint32 negative = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->negative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_negative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptTypeCount)
  return target;
}

size_t ConceptTypeCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptTypeCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 positive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->positive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_positive());
  }

  // uint32 negative = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->negative() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_negative());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConceptTypeCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ConceptTypeCount)
  GOOGLE_DCHECK_NE(&from, this);
  const ConceptTypeCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConceptTypeCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ConceptTypeCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ConceptTypeCount)
    MergeFrom(*source);
  }
}

void ConceptTypeCount::MergeFrom(const ConceptTypeCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptTypeCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.positive() != 0) {
    _internal_set_positive(from._internal_positive());
  }
  if (from.negative() != 0) {
    _internal_set_negative(from._internal_negative());
  }
}

void ConceptTypeCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ConceptTypeCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConceptTypeCount::CopyFrom(const ConceptTypeCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptTypeCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptTypeCount::IsInitialized() const {
  return true;
}

void ConceptTypeCount::InternalSwap(ConceptTypeCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(positive_, other->positive_);
  swap(negative_, other->negative_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptTypeCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetailConceptCount::InitAsDefaultInstance() {
  ::clarifai::api::_DetailConceptCount_default_instance_._instance.get_mutable()->processed_ = const_cast< ::clarifai::api::ConceptTypeCount*>(
      ::clarifai::api::ConceptTypeCount::internal_default_instance());
  ::clarifai::api::_DetailConceptCount_default_instance_._instance.get_mutable()->to_process_ = const_cast< ::clarifai::api::ConceptTypeCount*>(
      ::clarifai::api::ConceptTypeCount::internal_default_instance());
  ::clarifai::api::_DetailConceptCount_default_instance_._instance.get_mutable()->errors_ = const_cast< ::clarifai::api::ConceptTypeCount*>(
      ::clarifai::api::ConceptTypeCount::internal_default_instance());
  ::clarifai::api::_DetailConceptCount_default_instance_._instance.get_mutable()->processing_ = const_cast< ::clarifai::api::ConceptTypeCount*>(
      ::clarifai::api::ConceptTypeCount::internal_default_instance());
}
class DetailConceptCount::_Internal {
 public:
  static const ::clarifai::api::ConceptTypeCount& processed(const DetailConceptCount* msg);
  static const ::clarifai::api::ConceptTypeCount& to_process(const DetailConceptCount* msg);
  static const ::clarifai::api::ConceptTypeCount& errors(const DetailConceptCount* msg);
  static const ::clarifai::api::ConceptTypeCount& processing(const DetailConceptCount* msg);
};

const ::clarifai::api::ConceptTypeCount&
DetailConceptCount::_Internal::processed(const DetailConceptCount* msg) {
  return *msg->processed_;
}
const ::clarifai::api::ConceptTypeCount&
DetailConceptCount::_Internal::to_process(const DetailConceptCount* msg) {
  return *msg->to_process_;
}
const ::clarifai::api::ConceptTypeCount&
DetailConceptCount::_Internal::errors(const DetailConceptCount* msg) {
  return *msg->errors_;
}
const ::clarifai::api::ConceptTypeCount&
DetailConceptCount::_Internal::processing(const DetailConceptCount* msg) {
  return *msg->processing_;
}
DetailConceptCount::DetailConceptCount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DetailConceptCount)
}
DetailConceptCount::DetailConceptCount(const DetailConceptCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_processed()) {
    processed_ = new ::clarifai::api::ConceptTypeCount(*from.processed_);
  } else {
    processed_ = nullptr;
  }
  if (from._internal_has_to_process()) {
    to_process_ = new ::clarifai::api::ConceptTypeCount(*from.to_process_);
  } else {
    to_process_ = nullptr;
  }
  if (from._internal_has_errors()) {
    errors_ = new ::clarifai::api::ConceptTypeCount(*from.errors_);
  } else {
    errors_ = nullptr;
  }
  if (from._internal_has_processing()) {
    processing_ = new ::clarifai::api::ConceptTypeCount(*from.processing_);
  } else {
    processing_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DetailConceptCount)
}

void DetailConceptCount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetailConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&processed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processing_) -
      reinterpret_cast<char*>(&processed_)) + sizeof(processing_));
}

DetailConceptCount::~DetailConceptCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.DetailConceptCount)
  SharedDtor();
}

void DetailConceptCount::SharedDtor() {
  if (this != internal_default_instance()) delete processed_;
  if (this != internal_default_instance()) delete to_process_;
  if (this != internal_default_instance()) delete errors_;
  if (this != internal_default_instance()) delete processing_;
}

void DetailConceptCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetailConceptCount& DetailConceptCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetailConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void DetailConceptCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DetailConceptCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && processed_ != nullptr) {
    delete processed_;
  }
  processed_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && to_process_ != nullptr) {
    delete to_process_;
  }
  to_process_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && errors_ != nullptr) {
    delete errors_;
  }
  errors_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && processing_ != nullptr) {
    delete processing_;
  }
  processing_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DetailConceptCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.ConceptTypeCount processed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_processed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ConceptTypeCount to_process = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_process(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ConceptTypeCount errors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_errors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ConceptTypeCount processing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailConceptCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DetailConceptCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.ConceptTypeCount processed = 1;
  if (this->has_processed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::processed(this), target, stream);
  }

  // .clarifai.api.ConceptTypeCount to_process = 2;
  if (this->has_to_process()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::to_process(this), target, stream);
  }

  // .clarifai.api.ConceptTypeCount errors = 3;
  if (this->has_errors()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::errors(this), target, stream);
  }

  // .clarifai.api.ConceptTypeCount processing = 4;
  if (this->has_processing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::processing(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DetailConceptCount)
  return target;
}

size_t DetailConceptCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DetailConceptCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.ConceptTypeCount processed = 1;
  if (this->has_processed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *processed_);
  }

  // .clarifai.api.ConceptTypeCount to_process = 2;
  if (this->has_to_process()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_process_);
  }

  // .clarifai.api.ConceptTypeCount errors = 3;
  if (this->has_errors()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errors_);
  }

  // .clarifai.api.ConceptTypeCount processing = 4;
  if (this->has_processing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *processing_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailConceptCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DetailConceptCount)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailConceptCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailConceptCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DetailConceptCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DetailConceptCount)
    MergeFrom(*source);
  }
}

void DetailConceptCount::MergeFrom(const DetailConceptCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DetailConceptCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_processed()) {
    _internal_mutable_processed()->::clarifai::api::ConceptTypeCount::MergeFrom(from._internal_processed());
  }
  if (from.has_to_process()) {
    _internal_mutable_to_process()->::clarifai::api::ConceptTypeCount::MergeFrom(from._internal_to_process());
  }
  if (from.has_errors()) {
    _internal_mutable_errors()->::clarifai::api::ConceptTypeCount::MergeFrom(from._internal_errors());
  }
  if (from.has_processing()) {
    _internal_mutable_processing()->::clarifai::api::ConceptTypeCount::MergeFrom(from._internal_processing());
  }
}

void DetailConceptCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DetailConceptCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailConceptCount::CopyFrom(const DetailConceptCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DetailConceptCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailConceptCount::IsInitialized() const {
  return true;
}

void DetailConceptCount::InternalSwap(DetailConceptCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(processed_, other->processed_);
  swap(to_process_, other->to_process_);
  swap(errors_, other->errors_);
  swap(processing_, other->processing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailConceptCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConceptQuery::InitAsDefaultInstance() {
}
class ConceptQuery::_Internal {
 public:
};

ConceptQuery::ConceptQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ConceptQuery)
}
ConceptQuery::ConceptQuery(const ConceptQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptQuery)
}

void ConceptQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConceptQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConceptQuery::~ConceptQuery() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptQuery)
  SharedDtor();
}

void ConceptQuery::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConceptQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConceptQuery& ConceptQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConceptQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ConceptQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ConceptQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptQuery.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptQuery.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string workflow_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptQuery.workflow_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConceptQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptQuery.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string language = 2;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptQuery.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  // string workflow_id = 3;
  if (this->workflow_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptQuery.workflow_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_workflow_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptQuery)
  return target;
}

size_t ConceptQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string language = 2;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string workflow_id = 3;
  if (this->workflow_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConceptQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ConceptQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ConceptQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConceptQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ConceptQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ConceptQuery)
    MergeFrom(*source);
  }
}

void ConceptQuery::MergeFrom(const ConceptQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.workflow_id().size() > 0) {

    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
}

void ConceptQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ConceptQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConceptQuery::CopyFrom(const ConceptQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptQuery::IsInitialized() const {
  return true;
}

void ConceptQuery::InternalSwap(ConceptQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  workflow_id_.Swap(&other->workflow_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConceptRelation::InitAsDefaultInstance() {
  ::clarifai::api::_ConceptRelation_default_instance_._instance.get_mutable()->subject_concept_ = const_cast< ::clarifai::api::Concept*>(
      ::clarifai::api::Concept::internal_default_instance());
  ::clarifai::api::_ConceptRelation_default_instance_._instance.get_mutable()->object_concept_ = const_cast< ::clarifai::api::Concept*>(
      ::clarifai::api::Concept::internal_default_instance());
  ::clarifai::api::_ConceptRelation_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::clarifai::api::Visibility*>(
      ::clarifai::api::Visibility::internal_default_instance());
}
class ConceptRelation::_Internal {
 public:
  static const ::clarifai::api::Concept& subject_concept(const ConceptRelation* msg);
  static const ::clarifai::api::Concept& object_concept(const ConceptRelation* msg);
  static const ::clarifai::api::Visibility& visibility(const ConceptRelation* msg);
};

const ::clarifai::api::Concept&
ConceptRelation::_Internal::subject_concept(const ConceptRelation* msg) {
  return *msg->subject_concept_;
}
const ::clarifai::api::Concept&
ConceptRelation::_Internal::object_concept(const ConceptRelation* msg) {
  return *msg->object_concept_;
}
const ::clarifai::api::Visibility&
ConceptRelation::_Internal::visibility(const ConceptRelation* msg) {
  return *msg->visibility_;
}
ConceptRelation::ConceptRelation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ConceptRelation)
}
ConceptRelation::ConceptRelation(const ConceptRelation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  predicate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_predicate().empty()) {
    predicate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.predicate_);
  }
  knowledge_graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_knowledge_graph_id().empty()) {
    knowledge_graph_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.knowledge_graph_id_);
  }
  if (from._internal_has_subject_concept()) {
    subject_concept_ = new ::clarifai::api::Concept(*from.subject_concept_);
  } else {
    subject_concept_ = nullptr;
  }
  if (from._internal_has_object_concept()) {
    object_concept_ = new ::clarifai::api::Concept(*from.object_concept_);
  } else {
    object_concept_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptRelation)
}

void ConceptRelation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConceptRelation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  knowledge_graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&subject_concept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&subject_concept_)) + sizeof(visibility_));
}

ConceptRelation::~ConceptRelation() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptRelation)
  SharedDtor();
}

void ConceptRelation::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  knowledge_graph_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete subject_concept_;
  if (this != internal_default_instance()) delete object_concept_;
  if (this != internal_default_instance()) delete visibility_;
}

void ConceptRelation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConceptRelation& ConceptRelation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConceptRelation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ConceptRelation::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptRelation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  knowledge_graph_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && subject_concept_ != nullptr) {
    delete subject_concept_;
  }
  subject_concept_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && object_concept_ != nullptr) {
    delete object_concept_;
  }
  object_concept_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ConceptRelation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptRelation.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Concept subject_concept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject_concept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Concept object_concept = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_concept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string predicate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_predicate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptRelation.predicate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string knowledge_graph_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_knowledge_graph_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptRelation.knowledge_graph_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConceptRelation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptRelation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptRelation.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.Concept subject_concept = 2;
  if (this->has_subject_concept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::subject_concept(this), target, stream);
  }

  // .clarifai.api.Concept object_concept = 3;
  if (this->has_object_concept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::object_concept(this), target, stream);
  }

  // string predicate = 4;
  if (this->predicate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_predicate().data(), static_cast<int>(this->_internal_predicate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptRelation.predicate");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_predicate(), target);
  }

  // string knowledge_graph_id = 5;
  if (this->knowledge_graph_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_knowledge_graph_id().data(), static_cast<int>(this->_internal_knowledge_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptRelation.knowledge_graph_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_knowledge_graph_id(), target);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::visibility(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptRelation)
  return target;
}

size_t ConceptRelation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptRelation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string predicate = 4;
  if (this->predicate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_predicate());
  }

  // string knowledge_graph_id = 5;
  if (this->knowledge_graph_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_knowledge_graph_id());
  }

  // .clarifai.api.Concept subject_concept = 2;
  if (this->has_subject_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_concept_);
  }

  // .clarifai.api.Concept object_concept = 3;
  if (this->has_object_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_concept_);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConceptRelation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ConceptRelation)
  GOOGLE_DCHECK_NE(&from, this);
  const ConceptRelation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConceptRelation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ConceptRelation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ConceptRelation)
    MergeFrom(*source);
  }
}

void ConceptRelation::MergeFrom(const ConceptRelation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptRelation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.predicate().size() > 0) {

    predicate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.predicate_);
  }
  if (from.knowledge_graph_id().size() > 0) {

    knowledge_graph_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.knowledge_graph_id_);
  }
  if (from.has_subject_concept()) {
    _internal_mutable_subject_concept()->::clarifai::api::Concept::MergeFrom(from._internal_subject_concept());
  }
  if (from.has_object_concept()) {
    _internal_mutable_object_concept()->::clarifai::api::Concept::MergeFrom(from._internal_object_concept());
  }
  if (from.has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
}

void ConceptRelation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ConceptRelation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConceptRelation::CopyFrom(const ConceptRelation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptRelation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptRelation::IsInitialized() const {
  return true;
}

void ConceptRelation::InternalSwap(ConceptRelation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  predicate_.Swap(&other->predicate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  knowledge_graph_id_.Swap(&other->knowledge_graph_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(subject_concept_, other->subject_concept_);
  swap(object_concept_, other->object_concept_);
  swap(visibility_, other->visibility_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptRelation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KnowledgeGraph::InitAsDefaultInstance() {
}
class KnowledgeGraph::_Internal {
 public:
};

KnowledgeGraph::KnowledgeGraph()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.KnowledgeGraph)
}
KnowledgeGraph::KnowledgeGraph(const KnowledgeGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  examples_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_examples_app_id().empty()) {
    examples_app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.examples_app_id_);
  }
  sampled_examples_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sampled_examples_app_id().empty()) {
    sampled_examples_app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sampled_examples_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.KnowledgeGraph)
}

void KnowledgeGraph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KnowledgeGraph_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  examples_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sampled_examples_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KnowledgeGraph::~KnowledgeGraph() {
  // @@protoc_insertion_point(destructor:clarifai.api.KnowledgeGraph)
  SharedDtor();
}

void KnowledgeGraph::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  examples_app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sampled_examples_app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KnowledgeGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KnowledgeGraph& KnowledgeGraph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KnowledgeGraph_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void KnowledgeGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.KnowledgeGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  examples_app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sampled_examples_app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* KnowledgeGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.KnowledgeGraph.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.KnowledgeGraph.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.KnowledgeGraph.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string examples_app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_examples_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.KnowledgeGraph.examples_app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sampled_examples_app_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sampled_examples_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.KnowledgeGraph.sampled_examples_app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KnowledgeGraph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.KnowledgeGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KnowledgeGraph.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KnowledgeGraph.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KnowledgeGraph.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string examples_app_id = 4;
  if (this->examples_app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_examples_app_id().data(), static_cast<int>(this->_internal_examples_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KnowledgeGraph.examples_app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_examples_app_id(), target);
  }

  // string sampled_examples_app_id = 5;
  if (this->sampled_examples_app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sampled_examples_app_id().data(), static_cast<int>(this->_internal_sampled_examples_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KnowledgeGraph.sampled_examples_app_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sampled_examples_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.KnowledgeGraph)
  return target;
}

size_t KnowledgeGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.KnowledgeGraph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string examples_app_id = 4;
  if (this->examples_app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_examples_app_id());
  }

  // string sampled_examples_app_id = 5;
  if (this->sampled_examples_app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sampled_examples_app_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KnowledgeGraph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.KnowledgeGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const KnowledgeGraph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KnowledgeGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.KnowledgeGraph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.KnowledgeGraph)
    MergeFrom(*source);
  }
}

void KnowledgeGraph::MergeFrom(const KnowledgeGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.KnowledgeGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.examples_app_id().size() > 0) {

    examples_app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.examples_app_id_);
  }
  if (from.sampled_examples_app_id().size() > 0) {

    sampled_examples_app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sampled_examples_app_id_);
  }
}

void KnowledgeGraph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.KnowledgeGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KnowledgeGraph::CopyFrom(const KnowledgeGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.KnowledgeGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KnowledgeGraph::IsInitialized() const {
  return true;
}

void KnowledgeGraph::InternalSwap(KnowledgeGraph* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  examples_app_id_.Swap(&other->examples_app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sampled_examples_app_id_.Swap(&other->sampled_examples_app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata KnowledgeGraph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConceptMappingJob::InitAsDefaultInstance() {
}
class ConceptMappingJob::_Internal {
 public:
};

ConceptMappingJob::ConceptMappingJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ConceptMappingJob)
}
ConceptMappingJob::ConceptMappingJob(const ConceptMappingJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_ids_(from.concept_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  knowledge_graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_knowledge_graph_id().empty()) {
    knowledge_graph_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.knowledge_graph_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptMappingJob)
}

void ConceptMappingJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConceptMappingJob_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  knowledge_graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConceptMappingJob::~ConceptMappingJob() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptMappingJob)
  SharedDtor();
}

void ConceptMappingJob::SharedDtor() {
  knowledge_graph_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConceptMappingJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConceptMappingJob& ConceptMappingJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConceptMappingJob_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ConceptMappingJob::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptMappingJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_ids_.Clear();
  knowledge_graph_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ConceptMappingJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string knowledge_graph_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_knowledge_graph_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptMappingJob.knowledge_graph_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string concept_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptMappingJob.concept_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConceptMappingJob::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptMappingJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string knowledge_graph_id = 1;
  if (this->knowledge_graph_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_knowledge_graph_id().data(), static_cast<int>(this->_internal_knowledge_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptMappingJob.knowledge_graph_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_knowledge_graph_id(), target);
  }

  // repeated string concept_ids = 2;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptMappingJob.concept_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptMappingJob)
  return target;
}

size_t ConceptMappingJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptMappingJob)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string concept_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(concept_ids_.size());
  for (int i = 0, n = concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      concept_ids_.Get(i));
  }

  // string knowledge_graph_id = 1;
  if (this->knowledge_graph_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_knowledge_graph_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConceptMappingJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ConceptMappingJob)
  GOOGLE_DCHECK_NE(&from, this);
  const ConceptMappingJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConceptMappingJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ConceptMappingJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ConceptMappingJob)
    MergeFrom(*source);
  }
}

void ConceptMappingJob::MergeFrom(const ConceptMappingJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptMappingJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_ids_.MergeFrom(from.concept_ids_);
  if (from.knowledge_graph_id().size() > 0) {

    knowledge_graph_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.knowledge_graph_id_);
  }
}

void ConceptMappingJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ConceptMappingJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConceptMappingJob::CopyFrom(const ConceptMappingJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptMappingJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptMappingJob::IsInitialized() const {
  return true;
}

void ConceptMappingJob::InternalSwap(ConceptMappingJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_ids_.InternalSwap(&other->concept_ids_);
  knowledge_graph_id_.Swap(&other->knowledge_graph_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptMappingJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConceptLanguage::InitAsDefaultInstance() {
}
class ConceptLanguage::_Internal {
 public:
};

ConceptLanguage::ConceptLanguage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ConceptLanguage)
}
ConceptLanguage::ConceptLanguage(const ConceptLanguage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  definition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_definition().empty()) {
    definition_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.definition_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptLanguage)
}

void ConceptLanguage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  definition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConceptLanguage::~ConceptLanguage() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptLanguage)
  SharedDtor();
}

void ConceptLanguage::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  definition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConceptLanguage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConceptLanguage& ConceptLanguage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ConceptLanguage::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptLanguage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  definition_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ConceptLanguage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptLanguage.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptLanguage.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string definition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_definition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptLanguage.definition"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConceptLanguage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptLanguage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptLanguage.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptLanguage.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string definition = 3;
  if (this->definition().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_definition().data(), static_cast<int>(this->_internal_definition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptLanguage.definition");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_definition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptLanguage)
  return target;
}

size_t ConceptLanguage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptLanguage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string definition = 3;
  if (this->definition().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_definition());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConceptLanguage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ConceptLanguage)
  GOOGLE_DCHECK_NE(&from, this);
  const ConceptLanguage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConceptLanguage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ConceptLanguage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ConceptLanguage)
    MergeFrom(*source);
  }
}

void ConceptLanguage::MergeFrom(const ConceptLanguage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptLanguage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.definition().size() > 0) {

    definition_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.definition_);
  }
}

void ConceptLanguage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ConceptLanguage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConceptLanguage::CopyFrom(const ConceptLanguage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptLanguage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptLanguage::IsInitialized() const {
  return true;
}

void ConceptLanguage::InternalSwap(ConceptLanguage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  definition_.Swap(&other->definition_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptLanguage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Data::InitAsDefaultInstance() {
  ::clarifai::api::_Data_default_instance_._instance.get_mutable()->image_ = const_cast< ::clarifai::api::Image*>(
      ::clarifai::api::Image::internal_default_instance());
  ::clarifai::api::_Data_default_instance_._instance.get_mutable()->video_ = const_cast< ::clarifai::api::Video*>(
      ::clarifai::api::Video::internal_default_instance());
  ::clarifai::api::_Data_default_instance_._instance.get_mutable()->metadata_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::clarifai::api::_Data_default_instance_._instance.get_mutable()->geo_ = const_cast< ::clarifai::api::Geo*>(
      ::clarifai::api::Geo::internal_default_instance());
  ::clarifai::api::_Data_default_instance_._instance.get_mutable()->text_ = const_cast< ::clarifai::api::Text*>(
      ::clarifai::api::Text::internal_default_instance());
  ::clarifai::api::_Data_default_instance_._instance.get_mutable()->audio_ = const_cast< ::clarifai::api::Audio*>(
      ::clarifai::api::Audio::internal_default_instance());
}
class Data::_Internal {
 public:
  static const ::clarifai::api::Image& image(const Data* msg);
  static const ::clarifai::api::Video& video(const Data* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& metadata(const Data* msg);
  static const ::clarifai::api::Geo& geo(const Data* msg);
  static const ::clarifai::api::Text& text(const Data* msg);
  static const ::clarifai::api::Audio& audio(const Data* msg);
};

const ::clarifai::api::Image&
Data::_Internal::image(const Data* msg) {
  return *msg->image_;
}
const ::clarifai::api::Video&
Data::_Internal::video(const Data* msg) {
  return *msg->video_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
Data::_Internal::metadata(const Data* msg) {
  return *msg->metadata_;
}
const ::clarifai::api::Geo&
Data::_Internal::geo(const Data* msg) {
  return *msg->geo_;
}
const ::clarifai::api::Text&
Data::_Internal::text(const Data* msg) {
  return *msg->text_;
}
const ::clarifai::api::Audio&
Data::_Internal::audio(const Data* msg) {
  return *msg->audio_;
}
void Data::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
Data::Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concepts_(from.concepts_),
      colors_(from.colors_),
      clusters_(from.clusters_),
      embeddings_(from.embeddings_),
      regions_(from.regions_),
      frames_(from.frames_),
      tracks_(from.tracks_),
      time_segments_(from.time_segments_),
      hits_(from.hits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::clarifai::api::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from._internal_has_video()) {
    video_ = new ::clarifai::api::Video(*from.video_);
  } else {
    video_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_geo()) {
    geo_ = new ::clarifai::api::Geo(*from.geo_);
  } else {
    geo_ = nullptr;
  }
  if (from._internal_has_text()) {
    text_ = new ::clarifai::api::Text(*from.text_);
  } else {
    text_ = nullptr;
  }
  if (from._internal_has_audio()) {
    audio_ = new ::clarifai::api::Audio(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Data)
}

void Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_) -
      reinterpret_cast<char*>(&image_)) + sizeof(audio_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:clarifai.api.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete video_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete geo_;
  if (this != internal_default_instance()) delete text_;
  if (this != internal_default_instance()) delete audio_;
}

void Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Data& Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concepts_.Clear();
  colors_.Clear();
  clusters_.Clear();
  embeddings_.Clear();
  regions_.Clear();
  frames_.Clear();
  tracks_.Clear();
  time_segments_.Clear();
  hits_.Clear();
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && video_ != nullptr) {
    delete video_;
  }
  video_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && geo_ != nullptr) {
    delete geo_;
  }
  geo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Video video = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Geo geo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Color colors = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Cluster clusters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clusters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Embedding embeddings = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_embeddings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Region regions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Frame frames = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Text text = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Audio audio = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Track tracks = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.TimeSegment time_segments = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_time_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit hits = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Image image = 1;
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  // .clarifai.api.Video video = 2;
  if (this->has_video()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::video(this), target, stream);
  }

  // repeated .clarifai.api.Concept concepts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_concepts(i), target, stream);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metadata(this), target, stream);
  }

  // .clarifai.api.Geo geo = 6;
  if (this->has_geo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::geo(this), target, stream);
  }

  // repeated .clarifai.api.Color colors = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_colors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_colors(i), target, stream);
  }

  // repeated .clarifai.api.Cluster clusters = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_clusters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_clusters(i), target, stream);
  }

  // repeated .clarifai.api.Embedding embeddings = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_embeddings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_embeddings(i), target, stream);
  }

  // repeated .clarifai.api.Region regions = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_regions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_regions(i), target, stream);
  }

  // repeated .clarifai.api.Frame frames = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_frames(i), target, stream);
  }

  // .clarifai.api.Text text = 13;
  if (this->has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::text(this), target, stream);
  }

  // .clarifai.api.Audio audio = 14;
  if (this->has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::audio(this), target, stream);
  }

  // repeated .clarifai.api.Track tracks = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tracks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_tracks(i), target, stream);
  }

  // repeated .clarifai.api.TimeSegment time_segments = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_time_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_time_segments(i), target, stream);
  }

  // repeated .clarifai.api.Hit hits = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_hits(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 3;
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Color colors = 7;
  total_size += 1UL * this->_internal_colors_size();
  for (const auto& msg : this->colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Cluster clusters = 8;
  total_size += 1UL * this->_internal_clusters_size();
  for (const auto& msg : this->clusters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Embedding embeddings = 9;
  total_size += 1UL * this->_internal_embeddings_size();
  for (const auto& msg : this->embeddings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Region regions = 11;
  total_size += 1UL * this->_internal_regions_size();
  for (const auto& msg : this->regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Frame frames = 12;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Track tracks = 15;
  total_size += 1UL * this->_internal_tracks_size();
  for (const auto& msg : this->tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.TimeSegment time_segments = 16;
  total_size += 2UL * this->_internal_time_segments_size();
  for (const auto& msg : this->time_segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Hit hits = 17;
  total_size += 2UL * this->_internal_hits_size();
  for (const auto& msg : this->hits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.Image image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .clarifai.api.Video video = 2;
  if (this->has_video()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *video_);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .clarifai.api.Geo geo = 6;
  if (this->has_geo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_);
  }

  // .clarifai.api.Text text = 13;
  if (this->has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  // .clarifai.api.Audio audio = 14;
  if (this->has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concepts_.MergeFrom(from.concepts_);
  colors_.MergeFrom(from.colors_);
  clusters_.MergeFrom(from.clusters_);
  embeddings_.MergeFrom(from.embeddings_);
  regions_.MergeFrom(from.regions_);
  frames_.MergeFrom(from.frames_);
  tracks_.MergeFrom(from.tracks_);
  time_segments_.MergeFrom(from.time_segments_);
  hits_.MergeFrom(from.hits_);
  if (from.has_image()) {
    _internal_mutable_image()->::clarifai::api::Image::MergeFrom(from._internal_image());
  }
  if (from.has_video()) {
    _internal_mutable_video()->::clarifai::api::Video::MergeFrom(from._internal_video());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from.has_geo()) {
    _internal_mutable_geo()->::clarifai::api::Geo::MergeFrom(from._internal_geo());
  }
  if (from.has_text()) {
    _internal_mutable_text()->::clarifai::api::Text::MergeFrom(from._internal_text());
  }
  if (from.has_audio()) {
    _internal_mutable_audio()->::clarifai::api::Audio::MergeFrom(from._internal_audio());
  }
}

void Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concepts_.InternalSwap(&other->concepts_);
  colors_.InternalSwap(&other->colors_);
  clusters_.InternalSwap(&other->clusters_);
  embeddings_.InternalSwap(&other->embeddings_);
  regions_.InternalSwap(&other->regions_);
  frames_.InternalSwap(&other->frames_);
  tracks_.InternalSwap(&other->tracks_);
  time_segments_.InternalSwap(&other->time_segments_);
  hits_.InternalSwap(&other->hits_);
  swap(image_, other->image_);
  swap(video_, other->video_);
  swap(metadata_, other->metadata_);
  swap(geo_, other->geo_);
  swap(text_, other->text_);
  swap(audio_, other->audio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Region::InitAsDefaultInstance() {
  ::clarifai::api::_Region_default_instance_._instance.get_mutable()->region_info_ = const_cast< ::clarifai::api::RegionInfo*>(
      ::clarifai::api::RegionInfo::internal_default_instance());
  ::clarifai::api::_Region_default_instance_._instance.get_mutable()->data_ = const_cast< ::clarifai::api::Data*>(
      ::clarifai::api::Data::internal_default_instance());
}
class Region::_Internal {
 public:
  static const ::clarifai::api::RegionInfo& region_info(const Region* msg);
  static const ::clarifai::api::Data& data(const Region* msg);
};

const ::clarifai::api::RegionInfo&
Region::_Internal::region_info(const Region* msg) {
  return *msg->region_info_;
}
const ::clarifai::api::Data&
Region::_Internal::data(const Region* msg) {
  return *msg->data_;
}
Region::Region()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Region)
}
Region::Region(const Region& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  track_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_track_id().empty()) {
    track_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.track_id_);
  }
  if (from._internal_has_region_info()) {
    region_info_ = new ::clarifai::api::RegionInfo(*from.region_info_);
  } else {
    region_info_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Region)
}

void Region::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  track_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&region_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&region_info_)) + sizeof(value_));
}

Region::~Region() {
  // @@protoc_insertion_point(destructor:clarifai.api.Region)
  SharedDtor();
}

void Region::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  track_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_info_;
  if (this != internal_default_instance()) delete data_;
}

void Region::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Region& Region::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Region::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Region)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  track_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && region_info_ != nullptr) {
    delete region_info_;
  }
  region_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* Region::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Region.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.RegionInfo region_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string track_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_track_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Region.track_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Region::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Region)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Region.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.RegionInfo region_info = 2;
  if (this->has_region_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::region_info(this), target, stream);
  }

  // .clarifai.api.Data data = 3;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  // float value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_value(), target);
  }

  // string track_id = 5;
  if (this->track_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_id().data(), static_cast<int>(this->_internal_track_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Region.track_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_track_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Region)
  return target;
}

size_t Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Region)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string track_id = 5;
  if (this->track_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_id());
  }

  // .clarifai.api.RegionInfo region_info = 2;
  if (this->has_region_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_info_);
  }

  // .clarifai.api.Data data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // float value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Region::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Region)
  GOOGLE_DCHECK_NE(&from, this);
  const Region* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Region>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Region)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Region)
    MergeFrom(*source);
  }
}

void Region::MergeFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Region)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.track_id().size() > 0) {

    track_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.track_id_);
  }
  if (from.has_region_info()) {
    _internal_mutable_region_info()->::clarifai::api::RegionInfo::MergeFrom(from._internal_region_info());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void Region::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Region::CopyFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Region::IsInitialized() const {
  return true;
}

void Region::InternalSwap(Region* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  track_id_.Swap(&other->track_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(region_info_, other->region_info_);
  swap(data_, other->data_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Region::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegionInfo::InitAsDefaultInstance() {
  ::clarifai::api::_RegionInfo_default_instance_._instance.get_mutable()->bounding_box_ = const_cast< ::clarifai::api::BoundingBox*>(
      ::clarifai::api::BoundingBox::internal_default_instance());
  ::clarifai::api::_RegionInfo_default_instance_._instance.get_mutable()->mask_ = const_cast< ::clarifai::api::Mask*>(
      ::clarifai::api::Mask::internal_default_instance());
  ::clarifai::api::_RegionInfo_default_instance_._instance.get_mutable()->polygon_ = const_cast< ::clarifai::api::Polygon*>(
      ::clarifai::api::Polygon::internal_default_instance());
  ::clarifai::api::_RegionInfo_default_instance_._instance.get_mutable()->point_ = const_cast< ::clarifai::api::Point*>(
      ::clarifai::api::Point::internal_default_instance());
  ::clarifai::api::_RegionInfo_default_instance_._instance.get_mutable()->span_ = const_cast< ::clarifai::api::Span*>(
      ::clarifai::api::Span::internal_default_instance());
  ::clarifai::api::_RegionInfo_default_instance_._instance.get_mutable()->token_ = const_cast< ::clarifai::api::Token*>(
      ::clarifai::api::Token::internal_default_instance());
}
class RegionInfo::_Internal {
 public:
  static const ::clarifai::api::BoundingBox& bounding_box(const RegionInfo* msg);
  static const ::clarifai::api::Mask& mask(const RegionInfo* msg);
  static const ::clarifai::api::Polygon& polygon(const RegionInfo* msg);
  static const ::clarifai::api::Point& point(const RegionInfo* msg);
  static const ::clarifai::api::Span& span(const RegionInfo* msg);
  static const ::clarifai::api::Token& token(const RegionInfo* msg);
};

const ::clarifai::api::BoundingBox&
RegionInfo::_Internal::bounding_box(const RegionInfo* msg) {
  return *msg->bounding_box_;
}
const ::clarifai::api::Mask&
RegionInfo::_Internal::mask(const RegionInfo* msg) {
  return *msg->mask_;
}
const ::clarifai::api::Polygon&
RegionInfo::_Internal::polygon(const RegionInfo* msg) {
  return *msg->polygon_;
}
const ::clarifai::api::Point&
RegionInfo::_Internal::point(const RegionInfo* msg) {
  return *msg->point_;
}
const ::clarifai::api::Span&
RegionInfo::_Internal::span(const RegionInfo* msg) {
  return *msg->span_;
}
const ::clarifai::api::Token&
RegionInfo::_Internal::token(const RegionInfo* msg) {
  return *msg->token_;
}
RegionInfo::RegionInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.RegionInfo)
}
RegionInfo::RegionInfo(const RegionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_bounding_box()) {
    bounding_box_ = new ::clarifai::api::BoundingBox(*from.bounding_box_);
  } else {
    bounding_box_ = nullptr;
  }
  if (from._internal_has_mask()) {
    mask_ = new ::clarifai::api::Mask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  if (from._internal_has_polygon()) {
    polygon_ = new ::clarifai::api::Polygon(*from.polygon_);
  } else {
    polygon_ = nullptr;
  }
  if (from._internal_has_point()) {
    point_ = new ::clarifai::api::Point(*from.point_);
  } else {
    point_ = nullptr;
  }
  if (from._internal_has_span()) {
    span_ = new ::clarifai::api::Span(*from.span_);
  } else {
    span_ = nullptr;
  }
  if (from._internal_has_token()) {
    token_ = new ::clarifai::api::Token(*from.token_);
  } else {
    token_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.RegionInfo)
}

void RegionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&bounding_box_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_) -
      reinterpret_cast<char*>(&bounding_box_)) + sizeof(token_));
}

RegionInfo::~RegionInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.RegionInfo)
  SharedDtor();
}

void RegionInfo::SharedDtor() {
  if (this != internal_default_instance()) delete bounding_box_;
  if (this != internal_default_instance()) delete mask_;
  if (this != internal_default_instance()) delete polygon_;
  if (this != internal_default_instance()) delete point_;
  if (this != internal_default_instance()) delete span_;
  if (this != internal_default_instance()) delete token_;
}

void RegionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionInfo& RegionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void RegionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.RegionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && bounding_box_ != nullptr) {
    delete bounding_box_;
  }
  bounding_box_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && polygon_ != nullptr) {
    delete polygon_;
  }
  polygon_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RegionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.BoundingBox bounding_box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounding_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Mask mask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Polygon polygon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Point point = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Span span = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Token token = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.RegionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.BoundingBox bounding_box = 1;
  if (this->has_bounding_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bounding_box(this), target, stream);
  }

  // .clarifai.api.Mask mask = 4;
  if (this->has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mask(this), target, stream);
  }

  // .clarifai.api.Polygon polygon = 5;
  if (this->has_polygon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::polygon(this), target, stream);
  }

  // .clarifai.api.Point point = 6;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::point(this), target, stream);
  }

  // .clarifai.api.Span span = 7;
  if (this->has_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::span(this), target, stream);
  }

  // .clarifai.api.Token token = 8;
  if (this->has_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::token(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.RegionInfo)
  return target;
}

size_t RegionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.RegionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.BoundingBox bounding_box = 1;
  if (this->has_bounding_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounding_box_);
  }

  // .clarifai.api.Mask mask = 4;
  if (this->has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  // .clarifai.api.Polygon polygon = 5;
  if (this->has_polygon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *polygon_);
  }

  // .clarifai.api.Point point = 6;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  // .clarifai.api.Span span = 7;
  if (this->has_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *span_);
  }

  // .clarifai.api.Token token = 8;
  if (this->has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.RegionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.RegionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.RegionInfo)
    MergeFrom(*source);
  }
}

void RegionInfo::MergeFrom(const RegionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.RegionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bounding_box()) {
    _internal_mutable_bounding_box()->::clarifai::api::BoundingBox::MergeFrom(from._internal_bounding_box());
  }
  if (from.has_mask()) {
    _internal_mutable_mask()->::clarifai::api::Mask::MergeFrom(from._internal_mask());
  }
  if (from.has_polygon()) {
    _internal_mutable_polygon()->::clarifai::api::Polygon::MergeFrom(from._internal_polygon());
  }
  if (from.has_point()) {
    _internal_mutable_point()->::clarifai::api::Point::MergeFrom(from._internal_point());
  }
  if (from.has_span()) {
    _internal_mutable_span()->::clarifai::api::Span::MergeFrom(from._internal_span());
  }
  if (from.has_token()) {
    _internal_mutable_token()->::clarifai::api::Token::MergeFrom(from._internal_token());
  }
}

void RegionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.RegionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionInfo::CopyFrom(const RegionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.RegionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionInfo::IsInitialized() const {
  return true;
}

void RegionInfo::InternalSwap(RegionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(bounding_box_, other->bounding_box_);
  swap(mask_, other->mask_);
  swap(polygon_, other->polygon_);
  swap(point_, other->point_);
  swap(span_, other->span_);
  swap(token_, other->token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundingBox::InitAsDefaultInstance() {
}
class BoundingBox::_Internal {
 public:
};

BoundingBox::BoundingBox()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.BoundingBox)
}
BoundingBox::BoundingBox(const BoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&top_row_, &from.top_row_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_col_) -
    reinterpret_cast<char*>(&top_row_)) + sizeof(right_col_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.BoundingBox)
}

void BoundingBox::SharedCtor() {
  ::memset(&top_row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_col_) -
      reinterpret_cast<char*>(&top_row_)) + sizeof(right_col_));
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:clarifai.api.BoundingBox)
  SharedDtor();
}

void BoundingBox::SharedDtor() {
}

void BoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundingBox& BoundingBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundingBox_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&top_row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_col_) -
      reinterpret_cast<char*>(&top_row_)) + sizeof(right_col_));
  _internal_metadata_.Clear();
}

const char* BoundingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float top_row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          top_row_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float left_col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          left_col_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bottom_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          bottom_row_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          right_col_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float top_row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->top_row() <= 0 && this->top_row() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_top_row(), target);
  }

  // float left_col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->left_col() <= 0 && this->left_col() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_left_col(), target);
  }

  // float bottom_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->bottom_row() <= 0 && this->bottom_row() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_bottom_row(), target);
  }

  // float right_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->right_col() <= 0 && this->right_col() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_right_col(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.BoundingBox)
  return target;
}

size_t BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.BoundingBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float top_row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->top_row() <= 0 && this->top_row() >= 0)) {
    total_size += 1 + 4;
  }

  // float left_col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->left_col() <= 0 && this->left_col() >= 0)) {
    total_size += 1 + 4;
  }

  // float bottom_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->bottom_row() <= 0 && this->bottom_row() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->right_col() <= 0 && this->right_col() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundingBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.BoundingBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.BoundingBox)
    MergeFrom(*source);
  }
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.top_row() <= 0 && from.top_row() >= 0)) {
    _internal_set_top_row(from._internal_top_row());
  }
  if (!(from.left_col() <= 0 && from.left_col() >= 0)) {
    _internal_set_left_col(from._internal_left_col());
  }
  if (!(from.bottom_row() <= 0 && from.bottom_row() >= 0)) {
    _internal_set_bottom_row(from._internal_bottom_row());
  }
  if (!(from.right_col() <= 0 && from.right_col() >= 0)) {
    _internal_set_right_col(from._internal_right_col());
  }
}

void BoundingBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  return true;
}

void BoundingBox::InternalSwap(BoundingBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(top_row_, other->top_row_);
  swap(left_col_, other->left_col_);
  swap(bottom_row_, other->bottom_row_);
  swap(right_col_, other->right_col_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameInfo::InitAsDefaultInstance() {
}
class FrameInfo::_Internal {
 public:
};

FrameInfo::FrameInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.FrameInfo)
}
FrameInfo::FrameInfo(const FrameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&index_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.FrameInfo)
}

void FrameInfo::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&index_)) + sizeof(time_));
}

FrameInfo::~FrameInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.FrameInfo)
  SharedDtor();
}

void FrameInfo::SharedDtor() {
}

void FrameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameInfo& FrameInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void FrameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.FrameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&index_)) + sizeof(time_));
  _internal_metadata_.Clear();
}

const char* FrameInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.FrameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // uint32 time = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.FrameInfo)
  return target;
}

size_t FrameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.FrameInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // uint32 time = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.FrameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.FrameInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.FrameInfo)
    MergeFrom(*source);
  }
}

void FrameInfo::MergeFrom(const FrameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.FrameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void FrameInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.FrameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameInfo::CopyFrom(const FrameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.FrameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameInfo::IsInitialized() const {
  return true;
}

void FrameInfo::InternalSwap(FrameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(index_, other->index_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Frame::InitAsDefaultInstance() {
  ::clarifai::api::_Frame_default_instance_._instance.get_mutable()->frame_info_ = const_cast< ::clarifai::api::FrameInfo*>(
      ::clarifai::api::FrameInfo::internal_default_instance());
  ::clarifai::api::_Frame_default_instance_._instance.get_mutable()->data_ = const_cast< ::clarifai::api::Data*>(
      ::clarifai::api::Data::internal_default_instance());
}
class Frame::_Internal {
 public:
  static const ::clarifai::api::FrameInfo& frame_info(const Frame* msg);
  static const ::clarifai::api::Data& data(const Frame* msg);
};

const ::clarifai::api::FrameInfo&
Frame::_Internal::frame_info(const Frame* msg) {
  return *msg->frame_info_;
}
const ::clarifai::api::Data&
Frame::_Internal::data(const Frame* msg) {
  return *msg->data_;
}
Frame::Frame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_frame_info()) {
    frame_info_ = new ::clarifai::api::FrameInfo(*from.frame_info_);
  } else {
    frame_info_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Frame)
}

void Frame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&frame_info_)) + sizeof(data_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:clarifai.api.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete frame_info_;
  if (this != internal_default_instance()) delete data_;
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Frame& Frame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && frame_info_ != nullptr) {
    delete frame_info_;
  }
  frame_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.FrameInfo frame_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Frame.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Frame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.FrameInfo frame_info = 1;
  if (this->has_frame_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::frame_info(this), target, stream);
  }

  // .clarifai.api.Data data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Frame.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Frame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.FrameInfo frame_info = 1;
  if (this->has_frame_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_info_);
  }

  // .clarifai.api.Data data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Frame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Frame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_frame_info()) {
    _internal_mutable_frame_info()->::clarifai::api::FrameInfo::MergeFrom(from._internal_frame_info());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
}

void Frame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frame_info_, other->frame_info_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mask::InitAsDefaultInstance() {
  ::clarifai::api::_Mask_default_instance_._instance.get_mutable()->image_ = const_cast< ::clarifai::api::Image*>(
      ::clarifai::api::Image::internal_default_instance());
}
class Mask::_Internal {
 public:
  static const ::clarifai::api::Image& image(const Mask* msg);
};

const ::clarifai::api::Image&
Mask::_Internal::image(const Mask* msg) {
  return *msg->image_;
}
Mask::Mask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Mask)
}
Mask::Mask(const Mask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::clarifai::api::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Mask)
}

void Mask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mask_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  image_ = nullptr;
}

Mask::~Mask() {
  // @@protoc_insertion_point(destructor:clarifai.api.Mask)
  SharedDtor();
}

void Mask::SharedDtor() {
  if (this != internal_default_instance()) delete image_;
}

void Mask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mask& Mask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mask_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Mask::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Mask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Mask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.Image image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Mask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Image image = 2;
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::image(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Mask)
  return target;
}

size_t Mask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Mask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Image image = 2;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Mask)
  GOOGLE_DCHECK_NE(&from, this);
  const Mask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Mask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Mask)
    MergeFrom(*source);
  }
}

void Mask::MergeFrom(const Mask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Mask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image()) {
    _internal_mutable_image()->::clarifai::api::Image::MergeFrom(from._internal_image());
  }
}

void Mask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Mask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mask::CopyFrom(const Mask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Mask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mask::IsInitialized() const {
  return true;
}

void Mask::InternalSwap(Mask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Polygon::InitAsDefaultInstance() {
}
class Polygon::_Internal {
 public:
};

Polygon::Polygon()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Polygon)
}

void Polygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Polygon_proto_2fclarifai_2fapi_2fresources_2eproto.base);
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:clarifai.api.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
}

void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Polygon& Polygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Polygon_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .clarifai.api.Point points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Polygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Point points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Polygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Polygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void Polygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
class Point::_Internal {
 public:
};

Point::Point()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&row_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Point)
}

void Point::SharedCtor() {
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&row_)) + sizeof(z_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:clarifai.api.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&row_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->row() <= 0 && this->row() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_row(), target);
  }

  // float col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->col() <= 0 && this->col() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_col(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->row() <= 0 && this->row() >= 0)) {
    total_size += 1 + 4;
  }

  // float col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->col() <= 0 && this->col() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.row() <= 0 && from.row() >= 0)) {
    _internal_set_row(from._internal_row());
  }
  if (!(from.col() <= 0 && from.col() >= 0)) {
    _internal_set_col(from._internal_col());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(row_, other->row_);
  swap(col_, other->col_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Span::InitAsDefaultInstance() {
}
class Span::_Internal {
 public:
};

Span::Span()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Span)
}
Span::Span(const Span& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_text().empty()) {
    raw_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_text_);
  }
  ::memcpy(&char_start_, &from.char_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&char_end_) -
    reinterpret_cast<char*>(&char_start_)) + sizeof(char_end_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Span)
}

void Span::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Span_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  raw_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&char_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&char_end_) -
      reinterpret_cast<char*>(&char_start_)) + sizeof(char_end_));
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:clarifai.api.Span)
  SharedDtor();
}

void Span::SharedDtor() {
  raw_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Span::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span& Span::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Span_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Span::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Span)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&char_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&char_end_) -
      reinterpret_cast<char*>(&char_start_)) + sizeof(char_end_));
  _internal_metadata_.Clear();
}

const char* Span::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          char_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          char_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string raw_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_raw_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Span.raw_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Span::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Span)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->char_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_char_start(), target);
  }

  // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->char_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_char_end(), target);
  }

  // string raw_text = 3;
  if (this->raw_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_text().data(), static_cast<int>(this->_internal_raw_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Span.raw_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_raw_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Span)
  return target;
}

size_t Span::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Span)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string raw_text = 3;
  if (this->raw_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_text());
  }

  // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->char_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_char_start());
  }

  // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->char_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_char_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Span)
  GOOGLE_DCHECK_NE(&from, this);
  const Span* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Span>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Span)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Span)
    MergeFrom(*source);
  }
}

void Span::MergeFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Span)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw_text().size() > 0) {

    raw_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_text_);
  }
  if (from.char_start() != 0) {
    _internal_set_char_start(from._internal_char_start());
  }
  if (from.char_end() != 0) {
    _internal_set_char_end(from._internal_char_end());
  }
}

void Span::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span::CopyFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {
  return true;
}

void Span::InternalSwap(Span* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  raw_text_.Swap(&other->raw_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(char_start_, other->char_start_);
  swap(char_end_, other->char_end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Span::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Token::InitAsDefaultInstance() {
}
class Token::_Internal {
 public:
};

Token::Token()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Token)
}
Token::Token(const Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_text().empty()) {
    raw_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_text_);
  }
  ::memcpy(&char_start_, &from.char_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&char_end_) -
    reinterpret_cast<char*>(&char_start_)) + sizeof(char_end_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Token)
}

void Token::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Token_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  raw_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&char_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&char_end_) -
      reinterpret_cast<char*>(&char_start_)) + sizeof(char_end_));
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:clarifai.api.Token)
  SharedDtor();
}

void Token::SharedDtor() {
  raw_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Token& Token::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Token_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&char_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&char_end_) -
      reinterpret_cast<char*>(&char_start_)) + sizeof(char_end_));
  _internal_metadata_.Clear();
}

const char* Token::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          char_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          char_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string raw_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_raw_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Token.raw_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Token::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->char_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_char_start(), target);
  }

  // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->char_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_char_end(), target);
  }

  // string raw_text = 3;
  if (this->raw_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_text().data(), static_cast<int>(this->_internal_raw_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Token.raw_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_raw_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Token)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string raw_text = 3;
  if (this->raw_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_text());
  }

  // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->char_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_char_start());
  }

  // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->char_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_char_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Token::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Token)
  GOOGLE_DCHECK_NE(&from, this);
  const Token* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Token>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Token)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Token)
    MergeFrom(*source);
  }
}

void Token::MergeFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Token)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw_text().size() > 0) {

    raw_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_text_);
  }
  if (from.char_start() != 0) {
    _internal_set_char_start(from._internal_char_start());
  }
  if (from.char_end() != 0) {
    _internal_set_char_end(from._internal_char_end());
  }
}

void Token::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::InternalSwap(Token* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  raw_text_.Swap(&other->raw_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(char_start_, other->char_start_);
  swap(char_end_, other->char_end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Token::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Embedding::InitAsDefaultInstance() {
}
class Embedding::_Internal {
 public:
};

Embedding::Embedding()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Embedding)
}
Embedding::Embedding(const Embedding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vector_(from.vector_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_dimensions_ = from.num_dimensions_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Embedding)
}

void Embedding::SharedCtor() {
  num_dimensions_ = 0u;
}

Embedding::~Embedding() {
  // @@protoc_insertion_point(destructor:clarifai.api.Embedding)
  SharedDtor();
}

void Embedding::SharedDtor() {
}

void Embedding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Embedding& Embedding::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Embedding_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Embedding::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Embedding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_.Clear();
  num_dimensions_ = 0u;
  _internal_metadata_.Clear();
}

const char* Embedding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float vector = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_vector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 num_dimensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_dimensions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Embedding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Embedding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float vector = 1 [packed = true];
  if (this->_internal_vector_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vector(), target);
  }

  // uint32 num_dimensions = 2;
  if (this->num_dimensions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_dimensions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Embedding)
  return target;
}

size_t Embedding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Embedding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vector = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vector_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vector_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 num_dimensions = 2;
  if (this->num_dimensions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_dimensions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Embedding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Embedding)
  GOOGLE_DCHECK_NE(&from, this);
  const Embedding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Embedding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Embedding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Embedding)
    MergeFrom(*source);
  }
}

void Embedding::MergeFrom(const Embedding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Embedding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vector_.MergeFrom(from.vector_);
  if (from.num_dimensions() != 0) {
    _internal_set_num_dimensions(from._internal_num_dimensions());
  }
}

void Embedding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Embedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Embedding::CopyFrom(const Embedding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Embedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Embedding::IsInitialized() const {
  return true;
}

void Embedding::InternalSwap(Embedding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vector_.InternalSwap(&other->vector_);
  swap(num_dimensions_, other->num_dimensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Embedding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoPoint::InitAsDefaultInstance() {
}
class GeoPoint::_Internal {
 public:
};

GeoPoint::GeoPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GeoPoint)
}
GeoPoint::GeoPoint(const GeoPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GeoPoint)
}

void GeoPoint::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
}

GeoPoint::~GeoPoint() {
  // @@protoc_insertion_point(destructor:clarifai.api.GeoPoint)
  SharedDtor();
}

void GeoPoint::SharedDtor() {
}

void GeoPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoPoint& GeoPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoPoint_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void GeoPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GeoPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  _internal_metadata_.Clear();
}

const char* GeoPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float longitude = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latitude = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GeoPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float longitude = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_longitude(), target);
  }

  // float latitude = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_latitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GeoPoint)
  return target;
}

size_t GeoPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GeoPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float longitude = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float latitude = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GeoPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GeoPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GeoPoint)
    MergeFrom(*source);
  }
}

void GeoPoint::MergeFrom(const GeoPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GeoPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
}

void GeoPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GeoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoPoint::CopyFrom(const GeoPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GeoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPoint::IsInitialized() const {
  return true;
}

void GeoPoint::InternalSwap(GeoPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoLimit::InitAsDefaultInstance() {
}
class GeoLimit::_Internal {
 public:
};

GeoLimit::GeoLimit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GeoLimit)
}
GeoLimit::GeoLimit(const GeoLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GeoLimit)
}

void GeoLimit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoLimit_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

GeoLimit::~GeoLimit() {
  // @@protoc_insertion_point(destructor:clarifai.api.GeoLimit)
  SharedDtor();
}

void GeoLimit::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GeoLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoLimit& GeoLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoLimit_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void GeoLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GeoLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* GeoLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GeoLimit.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GeoLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GeoLimit.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // float value = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GeoLimit)
  return target;
}

size_t GeoLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GeoLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // float value = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GeoLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GeoLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GeoLimit)
    MergeFrom(*source);
  }
}

void GeoLimit::MergeFrom(const GeoLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GeoLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void GeoLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GeoLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoLimit::CopyFrom(const GeoLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GeoLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoLimit::IsInitialized() const {
  return true;
}

void GeoLimit::InternalSwap(GeoLimit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoBoxedPoint::InitAsDefaultInstance() {
  ::clarifai::api::_GeoBoxedPoint_default_instance_._instance.get_mutable()->geo_point_ = const_cast< ::clarifai::api::GeoPoint*>(
      ::clarifai::api::GeoPoint::internal_default_instance());
}
class GeoBoxedPoint::_Internal {
 public:
  static const ::clarifai::api::GeoPoint& geo_point(const GeoBoxedPoint* msg);
};

const ::clarifai::api::GeoPoint&
GeoBoxedPoint::_Internal::geo_point(const GeoBoxedPoint* msg) {
  return *msg->geo_point_;
}
GeoBoxedPoint::GeoBoxedPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GeoBoxedPoint)
}
GeoBoxedPoint::GeoBoxedPoint(const GeoBoxedPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_geo_point()) {
    geo_point_ = new ::clarifai::api::GeoPoint(*from.geo_point_);
  } else {
    geo_point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GeoBoxedPoint)
}

void GeoBoxedPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoBoxedPoint_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  geo_point_ = nullptr;
}

GeoBoxedPoint::~GeoBoxedPoint() {
  // @@protoc_insertion_point(destructor:clarifai.api.GeoBoxedPoint)
  SharedDtor();
}

void GeoBoxedPoint::SharedDtor() {
  if (this != internal_default_instance()) delete geo_point_;
}

void GeoBoxedPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoBoxedPoint& GeoBoxedPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoBoxedPoint_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void GeoBoxedPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GeoBoxedPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && geo_point_ != nullptr) {
    delete geo_point_;
  }
  geo_point_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GeoBoxedPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.GeoPoint geo_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoBoxedPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GeoBoxedPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.GeoPoint geo_point = 1;
  if (this->has_geo_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::geo_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GeoBoxedPoint)
  return target;
}

size_t GeoBoxedPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GeoBoxedPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.GeoPoint geo_point = 1;
  if (this->has_geo_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoBoxedPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GeoBoxedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoBoxedPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoBoxedPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GeoBoxedPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GeoBoxedPoint)
    MergeFrom(*source);
  }
}

void GeoBoxedPoint::MergeFrom(const GeoBoxedPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GeoBoxedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_geo_point()) {
    _internal_mutable_geo_point()->::clarifai::api::GeoPoint::MergeFrom(from._internal_geo_point());
  }
}

void GeoBoxedPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GeoBoxedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoBoxedPoint::CopyFrom(const GeoBoxedPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GeoBoxedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoBoxedPoint::IsInitialized() const {
  return true;
}

void GeoBoxedPoint::InternalSwap(GeoBoxedPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(geo_point_, other->geo_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoBoxedPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Geo::InitAsDefaultInstance() {
  ::clarifai::api::_Geo_default_instance_._instance.get_mutable()->geo_point_ = const_cast< ::clarifai::api::GeoPoint*>(
      ::clarifai::api::GeoPoint::internal_default_instance());
  ::clarifai::api::_Geo_default_instance_._instance.get_mutable()->geo_limit_ = const_cast< ::clarifai::api::GeoLimit*>(
      ::clarifai::api::GeoLimit::internal_default_instance());
}
class Geo::_Internal {
 public:
  static const ::clarifai::api::GeoPoint& geo_point(const Geo* msg);
  static const ::clarifai::api::GeoLimit& geo_limit(const Geo* msg);
};

const ::clarifai::api::GeoPoint&
Geo::_Internal::geo_point(const Geo* msg) {
  return *msg->geo_point_;
}
const ::clarifai::api::GeoLimit&
Geo::_Internal::geo_limit(const Geo* msg) {
  return *msg->geo_limit_;
}
Geo::Geo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Geo)
}
Geo::Geo(const Geo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      geo_box_(from.geo_box_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_geo_point()) {
    geo_point_ = new ::clarifai::api::GeoPoint(*from.geo_point_);
  } else {
    geo_point_ = nullptr;
  }
  if (from._internal_has_geo_limit()) {
    geo_limit_ = new ::clarifai::api::GeoLimit(*from.geo_limit_);
  } else {
    geo_limit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Geo)
}

void Geo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Geo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&geo_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geo_limit_) -
      reinterpret_cast<char*>(&geo_point_)) + sizeof(geo_limit_));
}

Geo::~Geo() {
  // @@protoc_insertion_point(destructor:clarifai.api.Geo)
  SharedDtor();
}

void Geo::SharedDtor() {
  if (this != internal_default_instance()) delete geo_point_;
  if (this != internal_default_instance()) delete geo_limit_;
}

void Geo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Geo& Geo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Geo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Geo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Geo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geo_box_.Clear();
  if (GetArenaNoVirtual() == nullptr && geo_point_ != nullptr) {
    delete geo_point_;
  }
  geo_point_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && geo_limit_ != nullptr) {
    delete geo_limit_;
  }
  geo_limit_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Geo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.GeoPoint geo_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.GeoLimit geo_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.GeoBoxedPoint geo_box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geo_box(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Geo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Geo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.GeoPoint geo_point = 1;
  if (this->has_geo_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::geo_point(this), target, stream);
  }

  // .clarifai.api.GeoLimit geo_limit = 2;
  if (this->has_geo_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::geo_limit(this), target, stream);
  }

  // repeated .clarifai.api.GeoBoxedPoint geo_box = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_geo_box_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_geo_box(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Geo)
  return target;
}

size_t Geo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Geo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.GeoBoxedPoint geo_box = 3;
  total_size += 1UL * this->_internal_geo_box_size();
  for (const auto& msg : this->geo_box_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.GeoPoint geo_point = 1;
  if (this->has_geo_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_point_);
  }

  // .clarifai.api.GeoLimit geo_limit = 2;
  if (this->has_geo_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_limit_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Geo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Geo)
  GOOGLE_DCHECK_NE(&from, this);
  const Geo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Geo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Geo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Geo)
    MergeFrom(*source);
  }
}

void Geo::MergeFrom(const Geo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Geo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geo_box_.MergeFrom(from.geo_box_);
  if (from.has_geo_point()) {
    _internal_mutable_geo_point()->::clarifai::api::GeoPoint::MergeFrom(from._internal_geo_point());
  }
  if (from.has_geo_limit()) {
    _internal_mutable_geo_limit()->::clarifai::api::GeoLimit::MergeFrom(from._internal_geo_limit());
  }
}

void Geo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geo::CopyFrom(const Geo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geo::IsInitialized() const {
  return true;
}

void Geo::InternalSwap(Geo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  geo_box_.InternalSwap(&other->geo_box_);
  swap(geo_point_, other->geo_point_);
  swap(geo_limit_, other->geo_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Geo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Image::InitAsDefaultInstance() {
  ::clarifai::api::_Image_default_instance_._instance.get_mutable()->hosted_ = const_cast< ::clarifai::api::HostedURL*>(
      ::clarifai::api::HostedURL::internal_default_instance());
  ::clarifai::api::_Image_default_instance_._instance.get_mutable()->image_info_ = const_cast< ::clarifai::api::ImageInfo*>(
      ::clarifai::api::ImageInfo::internal_default_instance());
}
class Image::_Internal {
 public:
  static const ::clarifai::api::HostedURL& hosted(const Image* msg);
  static const ::clarifai::api::ImageInfo& image_info(const Image* msg);
};

const ::clarifai::api::HostedURL&
Image::_Internal::hosted(const Image* msg) {
  return *msg->hosted_;
}
const ::clarifai::api::ImageInfo&
Image::_Internal::image_info(const Image* msg) {
  return *msg->image_info_;
}
Image::Image()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  base64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base64().empty()) {
    base64_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base64_);
  }
  if (from._internal_has_hosted()) {
    hosted_ = new ::clarifai::api::HostedURL(*from.hosted_);
  } else {
    hosted_ = nullptr;
  }
  if (from._internal_has_image_info()) {
    image_info_ = new ::clarifai::api::ImageInfo(*from.image_info_);
  } else {
    image_info_ = nullptr;
  }
  allow_duplicate_url_ = from.allow_duplicate_url_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Image)
}

void Image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Image_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hosted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_duplicate_url_) -
      reinterpret_cast<char*>(&hosted_)) + sizeof(allow_duplicate_url_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:clarifai.api.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base64_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hosted_;
  if (this != internal_default_instance()) delete image_info_;
}

void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Image& Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Image_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base64_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hosted_ != nullptr) {
    delete hosted_;
  }
  hosted_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && image_info_ != nullptr) {
    delete image_info_;
  }
  image_info_ = nullptr;
  allow_duplicate_url_ = false;
  _internal_metadata_.Clear();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Image.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes base64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_base64();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_duplicate_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          allow_duplicate_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.HostedURL hosted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hosted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ImageInfo image_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Image.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // bytes base64 = 2;
  if (this->base64().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_base64(), target);
  }

  // bool allow_duplicate_url = 4;
  if (this->allow_duplicate_url() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_duplicate_url(), target);
  }

  // .clarifai.api.HostedURL hosted = 5;
  if (this->has_hosted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hosted(this), target, stream);
  }

  // .clarifai.api.ImageInfo image_info = 6;
  if (this->has_image_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::image_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // bytes base64 = 2;
  if (this->base64().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_base64());
  }

  // .clarifai.api.HostedURL hosted = 5;
  if (this->has_hosted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hosted_);
  }

  // .clarifai.api.ImageInfo image_info = 6;
  if (this->has_image_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_info_);
  }

  // bool allow_duplicate_url = 4;
  if (this->allow_duplicate_url() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.base64().size() > 0) {

    base64_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base64_);
  }
  if (from.has_hosted()) {
    _internal_mutable_hosted()->::clarifai::api::HostedURL::MergeFrom(from._internal_hosted());
  }
  if (from.has_image_info()) {
    _internal_mutable_image_info()->::clarifai::api::ImageInfo::MergeFrom(from._internal_image_info());
  }
  if (from.allow_duplicate_url() != 0) {
    _internal_set_allow_duplicate_url(from._internal_allow_duplicate_url());
  }
}

void Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  base64_.Swap(&other->base64_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hosted_, other->hosted_);
  swap(image_info_, other->image_info_);
  swap(allow_duplicate_url_, other->allow_duplicate_url_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageInfo::InitAsDefaultInstance() {
}
class ImageInfo::_Internal {
 public:
};

ImageInfo::ImageInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ImageInfo)
}
ImageInfo::ImageInfo(const ImageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_format().empty()) {
    format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  color_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color_mode().empty()) {
    color_mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color_mode_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ImageInfo)
}

void ImageInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

ImageInfo::~ImageInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.ImageInfo)
  SharedDtor();
}

void ImageInfo::SharedDtor() {
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageInfo& ImageInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ImageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_mode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

const char* ImageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ImageInfo.format"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string color_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_color_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ImageInfo.color_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ImageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // string format = 3;
  if (this->format().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ImageInfo.format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_format(), target);
  }

  // string color_mode = 4;
  if (this->color_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color_mode().data(), static_cast<int>(this->_internal_color_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ImageInfo.color_mode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_color_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ImageInfo)
  return target;
}

size_t ImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ImageInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string format = 3;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  // string color_mode = 4;
  if (this->color_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color_mode());
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ImageInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ImageInfo)
    MergeFrom(*source);
  }
}

void ImageInfo::MergeFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.format().size() > 0) {

    format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  if (from.color_mode().size() > 0) {

    color_mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color_mode_);
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void ImageInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageInfo::CopyFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfo::IsInitialized() const {
  return true;
}

void ImageInfo::InternalSwap(ImageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  format_.Swap(&other->format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  color_mode_.Swap(&other->color_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostedURL::InitAsDefaultInstance() {
}
class HostedURL::_Internal {
 public:
};

HostedURL::HostedURL()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.HostedURL)
}
HostedURL::HostedURL(const HostedURL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sizes_(from.sizes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suffix().empty()) {
    suffix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.suffix_);
  }
  crossorigin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_crossorigin().empty()) {
    crossorigin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crossorigin_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.HostedURL)
}

void HostedURL::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostedURL_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crossorigin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HostedURL::~HostedURL() {
  // @@protoc_insertion_point(destructor:clarifai.api.HostedURL)
  SharedDtor();
}

void HostedURL::SharedDtor() {
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crossorigin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostedURL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostedURL& HostedURL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostedURL_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void HostedURL::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.HostedURL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sizes_.Clear();
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crossorigin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* HostedURL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.HostedURL.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string suffix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_suffix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.HostedURL.suffix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string sizes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sizes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.HostedURL.sizes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string crossorigin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_crossorigin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.HostedURL.crossorigin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostedURL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.HostedURL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.HostedURL.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // string suffix = 2;
  if (this->suffix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_suffix().data(), static_cast<int>(this->_internal_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.HostedURL.suffix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_suffix(), target);
  }

  // repeated string sizes = 3;
  for (int i = 0, n = this->_internal_sizes_size(); i < n; i++) {
    const auto& s = this->_internal_sizes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.HostedURL.sizes");
    target = stream->WriteString(3, s, target);
  }

  // string crossorigin = 4;
  if (this->crossorigin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_crossorigin().data(), static_cast<int>(this->_internal_crossorigin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.HostedURL.crossorigin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_crossorigin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.HostedURL)
  return target;
}

size_t HostedURL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.HostedURL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sizes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sizes_.size());
  for (int i = 0, n = sizes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sizes_.Get(i));
  }

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string suffix = 2;
  if (this->suffix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_suffix());
  }

  // string crossorigin = 4;
  if (this->crossorigin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_crossorigin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostedURL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.HostedURL)
  GOOGLE_DCHECK_NE(&from, this);
  const HostedURL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostedURL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.HostedURL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.HostedURL)
    MergeFrom(*source);
  }
}

void HostedURL::MergeFrom(const HostedURL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.HostedURL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sizes_.MergeFrom(from.sizes_);
  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.suffix().size() > 0) {

    suffix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.suffix_);
  }
  if (from.crossorigin().size() > 0) {

    crossorigin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crossorigin_);
  }
}

void HostedURL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.HostedURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostedURL::CopyFrom(const HostedURL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.HostedURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostedURL::IsInitialized() const {
  return true;
}

void HostedURL::InternalSwap(HostedURL* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sizes_.InternalSwap(&other->sizes_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  suffix_.Swap(&other->suffix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  crossorigin_.Swap(&other->crossorigin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata HostedURL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Input::InitAsDefaultInstance() {
  ::clarifai::api::_Input_default_instance_._instance.get_mutable()->data_ = const_cast< ::clarifai::api::Data*>(
      ::clarifai::api::Data::internal_default_instance());
  ::clarifai::api::_Input_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Input_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Input_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class Input::_Internal {
 public:
  static const ::clarifai::api::Data& data(const Input* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Input* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Input* msg);
  static const ::clarifai::api::status::Status& status(const Input* msg);
};

const ::clarifai::api::Data&
Input::_Internal::data(const Input* msg) {
  return *msg->data_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Input::_Internal::created_at(const Input* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Input::_Internal::modified_at(const Input* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::status::Status&
Input::_Internal::status(const Input* msg) {
  return *msg->status_;
}
void Input::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Input::clear_modified_at() {
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void Input::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
Input::Input()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Input)
}
Input::Input(const Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dataset_ids_(from.dataset_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Input)
}

void Input::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&data_)) + sizeof(status_));
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:clarifai.api.Input)
  SharedDtor();
}

void Input::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete status_;
}

void Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input& Input::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_ids_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Input.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string dataset_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dataset_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Input.dataset_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Input::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Input.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.Data data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 5;
  if (this->has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::modified_at(this), target, stream);
  }

  // .clarifai.api.status.Status status = 6;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::status(this), target, stream);
  }

  // repeated string dataset_ids = 7;
  for (int i = 0, n = this->_internal_dataset_ids_size(); i < n; i++) {
    const auto& s = this->_internal_dataset_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Input.dataset_ids");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Input)
  return target;
}

size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Input)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dataset_ids = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dataset_ids_.size());
  for (int i = 0, n = dataset_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dataset_ids_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.Data data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 5;
  if (this->has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.status.Status status = 6;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Input* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Input)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Input)
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dataset_ids_.MergeFrom(from.dataset_ids_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_modified_at()) {
    _internal_mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void Input::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  return true;
}

void Input::InternalSwap(Input* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dataset_ids_.InternalSwap(&other->dataset_ids_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(created_at_, other->created_at_);
  swap(modified_at_, other->modified_at_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Input::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputCount::InitAsDefaultInstance() {
}
class InputCount::_Internal {
 public:
};

InputCount::InputCount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.InputCount)
}
InputCount::InputCount(const InputCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&processed_, &from.processed_,
    static_cast<size_t>(reinterpret_cast<char*>(&reindexing_) -
    reinterpret_cast<char*>(&processed_)) + sizeof(reindexing_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.InputCount)
}

void InputCount::SharedCtor() {
  ::memset(&processed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reindexing_) -
      reinterpret_cast<char*>(&processed_)) + sizeof(reindexing_));
}

InputCount::~InputCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.InputCount)
  SharedDtor();
}

void InputCount::SharedDtor() {
}

void InputCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputCount& InputCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputCount_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void InputCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.InputCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&processed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reindexing_) -
      reinterpret_cast<char*>(&processed_)) + sizeof(reindexing_));
  _internal_metadata_.Clear();
}

const char* InputCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 processed = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 to_process = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 errors = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 processing = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          processing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reindexed = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reindexed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 to_reindex = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          to_reindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reindex_errors = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          reindex_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reindexing = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          reindexing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.InputCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 processed = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->processed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_processed(), target);
  }

  // uint32 to_process = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->to_process() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to_process(), target);
  }

  // uint32 errors = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_errors(), target);
  }

  // uint32 processing = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->processing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_processing(), target);
  }

  // uint32 reindexed = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->reindexed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reindexed(), target);
  }

  // uint32 to_reindex = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->to_reindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_to_reindex(), target);
  }

  // uint32 reindex_errors = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->reindex_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_reindex_errors(), target);
  }

  // uint32 reindexing = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->reindexing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_reindexing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.InputCount)
  return target;
}

size_t InputCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.InputCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 processed = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->processed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_processed());
  }

  // uint32 to_process = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->to_process() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to_process());
  }

  // uint32 errors = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->errors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errors());
  }

  // uint32 processing = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->processing() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_processing());
  }

  // uint32 reindexed = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->reindexed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reindexed());
  }

  // uint32 to_reindex = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->to_reindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to_reindex());
  }

  // uint32 reindex_errors = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->reindex_errors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reindex_errors());
  }

  // uint32 reindexing = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->reindexing() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reindexing());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.InputCount)
  GOOGLE_DCHECK_NE(&from, this);
  const InputCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.InputCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.InputCount)
    MergeFrom(*source);
  }
}

void InputCount::MergeFrom(const InputCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.InputCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.processed() != 0) {
    _internal_set_processed(from._internal_processed());
  }
  if (from.to_process() != 0) {
    _internal_set_to_process(from._internal_to_process());
  }
  if (from.errors() != 0) {
    _internal_set_errors(from._internal_errors());
  }
  if (from.processing() != 0) {
    _internal_set_processing(from._internal_processing());
  }
  if (from.reindexed() != 0) {
    _internal_set_reindexed(from._internal_reindexed());
  }
  if (from.to_reindex() != 0) {
    _internal_set_to_reindex(from._internal_to_reindex());
  }
  if (from.reindex_errors() != 0) {
    _internal_set_reindex_errors(from._internal_reindex_errors());
  }
  if (from.reindexing() != 0) {
    _internal_set_reindexing(from._internal_reindexing());
  }
}

void InputCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.InputCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputCount::CopyFrom(const InputCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.InputCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputCount::IsInitialized() const {
  return true;
}

void InputCount::InternalSwap(InputCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(processed_, other->processed_);
  swap(to_process_, other->to_process_);
  swap(errors_, other->errors_);
  swap(processing_, other->processing_);
  swap(reindexed_, other->reindexed_);
  swap(to_reindex_, other->to_reindex_);
  swap(reindex_errors_, other->reindex_errors_);
  swap(reindexing_, other->reindexing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnnotationFilter::InitAsDefaultInstance() {
  ::clarifai::api::_AnnotationFilter_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_AnnotationFilter_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_AnnotationFilter_default_instance_._instance.get_mutable()->saved_search_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
}
class AnnotationFilter::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const AnnotationFilter* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const AnnotationFilter* msg);
  static const ::clarifai::api::Search& saved_search(const AnnotationFilter* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
AnnotationFilter::_Internal::created_at(const AnnotationFilter* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
AnnotationFilter::_Internal::modified_at(const AnnotationFilter* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::Search&
AnnotationFilter::_Internal::saved_search(const AnnotationFilter* msg) {
  return *msg->saved_search_;
}
void AnnotationFilter::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void AnnotationFilter::clear_modified_at() {
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
AnnotationFilter::AnnotationFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.AnnotationFilter)
}
AnnotationFilter::AnnotationFilter(const AnnotationFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_saved_search()) {
    saved_search_ = new ::clarifai::api::Search(*from.saved_search_);
  } else {
    saved_search_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AnnotationFilter)
}

void AnnotationFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&saved_search_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(saved_search_));
}

AnnotationFilter::~AnnotationFilter() {
  // @@protoc_insertion_point(destructor:clarifai.api.AnnotationFilter)
  SharedDtor();
}

void AnnotationFilter::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete saved_search_;
}

void AnnotationFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnnotationFilter& AnnotationFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void AnnotationFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AnnotationFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && saved_search_ != nullptr) {
    delete saved_search_;
  }
  saved_search_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AnnotationFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AnnotationFilter.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AnnotationFilter.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AnnotationFilter.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search saved_search = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_saved_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnnotationFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AnnotationFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AnnotationFilter.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::modified_at(this), target, stream);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AnnotationFilter.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  // string app_id = 5;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AnnotationFilter.app_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_app_id(), target);
  }

  // .clarifai.api.Search saved_search = 8;
  if (this->has_saved_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::saved_search(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AnnotationFilter)
  return target;
}

size_t AnnotationFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AnnotationFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string app_id = 5;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.Search saved_search = 8;
  if (this->has_saved_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *saved_search_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnotationFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.AnnotationFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotationFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnnotationFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.AnnotationFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.AnnotationFilter)
    MergeFrom(*source);
  }
}

void AnnotationFilter::MergeFrom(const AnnotationFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AnnotationFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_modified_at()) {
    _internal_mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from.has_saved_search()) {
    _internal_mutable_saved_search()->::clarifai::api::Search::MergeFrom(from._internal_saved_search());
  }
}

void AnnotationFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.AnnotationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotationFilter::CopyFrom(const AnnotationFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AnnotationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationFilter::IsInitialized() const {
  return true;
}

void AnnotationFilter::InternalSwap(AnnotationFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(created_at_, other->created_at_);
  swap(modified_at_, other->modified_at_);
  swap(saved_search_, other->saved_search_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DatasetVersion::InitAsDefaultInstance() {
  ::clarifai::api::_DatasetVersion_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_DatasetVersion_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_DatasetVersion_default_instance_.annotation_filter_config_ = const_cast< ::clarifai::api::AnnotationFilterConfig*>(
      ::clarifai::api::AnnotationFilterConfig::internal_default_instance());
  ::clarifai::api::_DatasetVersion_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_DatasetVersion_default_instance_._instance.get_mutable()->metrics_ = const_cast< ::clarifai::api::DatasetVersionMetrics*>(
      ::clarifai::api::DatasetVersionMetrics::internal_default_instance());
  ::clarifai::api::_DatasetVersion_default_instance_._instance.get_mutable()->metadata_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::clarifai::api::_DatasetVersion_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::clarifai::api::Visibility*>(
      ::clarifai::api::Visibility::internal_default_instance());
}
class DatasetVersion::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const DatasetVersion* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const DatasetVersion* msg);
  static const ::clarifai::api::AnnotationFilterConfig& annotation_filter_config(const DatasetVersion* msg);
  static const ::clarifai::api::status::Status& status(const DatasetVersion* msg);
  static const ::clarifai::api::DatasetVersionMetrics& metrics(const DatasetVersion* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& metadata(const DatasetVersion* msg);
  static const ::clarifai::api::Visibility& visibility(const DatasetVersion* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
DatasetVersion::_Internal::created_at(const DatasetVersion* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
DatasetVersion::_Internal::modified_at(const DatasetVersion* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::AnnotationFilterConfig&
DatasetVersion::_Internal::annotation_filter_config(const DatasetVersion* msg) {
  return *msg->data_config_.annotation_filter_config_;
}
const ::clarifai::api::status::Status&
DatasetVersion::_Internal::status(const DatasetVersion* msg) {
  return *msg->status_;
}
const ::clarifai::api::DatasetVersionMetrics&
DatasetVersion::_Internal::metrics(const DatasetVersion* msg) {
  return *msg->metrics_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
DatasetVersion::_Internal::metadata(const DatasetVersion* msg) {
  return *msg->metadata_;
}
const ::clarifai::api::Visibility&
DatasetVersion::_Internal::visibility(const DatasetVersion* msg) {
  return *msg->visibility_;
}
void DatasetVersion::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void DatasetVersion::clear_modified_at() {
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void DatasetVersion::set_allocated_annotation_filter_config(::clarifai::api::AnnotationFilterConfig* annotation_filter_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data_config();
  if (annotation_filter_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      annotation_filter_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation_filter_config, submessage_arena);
    }
    set_has_annotation_filter_config();
    data_config_.annotation_filter_config_ = annotation_filter_config;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DatasetVersion.annotation_filter_config)
}
void DatasetVersion::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void DatasetVersion::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
DatasetVersion::DatasetVersion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DatasetVersion)
}
DatasetVersion::DatasetVersion(const DatasetVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      embed_model_version_ids_(from.embed_model_version_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dataset_id().empty()) {
    dataset_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dataset_id_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_metrics()) {
    metrics_ = new ::clarifai::api::DatasetVersionMetrics(*from.metrics_);
  } else {
    metrics_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  clear_has_data_config();
  switch (from.data_config_case()) {
    case kAnnotationFilterConfig: {
      _internal_mutable_annotation_filter_config()->::clarifai::api::AnnotationFilterConfig::MergeFrom(from._internal_annotation_filter_config());
      break;
    }
    case DATA_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetVersion)
}

void DatasetVersion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(visibility_));
  clear_has_data_config();
}

DatasetVersion::~DatasetVersion() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetVersion)
  SharedDtor();
}

void DatasetVersion::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete metrics_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete visibility_;
  if (has_data_config()) {
    clear_data_config();
  }
}

void DatasetVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatasetVersion& DatasetVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void DatasetVersion::clear_data_config() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.DatasetVersion)
  switch (data_config_case()) {
    case kAnnotationFilterConfig: {
      delete data_config_.annotation_filter_config_;
      break;
    }
    case DATA_CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_CONFIG_NOT_SET;
}


void DatasetVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  embed_model_version_ids_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  clear_data_config();
  _internal_metadata_.Clear();
}

const char* DatasetVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DatasetVersion.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DatasetVersion.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DatasetVersion.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dataset_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DatasetVersion.dataset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DatasetVersion.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersionMetrics metrics = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string embed_model_version_ids = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_embed_model_version_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DatasetVersion.embed_model_version_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.AnnotationFilterConfig annotation_filter_config = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_filter_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DatasetVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::modified_at(this), target, stream);
  }

  // string app_id = 4;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  // string dataset_id = 6;
  if (this->dataset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.dataset_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_dataset_id(), target);
  }

  // .clarifai.api.status.Status status = 8;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::status(this), target, stream);
  }

  // string description = 10;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.description");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_description(), target);
  }

  // .clarifai.api.DatasetVersionMetrics metrics = 11;
  if (this->has_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::metrics(this), target, stream);
  }

  // .google.protobuf.Struct metadata = 12;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::metadata(this), target, stream);
  }

  // .clarifai.api.Visibility visibility = 13;
  if (this->has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::visibility(this), target, stream);
  }

  // repeated string embed_model_version_ids = 14;
  for (int i = 0, n = this->_internal_embed_model_version_ids_size(); i < n; i++) {
    const auto& s = this->_internal_embed_model_version_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.embed_model_version_ids");
    target = stream->WriteString(14, s, target);
  }

  // .clarifai.api.AnnotationFilterConfig annotation_filter_config = 15;
  if (_internal_has_annotation_filter_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::annotation_filter_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetVersion)
  return target;
}

size_t DatasetVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string embed_model_version_ids = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(embed_model_version_ids_.size());
  for (int i = 0, n = embed_model_version_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      embed_model_version_ids_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string app_id = 4;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string dataset_id = 6;
  if (this->dataset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // string description = 10;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.status.Status status = 8;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.DatasetVersionMetrics metrics = 11;
  if (this->has_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metrics_);
  }

  // .google.protobuf.Struct metadata = 12;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .clarifai.api.Visibility visibility = 13;
  if (this->has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  switch (data_config_case()) {
    // .clarifai.api.AnnotationFilterConfig annotation_filter_config = 15;
    case kAnnotationFilterConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_config_.annotation_filter_config_);
      break;
    }
    case DATA_CONFIG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatasetVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DatasetVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DatasetVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DatasetVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DatasetVersion)
    MergeFrom(*source);
  }
}

void DatasetVersion::MergeFrom(const DatasetVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  embed_model_version_ids_.MergeFrom(from.embed_model_version_ids_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.dataset_id().size() > 0) {

    dataset_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dataset_id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_modified_at()) {
    _internal_mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_metrics()) {
    _internal_mutable_metrics()->::clarifai::api::DatasetVersionMetrics::MergeFrom(from._internal_metrics());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from.has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  switch (from.data_config_case()) {
    case kAnnotationFilterConfig: {
      _internal_mutable_annotation_filter_config()->::clarifai::api::AnnotationFilterConfig::MergeFrom(from._internal_annotation_filter_config());
      break;
    }
    case DATA_CONFIG_NOT_SET: {
      break;
    }
  }
}

void DatasetVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DatasetVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetVersion::CopyFrom(const DatasetVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetVersion::IsInitialized() const {
  return true;
}

void DatasetVersion::InternalSwap(DatasetVersion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  embed_model_version_ids_.InternalSwap(&other->embed_model_version_ids_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dataset_id_.Swap(&other->dataset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(created_at_, other->created_at_);
  swap(modified_at_, other->modified_at_);
  swap(status_, other->status_);
  swap(metrics_, other->metrics_);
  swap(metadata_, other->metadata_);
  swap(visibility_, other->visibility_);
  swap(data_config_, other->data_config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnnotationFilterConfig::InitAsDefaultInstance() {
  ::clarifai::api::_AnnotationFilterConfig_default_instance_._instance.get_mutable()->annotation_filter_ = const_cast< ::clarifai::api::AnnotationFilter*>(
      ::clarifai::api::AnnotationFilter::internal_default_instance());
}
class AnnotationFilterConfig::_Internal {
 public:
  static const ::clarifai::api::AnnotationFilter& annotation_filter(const AnnotationFilterConfig* msg);
};

const ::clarifai::api::AnnotationFilter&
AnnotationFilterConfig::_Internal::annotation_filter(const AnnotationFilterConfig* msg) {
  return *msg->annotation_filter_;
}
AnnotationFilterConfig::AnnotationFilterConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.AnnotationFilterConfig)
}
AnnotationFilterConfig::AnnotationFilterConfig(const AnnotationFilterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_annotation_filter()) {
    annotation_filter_ = new ::clarifai::api::AnnotationFilter(*from.annotation_filter_);
  } else {
    annotation_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AnnotationFilterConfig)
}

void AnnotationFilterConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  annotation_filter_ = nullptr;
}

AnnotationFilterConfig::~AnnotationFilterConfig() {
  // @@protoc_insertion_point(destructor:clarifai.api.AnnotationFilterConfig)
  SharedDtor();
}

void AnnotationFilterConfig::SharedDtor() {
  if (this != internal_default_instance()) delete annotation_filter_;
}

void AnnotationFilterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnnotationFilterConfig& AnnotationFilterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void AnnotationFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AnnotationFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && annotation_filter_ != nullptr) {
    delete annotation_filter_;
  }
  annotation_filter_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AnnotationFilterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.AnnotationFilter annotation_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnnotationFilterConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AnnotationFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.AnnotationFilter annotation_filter = 1;
  if (this->has_annotation_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::annotation_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AnnotationFilterConfig)
  return target;
}

size_t AnnotationFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AnnotationFilterConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.AnnotationFilter annotation_filter = 1;
  if (this->has_annotation_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_filter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnotationFilterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.AnnotationFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotationFilterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnnotationFilterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.AnnotationFilterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.AnnotationFilterConfig)
    MergeFrom(*source);
  }
}

void AnnotationFilterConfig::MergeFrom(const AnnotationFilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AnnotationFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_annotation_filter()) {
    _internal_mutable_annotation_filter()->::clarifai::api::AnnotationFilter::MergeFrom(from._internal_annotation_filter());
  }
}

void AnnotationFilterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.AnnotationFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotationFilterConfig::CopyFrom(const AnnotationFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AnnotationFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationFilterConfig::IsInitialized() const {
  return true;
}

void AnnotationFilterConfig::InternalSwap(AnnotationFilterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(annotation_filter_, other->annotation_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationFilterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DatasetVersionMetrics::InitAsDefaultInstance() {
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->inputs_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->unlabeled_inputs_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->inputs_with_metadata_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->inputs_with_geo_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->regions_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->region_location_matrix_ = const_cast< ::MatrixUint64*>(
      ::MatrixUint64::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->bounding_boxes_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->polygons_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->points_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->masks_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->region_inputs_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->region_frames_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->frames_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->frame_inputs_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->embeddings_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->positive_input_tags_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->positive_region_tags_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::clarifai::api::_DatasetVersionMetrics_default_instance_._instance.get_mutable()->positive_frame_tags_count_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
}
class DatasetVersionMetrics::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& inputs_count(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& unlabeled_inputs_count(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& inputs_with_metadata_count(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& inputs_with_geo_count(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& regions_count(const DatasetVersionMetrics* msg);
  static const ::MatrixUint64& region_location_matrix(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& bounding_boxes_count(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& polygons_count(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& points_count(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& masks_count(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& region_inputs_count(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& region_frames_count(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& frames_count(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& frame_inputs_count(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& embeddings_count(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& positive_input_tags_count(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& positive_region_tags_count(const DatasetVersionMetrics* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& positive_frame_tags_count(const DatasetVersionMetrics* msg);
};

const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::inputs_count(const DatasetVersionMetrics* msg) {
  return *msg->inputs_count_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::unlabeled_inputs_count(const DatasetVersionMetrics* msg) {
  return *msg->unlabeled_inputs_count_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::inputs_with_metadata_count(const DatasetVersionMetrics* msg) {
  return *msg->inputs_with_metadata_count_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::inputs_with_geo_count(const DatasetVersionMetrics* msg) {
  return *msg->inputs_with_geo_count_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::regions_count(const DatasetVersionMetrics* msg) {
  return *msg->regions_count_;
}
const ::MatrixUint64&
DatasetVersionMetrics::_Internal::region_location_matrix(const DatasetVersionMetrics* msg) {
  return *msg->region_location_matrix_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::bounding_boxes_count(const DatasetVersionMetrics* msg) {
  return *msg->bounding_boxes_count_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::polygons_count(const DatasetVersionMetrics* msg) {
  return *msg->polygons_count_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::points_count(const DatasetVersionMetrics* msg) {
  return *msg->points_count_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::masks_count(const DatasetVersionMetrics* msg) {
  return *msg->masks_count_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::region_inputs_count(const DatasetVersionMetrics* msg) {
  return *msg->region_inputs_count_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::region_frames_count(const DatasetVersionMetrics* msg) {
  return *msg->region_frames_count_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::frames_count(const DatasetVersionMetrics* msg) {
  return *msg->frames_count_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::frame_inputs_count(const DatasetVersionMetrics* msg) {
  return *msg->frame_inputs_count_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::embeddings_count(const DatasetVersionMetrics* msg) {
  return *msg->embeddings_count_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::positive_input_tags_count(const DatasetVersionMetrics* msg) {
  return *msg->positive_input_tags_count_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::positive_region_tags_count(const DatasetVersionMetrics* msg) {
  return *msg->positive_region_tags_count_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::positive_frame_tags_count(const DatasetVersionMetrics* msg) {
  return *msg->positive_frame_tags_count_;
}
void DatasetVersionMetrics::clear_inputs_count() {
  if (GetArenaNoVirtual() == nullptr && inputs_count_ != nullptr) {
    delete inputs_count_;
  }
  inputs_count_ = nullptr;
}
void DatasetVersionMetrics::clear_unlabeled_inputs_count() {
  if (GetArenaNoVirtual() == nullptr && unlabeled_inputs_count_ != nullptr) {
    delete unlabeled_inputs_count_;
  }
  unlabeled_inputs_count_ = nullptr;
}
void DatasetVersionMetrics::clear_inputs_with_metadata_count() {
  if (GetArenaNoVirtual() == nullptr && inputs_with_metadata_count_ != nullptr) {
    delete inputs_with_metadata_count_;
  }
  inputs_with_metadata_count_ = nullptr;
}
void DatasetVersionMetrics::clear_inputs_with_geo_count() {
  if (GetArenaNoVirtual() == nullptr && inputs_with_geo_count_ != nullptr) {
    delete inputs_with_geo_count_;
  }
  inputs_with_geo_count_ = nullptr;
}
void DatasetVersionMetrics::clear_regions_count() {
  if (GetArenaNoVirtual() == nullptr && regions_count_ != nullptr) {
    delete regions_count_;
  }
  regions_count_ = nullptr;
}
void DatasetVersionMetrics::clear_region_location_matrix() {
  if (GetArenaNoVirtual() == nullptr && region_location_matrix_ != nullptr) {
    delete region_location_matrix_;
  }
  region_location_matrix_ = nullptr;
}
void DatasetVersionMetrics::clear_bounding_boxes_count() {
  if (GetArenaNoVirtual() == nullptr && bounding_boxes_count_ != nullptr) {
    delete bounding_boxes_count_;
  }
  bounding_boxes_count_ = nullptr;
}
void DatasetVersionMetrics::clear_polygons_count() {
  if (GetArenaNoVirtual() == nullptr && polygons_count_ != nullptr) {
    delete polygons_count_;
  }
  polygons_count_ = nullptr;
}
void DatasetVersionMetrics::clear_points_count() {
  if (GetArenaNoVirtual() == nullptr && points_count_ != nullptr) {
    delete points_count_;
  }
  points_count_ = nullptr;
}
void DatasetVersionMetrics::clear_masks_count() {
  if (GetArenaNoVirtual() == nullptr && masks_count_ != nullptr) {
    delete masks_count_;
  }
  masks_count_ = nullptr;
}
void DatasetVersionMetrics::clear_region_inputs_count() {
  if (GetArenaNoVirtual() == nullptr && region_inputs_count_ != nullptr) {
    delete region_inputs_count_;
  }
  region_inputs_count_ = nullptr;
}
void DatasetVersionMetrics::clear_region_frames_count() {
  if (GetArenaNoVirtual() == nullptr && region_frames_count_ != nullptr) {
    delete region_frames_count_;
  }
  region_frames_count_ = nullptr;
}
void DatasetVersionMetrics::clear_frames_count() {
  if (GetArenaNoVirtual() == nullptr && frames_count_ != nullptr) {
    delete frames_count_;
  }
  frames_count_ = nullptr;
}
void DatasetVersionMetrics::clear_frame_inputs_count() {
  if (GetArenaNoVirtual() == nullptr && frame_inputs_count_ != nullptr) {
    delete frame_inputs_count_;
  }
  frame_inputs_count_ = nullptr;
}
void DatasetVersionMetrics::clear_embeddings_count() {
  if (GetArenaNoVirtual() == nullptr && embeddings_count_ != nullptr) {
    delete embeddings_count_;
  }
  embeddings_count_ = nullptr;
}
void DatasetVersionMetrics::clear_positive_input_tags_count() {
  if (GetArenaNoVirtual() == nullptr && positive_input_tags_count_ != nullptr) {
    delete positive_input_tags_count_;
  }
  positive_input_tags_count_ = nullptr;
}
void DatasetVersionMetrics::clear_positive_region_tags_count() {
  if (GetArenaNoVirtual() == nullptr && positive_region_tags_count_ != nullptr) {
    delete positive_region_tags_count_;
  }
  positive_region_tags_count_ = nullptr;
}
void DatasetVersionMetrics::clear_positive_frame_tags_count() {
  if (GetArenaNoVirtual() == nullptr && positive_frame_tags_count_ != nullptr) {
    delete positive_frame_tags_count_;
  }
  positive_frame_tags_count_ = nullptr;
}
DatasetVersionMetrics::DatasetVersionMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DatasetVersionMetrics)
}
DatasetVersionMetrics::DatasetVersionMetrics(const DatasetVersionMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_inputs_count()) {
    inputs_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.inputs_count_);
  } else {
    inputs_count_ = nullptr;
  }
  if (from._internal_has_unlabeled_inputs_count()) {
    unlabeled_inputs_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.unlabeled_inputs_count_);
  } else {
    unlabeled_inputs_count_ = nullptr;
  }
  if (from._internal_has_inputs_with_metadata_count()) {
    inputs_with_metadata_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.inputs_with_metadata_count_);
  } else {
    inputs_with_metadata_count_ = nullptr;
  }
  if (from._internal_has_inputs_with_geo_count()) {
    inputs_with_geo_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.inputs_with_geo_count_);
  } else {
    inputs_with_geo_count_ = nullptr;
  }
  if (from._internal_has_regions_count()) {
    regions_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.regions_count_);
  } else {
    regions_count_ = nullptr;
  }
  if (from._internal_has_region_location_matrix()) {
    region_location_matrix_ = new ::MatrixUint64(*from.region_location_matrix_);
  } else {
    region_location_matrix_ = nullptr;
  }
  if (from._internal_has_bounding_boxes_count()) {
    bounding_boxes_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.bounding_boxes_count_);
  } else {
    bounding_boxes_count_ = nullptr;
  }
  if (from._internal_has_polygons_count()) {
    polygons_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.polygons_count_);
  } else {
    polygons_count_ = nullptr;
  }
  if (from._internal_has_points_count()) {
    points_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.points_count_);
  } else {
    points_count_ = nullptr;
  }
  if (from._internal_has_masks_count()) {
    masks_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.masks_count_);
  } else {
    masks_count_ = nullptr;
  }
  if (from._internal_has_frames_count()) {
    frames_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.frames_count_);
  } else {
    frames_count_ = nullptr;
  }
  if (from._internal_has_embeddings_count()) {
    embeddings_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.embeddings_count_);
  } else {
    embeddings_count_ = nullptr;
  }
  if (from._internal_has_positive_input_tags_count()) {
    positive_input_tags_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.positive_input_tags_count_);
  } else {
    positive_input_tags_count_ = nullptr;
  }
  if (from._internal_has_positive_region_tags_count()) {
    positive_region_tags_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.positive_region_tags_count_);
  } else {
    positive_region_tags_count_ = nullptr;
  }
  if (from._internal_has_positive_frame_tags_count()) {
    positive_frame_tags_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.positive_frame_tags_count_);
  } else {
    positive_frame_tags_count_ = nullptr;
  }
  if (from._internal_has_region_inputs_count()) {
    region_inputs_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.region_inputs_count_);
  } else {
    region_inputs_count_ = nullptr;
  }
  if (from._internal_has_region_frames_count()) {
    region_frames_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.region_frames_count_);
  } else {
    region_frames_count_ = nullptr;
  }
  if (from._internal_has_frame_inputs_count()) {
    frame_inputs_count_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.frame_inputs_count_);
  } else {
    frame_inputs_count_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetVersionMetrics)
}

void DatasetVersionMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DatasetVersionMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&inputs_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_inputs_count_) -
      reinterpret_cast<char*>(&inputs_count_)) + sizeof(frame_inputs_count_));
}

DatasetVersionMetrics::~DatasetVersionMetrics() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetVersionMetrics)
  SharedDtor();
}

void DatasetVersionMetrics::SharedDtor() {
  if (this != internal_default_instance()) delete inputs_count_;
  if (this != internal_default_instance()) delete unlabeled_inputs_count_;
  if (this != internal_default_instance()) delete inputs_with_metadata_count_;
  if (this != internal_default_instance()) delete inputs_with_geo_count_;
  if (this != internal_default_instance()) delete regions_count_;
  if (this != internal_default_instance()) delete region_location_matrix_;
  if (this != internal_default_instance()) delete bounding_boxes_count_;
  if (this != internal_default_instance()) delete polygons_count_;
  if (this != internal_default_instance()) delete points_count_;
  if (this != internal_default_instance()) delete masks_count_;
  if (this != internal_default_instance()) delete frames_count_;
  if (this != internal_default_instance()) delete embeddings_count_;
  if (this != internal_default_instance()) delete positive_input_tags_count_;
  if (this != internal_default_instance()) delete positive_region_tags_count_;
  if (this != internal_default_instance()) delete positive_frame_tags_count_;
  if (this != internal_default_instance()) delete region_inputs_count_;
  if (this != internal_default_instance()) delete region_frames_count_;
  if (this != internal_default_instance()) delete frame_inputs_count_;
}

void DatasetVersionMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatasetVersionMetrics& DatasetVersionMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatasetVersionMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void DatasetVersionMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetVersionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && inputs_count_ != nullptr) {
    delete inputs_count_;
  }
  inputs_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && unlabeled_inputs_count_ != nullptr) {
    delete unlabeled_inputs_count_;
  }
  unlabeled_inputs_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && inputs_with_metadata_count_ != nullptr) {
    delete inputs_with_metadata_count_;
  }
  inputs_with_metadata_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && inputs_with_geo_count_ != nullptr) {
    delete inputs_with_geo_count_;
  }
  inputs_with_geo_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && regions_count_ != nullptr) {
    delete regions_count_;
  }
  regions_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && region_location_matrix_ != nullptr) {
    delete region_location_matrix_;
  }
  region_location_matrix_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bounding_boxes_count_ != nullptr) {
    delete bounding_boxes_count_;
  }
  bounding_boxes_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && polygons_count_ != nullptr) {
    delete polygons_count_;
  }
  polygons_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && points_count_ != nullptr) {
    delete points_count_;
  }
  points_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && masks_count_ != nullptr) {
    delete masks_count_;
  }
  masks_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && frames_count_ != nullptr) {
    delete frames_count_;
  }
  frames_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && embeddings_count_ != nullptr) {
    delete embeddings_count_;
  }
  embeddings_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && positive_input_tags_count_ != nullptr) {
    delete positive_input_tags_count_;
  }
  positive_input_tags_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && positive_region_tags_count_ != nullptr) {
    delete positive_region_tags_count_;
  }
  positive_region_tags_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && positive_frame_tags_count_ != nullptr) {
    delete positive_frame_tags_count_;
  }
  positive_frame_tags_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && region_inputs_count_ != nullptr) {
    delete region_inputs_count_;
  }
  region_inputs_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && region_frames_count_ != nullptr) {
    delete region_frames_count_;
  }
  region_frames_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && frame_inputs_count_ != nullptr) {
    delete frame_inputs_count_;
  }
  frame_inputs_count_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DatasetVersionMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.UInt64Value inputs_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputs_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value unlabeled_inputs_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_unlabeled_inputs_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value inputs_with_metadata_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputs_with_metadata_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value inputs_with_geo_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputs_with_geo_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value regions_count = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_regions_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MatrixUint64 region_location_matrix = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_location_matrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value bounding_boxes_count = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounding_boxes_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value polygons_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygons_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value points_count = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_points_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value masks_count = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_masks_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value frames_count = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_frames_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value embeddings_count = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_embeddings_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value positive_input_tags_count = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_positive_input_tags_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value positive_region_tags_count = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_positive_region_tags_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value positive_frame_tags_count = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_positive_frame_tags_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value region_inputs_count = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_inputs_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value region_frames_count = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_frames_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value frame_inputs_count = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_inputs_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DatasetVersionMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetVersionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt64Value inputs_count = 1;
  if (this->has_inputs_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::inputs_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value unlabeled_inputs_count = 6;
  if (this->has_unlabeled_inputs_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::unlabeled_inputs_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value inputs_with_metadata_count = 8;
  if (this->has_inputs_with_metadata_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::inputs_with_metadata_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value inputs_with_geo_count = 9;
  if (this->has_inputs_with_geo_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::inputs_with_geo_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value regions_count = 20;
  if (this->has_regions_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::regions_count(this), target, stream);
  }

  // .MatrixUint64 region_location_matrix = 21;
  if (this->has_region_location_matrix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::region_location_matrix(this), target, stream);
  }

  // .google.protobuf.UInt64Value bounding_boxes_count = 22;
  if (this->has_bounding_boxes_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::bounding_boxes_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value polygons_count = 23;
  if (this->has_polygons_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::polygons_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value points_count = 24;
  if (this->has_points_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::points_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value masks_count = 25;
  if (this->has_masks_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::masks_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value frames_count = 30;
  if (this->has_frames_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::frames_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value embeddings_count = 40;
  if (this->has_embeddings_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::embeddings_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value positive_input_tags_count = 50;
  if (this->has_positive_input_tags_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::positive_input_tags_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value positive_region_tags_count = 51;
  if (this->has_positive_region_tags_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::positive_region_tags_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value positive_frame_tags_count = 52;
  if (this->has_positive_frame_tags_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::positive_frame_tags_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value region_inputs_count = 60;
  if (this->has_region_inputs_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        60, _Internal::region_inputs_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value region_frames_count = 61;
  if (this->has_region_frames_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        61, _Internal::region_frames_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value frame_inputs_count = 70;
  if (this->has_frame_inputs_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        70, _Internal::frame_inputs_count(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetVersionMetrics)
  return target;
}

size_t DatasetVersionMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetVersionMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.UInt64Value inputs_count = 1;
  if (this->has_inputs_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inputs_count_);
  }

  // .google.protobuf.UInt64Value unlabeled_inputs_count = 6;
  if (this->has_unlabeled_inputs_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unlabeled_inputs_count_);
  }

  // .google.protobuf.UInt64Value inputs_with_metadata_count = 8;
  if (this->has_inputs_with_metadata_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inputs_with_metadata_count_);
  }

  // .google.protobuf.UInt64Value inputs_with_geo_count = 9;
  if (this->has_inputs_with_geo_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inputs_with_geo_count_);
  }

  // .google.protobuf.UInt64Value regions_count = 20;
  if (this->has_regions_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *regions_count_);
  }

  // .MatrixUint64 region_location_matrix = 21;
  if (this->has_region_location_matrix()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_location_matrix_);
  }

  // .google.protobuf.UInt64Value bounding_boxes_count = 22;
  if (this->has_bounding_boxes_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounding_boxes_count_);
  }

  // .google.protobuf.UInt64Value polygons_count = 23;
  if (this->has_polygons_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *polygons_count_);
  }

  // .google.protobuf.UInt64Value points_count = 24;
  if (this->has_points_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *points_count_);
  }

  // .google.protobuf.UInt64Value masks_count = 25;
  if (this->has_masks_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *masks_count_);
  }

  // .google.protobuf.UInt64Value frames_count = 30;
  if (this->has_frames_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frames_count_);
  }

  // .google.protobuf.UInt64Value embeddings_count = 40;
  if (this->has_embeddings_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *embeddings_count_);
  }

  // .google.protobuf.UInt64Value positive_input_tags_count = 50;
  if (this->has_positive_input_tags_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positive_input_tags_count_);
  }

  // .google.protobuf.UInt64Value positive_region_tags_count = 51;
  if (this->has_positive_region_tags_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positive_region_tags_count_);
  }

  // .google.protobuf.UInt64Value positive_frame_tags_count = 52;
  if (this->has_positive_frame_tags_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positive_frame_tags_count_);
  }

  // .google.protobuf.UInt64Value region_inputs_count = 60;
  if (this->has_region_inputs_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_inputs_count_);
  }

  // .google.protobuf.UInt64Value region_frames_count = 61;
  if (this->has_region_frames_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_frames_count_);
  }

  // .google.protobuf.UInt64Value frame_inputs_count = 70;
  if (this->has_frame_inputs_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_inputs_count_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatasetVersionMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DatasetVersionMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetVersionMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DatasetVersionMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DatasetVersionMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DatasetVersionMetrics)
    MergeFrom(*source);
  }
}

void DatasetVersionMetrics::MergeFrom(const DatasetVersionMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetVersionMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_inputs_count()) {
    _internal_mutable_inputs_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_inputs_count());
  }
  if (from.has_unlabeled_inputs_count()) {
    _internal_mutable_unlabeled_inputs_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_unlabeled_inputs_count());
  }
  if (from.has_inputs_with_metadata_count()) {
    _internal_mutable_inputs_with_metadata_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_inputs_with_metadata_count());
  }
  if (from.has_inputs_with_geo_count()) {
    _internal_mutable_inputs_with_geo_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_inputs_with_geo_count());
  }
  if (from.has_regions_count()) {
    _internal_mutable_regions_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_regions_count());
  }
  if (from.has_region_location_matrix()) {
    _internal_mutable_region_location_matrix()->::MatrixUint64::MergeFrom(from._internal_region_location_matrix());
  }
  if (from.has_bounding_boxes_count()) {
    _internal_mutable_bounding_boxes_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_bounding_boxes_count());
  }
  if (from.has_polygons_count()) {
    _internal_mutable_polygons_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_polygons_count());
  }
  if (from.has_points_count()) {
    _internal_mutable_points_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_points_count());
  }
  if (from.has_masks_count()) {
    _internal_mutable_masks_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_masks_count());
  }
  if (from.has_frames_count()) {
    _internal_mutable_frames_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_frames_count());
  }
  if (from.has_embeddings_count()) {
    _internal_mutable_embeddings_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_embeddings_count());
  }
  if (from.has_positive_input_tags_count()) {
    _internal_mutable_positive_input_tags_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_positive_input_tags_count());
  }
  if (from.has_positive_region_tags_count()) {
    _internal_mutable_positive_region_tags_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_positive_region_tags_count());
  }
  if (from.has_positive_frame_tags_count()) {
    _internal_mutable_positive_frame_tags_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_positive_frame_tags_count());
  }
  if (from.has_region_inputs_count()) {
    _internal_mutable_region_inputs_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_region_inputs_count());
  }
  if (from.has_region_frames_count()) {
    _internal_mutable_region_frames_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_region_frames_count());
  }
  if (from.has_frame_inputs_count()) {
    _internal_mutable_frame_inputs_count()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_frame_inputs_count());
  }
}

void DatasetVersionMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DatasetVersionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetVersionMetrics::CopyFrom(const DatasetVersionMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetVersionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetVersionMetrics::IsInitialized() const {
  return true;
}

void DatasetVersionMetrics::InternalSwap(DatasetVersionMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(inputs_count_, other->inputs_count_);
  swap(unlabeled_inputs_count_, other->unlabeled_inputs_count_);
  swap(inputs_with_metadata_count_, other->inputs_with_metadata_count_);
  swap(inputs_with_geo_count_, other->inputs_with_geo_count_);
  swap(regions_count_, other->regions_count_);
  swap(region_location_matrix_, other->region_location_matrix_);
  swap(bounding_boxes_count_, other->bounding_boxes_count_);
  swap(polygons_count_, other->polygons_count_);
  swap(points_count_, other->points_count_);
  swap(masks_count_, other->masks_count_);
  swap(frames_count_, other->frames_count_);
  swap(embeddings_count_, other->embeddings_count_);
  swap(positive_input_tags_count_, other->positive_input_tags_count_);
  swap(positive_region_tags_count_, other->positive_region_tags_count_);
  swap(positive_frame_tags_count_, other->positive_frame_tags_count_);
  swap(region_inputs_count_, other->region_inputs_count_);
  swap(region_frames_count_, other->region_frames_count_);
  swap(frame_inputs_count_, other->frame_inputs_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetVersionMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkflowResultsSimilarity::InitAsDefaultInstance() {
  ::clarifai::api::_WorkflowResultsSimilarity_default_instance_._instance.get_mutable()->probe_input_ = const_cast< ::clarifai::api::Input*>(
      ::clarifai::api::Input::internal_default_instance());
}
class WorkflowResultsSimilarity::_Internal {
 public:
  static const ::clarifai::api::Input& probe_input(const WorkflowResultsSimilarity* msg);
};

const ::clarifai::api::Input&
WorkflowResultsSimilarity::_Internal::probe_input(const WorkflowResultsSimilarity* msg) {
  return *msg->probe_input_;
}
WorkflowResultsSimilarity::WorkflowResultsSimilarity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.WorkflowResultsSimilarity)
}
WorkflowResultsSimilarity::WorkflowResultsSimilarity(const WorkflowResultsSimilarity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pool_results_(from.pool_results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_probe_input()) {
    probe_input_ = new ::clarifai::api::Input(*from.probe_input_);
  } else {
    probe_input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowResultsSimilarity)
}

void WorkflowResultsSimilarity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkflowResultsSimilarity_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  probe_input_ = nullptr;
}

WorkflowResultsSimilarity::~WorkflowResultsSimilarity() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowResultsSimilarity)
  SharedDtor();
}

void WorkflowResultsSimilarity::SharedDtor() {
  if (this != internal_default_instance()) delete probe_input_;
}

void WorkflowResultsSimilarity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowResultsSimilarity& WorkflowResultsSimilarity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkflowResultsSimilarity_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void WorkflowResultsSimilarity::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowResultsSimilarity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pool_results_.Clear();
  if (GetArenaNoVirtual() == nullptr && probe_input_ != nullptr) {
    delete probe_input_;
  }
  probe_input_ = nullptr;
  _internal_metadata_.Clear();
}

const char* WorkflowResultsSimilarity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.Input probe_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_probe_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit pool_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pool_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkflowResultsSimilarity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowResultsSimilarity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Input probe_input = 1;
  if (this->has_probe_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::probe_input(this), target, stream);
  }

  // repeated .clarifai.api.Hit pool_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pool_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pool_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowResultsSimilarity)
  return target;
}

size_t WorkflowResultsSimilarity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowResultsSimilarity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Hit pool_results = 2;
  total_size += 1UL * this->_internal_pool_results_size();
  for (const auto& msg : this->pool_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.Input probe_input = 1;
  if (this->has_probe_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *probe_input_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowResultsSimilarity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.WorkflowResultsSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowResultsSimilarity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkflowResultsSimilarity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.WorkflowResultsSimilarity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.WorkflowResultsSimilarity)
    MergeFrom(*source);
  }
}

void WorkflowResultsSimilarity::MergeFrom(const WorkflowResultsSimilarity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowResultsSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pool_results_.MergeFrom(from.pool_results_);
  if (from.has_probe_input()) {
    _internal_mutable_probe_input()->::clarifai::api::Input::MergeFrom(from._internal_probe_input());
  }
}

void WorkflowResultsSimilarity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.WorkflowResultsSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowResultsSimilarity::CopyFrom(const WorkflowResultsSimilarity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowResultsSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowResultsSimilarity::IsInitialized() const {
  return true;
}

void WorkflowResultsSimilarity::InternalSwap(WorkflowResultsSimilarity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pool_results_.InternalSwap(&other->pool_results_);
  swap(probe_input_, other->probe_input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowResultsSimilarity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Key::InitAsDefaultInstance() {
  ::clarifai::api::_Key_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Key_default_instance_._instance.get_mutable()->expires_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Key::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Key* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at(const Key* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Key::_Internal::created_at(const Key* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Key::_Internal::expires_at(const Key* msg) {
  return *msg->expires_at_;
}
void Key::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Key::clear_expires_at() {
  if (GetArenaNoVirtual() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
}
Key::Key()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Key)
}
Key::Key(const Key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      scopes_(from.scopes_),
      apps_(from.apps_),
      endpoints_(from.endpoints_),
      authorized_idp_ids_(from.authorized_idp_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_expires_at()) {
    expires_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expires_at_);
  } else {
    expires_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Key)
}

void Key::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expires_at_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(expires_at_));
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:clarifai.api.Key)
  SharedDtor();
}

void Key::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete expires_at_;
}

void Key::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Key& Key::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Key::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  apps_.Clear();
  endpoints_.Clear();
  authorized_idp_ids_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Key::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Key.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Key.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string scopes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Key.scopes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.App apps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expires_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string endpoints = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Key.endpoints"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Key.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string authorized_idp_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_authorized_idp_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Key.authorized_idp_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Key::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // repeated string scopes = 3;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.scopes");
    target = stream->WriteString(3, s, target);
  }

  // repeated .clarifai.api.App apps = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_apps(i), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp expires_at = 6;
  if (this->has_expires_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::expires_at(this), target, stream);
  }

  // repeated string endpoints = 7;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.endpoints");
    target = stream->WriteString(7, s, target);
  }

  // string type = 8;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_type(), target);
  }

  // repeated string authorized_idp_ids = 9;
  for (int i = 0, n = this->_internal_authorized_idp_ids_size(); i < n; i++) {
    const auto& s = this->_internal_authorized_idp_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.authorized_idp_ids");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Key)
  return target;
}

size_t Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Key)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(scopes_.size());
  for (int i = 0, n = scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      scopes_.Get(i));
  }

  // repeated .clarifai.api.App apps = 4;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string endpoints = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(endpoints_.size());
  for (int i = 0, n = endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      endpoints_.Get(i));
  }

  // repeated string authorized_idp_ids = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(authorized_idp_ids_.size());
  for (int i = 0, n = authorized_idp_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      authorized_idp_ids_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string type = 8;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp expires_at = 6;
  if (this->has_expires_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expires_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Key::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Key)
  GOOGLE_DCHECK_NE(&from, this);
  const Key* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Key>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Key)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Key)
    MergeFrom(*source);
  }
}

void Key::MergeFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Key)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  apps_.MergeFrom(from.apps_);
  endpoints_.MergeFrom(from.endpoints_);
  authorized_idp_ids_.MergeFrom(from.authorized_idp_ids_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_expires_at()) {
    _internal_mutable_expires_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expires_at());
  }
}

void Key::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Key::CopyFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {
  return true;
}

void Key::InternalSwap(Key* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  scopes_.InternalSwap(&other->scopes_);
  apps_.InternalSwap(&other->apps_);
  endpoints_.InternalSwap(&other->endpoints_);
  authorized_idp_ids_.InternalSwap(&other->authorized_idp_ids_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(created_at_, other->created_at_);
  swap(expires_at_, other->expires_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Key::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Model::InitAsDefaultInstance() {
  ::clarifai::api::_Model_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Model_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Model_default_instance_._instance.get_mutable()->output_info_ = const_cast< ::clarifai::api::OutputInfo*>(
      ::clarifai::api::OutputInfo::internal_default_instance());
  ::clarifai::api::_Model_default_instance_._instance.get_mutable()->model_version_ = const_cast< ::clarifai::api::ModelVersion*>(
      ::clarifai::api::ModelVersion::internal_default_instance());
  ::clarifai::api::_Model_default_instance_._instance.get_mutable()->input_info_ = const_cast< ::clarifai::api::InputInfo*>(
      ::clarifai::api::InputInfo::internal_default_instance());
  ::clarifai::api::_Model_default_instance_._instance.get_mutable()->train_info_ = const_cast< ::clarifai::api::TrainInfo*>(
      ::clarifai::api::TrainInfo::internal_default_instance());
  ::clarifai::api::_Model_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::clarifai::api::Visibility*>(
      ::clarifai::api::Visibility::internal_default_instance());
  ::clarifai::api::_Model_default_instance_._instance.get_mutable()->metadata_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::clarifai::api::_Model_default_instance_._instance.get_mutable()->import_info_ = const_cast< ::clarifai::api::ImportInfo*>(
      ::clarifai::api::ImportInfo::internal_default_instance());
}
class Model::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Model* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Model* msg);
  static const ::clarifai::api::OutputInfo& output_info(const Model* msg);
  static const ::clarifai::api::ModelVersion& model_version(const Model* msg);
  static const ::clarifai::api::InputInfo& input_info(const Model* msg);
  static const ::clarifai::api::TrainInfo& train_info(const Model* msg);
  static const ::clarifai::api::Visibility& visibility(const Model* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& metadata(const Model* msg);
  static const ::clarifai::api::ImportInfo& import_info(const Model* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Model::_Internal::created_at(const Model* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Model::_Internal::modified_at(const Model* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::OutputInfo&
Model::_Internal::output_info(const Model* msg) {
  return *msg->output_info_;
}
const ::clarifai::api::ModelVersion&
Model::_Internal::model_version(const Model* msg) {
  return *msg->model_version_;
}
const ::clarifai::api::InputInfo&
Model::_Internal::input_info(const Model* msg) {
  return *msg->input_info_;
}
const ::clarifai::api::TrainInfo&
Model::_Internal::train_info(const Model* msg) {
  return *msg->train_info_;
}
const ::clarifai::api::Visibility&
Model::_Internal::visibility(const Model* msg) {
  return *msg->visibility_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
Model::_Internal::metadata(const Model* msg) {
  return *msg->metadata_;
}
const ::clarifai::api::ImportInfo&
Model::_Internal::import_info(const Model* msg) {
  return *msg->import_info_;
}
void Model::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Model::clear_modified_at() {
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void Model::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
Model::Model()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Model)
}
Model::Model(const Model& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      toolkits_(from.toolkits_),
      use_cases_(from.use_cases_),
      languages_(from.languages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display_name().empty()) {
    display_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  model_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_type_id().empty()) {
    model_type_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_type_id_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notes().empty()) {
    notes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  task_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task().empty()) {
    task_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_);
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_output_info()) {
    output_info_ = new ::clarifai::api::OutputInfo(*from.output_info_);
  } else {
    output_info_ = nullptr;
  }
  if (from._internal_has_model_version()) {
    model_version_ = new ::clarifai::api::ModelVersion(*from.model_version_);
  } else {
    model_version_ = nullptr;
  }
  if (from._internal_has_input_info()) {
    input_info_ = new ::clarifai::api::InputInfo(*from.input_info_);
  } else {
    input_info_ = nullptr;
  }
  if (from._internal_has_train_info()) {
    train_info_ = new ::clarifai::api::TrainInfo(*from.train_info_);
  } else {
    train_info_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_import_info()) {
    import_info_ = new ::clarifai::api::ImportInfo(*from.import_info_);
  } else {
    import_info_ = nullptr;
  }
  ::memcpy(&is_starred_, &from.is_starred_,
    static_cast<size_t>(reinterpret_cast<char*>(&star_count_) -
    reinterpret_cast<char*>(&is_starred_)) + sizeof(star_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Model)
}

void Model::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_count_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(star_count_));
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:clarifai.api.Model)
  SharedDtor();
}

void Model::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete output_info_;
  if (this != internal_default_instance()) delete model_version_;
  if (this != internal_default_instance()) delete input_info_;
  if (this != internal_default_instance()) delete train_info_;
  if (this != internal_default_instance()) delete visibility_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete import_info_;
}

void Model::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Model& Model::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Model)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  toolkits_.Clear();
  use_cases_.Clear();
  languages_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_info_ != nullptr) {
    delete output_info_;
  }
  output_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_version_ != nullptr) {
    delete model_version_;
  }
  model_version_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_info_ != nullptr) {
    delete input_info_;
  }
  input_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && train_info_ != nullptr) {
    delete train_info_;
  }
  train_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && import_info_ != nullptr) {
    delete import_info_;
  }
  import_info_ = nullptr;
  ::memset(&is_starred_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_count_) -
      reinterpret_cast<char*>(&is_starred_)) + sizeof(star_count_));
  _internal_metadata_.Clear();
}

const char* Model::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.OutputInfo output_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ModelVersion model_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string display_name = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.display_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.InputInfo input_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.TrainInfo train_info = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_train_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_type_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_model_type_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.model_type_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.notes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string toolkits = 20 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_toolkits();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.toolkits"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string use_cases = 21 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_use_cases();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.use_cases"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_starred = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 star_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          star_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ImportInfo import_info = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_import_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string languages = 25 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_languages();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.languages"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // string task = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_task();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.task"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Model::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Model)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [deprecated = true];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::created_at(this), target, stream);
  }

  // string app_id = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  // .clarifai.api.OutputInfo output_info = 5;
  if (this->has_output_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::output_info(this), target, stream);
  }

  // .clarifai.api.ModelVersion model_version = 6;
  if (this->has_model_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::model_version(this), target, stream);
  }

  // string display_name = 7 [deprecated = true];
  if (this->display_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.display_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_display_name(), target);
  }

  // string user_id = 9;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.user_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_user_id(), target);
  }

  // .clarifai.api.InputInfo input_info = 12;
  if (this->has_input_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::input_info(this), target, stream);
  }

  // .clarifai.api.TrainInfo train_info = 13;
  if (this->has_train_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::train_info(this), target, stream);
  }

  // string model_type_id = 14;
  if (this->model_type_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type_id().data(), static_cast<int>(this->_internal_model_type_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.model_type_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_model_type_id(), target);
  }

  // .clarifai.api.Visibility visibility = 15;
  if (this->has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::visibility(this), target, stream);
  }

  // string description = 16;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.description");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_description(), target);
  }

  // .google.protobuf.Struct metadata = 17;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::metadata(this), target, stream);
  }

  // string notes = 18;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.notes");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_notes(), target);
  }

  // .google.protobuf.Timestamp modified_at = 19;
  if (this->has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::modified_at(this), target, stream);
  }

  // repeated string toolkits = 20 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (int i = 0, n = this->_internal_toolkits_size(); i < n; i++) {
    const auto& s = this->_internal_toolkits(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.toolkits");
    target = stream->WriteString(20, s, target);
  }

  // repeated string use_cases = 21 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (int i = 0, n = this->_internal_use_cases_size(); i < n; i++) {
    const auto& s = this->_internal_use_cases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.use_cases");
    target = stream->WriteString(21, s, target);
  }

  // bool is_starred = 22;
  if (this->is_starred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_is_starred(), target);
  }

  // int32 star_count = 23;
  if (this->star_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_star_count(), target);
  }

  // .clarifai.api.ImportInfo import_info = 24;
  if (this->has_import_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::import_info(this), target, stream);
  }

  // repeated string languages = 25 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (int i = 0, n = this->_internal_languages_size(); i < n; i++) {
    const auto& s = this->_internal_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.languages");
    target = stream->WriteString(25, s, target);
  }

  // string task = 26;
  if (this->task().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task().data(), static_cast<int>(this->_internal_task().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.task");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_task(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Model)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string toolkits = 20 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(toolkits_.size());
  for (int i = 0, n = toolkits_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      toolkits_.Get(i));
  }

  // repeated string use_cases = 21 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(use_cases_.size());
  for (int i = 0, n = use_cases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      use_cases_.Get(i));
  }

  // repeated string languages = 25 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(languages_.size());
  for (int i = 0, n = languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      languages_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [deprecated = true];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string app_id = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string display_name = 7 [deprecated = true];
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string user_id = 9;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string model_type_id = 14;
  if (this->model_type_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type_id());
  }

  // string description = 16;
  if (this->description().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string notes = 18;
  if (this->notes().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // string task = 26;
  if (this->task().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task());
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .clarifai.api.OutputInfo output_info = 5;
  if (this->has_output_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_info_);
  }

  // .clarifai.api.ModelVersion model_version = 6;
  if (this->has_model_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_version_);
  }

  // .clarifai.api.InputInfo input_info = 12;
  if (this->has_input_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_info_);
  }

  // .clarifai.api.TrainInfo train_info = 13;
  if (this->has_train_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *train_info_);
  }

  // .clarifai.api.Visibility visibility = 15;
  if (this->has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .google.protobuf.Struct metadata = 17;
  if (this->has_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .google.protobuf.Timestamp modified_at = 19;
  if (this->has_modified_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.ImportInfo import_info = 24;
  if (this->has_import_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *import_info_);
  }

  // bool is_starred = 22;
  if (this->is_starred() != 0) {
    total_size += 2 + 1;
  }

  // int32 star_count = 23;
  if (this->star_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_star_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Model::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Model)
  GOOGLE_DCHECK_NE(&from, this);
  const Model* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Model>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Model)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Model)
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Model)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  toolkits_.MergeFrom(from.toolkits_);
  use_cases_.MergeFrom(from.use_cases_);
  languages_.MergeFrom(from.languages_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.model_type_id().size() > 0) {

    model_type_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_type_id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.notes().size() > 0) {

    notes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  if (from.task().size() > 0) {

    task_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_);
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_output_info()) {
    _internal_mutable_output_info()->::clarifai::api::OutputInfo::MergeFrom(from._internal_output_info());
  }
  if (from.has_model_version()) {
    _internal_mutable_model_version()->::clarifai::api::ModelVersion::MergeFrom(from._internal_model_version());
  }
  if (from.has_input_info()) {
    _internal_mutable_input_info()->::clarifai::api::InputInfo::MergeFrom(from._internal_input_info());
  }
  if (from.has_train_info()) {
    _internal_mutable_train_info()->::clarifai::api::TrainInfo::MergeFrom(from._internal_train_info());
  }
  if (from.has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from.has_modified_at()) {
    _internal_mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from.has_import_info()) {
    _internal_mutable_import_info()->::clarifai::api::ImportInfo::MergeFrom(from._internal_import_info());
  }
  if (from.is_starred() != 0) {
    _internal_set_is_starred(from._internal_is_starred());
  }
  if (from.star_count() != 0) {
    _internal_set_star_count(from._internal_star_count());
  }
}

void Model::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::InternalSwap(Model* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  toolkits_.InternalSwap(&other->toolkits_);
  use_cases_.InternalSwap(&other->use_cases_);
  languages_.InternalSwap(&other->languages_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_type_id_.Swap(&other->model_type_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  task_.Swap(&other->task_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(created_at_, other->created_at_);
  swap(output_info_, other->output_info_);
  swap(model_version_, other->model_version_);
  swap(input_info_, other->input_info_);
  swap(train_info_, other->train_info_);
  swap(visibility_, other->visibility_);
  swap(metadata_, other->metadata_);
  swap(modified_at_, other->modified_at_);
  swap(import_info_, other->import_info_);
  swap(is_starred_, other->is_starred_);
  swap(star_count_, other->star_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Model::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelReference::InitAsDefaultInstance() {
  ::clarifai::api::_ModelReference_default_instance_._instance.get_mutable()->metadata_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class ModelReference::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& metadata(const ModelReference* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
ModelReference::_Internal::metadata(const ModelReference* msg) {
  return *msg->metadata_;
}
void ModelReference::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
ModelReference::ModelReference()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ModelReference)
}
ModelReference::ModelReference(const ModelReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_metadata()) {
    metadata_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelReference)
}

void ModelReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelReference_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_ = nullptr;
}

ModelReference::~ModelReference() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelReference)
  SharedDtor();
}

void ModelReference::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void ModelReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelReference& ModelReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelReference_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ModelReference::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ModelReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelReference.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelReference.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelReference.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelReference.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelReference.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelReference.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string url = 3;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelReference.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelReference.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelReference)
  return target;
}

size_t ModelReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string url = 3;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ModelReference)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ModelReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ModelReference)
    MergeFrom(*source);
  }
}

void ModelReference::MergeFrom(const ModelReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
}

void ModelReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ModelReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelReference::CopyFrom(const ModelReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelReference::IsInitialized() const {
  return true;
}

void ModelReference::InternalSwap(ModelReference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelVersionInputExample::InitAsDefaultInstance() {
  ::clarifai::api::_ModelVersionInputExample_default_instance_._instance.get_mutable()->data_ = const_cast< ::clarifai::api::Data*>(
      ::clarifai::api::Data::internal_default_instance());
}
class ModelVersionInputExample::_Internal {
 public:
  static const ::clarifai::api::Data& data(const ModelVersionInputExample* msg);
};

const ::clarifai::api::Data&
ModelVersionInputExample::_Internal::data(const ModelVersionInputExample* msg) {
  return *msg->data_;
}
ModelVersionInputExample::ModelVersionInputExample()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ModelVersionInputExample)
}
ModelVersionInputExample::ModelVersionInputExample(const ModelVersionInputExample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_version_id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelVersionInputExample)
}

void ModelVersionInputExample::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelVersionInputExample_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

ModelVersionInputExample::~ModelVersionInputExample() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelVersionInputExample)
  SharedDtor();
}

void ModelVersionInputExample::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void ModelVersionInputExample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelVersionInputExample& ModelVersionInputExample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelVersionInputExample_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ModelVersionInputExample::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelVersionInputExample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ModelVersionInputExample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersionInputExample.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersionInputExample.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersionInputExample.model_version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersionInputExample.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersionInputExample.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelVersionInputExample::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelVersionInputExample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionInputExample.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionInputExample.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string model_version_id = 3;
  if (this->model_version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionInputExample.model_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_version_id(), target);
  }

  // .clarifai.api.Data data = 4;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::data(this), target, stream);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionInputExample.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // string description = 6;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionInputExample.description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelVersionInputExample)
  return target;
}

size_t ModelVersionInputExample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelVersionInputExample)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_version_id = 3;
  if (this->model_version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 6;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .clarifai.api.Data data = 4;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelVersionInputExample::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ModelVersionInputExample)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelVersionInputExample* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelVersionInputExample>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ModelVersionInputExample)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ModelVersionInputExample)
    MergeFrom(*source);
  }
}

void ModelVersionInputExample::MergeFrom(const ModelVersionInputExample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelVersionInputExample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.model_version_id().size() > 0) {

    model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_version_id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
}

void ModelVersionInputExample::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ModelVersionInputExample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelVersionInputExample::CopyFrom(const ModelVersionInputExample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelVersionInputExample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVersionInputExample::IsInitialized() const {
  return true;
}

void ModelVersionInputExample::InternalSwap(ModelVersionInputExample* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_version_id_.Swap(&other->model_version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelVersionInputExample::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutputInfo::InitAsDefaultInstance() {
  ::clarifai::api::_OutputInfo_default_instance_._instance.get_mutable()->data_ = const_cast< ::clarifai::api::Data*>(
      ::clarifai::api::Data::internal_default_instance());
  ::clarifai::api::_OutputInfo_default_instance_._instance.get_mutable()->output_config_ = const_cast< ::clarifai::api::OutputConfig*>(
      ::clarifai::api::OutputConfig::internal_default_instance());
  ::clarifai::api::_OutputInfo_default_instance_._instance.get_mutable()->fields_map_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::clarifai::api::_OutputInfo_default_instance_._instance.get_mutable()->params_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class OutputInfo::_Internal {
 public:
  static const ::clarifai::api::Data& data(const OutputInfo* msg);
  static const ::clarifai::api::OutputConfig& output_config(const OutputInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& fields_map(const OutputInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& params(const OutputInfo* msg);
};

const ::clarifai::api::Data&
OutputInfo::_Internal::data(const OutputInfo* msg) {
  return *msg->data_;
}
const ::clarifai::api::OutputConfig&
OutputInfo::_Internal::output_config(const OutputInfo* msg) {
  return *msg->output_config_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
OutputInfo::_Internal::fields_map(const OutputInfo* msg) {
  return *msg->fields_map_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
OutputInfo::_Internal::params(const OutputInfo* msg) {
  return *msg->params_;
}
void OutputInfo::clear_fields_map() {
  if (GetArenaNoVirtual() == nullptr && fields_map_ != nullptr) {
    delete fields_map_;
  }
  fields_map_ = nullptr;
}
void OutputInfo::clear_params() {
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
OutputInfo::OutputInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.OutputInfo)
}
OutputInfo::OutputInfo(const OutputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_output_config()) {
    output_config_ = new ::clarifai::api::OutputConfig(*from.output_config_);
  } else {
    output_config_ = nullptr;
  }
  if (from._internal_has_fields_map()) {
    fields_map_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.fields_map_);
  } else {
    fields_map_ = nullptr;
  }
  if (from._internal_has_params()) {
    params_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.OutputInfo)
}

void OutputInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutputInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&params_) -
      reinterpret_cast<char*>(&data_)) + sizeof(params_));
}

OutputInfo::~OutputInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.OutputInfo)
  SharedDtor();
}

void OutputInfo::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete output_config_;
  if (this != internal_default_instance()) delete fields_map_;
  if (this != internal_default_instance()) delete params_;
}

void OutputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputInfo& OutputInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void OutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_config_ != nullptr) {
    delete output_config_;
  }
  output_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fields_map_ != nullptr) {
    delete fields_map_;
  }
  fields_map_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OutputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.OutputConfig output_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.OutputInfo.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct fields_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fields_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct params = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Data data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // .clarifai.api.OutputConfig output_config = 2;
  if (this->has_output_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::output_config(this), target, stream);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.OutputInfo.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // .google.protobuf.Struct fields_map = 6;
  if (this->has_fields_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::fields_map(this), target, stream);
  }

  // .google.protobuf.Struct params = 7;
  if (this->has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.OutputInfo)
  return target;
}

size_t OutputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.OutputInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .clarifai.api.Data data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .clarifai.api.OutputConfig output_config = 2;
  if (this->has_output_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_config_);
  }

  // .google.protobuf.Struct fields_map = 6;
  if (this->has_fields_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fields_map_);
  }

  // .google.protobuf.Struct params = 7;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.OutputInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.OutputInfo)
    MergeFrom(*source);
  }
}

void OutputInfo::MergeFrom(const OutputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (from.has_output_config()) {
    _internal_mutable_output_config()->::clarifai::api::OutputConfig::MergeFrom(from._internal_output_config());
  }
  if (from.has_fields_map()) {
    _internal_mutable_fields_map()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_fields_map());
  }
  if (from.has_params()) {
    _internal_mutable_params()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_params());
  }
}

void OutputInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputInfo::CopyFrom(const OutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputInfo::IsInitialized() const {
  return true;
}

void OutputInfo::InternalSwap(OutputInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(output_config_, other->output_config_);
  swap(fields_map_, other->fields_map_);
  swap(params_, other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputInfo::InitAsDefaultInstance() {
  ::clarifai::api::_InputInfo_default_instance_._instance.get_mutable()->fields_map_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::clarifai::api::_InputInfo_default_instance_._instance.get_mutable()->params_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class InputInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& fields_map(const InputInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& params(const InputInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
InputInfo::_Internal::fields_map(const InputInfo* msg) {
  return *msg->fields_map_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
InputInfo::_Internal::params(const InputInfo* msg) {
  return *msg->params_;
}
void InputInfo::clear_fields_map() {
  if (GetArenaNoVirtual() == nullptr && fields_map_ != nullptr) {
    delete fields_map_;
  }
  fields_map_ = nullptr;
}
void InputInfo::clear_params() {
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
InputInfo::InputInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.InputInfo)
}
InputInfo::InputInfo(const InputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_fields_map()) {
    fields_map_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.fields_map_);
  } else {
    fields_map_ = nullptr;
  }
  if (from._internal_has_params()) {
    params_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.InputInfo)
}

void InputInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&fields_map_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&params_) -
      reinterpret_cast<char*>(&fields_map_)) + sizeof(params_));
}

InputInfo::~InputInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.InputInfo)
  SharedDtor();
}

void InputInfo::SharedDtor() {
  if (this != internal_default_instance()) delete fields_map_;
  if (this != internal_default_instance()) delete params_;
}

void InputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputInfo& InputInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void InputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.InputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fields_map_ != nullptr) {
    delete fields_map_;
  }
  fields_map_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear();
}

const char* InputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Struct fields_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fields_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.InputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct fields_map = 1;
  if (this->has_fields_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fields_map(this), target, stream);
  }

  // .google.protobuf.Struct params = 2;
  if (this->has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.InputInfo)
  return target;
}

size_t InputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.InputInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct fields_map = 1;
  if (this->has_fields_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fields_map_);
  }

  // .google.protobuf.Struct params = 2;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.InputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InputInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.InputInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.InputInfo)
    MergeFrom(*source);
  }
}

void InputInfo::MergeFrom(const InputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.InputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fields_map()) {
    _internal_mutable_fields_map()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_fields_map());
  }
  if (from.has_params()) {
    _internal_mutable_params()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_params());
  }
}

void InputInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.InputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputInfo::CopyFrom(const InputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.InputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputInfo::IsInitialized() const {
  return true;
}

void InputInfo::InternalSwap(InputInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fields_map_, other->fields_map_);
  swap(params_, other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainInfo::InitAsDefaultInstance() {
  ::clarifai::api::_TrainInfo_default_instance_._instance.get_mutable()->params_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class TrainInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& params(const TrainInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
TrainInfo::_Internal::params(const TrainInfo* msg) {
  return *msg->params_;
}
void TrainInfo::clear_params() {
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
TrainInfo::TrainInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TrainInfo)
}
TrainInfo::TrainInfo(const TrainInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_params()) {
    params_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TrainInfo)
}

void TrainInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  params_ = nullptr;
}

TrainInfo::~TrainInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TrainInfo)
  SharedDtor();
}

void TrainInfo::SharedDtor() {
  if (this != internal_default_instance()) delete params_;
}

void TrainInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainInfo& TrainInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TrainInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TrainInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TrainInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Struct params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TrainInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TrainInfo)
  return target;
}

size_t TrainInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TrainInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TrainInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TrainInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TrainInfo)
    MergeFrom(*source);
  }
}

void TrainInfo::MergeFrom(const TrainInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TrainInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_params()) {
    _internal_mutable_params()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_params());
  }
}

void TrainInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TrainInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainInfo::CopyFrom(const TrainInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TrainInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainInfo::IsInitialized() const {
  return true;
}

void TrainInfo::InternalSwap(TrainInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(params_, other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImportInfo::InitAsDefaultInstance() {
  ::clarifai::api::_ImportInfo_default_instance_._instance.get_mutable()->params_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class ImportInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& params(const ImportInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
ImportInfo::_Internal::params(const ImportInfo* msg) {
  return *msg->params_;
}
void ImportInfo::clear_params() {
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
ImportInfo::ImportInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ImportInfo)
}
ImportInfo::ImportInfo(const ImportInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_params()) {
    params_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ImportInfo)
}

void ImportInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImportInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  params_ = nullptr;
}

ImportInfo::~ImportInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.ImportInfo)
  SharedDtor();
}

void ImportInfo::SharedDtor() {
  if (this != internal_default_instance()) delete params_;
}

void ImportInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImportInfo& ImportInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImportInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ImportInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ImportInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ImportInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Struct params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImportInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ImportInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ImportInfo)
  return target;
}

size_t ImportInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ImportInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImportInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ImportInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImportInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ImportInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ImportInfo)
    MergeFrom(*source);
  }
}

void ImportInfo::MergeFrom(const ImportInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ImportInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_params()) {
    _internal_mutable_params()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_params());
  }
}

void ImportInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ImportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportInfo::CopyFrom(const ImportInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ImportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportInfo::IsInitialized() const {
  return true;
}

void ImportInfo::InternalSwap(ImportInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(params_, other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutputConfig::InitAsDefaultInstance() {
  ::clarifai::api::_OutputConfig_default_instance_._instance.get_mutable()->hyper_params_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::clarifai::api::_OutputConfig_default_instance_._instance.get_mutable()->model_metadata_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class OutputConfig::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& hyper_params(const OutputConfig* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& model_metadata(const OutputConfig* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
OutputConfig::_Internal::hyper_params(const OutputConfig* msg) {
  return *msg->hyper_params_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
OutputConfig::_Internal::model_metadata(const OutputConfig* msg) {
  return *msg->model_metadata_;
}
void OutputConfig::clear_hyper_params() {
  if (GetArenaNoVirtual() == nullptr && hyper_params_ != nullptr) {
    delete hyper_params_;
  }
  hyper_params_ = nullptr;
}
void OutputConfig::clear_model_metadata() {
  if (GetArenaNoVirtual() == nullptr && model_metadata_ != nullptr) {
    delete model_metadata_;
  }
  model_metadata_ = nullptr;
}
OutputConfig::OutputConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.OutputConfig)
}
OutputConfig::OutputConfig(const OutputConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      select_concepts_(from.select_concepts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  existing_model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_existing_model_id().empty()) {
    existing_model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.existing_model_id_);
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  hyper_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hyper_parameters().empty()) {
    hyper_parameters_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hyper_parameters_);
  }
  embed_model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_embed_model_version_id().empty()) {
    embed_model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.embed_model_version_id_);
  }
  if (from._internal_has_hyper_params()) {
    hyper_params_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.hyper_params_);
  } else {
    hyper_params_ = nullptr;
  }
  if (from._internal_has_model_metadata()) {
    model_metadata_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.model_metadata_);
  } else {
    model_metadata_ = nullptr;
  }
  ::memcpy(&max_concepts_, &from.max_concepts_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_ms_) -
    reinterpret_cast<char*>(&max_concepts_)) + sizeof(sample_ms_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.OutputConfig)
}

void OutputConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutputConfig_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  existing_model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hyper_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embed_model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hyper_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_ms_) -
      reinterpret_cast<char*>(&hyper_params_)) + sizeof(sample_ms_));
}

OutputConfig::~OutputConfig() {
  // @@protoc_insertion_point(destructor:clarifai.api.OutputConfig)
  SharedDtor();
}

void OutputConfig::SharedDtor() {
  existing_model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hyper_parameters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embed_model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hyper_params_;
  if (this != internal_default_instance()) delete model_metadata_;
}

void OutputConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputConfig& OutputConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputConfig_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void OutputConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.OutputConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  select_concepts_.Clear();
  existing_model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hyper_parameters_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embed_model_version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hyper_params_ != nullptr) {
    delete hyper_params_;
  }
  hyper_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_metadata_ != nullptr) {
    delete model_metadata_;
  }
  model_metadata_ = nullptr;
  ::memset(&max_concepts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_ms_) -
      reinterpret_cast<char*>(&max_concepts_)) + sizeof(sample_ms_));
  _internal_metadata_.Clear();
}

const char* OutputConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool concepts_mutually_exclusive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          concepts_mutually_exclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool closed_environment = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          closed_environment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string existing_model_id = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_existing_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.OutputConfig.existing_model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.OutputConfig.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hyper_parameters = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_hyper_parameters();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.OutputConfig.hyper_parameters"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_concepts = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_concepts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_value = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept select_concepts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_select_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 training_timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          training_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sample_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          sample_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct hyper_params = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_hyper_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string embed_model_version_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_embed_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.OutputConfig.embed_model_version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fail_on_missing_positive_examples = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          fail_on_missing_positive_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct model_metadata = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.OutputConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool concepts_mutually_exclusive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->concepts_mutually_exclusive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_concepts_mutually_exclusive(), target);
  }

  // bool closed_environment = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->closed_environment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_closed_environment(), target);
  }

  // string existing_model_id = 3 [deprecated = true];
  if (this->existing_model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_existing_model_id().data(), static_cast<int>(this->_internal_existing_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.OutputConfig.existing_model_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_existing_model_id(), target);
  }

  // string language = 4;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.OutputConfig.language");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language(), target);
  }

  // string hyper_parameters = 5 [deprecated = true];
  if (this->hyper_parameters().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hyper_parameters().data(), static_cast<int>(this->_internal_hyper_parameters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.OutputConfig.hyper_parameters");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hyper_parameters(), target);
  }

  // uint32 max_concepts = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->max_concepts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_max_concepts(), target);
  }

  // float min_value = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->min_value() <= 0 && this->min_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_min_value(), target);
  }

  // repeated .clarifai.api.Concept select_concepts = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_select_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_select_concepts(i), target, stream);
  }

  // uint32 training_timeout = 9;
  if (this->training_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_training_timeout(), target);
  }

  // uint32 sample_ms = 10;
  if (this->sample_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_sample_ms(), target);
  }

  // .google.protobuf.Struct hyper_params = 13;
  if (this->has_hyper_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::hyper_params(this), target, stream);
  }

  // string embed_model_version_id = 14;
  if (this->embed_model_version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_embed_model_version_id().data(), static_cast<int>(this->_internal_embed_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.OutputConfig.embed_model_version_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_embed_model_version_id(), target);
  }

  // bool fail_on_missing_positive_examples = 15;
  if (this->fail_on_missing_positive_examples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_fail_on_missing_positive_examples(), target);
  }

  // .google.protobuf.Struct model_metadata = 17 [deprecated = true];
  if (this->has_model_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::model_metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.OutputConfig)
  return target;
}

size_t OutputConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.OutputConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept select_concepts = 8;
  total_size += 1UL * this->_internal_select_concepts_size();
  for (const auto& msg : this->select_concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string existing_model_id = 3 [deprecated = true];
  if (this->existing_model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_existing_model_id());
  }

  // string language = 4;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string hyper_parameters = 5 [deprecated = true];
  if (this->hyper_parameters().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hyper_parameters());
  }

  // string embed_model_version_id = 14;
  if (this->embed_model_version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_embed_model_version_id());
  }

  // .google.protobuf.Struct hyper_params = 13;
  if (this->has_hyper_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hyper_params_);
  }

  // .google.protobuf.Struct model_metadata = 17 [deprecated = true];
  if (this->has_model_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_metadata_);
  }

  // uint32 max_concepts = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->max_concepts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_concepts());
  }

  // bool concepts_mutually_exclusive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->concepts_mutually_exclusive() != 0) {
    total_size += 1 + 1;
  }

  // bool closed_environment = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->closed_environment() != 0) {
    total_size += 1 + 1;
  }

  // bool fail_on_missing_positive_examples = 15;
  if (this->fail_on_missing_positive_examples() != 0) {
    total_size += 1 + 1;
  }

  // float min_value = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->min_value() <= 0 && this->min_value() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 training_timeout = 9;
  if (this->training_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_training_timeout());
  }

  // uint32 sample_ms = 10;
  if (this->sample_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sample_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.OutputConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.OutputConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.OutputConfig)
    MergeFrom(*source);
  }
}

void OutputConfig::MergeFrom(const OutputConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.OutputConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  select_concepts_.MergeFrom(from.select_concepts_);
  if (from.existing_model_id().size() > 0) {

    existing_model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.existing_model_id_);
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.hyper_parameters().size() > 0) {

    hyper_parameters_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hyper_parameters_);
  }
  if (from.embed_model_version_id().size() > 0) {

    embed_model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.embed_model_version_id_);
  }
  if (from.has_hyper_params()) {
    _internal_mutable_hyper_params()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_hyper_params());
  }
  if (from.has_model_metadata()) {
    _internal_mutable_model_metadata()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_model_metadata());
  }
  if (from.max_concepts() != 0) {
    _internal_set_max_concepts(from._internal_max_concepts());
  }
  if (from.concepts_mutually_exclusive() != 0) {
    _internal_set_concepts_mutually_exclusive(from._internal_concepts_mutually_exclusive());
  }
  if (from.closed_environment() != 0) {
    _internal_set_closed_environment(from._internal_closed_environment());
  }
  if (from.fail_on_missing_positive_examples() != 0) {
    _internal_set_fail_on_missing_positive_examples(from._internal_fail_on_missing_positive_examples());
  }
  if (!(from.min_value() <= 0 && from.min_value() >= 0)) {
    _internal_set_min_value(from._internal_min_value());
  }
  if (from.training_timeout() != 0) {
    _internal_set_training_timeout(from._internal_training_timeout());
  }
  if (from.sample_ms() != 0) {
    _internal_set_sample_ms(from._internal_sample_ms());
  }
}

void OutputConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.OutputConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputConfig::CopyFrom(const OutputConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.OutputConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputConfig::IsInitialized() const {
  return true;
}

void OutputConfig::InternalSwap(OutputConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  select_concepts_.InternalSwap(&other->select_concepts_);
  existing_model_id_.Swap(&other->existing_model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hyper_parameters_.Swap(&other->hyper_parameters_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  embed_model_version_id_.Swap(&other->embed_model_version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hyper_params_, other->hyper_params_);
  swap(model_metadata_, other->model_metadata_);
  swap(max_concepts_, other->max_concepts_);
  swap(concepts_mutually_exclusive_, other->concepts_mutually_exclusive_);
  swap(closed_environment_, other->closed_environment_);
  swap(fail_on_missing_positive_examples_, other->fail_on_missing_positive_examples_);
  swap(min_value_, other->min_value_);
  swap(training_timeout_, other->training_timeout_);
  swap(sample_ms_, other->sample_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelType::InitAsDefaultInstance() {
  ::clarifai::api::_ModelType_default_instance_._instance.get_mutable()->expected_pretrained_input_fields_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::clarifai::api::_ModelType_default_instance_._instance.get_mutable()->expected_pretrained_output_fields_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class ModelType::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& expected_pretrained_input_fields(const ModelType* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& expected_pretrained_output_fields(const ModelType* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
ModelType::_Internal::expected_pretrained_input_fields(const ModelType* msg) {
  return *msg->expected_pretrained_input_fields_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
ModelType::_Internal::expected_pretrained_output_fields(const ModelType* msg) {
  return *msg->expected_pretrained_output_fields_;
}
void ModelType::clear_expected_pretrained_input_fields() {
  if (GetArenaNoVirtual() == nullptr && expected_pretrained_input_fields_ != nullptr) {
    delete expected_pretrained_input_fields_;
  }
  expected_pretrained_input_fields_ = nullptr;
}
void ModelType::clear_expected_pretrained_output_fields() {
  if (GetArenaNoVirtual() == nullptr && expected_pretrained_output_fields_ != nullptr) {
    delete expected_pretrained_output_fields_;
  }
  expected_pretrained_output_fields_ = nullptr;
}
ModelType::ModelType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ModelType)
}
ModelType::ModelType(const ModelType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      input_fields_(from.input_fields_),
      output_fields_(from.output_fields_),
      model_type_fields_(from.model_type_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from._internal_has_expected_pretrained_input_fields()) {
    expected_pretrained_input_fields_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.expected_pretrained_input_fields_);
  } else {
    expected_pretrained_input_fields_ = nullptr;
  }
  if (from._internal_has_expected_pretrained_output_fields()) {
    expected_pretrained_output_fields_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.expected_pretrained_output_fields_);
  } else {
    expected_pretrained_output_fields_ = nullptr;
  }
  ::memcpy(&trainable_, &from.trainable_,
    static_cast<size_t>(reinterpret_cast<char*>(&evaluable_) -
    reinterpret_cast<char*>(&trainable_)) + sizeof(evaluable_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelType)
}

void ModelType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelType_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expected_pretrained_input_fields_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&evaluable_) -
      reinterpret_cast<char*>(&expected_pretrained_input_fields_)) + sizeof(evaluable_));
}

ModelType::~ModelType() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelType)
  SharedDtor();
}

void ModelType::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expected_pretrained_input_fields_;
  if (this != internal_default_instance()) delete expected_pretrained_output_fields_;
}

void ModelType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelType& ModelType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelType_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ModelType::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_fields_.Clear();
  output_fields_.Clear();
  model_type_fields_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && expected_pretrained_input_fields_ != nullptr) {
    delete expected_pretrained_input_fields_;
  }
  expected_pretrained_input_fields_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expected_pretrained_output_fields_ != nullptr) {
    delete expected_pretrained_output_fields_;
  }
  expected_pretrained_output_fields_ = nullptr;
  ::memset(&trainable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&evaluable_) -
      reinterpret_cast<char*>(&trainable_)) + sizeof(evaluable_));
  _internal_metadata_.Clear();
}

const char* ModelType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelType.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelType.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelType.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string input_fields = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelType.input_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string output_fields = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelType.output_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool trainable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          trainable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool creatable = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          creatable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool internal_only = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          internal_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelTypeField model_type_fields = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_type_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // bool requires_sequential_frames = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          requires_sequential_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool evaluable = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          evaluable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct expected_pretrained_input_fields = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_pretrained_input_fields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct expected_pretrained_output_fields = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_pretrained_output_fields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelType.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelType.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelType.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // repeated string input_fields = 5;
  for (int i = 0, n = this->_internal_input_fields_size(); i < n; i++) {
    const auto& s = this->_internal_input_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelType.input_fields");
    target = stream->WriteString(5, s, target);
  }

  // repeated string output_fields = 6;
  for (int i = 0, n = this->_internal_output_fields_size(); i < n; i++) {
    const auto& s = this->_internal_output_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelType.output_fields");
    target = stream->WriteString(6, s, target);
  }

  // bool trainable = 8;
  if (this->trainable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_trainable(), target);
  }

  // bool creatable = 9;
  if (this->creatable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_creatable(), target);
  }

  // bool internal_only = 10;
  if (this->internal_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_internal_only(), target);
  }

  // repeated .clarifai.api.ModelTypeField model_type_fields = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_type_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_model_type_fields(i), target, stream);
  }

  // bool requires_sequential_frames = 12;
  if (this->requires_sequential_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_requires_sequential_frames(), target);
  }

  // bool evaluable = 13;
  if (this->evaluable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_evaluable(), target);
  }

  // .google.protobuf.Struct expected_pretrained_input_fields = 14;
  if (this->has_expected_pretrained_input_fields()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::expected_pretrained_input_fields(this), target, stream);
  }

  // .google.protobuf.Struct expected_pretrained_output_fields = 15;
  if (this->has_expected_pretrained_output_fields()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::expected_pretrained_output_fields(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelType)
  return target;
}

size_t ModelType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_fields = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_fields_.size());
  for (int i = 0, n = input_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_fields_.Get(i));
  }

  // repeated string output_fields = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_fields_.size());
  for (int i = 0, n = output_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_fields_.Get(i));
  }

  // repeated .clarifai.api.ModelTypeField model_type_fields = 11;
  total_size += 1UL * this->_internal_model_type_fields_size();
  for (const auto& msg : this->model_type_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Struct expected_pretrained_input_fields = 14;
  if (this->has_expected_pretrained_input_fields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expected_pretrained_input_fields_);
  }

  // .google.protobuf.Struct expected_pretrained_output_fields = 15;
  if (this->has_expected_pretrained_output_fields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expected_pretrained_output_fields_);
  }

  // bool trainable = 8;
  if (this->trainable() != 0) {
    total_size += 1 + 1;
  }

  // bool creatable = 9;
  if (this->creatable() != 0) {
    total_size += 1 + 1;
  }

  // bool internal_only = 10;
  if (this->internal_only() != 0) {
    total_size += 1 + 1;
  }

  // bool requires_sequential_frames = 12;
  if (this->requires_sequential_frames() != 0) {
    total_size += 1 + 1;
  }

  // bool evaluable = 13;
  if (this->evaluable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ModelType)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ModelType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ModelType)
    MergeFrom(*source);
  }
}

void ModelType::MergeFrom(const ModelType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_fields_.MergeFrom(from.input_fields_);
  output_fields_.MergeFrom(from.output_fields_);
  model_type_fields_.MergeFrom(from.model_type_fields_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_expected_pretrained_input_fields()) {
    _internal_mutable_expected_pretrained_input_fields()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_expected_pretrained_input_fields());
  }
  if (from.has_expected_pretrained_output_fields()) {
    _internal_mutable_expected_pretrained_output_fields()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_expected_pretrained_output_fields());
  }
  if (from.trainable() != 0) {
    _internal_set_trainable(from._internal_trainable());
  }
  if (from.creatable() != 0) {
    _internal_set_creatable(from._internal_creatable());
  }
  if (from.internal_only() != 0) {
    _internal_set_internal_only(from._internal_internal_only());
  }
  if (from.requires_sequential_frames() != 0) {
    _internal_set_requires_sequential_frames(from._internal_requires_sequential_frames());
  }
  if (from.evaluable() != 0) {
    _internal_set_evaluable(from._internal_evaluable());
  }
}

void ModelType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ModelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelType::CopyFrom(const ModelType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelType::IsInitialized() const {
  return true;
}

void ModelType::InternalSwap(ModelType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_fields_.InternalSwap(&other->input_fields_);
  output_fields_.InternalSwap(&other->output_fields_);
  model_type_fields_.InternalSwap(&other->model_type_fields_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expected_pretrained_input_fields_, other->expected_pretrained_input_fields_);
  swap(expected_pretrained_output_fields_, other->expected_pretrained_output_fields_);
  swap(trainable_, other->trainable_);
  swap(creatable_, other->creatable_);
  swap(internal_only_, other->internal_only_);
  swap(requires_sequential_frames_, other->requires_sequential_frames_);
  swap(evaluable_, other->evaluable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelTypeField::InitAsDefaultInstance() {
  ::clarifai::api::_ModelTypeField_default_instance_._instance.get_mutable()->default_value_ = const_cast< PROTOBUF_NAMESPACE_ID::Value*>(
      PROTOBUF_NAMESPACE_ID::Value::internal_default_instance());
  ::clarifai::api::_ModelTypeField_default_instance_._instance.get_mutable()->model_type_range_info_ = const_cast< ::clarifai::api::ModelTypeRangeInfo*>(
      ::clarifai::api::ModelTypeRangeInfo::internal_default_instance());
}
class ModelTypeField::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Value& default_value(const ModelTypeField* msg);
  static const ::clarifai::api::ModelTypeRangeInfo& model_type_range_info(const ModelTypeField* msg);
};

const PROTOBUF_NAMESPACE_ID::Value&
ModelTypeField::_Internal::default_value(const ModelTypeField* msg) {
  return *msg->default_value_;
}
const ::clarifai::api::ModelTypeRangeInfo&
ModelTypeField::_Internal::model_type_range_info(const ModelTypeField* msg) {
  return *msg->model_type_range_info_;
}
void ModelTypeField::clear_default_value() {
  if (GetArenaNoVirtual() == nullptr && default_value_ != nullptr) {
    delete default_value_;
  }
  default_value_ = nullptr;
}
ModelTypeField::ModelTypeField()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ModelTypeField)
}
ModelTypeField::ModelTypeField(const ModelTypeField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      model_type_enum_options_(from.model_type_enum_options_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  placeholder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_placeholder().empty()) {
    placeholder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.placeholder_);
  }
  if (from._internal_has_default_value()) {
    default_value_ = new PROTOBUF_NAMESPACE_ID::Value(*from.default_value_);
  } else {
    default_value_ = nullptr;
  }
  if (from._internal_has_model_type_range_info()) {
    model_type_range_info_ = new ::clarifai::api::ModelTypeRangeInfo(*from.model_type_range_info_);
  } else {
    model_type_range_info_ = nullptr;
  }
  ::memcpy(&field_type_, &from.field_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&required_) -
    reinterpret_cast<char*>(&field_type_)) + sizeof(required_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelTypeField)
}

void ModelTypeField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelTypeEnumOption_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placeholder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&default_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_) -
      reinterpret_cast<char*>(&default_value_)) + sizeof(required_));
}

ModelTypeField::~ModelTypeField() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelTypeField)
  SharedDtor();
}

void ModelTypeField::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placeholder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete default_value_;
  if (this != internal_default_instance()) delete model_type_range_info_;
}

void ModelTypeField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelTypeField& ModelTypeField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelTypeEnumOption_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ModelTypeField::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelTypeField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_type_enum_options_.Clear();
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placeholder_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && default_value_ != nullptr) {
    delete default_value_;
  }
  default_value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_type_range_info_ != nullptr) {
    delete model_type_range_info_;
  }
  model_type_range_info_ = nullptr;
  ::memset(&field_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_) -
      reinterpret_cast<char*>(&field_type_)) + sizeof(required_));
  _internal_metadata_.Clear();
}

const char* ModelTypeField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelTypeField.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ModelTypeField.ModelTypeFieldType field_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_field_type(static_cast<::clarifai::api::ModelTypeField_ModelTypeFieldType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Value default_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelTypeField.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string placeholder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_placeholder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelTypeField.placeholder"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelTypeEnumOption model_type_enum_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_type_enum_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool internal_only = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          internal_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool required = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ModelTypeRangeInfo model_type_range_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_type_range_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelTypeField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelTypeField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeField.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .clarifai.api.ModelTypeField.ModelTypeFieldType field_type = 2;
  if (this->field_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_field_type(), target);
  }

  // .google.protobuf.Value default_value = 3;
  if (this->has_default_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::default_value(this), target, stream);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeField.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // string placeholder = 5;
  if (this->placeholder().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_placeholder().data(), static_cast<int>(this->_internal_placeholder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeField.placeholder");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_placeholder(), target);
  }

  // repeated .clarifai.api.ModelTypeEnumOption model_type_enum_options = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_type_enum_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_model_type_enum_options(i), target, stream);
  }

  // bool internal_only = 7;
  if (this->internal_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_internal_only(), target);
  }

  // bool required = 8;
  if (this->required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_required(), target);
  }

  // .clarifai.api.ModelTypeRangeInfo model_type_range_info = 9;
  if (this->has_model_type_range_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::model_type_range_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelTypeField)
  return target;
}

size_t ModelTypeField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelTypeField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelTypeEnumOption model_type_enum_options = 6;
  total_size += 1UL * this->_internal_model_type_enum_options_size();
  for (const auto& msg : this->model_type_enum_options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string placeholder = 5;
  if (this->placeholder().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_placeholder());
  }

  // .google.protobuf.Value default_value = 3;
  if (this->has_default_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_value_);
  }

  // .clarifai.api.ModelTypeRangeInfo model_type_range_info = 9;
  if (this->has_model_type_range_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_type_range_info_);
  }

  // .clarifai.api.ModelTypeField.ModelTypeFieldType field_type = 2;
  if (this->field_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_field_type());
  }

  // bool internal_only = 7;
  if (this->internal_only() != 0) {
    total_size += 1 + 1;
  }

  // bool required = 8;
  if (this->required() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelTypeField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ModelTypeField)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelTypeField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelTypeField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ModelTypeField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ModelTypeField)
    MergeFrom(*source);
  }
}

void ModelTypeField::MergeFrom(const ModelTypeField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelTypeField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_type_enum_options_.MergeFrom(from.model_type_enum_options_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.placeholder().size() > 0) {

    placeholder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.placeholder_);
  }
  if (from.has_default_value()) {
    _internal_mutable_default_value()->PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_default_value());
  }
  if (from.has_model_type_range_info()) {
    _internal_mutable_model_type_range_info()->::clarifai::api::ModelTypeRangeInfo::MergeFrom(from._internal_model_type_range_info());
  }
  if (from.field_type() != 0) {
    _internal_set_field_type(from._internal_field_type());
  }
  if (from.internal_only() != 0) {
    _internal_set_internal_only(from._internal_internal_only());
  }
  if (from.required() != 0) {
    _internal_set_required(from._internal_required());
  }
}

void ModelTypeField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ModelTypeField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelTypeField::CopyFrom(const ModelTypeField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelTypeField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTypeField::IsInitialized() const {
  return true;
}

void ModelTypeField::InternalSwap(ModelTypeField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_type_enum_options_.InternalSwap(&other->model_type_enum_options_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  placeholder_.Swap(&other->placeholder_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(default_value_, other->default_value_);
  swap(model_type_range_info_, other->model_type_range_info_);
  swap(field_type_, other->field_type_);
  swap(internal_only_, other->internal_only_);
  swap(required_, other->required_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelTypeField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelTypeRangeInfo::InitAsDefaultInstance() {
}
class ModelTypeRangeInfo::_Internal {
 public:
};

ModelTypeRangeInfo::ModelTypeRangeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ModelTypeRangeInfo)
}
ModelTypeRangeInfo::ModelTypeRangeInfo(const ModelTypeRangeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&min_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelTypeRangeInfo)
}

void ModelTypeRangeInfo::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&min_)) + sizeof(step_));
}

ModelTypeRangeInfo::~ModelTypeRangeInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelTypeRangeInfo)
  SharedDtor();
}

void ModelTypeRangeInfo::SharedDtor() {
}

void ModelTypeRangeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelTypeRangeInfo& ModelTypeRangeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelTypeRangeInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ModelTypeRangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelTypeRangeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&min_)) + sizeof(step_));
  _internal_metadata_.Clear();
}

const char* ModelTypeRangeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float step = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelTypeRangeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelTypeRangeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min = 1;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min(), target);
  }

  // float max = 2;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max(), target);
  }

  // float step = 3;
  if (!(this->step() <= 0 && this->step() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_step(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelTypeRangeInfo)
  return target;
}

size_t ModelTypeRangeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelTypeRangeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float min = 1;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    total_size += 1 + 4;
  }

  // float max = 2;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    total_size += 1 + 4;
  }

  // float step = 3;
  if (!(this->step() <= 0 && this->step() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelTypeRangeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ModelTypeRangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelTypeRangeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelTypeRangeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ModelTypeRangeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ModelTypeRangeInfo)
    MergeFrom(*source);
  }
}

void ModelTypeRangeInfo::MergeFrom(const ModelTypeRangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelTypeRangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.min() <= 0 && from.min() >= 0)) {
    _internal_set_min(from._internal_min());
  }
  if (!(from.max() <= 0 && from.max() >= 0)) {
    _internal_set_max(from._internal_max());
  }
  if (!(from.step() <= 0 && from.step() >= 0)) {
    _internal_set_step(from._internal_step());
  }
}

void ModelTypeRangeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ModelTypeRangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelTypeRangeInfo::CopyFrom(const ModelTypeRangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelTypeRangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTypeRangeInfo::IsInitialized() const {
  return true;
}

void ModelTypeRangeInfo::InternalSwap(ModelTypeRangeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(step_, other->step_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelTypeRangeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelTypeEnumOption::InitAsDefaultInstance() {
}
class ModelTypeEnumOption::_Internal {
 public:
};

ModelTypeEnumOption::ModelTypeEnumOption()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ModelTypeEnumOption)
}
ModelTypeEnumOption::ModelTypeEnumOption(const ModelTypeEnumOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      model_type_fields_(from.model_type_fields_),
      aliases_(from.aliases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  internal_only_ = from.internal_only_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelTypeEnumOption)
}

void ModelTypeEnumOption::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelTypeEnumOption_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  internal_only_ = false;
}

ModelTypeEnumOption::~ModelTypeEnumOption() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelTypeEnumOption)
  SharedDtor();
}

void ModelTypeEnumOption::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelTypeEnumOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelTypeEnumOption& ModelTypeEnumOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelTypeEnumOption_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ModelTypeEnumOption::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelTypeEnumOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_type_fields_.Clear();
  aliases_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  internal_only_ = false;
  _internal_metadata_.Clear();
}

const char* ModelTypeEnumOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelTypeEnumOption.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelTypeEnumOption.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelTypeField model_type_fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_type_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool internal_only = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          internal_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelTypeEnumOptionAlias aliases = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aliases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelTypeEnumOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelTypeEnumOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeEnumOption.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeEnumOption.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // repeated .clarifai.api.ModelTypeField model_type_fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_type_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_model_type_fields(i), target, stream);
  }

  // bool internal_only = 4;
  if (this->internal_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_internal_only(), target);
  }

  // repeated .clarifai.api.ModelTypeEnumOptionAlias aliases = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_aliases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_aliases(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelTypeEnumOption)
  return target;
}

size_t ModelTypeEnumOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelTypeEnumOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelTypeField model_type_fields = 3;
  total_size += 1UL * this->_internal_model_type_fields_size();
  for (const auto& msg : this->model_type_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.ModelTypeEnumOptionAlias aliases = 5;
  total_size += 1UL * this->_internal_aliases_size();
  for (const auto& msg : this->aliases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool internal_only = 4;
  if (this->internal_only() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelTypeEnumOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ModelTypeEnumOption)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelTypeEnumOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelTypeEnumOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ModelTypeEnumOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ModelTypeEnumOption)
    MergeFrom(*source);
  }
}

void ModelTypeEnumOption::MergeFrom(const ModelTypeEnumOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelTypeEnumOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_type_fields_.MergeFrom(from.model_type_fields_);
  aliases_.MergeFrom(from.aliases_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.internal_only() != 0) {
    _internal_set_internal_only(from._internal_internal_only());
  }
}

void ModelTypeEnumOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ModelTypeEnumOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelTypeEnumOption::CopyFrom(const ModelTypeEnumOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelTypeEnumOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTypeEnumOption::IsInitialized() const {
  return true;
}

void ModelTypeEnumOption::InternalSwap(ModelTypeEnumOption* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_type_fields_.InternalSwap(&other->model_type_fields_);
  aliases_.InternalSwap(&other->aliases_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(internal_only_, other->internal_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelTypeEnumOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelTypeEnumOptionAlias::InitAsDefaultInstance() {
}
class ModelTypeEnumOptionAlias::_Internal {
 public:
};

ModelTypeEnumOptionAlias::ModelTypeEnumOptionAlias()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ModelTypeEnumOptionAlias)
}
ModelTypeEnumOptionAlias::ModelTypeEnumOptionAlias(const ModelTypeEnumOptionAlias& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_int_ = from.id_int_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelTypeEnumOptionAlias)
}

void ModelTypeEnumOptionAlias::SharedCtor() {
  id_int_ = PROTOBUF_LONGLONG(0);
}

ModelTypeEnumOptionAlias::~ModelTypeEnumOptionAlias() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelTypeEnumOptionAlias)
  SharedDtor();
}

void ModelTypeEnumOptionAlias::SharedDtor() {
}

void ModelTypeEnumOptionAlias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelTypeEnumOptionAlias& ModelTypeEnumOptionAlias::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelTypeEnumOptionAlias_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ModelTypeEnumOptionAlias::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelTypeEnumOptionAlias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_int_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ModelTypeEnumOptionAlias::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelTypeEnumOptionAlias::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelTypeEnumOptionAlias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id_int = 1;
  if (this->id_int() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id_int(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelTypeEnumOptionAlias)
  return target;
}

size_t ModelTypeEnumOptionAlias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelTypeEnumOptionAlias)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id_int = 1;
  if (this->id_int() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id_int());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelTypeEnumOptionAlias::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ModelTypeEnumOptionAlias)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelTypeEnumOptionAlias* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelTypeEnumOptionAlias>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ModelTypeEnumOptionAlias)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ModelTypeEnumOptionAlias)
    MergeFrom(*source);
  }
}

void ModelTypeEnumOptionAlias::MergeFrom(const ModelTypeEnumOptionAlias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelTypeEnumOptionAlias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id_int() != 0) {
    _internal_set_id_int(from._internal_id_int());
  }
}

void ModelTypeEnumOptionAlias::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ModelTypeEnumOptionAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelTypeEnumOptionAlias::CopyFrom(const ModelTypeEnumOptionAlias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelTypeEnumOptionAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTypeEnumOptionAlias::IsInitialized() const {
  return true;
}

void ModelTypeEnumOptionAlias::InternalSwap(ModelTypeEnumOptionAlias* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_int_, other->id_int_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelTypeEnumOptionAlias::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelQuery::InitAsDefaultInstance() {
}
class ModelQuery::_Internal {
 public:
};

ModelQuery::ModelQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ModelQuery)
}
ModelQuery::ModelQuery(const ModelQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  model_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_type_id().empty()) {
    model_type_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_type_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelQuery)
}

void ModelQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModelQuery::~ModelQuery() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelQuery)
  SharedDtor();
}

void ModelQuery::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelQuery& ModelQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ModelQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ModelQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelQuery.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_type_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_model_type_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelQuery.model_type_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelQuery.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string model_type_id = 3;
  if (this->model_type_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type_id().data(), static_cast<int>(this->_internal_model_type_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelQuery.model_type_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_type_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelQuery)
  return target;
}

size_t ModelQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string model_type_id = 3;
  if (this->model_type_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ModelQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ModelQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ModelQuery)
    MergeFrom(*source);
  }
}

void ModelQuery::MergeFrom(const ModelQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.model_type_id().size() > 0) {

    model_type_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_type_id_);
  }
}

void ModelQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ModelQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelQuery::CopyFrom(const ModelQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelQuery::IsInitialized() const {
  return true;
}

void ModelQuery::InternalSwap(ModelQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_type_id_.Swap(&other->model_type_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelVersion::InitAsDefaultInstance() {
  ::clarifai::api::_ModelVersion_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_ModelVersion_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_ModelVersion_default_instance_._instance.get_mutable()->metrics_ = const_cast< ::clarifai::api::EvalMetrics*>(
      ::clarifai::api::EvalMetrics::internal_default_instance());
  ::clarifai::api::_ModelVersion_default_instance_._instance.get_mutable()->completed_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_ModelVersion_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::clarifai::api::Visibility*>(
      ::clarifai::api::Visibility::internal_default_instance());
  ::clarifai::api::_ModelVersion_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_ModelVersion_default_instance_._instance.get_mutable()->metadata_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::clarifai::api::_ModelVersion_default_instance_._instance.get_mutable()->dataset_version_ = const_cast< ::clarifai::api::DatasetVersion*>(
      ::clarifai::api::DatasetVersion::internal_default_instance());
}
class ModelVersion::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const ModelVersion* msg);
  static const ::clarifai::api::status::Status& status(const ModelVersion* msg);
  static const ::clarifai::api::EvalMetrics& metrics(const ModelVersion* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& completed_at(const ModelVersion* msg);
  static const ::clarifai::api::Visibility& visibility(const ModelVersion* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const ModelVersion* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& metadata(const ModelVersion* msg);
  static const ::clarifai::api::DatasetVersion& dataset_version(const ModelVersion* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ModelVersion::_Internal::created_at(const ModelVersion* msg) {
  return *msg->created_at_;
}
const ::clarifai::api::status::Status&
ModelVersion::_Internal::status(const ModelVersion* msg) {
  return *msg->status_;
}
const ::clarifai::api::EvalMetrics&
ModelVersion::_Internal::metrics(const ModelVersion* msg) {
  return *msg->metrics_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ModelVersion::_Internal::completed_at(const ModelVersion* msg) {
  return *msg->completed_at_;
}
const ::clarifai::api::Visibility&
ModelVersion::_Internal::visibility(const ModelVersion* msg) {
  return *msg->visibility_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ModelVersion::_Internal::modified_at(const ModelVersion* msg) {
  return *msg->modified_at_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
ModelVersion::_Internal::metadata(const ModelVersion* msg) {
  return *msg->metadata_;
}
const ::clarifai::api::DatasetVersion&
ModelVersion::_Internal::dataset_version(const ModelVersion* msg) {
  return *msg->dataset_version_;
}
void ModelVersion::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void ModelVersion::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void ModelVersion::clear_completed_at() {
  if (GetArenaNoVirtual() == nullptr && completed_at_ != nullptr) {
    delete completed_at_;
  }
  completed_at_ = nullptr;
}
void ModelVersion::clear_modified_at() {
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void ModelVersion::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
ModelVersion::ModelVersion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ModelVersion)
}
ModelVersion::ModelVersion(const ModelVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  license_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_license().empty()) {
    license_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.license_);
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_metrics()) {
    metrics_ = new ::clarifai::api::EvalMetrics(*from.metrics_);
  } else {
    metrics_ = nullptr;
  }
  if (from._internal_has_completed_at()) {
    completed_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.completed_at_);
  } else {
    completed_at_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_dataset_version()) {
    dataset_version_ = new ::clarifai::api::DatasetVersion(*from.dataset_version_);
  } else {
    dataset_version_ = nullptr;
  }
  ::memcpy(&active_concept_count_, &from.active_concept_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_input_count_) -
    reinterpret_cast<char*>(&active_concept_count_)) + sizeof(total_input_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelVersion)
}

void ModelVersion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  license_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_input_count_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(total_input_count_));
}

ModelVersion::~ModelVersion() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelVersion)
  SharedDtor();
}

void ModelVersion::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  license_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete metrics_;
  if (this != internal_default_instance()) delete completed_at_;
  if (this != internal_default_instance()) delete visibility_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete dataset_version_;
}

void ModelVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelVersion& ModelVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ModelVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  license_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && completed_at_ != nullptr) {
    delete completed_at_;
  }
  completed_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dataset_version_ != nullptr) {
    delete dataset_version_;
  }
  dataset_version_ = nullptr;
  ::memset(&active_concept_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_input_count_) -
      reinterpret_cast<char*>(&active_concept_count_)) + sizeof(total_input_count_));
  _internal_metadata_.Clear();
}

const char* ModelVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersion.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 active_concept_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          active_concept_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.EvalMetrics metrics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_input_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_input_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp completed_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_completed_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersion.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersion.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersion.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string license = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_license();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersion.license"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersion dataset_version = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // .clarifai.api.status.Status status = 3;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  // uint32 active_concept_count = 4;
  if (this->active_concept_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_active_concept_count(), target);
  }

  // .clarifai.api.EvalMetrics metrics = 5;
  if (this->has_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metrics(this), target, stream);
  }

  // uint32 total_input_count = 6;
  if (this->total_input_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_total_input_count(), target);
  }

  // .google.protobuf.Timestamp completed_at = 10;
  if (this->has_completed_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::completed_at(this), target, stream);
  }

  // string description = 11;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.description");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_description(), target);
  }

  // .clarifai.api.Visibility visibility = 12;
  if (this->has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::visibility(this), target, stream);
  }

  // string app_id = 13;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.app_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_app_id(), target);
  }

  // string user_id = 14;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.user_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_user_id(), target);
  }

  // .google.protobuf.Timestamp modified_at = 15;
  if (this->has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::modified_at(this), target, stream);
  }

  // .google.protobuf.Struct metadata = 16;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::metadata(this), target, stream);
  }

  // string license = 17;
  if (this->license().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.license");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_license(), target);
  }

  // .clarifai.api.DatasetVersion dataset_version = 18;
  if (this->has_dataset_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::dataset_version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelVersion)
  return target;
}

size_t ModelVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 11;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string app_id = 13;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 14;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string license = 17;
  if (this->license().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .clarifai.api.status.Status status = 3;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.EvalMetrics metrics = 5;
  if (this->has_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metrics_);
  }

  // .google.protobuf.Timestamp completed_at = 10;
  if (this->has_completed_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *completed_at_);
  }

  // .clarifai.api.Visibility visibility = 12;
  if (this->has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .google.protobuf.Timestamp modified_at = 15;
  if (this->has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .google.protobuf.Struct metadata = 16;
  if (this->has_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .clarifai.api.DatasetVersion dataset_version = 18;
  if (this->has_dataset_version()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dataset_version_);
  }

  // uint32 active_concept_count = 4;
  if (this->active_concept_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_active_concept_count());
  }

  // uint32 total_input_count = 6;
  if (this->total_input_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_input_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ModelVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ModelVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ModelVersion)
    MergeFrom(*source);
  }
}

void ModelVersion::MergeFrom(const ModelVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.license().size() > 0) {

    license_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.license_);
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_metrics()) {
    _internal_mutable_metrics()->::clarifai::api::EvalMetrics::MergeFrom(from._internal_metrics());
  }
  if (from.has_completed_at()) {
    _internal_mutable_completed_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_completed_at());
  }
  if (from.has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from.has_modified_at()) {
    _internal_mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from.has_dataset_version()) {
    _internal_mutable_dataset_version()->::clarifai::api::DatasetVersion::MergeFrom(from._internal_dataset_version());
  }
  if (from.active_concept_count() != 0) {
    _internal_set_active_concept_count(from._internal_active_concept_count());
  }
  if (from.total_input_count() != 0) {
    _internal_set_total_input_count(from._internal_total_input_count());
  }
}

void ModelVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ModelVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelVersion::CopyFrom(const ModelVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVersion::IsInitialized() const {
  return true;
}

void ModelVersion::InternalSwap(ModelVersion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  license_.Swap(&other->license_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(created_at_, other->created_at_);
  swap(status_, other->status_);
  swap(metrics_, other->metrics_);
  swap(completed_at_, other->completed_at_);
  swap(visibility_, other->visibility_);
  swap(modified_at_, other->modified_at_);
  swap(metadata_, other->metadata_);
  swap(dataset_version_, other->dataset_version_);
  swap(active_concept_count_, other->active_concept_count_);
  swap(total_input_count_, other->total_input_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PretrainedModelConfig::InitAsDefaultInstance() {
  ::clarifai::api::_PretrainedModelConfig_default_instance_._instance.get_mutable()->input_fields_map_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::clarifai::api::_PretrainedModelConfig_default_instance_._instance.get_mutable()->output_fields_map_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class PretrainedModelConfig::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& input_fields_map(const PretrainedModelConfig* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& output_fields_map(const PretrainedModelConfig* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
PretrainedModelConfig::_Internal::input_fields_map(const PretrainedModelConfig* msg) {
  return *msg->input_fields_map_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
PretrainedModelConfig::_Internal::output_fields_map(const PretrainedModelConfig* msg) {
  return *msg->output_fields_map_;
}
void PretrainedModelConfig::clear_input_fields_map() {
  if (GetArenaNoVirtual() == nullptr && input_fields_map_ != nullptr) {
    delete input_fields_map_;
  }
  input_fields_map_ = nullptr;
}
void PretrainedModelConfig::clear_output_fields_map() {
  if (GetArenaNoVirtual() == nullptr && output_fields_map_ != nullptr) {
    delete output_fields_map_;
  }
  output_fields_map_ = nullptr;
}
PretrainedModelConfig::PretrainedModelConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PretrainedModelConfig)
}
PretrainedModelConfig::PretrainedModelConfig(const PretrainedModelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  data_provider_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_provider_params().empty()) {
    data_provider_params_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_provider_params_);
  }
  model_zip_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_zip_url().empty()) {
    model_zip_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_zip_url_);
  }
  if (from._internal_has_input_fields_map()) {
    input_fields_map_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.input_fields_map_);
  } else {
    input_fields_map_ = nullptr;
  }
  if (from._internal_has_output_fields_map()) {
    output_fields_map_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.output_fields_map_);
  } else {
    output_fields_map_ = nullptr;
  }
  overwrite_ = from.overwrite_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PretrainedModelConfig)
}

void PretrainedModelConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PretrainedModelConfig_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_provider_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_zip_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&input_fields_map_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overwrite_) -
      reinterpret_cast<char*>(&input_fields_map_)) + sizeof(overwrite_));
}

PretrainedModelConfig::~PretrainedModelConfig() {
  // @@protoc_insertion_point(destructor:clarifai.api.PretrainedModelConfig)
  SharedDtor();
}

void PretrainedModelConfig::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_provider_params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_zip_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete input_fields_map_;
  if (this != internal_default_instance()) delete output_fields_map_;
}

void PretrainedModelConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PretrainedModelConfig& PretrainedModelConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PretrainedModelConfig_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void PretrainedModelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PretrainedModelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_provider_params_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_zip_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && input_fields_map_ != nullptr) {
    delete input_fields_map_;
  }
  input_fields_map_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_fields_map_ != nullptr) {
    delete output_fields_map_;
  }
  output_fields_map_ = nullptr;
  overwrite_ = false;
  _internal_metadata_.Clear();
}

const char* PretrainedModelConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PretrainedModelConfig.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PretrainedModelConfig.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct input_fields_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_fields_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct output_fields_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_fields_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data_provider_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data_provider_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PretrainedModelConfig.data_provider_params"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_zip_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_model_zip_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PretrainedModelConfig.model_zip_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool overwrite = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          overwrite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PretrainedModelConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PretrainedModelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PretrainedModelConfig.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PretrainedModelConfig.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // .google.protobuf.Struct input_fields_map = 3;
  if (this->has_input_fields_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::input_fields_map(this), target, stream);
  }

  // .google.protobuf.Struct output_fields_map = 4;
  if (this->has_output_fields_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::output_fields_map(this), target, stream);
  }

  // string data_provider_params = 5;
  if (this->data_provider_params().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_provider_params().data(), static_cast<int>(this->_internal_data_provider_params().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PretrainedModelConfig.data_provider_params");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_data_provider_params(), target);
  }

  // string model_zip_url = 6;
  if (this->model_zip_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_zip_url().data(), static_cast<int>(this->_internal_model_zip_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PretrainedModelConfig.model_zip_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_model_zip_url(), target);
  }

  // bool overwrite = 7;
  if (this->overwrite() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_overwrite(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PretrainedModelConfig)
  return target;
}

size_t PretrainedModelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PretrainedModelConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string data_provider_params = 5;
  if (this->data_provider_params().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_provider_params());
  }

  // string model_zip_url = 6;
  if (this->model_zip_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_zip_url());
  }

  // .google.protobuf.Struct input_fields_map = 3;
  if (this->has_input_fields_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_fields_map_);
  }

  // .google.protobuf.Struct output_fields_map = 4;
  if (this->has_output_fields_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_fields_map_);
  }

  // bool overwrite = 7;
  if (this->overwrite() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PretrainedModelConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PretrainedModelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PretrainedModelConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PretrainedModelConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PretrainedModelConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PretrainedModelConfig)
    MergeFrom(*source);
  }
}

void PretrainedModelConfig::MergeFrom(const PretrainedModelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PretrainedModelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.data_provider_params().size() > 0) {

    data_provider_params_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_provider_params_);
  }
  if (from.model_zip_url().size() > 0) {

    model_zip_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_zip_url_);
  }
  if (from.has_input_fields_map()) {
    _internal_mutable_input_fields_map()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_input_fields_map());
  }
  if (from.has_output_fields_map()) {
    _internal_mutable_output_fields_map()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_output_fields_map());
  }
  if (from.overwrite() != 0) {
    _internal_set_overwrite(from._internal_overwrite());
  }
}

void PretrainedModelConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PretrainedModelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PretrainedModelConfig::CopyFrom(const PretrainedModelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PretrainedModelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PretrainedModelConfig::IsInitialized() const {
  return true;
}

void PretrainedModelConfig::InternalSwap(PretrainedModelConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_provider_params_.Swap(&other->data_provider_params_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_zip_url_.Swap(&other->model_zip_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(input_fields_map_, other->input_fields_map_);
  swap(output_fields_map_, other->output_fields_map_);
  swap(overwrite_, other->overwrite_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PretrainedModelConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainStats::InitAsDefaultInstance() {
}
class TrainStats::_Internal {
 public:
};

TrainStats::TrainStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TrainStats)
}
TrainStats::TrainStats(const TrainStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      loss_curve_(from.loss_curve_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TrainStats)
}

void TrainStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainStats_proto_2fclarifai_2fapi_2fresources_2eproto.base);
}

TrainStats::~TrainStats() {
  // @@protoc_insertion_point(destructor:clarifai.api.TrainStats)
  SharedDtor();
}

void TrainStats::SharedDtor() {
}

void TrainStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainStats& TrainStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainStats_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TrainStats::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TrainStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loss_curve_.Clear();
  _internal_metadata_.Clear();
}

const char* TrainStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .clarifai.api.LossCurveEntry loss_curve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loss_curve(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TrainStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.LossCurveEntry loss_curve = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_loss_curve_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_loss_curve(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TrainStats)
  return target;
}

size_t TrainStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TrainStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LossCurveEntry loss_curve = 1;
  total_size += 1UL * this->_internal_loss_curve_size();
  for (const auto& msg : this->loss_curve_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TrainStats)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TrainStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TrainStats)
    MergeFrom(*source);
  }
}

void TrainStats::MergeFrom(const TrainStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TrainStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  loss_curve_.MergeFrom(from.loss_curve_);
}

void TrainStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TrainStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainStats::CopyFrom(const TrainStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TrainStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainStats::IsInitialized() const {
  return true;
}

void TrainStats::InternalSwap(TrainStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  loss_curve_.InternalSwap(&other->loss_curve_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LossCurveEntry::InitAsDefaultInstance() {
}
class LossCurveEntry::_Internal {
 public:
};

LossCurveEntry::LossCurveEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.LossCurveEntry)
}
LossCurveEntry::LossCurveEntry(const LossCurveEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LossCurveEntry)
}

void LossCurveEntry::SharedCtor() {
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(cost_));
}

LossCurveEntry::~LossCurveEntry() {
  // @@protoc_insertion_point(destructor:clarifai.api.LossCurveEntry)
  SharedDtor();
}

void LossCurveEntry::SharedDtor() {
}

void LossCurveEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LossCurveEntry& LossCurveEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LossCurveEntry_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void LossCurveEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LossCurveEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(cost_));
  _internal_metadata_.Clear();
}

const char* LossCurveEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 global_step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          global_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LossCurveEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LossCurveEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 epoch = 1;
  if (this->epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_epoch(), target);
  }

  // uint32 global_step = 2;
  if (this->global_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_global_step(), target);
  }

  // float cost = 3;
  if (!(this->cost() <= 0 && this->cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LossCurveEntry)
  return target;
}

size_t LossCurveEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LossCurveEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 epoch = 1;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_epoch());
  }

  // uint32 global_step = 2;
  if (this->global_step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_global_step());
  }

  // float cost = 3;
  if (!(this->cost() <= 0 && this->cost() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LossCurveEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.LossCurveEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LossCurveEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LossCurveEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.LossCurveEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.LossCurveEntry)
    MergeFrom(*source);
  }
}

void LossCurveEntry::MergeFrom(const LossCurveEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LossCurveEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from.global_step() != 0) {
    _internal_set_global_step(from._internal_global_step());
  }
  if (!(from.cost() <= 0 && from.cost() >= 0)) {
    _internal_set_cost(from._internal_cost());
  }
}

void LossCurveEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.LossCurveEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossCurveEntry::CopyFrom(const LossCurveEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LossCurveEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossCurveEntry::IsInitialized() const {
  return true;
}

void LossCurveEntry::InternalSwap(LossCurveEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(epoch_, other->epoch_);
  swap(global_step_, other->global_step_);
  swap(cost_, other->cost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LossCurveEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelCount::InitAsDefaultInstance() {
}
class LabelCount::_Internal {
 public:
};

LabelCount::LabelCount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.LabelCount)
}
LabelCount::LabelCount(const LabelCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_name().empty()) {
    concept_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_name_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LabelCount)
}

void LabelCount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelCount_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  concept_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
}

LabelCount::~LabelCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.LabelCount)
  SharedDtor();
}

void LabelCount::SharedDtor() {
  concept_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabelCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelCount& LabelCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelCount_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void LabelCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LabelCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
  _internal_metadata_.Clear();
}

const char* LabelCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string concept_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_concept_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.LabelCount.concept_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LabelCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string concept_name = 1;
  if (this->concept_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_name().data(), static_cast<int>(this->_internal_concept_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.LabelCount.concept_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_concept_name(), target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LabelCount)
  return target;
}

size_t LabelCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LabelCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_name = 1;
  if (this->concept_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_name());
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.LabelCount)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.LabelCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.LabelCount)
    MergeFrom(*source);
  }
}

void LabelCount::MergeFrom(const LabelCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LabelCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.concept_name().size() > 0) {

    concept_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_name_);
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void LabelCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.LabelCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelCount::CopyFrom(const LabelCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LabelCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelCount::IsInitialized() const {
  return true;
}

void LabelCount::InternalSwap(LabelCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_name_.Swap(&other->concept_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelDistribution::InitAsDefaultInstance() {
}
class LabelDistribution::_Internal {
 public:
};

LabelDistribution::LabelDistribution()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.LabelDistribution)
}
LabelDistribution::LabelDistribution(const LabelDistribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      positive_label_counts_(from.positive_label_counts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LabelDistribution)
}

void LabelDistribution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelDistribution_proto_2fclarifai_2fapi_2fresources_2eproto.base);
}

LabelDistribution::~LabelDistribution() {
  // @@protoc_insertion_point(destructor:clarifai.api.LabelDistribution)
  SharedDtor();
}

void LabelDistribution::SharedDtor() {
}

void LabelDistribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelDistribution& LabelDistribution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelDistribution_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void LabelDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LabelDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positive_label_counts_.Clear();
  _internal_metadata_.Clear();
}

const char* LabelDistribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .clarifai.api.LabelCount positive_label_counts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positive_label_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelDistribution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LabelDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.LabelCount positive_label_counts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_positive_label_counts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_positive_label_counts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LabelDistribution)
  return target;
}

size_t LabelDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LabelDistribution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LabelCount positive_label_counts = 1;
  total_size += 1UL * this->_internal_positive_label_counts_size();
  for (const auto& msg : this->positive_label_counts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelDistribution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.LabelDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelDistribution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelDistribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.LabelDistribution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.LabelDistribution)
    MergeFrom(*source);
  }
}

void LabelDistribution::MergeFrom(const LabelDistribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LabelDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positive_label_counts_.MergeFrom(from.positive_label_counts_);
}

void LabelDistribution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.LabelDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelDistribution::CopyFrom(const LabelDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LabelDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelDistribution::IsInitialized() const {
  return true;
}

void LabelDistribution::InternalSwap(LabelDistribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  positive_label_counts_.InternalSwap(&other->positive_label_counts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelDistribution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CooccurrenceMatrixEntry::InitAsDefaultInstance() {
}
class CooccurrenceMatrixEntry::_Internal {
 public:
};

CooccurrenceMatrixEntry::CooccurrenceMatrixEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.CooccurrenceMatrixEntry)
}
CooccurrenceMatrixEntry::CooccurrenceMatrixEntry(const CooccurrenceMatrixEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_row().empty()) {
    row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
  col_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_col().empty()) {
    col_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.col_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.CooccurrenceMatrixEntry)
}

void CooccurrenceMatrixEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CooccurrenceMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  col_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
}

CooccurrenceMatrixEntry::~CooccurrenceMatrixEntry() {
  // @@protoc_insertion_point(destructor:clarifai.api.CooccurrenceMatrixEntry)
  SharedDtor();
}

void CooccurrenceMatrixEntry::SharedDtor() {
  row_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  col_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CooccurrenceMatrixEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CooccurrenceMatrixEntry& CooccurrenceMatrixEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CooccurrenceMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void CooccurrenceMatrixEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.CooccurrenceMatrixEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  col_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
  _internal_metadata_.Clear();
}

const char* CooccurrenceMatrixEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_row();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.CooccurrenceMatrixEntry.row"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_col();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.CooccurrenceMatrixEntry.col"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CooccurrenceMatrixEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.CooccurrenceMatrixEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string row = 1;
  if (this->row().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_row().data(), static_cast<int>(this->_internal_row().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.CooccurrenceMatrixEntry.row");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_row(), target);
  }

  // string col = 2;
  if (this->col().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col().data(), static_cast<int>(this->_internal_col().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.CooccurrenceMatrixEntry.col");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col(), target);
  }

  // uint32 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.CooccurrenceMatrixEntry)
  return target;
}

size_t CooccurrenceMatrixEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.CooccurrenceMatrixEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string row = 1;
  if (this->row().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_row());
  }

  // string col = 2;
  if (this->col().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_col());
  }

  // uint32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CooccurrenceMatrixEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.CooccurrenceMatrixEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CooccurrenceMatrixEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CooccurrenceMatrixEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.CooccurrenceMatrixEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.CooccurrenceMatrixEntry)
    MergeFrom(*source);
  }
}

void CooccurrenceMatrixEntry::MergeFrom(const CooccurrenceMatrixEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.CooccurrenceMatrixEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.row().size() > 0) {

    row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
  if (from.col().size() > 0) {

    col_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.col_);
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void CooccurrenceMatrixEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.CooccurrenceMatrixEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CooccurrenceMatrixEntry::CopyFrom(const CooccurrenceMatrixEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.CooccurrenceMatrixEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CooccurrenceMatrixEntry::IsInitialized() const {
  return true;
}

void CooccurrenceMatrixEntry::InternalSwap(CooccurrenceMatrixEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  row_.Swap(&other->row_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  col_.Swap(&other->col_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CooccurrenceMatrixEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CooccurrenceMatrix::InitAsDefaultInstance() {
}
class CooccurrenceMatrix::_Internal {
 public:
};

CooccurrenceMatrix::CooccurrenceMatrix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.CooccurrenceMatrix)
}
CooccurrenceMatrix::CooccurrenceMatrix(const CooccurrenceMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      matrix_(from.matrix_),
      concept_ids_(from.concept_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.CooccurrenceMatrix)
}

void CooccurrenceMatrix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CooccurrenceMatrix_proto_2fclarifai_2fapi_2fresources_2eproto.base);
}

CooccurrenceMatrix::~CooccurrenceMatrix() {
  // @@protoc_insertion_point(destructor:clarifai.api.CooccurrenceMatrix)
  SharedDtor();
}

void CooccurrenceMatrix::SharedDtor() {
}

void CooccurrenceMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CooccurrenceMatrix& CooccurrenceMatrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CooccurrenceMatrix_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void CooccurrenceMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.CooccurrenceMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_.Clear();
  concept_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* CooccurrenceMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .clarifai.api.CooccurrenceMatrixEntry matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matrix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string concept_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.CooccurrenceMatrix.concept_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CooccurrenceMatrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.CooccurrenceMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.CooccurrenceMatrixEntry matrix = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matrix_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_matrix(i), target, stream);
  }

  // repeated string concept_ids = 2;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.CooccurrenceMatrix.concept_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.CooccurrenceMatrix)
  return target;
}

size_t CooccurrenceMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.CooccurrenceMatrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.CooccurrenceMatrixEntry matrix = 1;
  total_size += 1UL * this->_internal_matrix_size();
  for (const auto& msg : this->matrix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string concept_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(concept_ids_.size());
  for (int i = 0, n = concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      concept_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CooccurrenceMatrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.CooccurrenceMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const CooccurrenceMatrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CooccurrenceMatrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.CooccurrenceMatrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.CooccurrenceMatrix)
    MergeFrom(*source);
  }
}

void CooccurrenceMatrix::MergeFrom(const CooccurrenceMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.CooccurrenceMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_.MergeFrom(from.matrix_);
  concept_ids_.MergeFrom(from.concept_ids_);
}

void CooccurrenceMatrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.CooccurrenceMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CooccurrenceMatrix::CopyFrom(const CooccurrenceMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.CooccurrenceMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CooccurrenceMatrix::IsInitialized() const {
  return true;
}

void CooccurrenceMatrix::InternalSwap(CooccurrenceMatrix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  matrix_.InternalSwap(&other->matrix_);
  concept_ids_.InternalSwap(&other->concept_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CooccurrenceMatrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfusionMatrixEntry::InitAsDefaultInstance() {
}
class ConfusionMatrixEntry::_Internal {
 public:
};

ConfusionMatrixEntry::ConfusionMatrixEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ConfusionMatrixEntry)
}
ConfusionMatrixEntry::ConfusionMatrixEntry(const ConfusionMatrixEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  predicted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_predicted().empty()) {
    predicted_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.predicted_);
  }
  actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actual().empty()) {
    actual_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.actual_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConfusionMatrixEntry)
}

void ConfusionMatrixEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfusionMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  predicted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

ConfusionMatrixEntry::~ConfusionMatrixEntry() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConfusionMatrixEntry)
  SharedDtor();
}

void ConfusionMatrixEntry::SharedDtor() {
  predicted_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfusionMatrixEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfusionMatrixEntry& ConfusionMatrixEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfusionMatrixEntry_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ConfusionMatrixEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConfusionMatrixEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predicted_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* ConfusionMatrixEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string predicted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_predicted();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConfusionMatrixEntry.predicted"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string actual = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_actual();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConfusionMatrixEntry.actual"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfusionMatrixEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConfusionMatrixEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string predicted = 1;
  if (this->predicted().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_predicted().data(), static_cast<int>(this->_internal_predicted().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConfusionMatrixEntry.predicted");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_predicted(), target);
  }

  // string actual = 2;
  if (this->actual().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actual().data(), static_cast<int>(this->_internal_actual().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConfusionMatrixEntry.actual");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_actual(), target);
  }

  // float value = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConfusionMatrixEntry)
  return target;
}

size_t ConfusionMatrixEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConfusionMatrixEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string predicted = 1;
  if (this->predicted().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_predicted());
  }

  // string actual = 2;
  if (this->actual().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actual());
  }

  // float value = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfusionMatrixEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ConfusionMatrixEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfusionMatrixEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfusionMatrixEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ConfusionMatrixEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ConfusionMatrixEntry)
    MergeFrom(*source);
  }
}

void ConfusionMatrixEntry::MergeFrom(const ConfusionMatrixEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConfusionMatrixEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.predicted().size() > 0) {

    predicted_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.predicted_);
  }
  if (from.actual().size() > 0) {

    actual_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.actual_);
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void ConfusionMatrixEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ConfusionMatrixEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfusionMatrixEntry::CopyFrom(const ConfusionMatrixEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConfusionMatrixEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfusionMatrixEntry::IsInitialized() const {
  return true;
}

void ConfusionMatrixEntry::InternalSwap(ConfusionMatrixEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  predicted_.Swap(&other->predicted_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  actual_.Swap(&other->actual_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfusionMatrixEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfusionMatrix::InitAsDefaultInstance() {
}
class ConfusionMatrix::_Internal {
 public:
};

ConfusionMatrix::ConfusionMatrix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ConfusionMatrix)
}
ConfusionMatrix::ConfusionMatrix(const ConfusionMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      matrix_(from.matrix_),
      concept_ids_(from.concept_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConfusionMatrix)
}

void ConfusionMatrix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfusionMatrix_proto_2fclarifai_2fapi_2fresources_2eproto.base);
}

ConfusionMatrix::~ConfusionMatrix() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConfusionMatrix)
  SharedDtor();
}

void ConfusionMatrix::SharedDtor() {
}

void ConfusionMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfusionMatrix& ConfusionMatrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfusionMatrix_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ConfusionMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConfusionMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_.Clear();
  concept_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* ConfusionMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .clarifai.api.ConfusionMatrixEntry matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matrix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string concept_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConfusionMatrix.concept_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfusionMatrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConfusionMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.ConfusionMatrixEntry matrix = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matrix_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_matrix(i), target, stream);
  }

  // repeated string concept_ids = 2;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConfusionMatrix.concept_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConfusionMatrix)
  return target;
}

size_t ConfusionMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConfusionMatrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConfusionMatrixEntry matrix = 1;
  total_size += 1UL * this->_internal_matrix_size();
  for (const auto& msg : this->matrix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string concept_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(concept_ids_.size());
  for (int i = 0, n = concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      concept_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfusionMatrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ConfusionMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfusionMatrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfusionMatrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ConfusionMatrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ConfusionMatrix)
    MergeFrom(*source);
  }
}

void ConfusionMatrix::MergeFrom(const ConfusionMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConfusionMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_.MergeFrom(from.matrix_);
  concept_ids_.MergeFrom(from.concept_ids_);
}

void ConfusionMatrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ConfusionMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfusionMatrix::CopyFrom(const ConfusionMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConfusionMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfusionMatrix::IsInitialized() const {
  return true;
}

void ConfusionMatrix::InternalSwap(ConfusionMatrix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  matrix_.InternalSwap(&other->matrix_);
  concept_ids_.InternalSwap(&other->concept_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfusionMatrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ROC::InitAsDefaultInstance() {
}
class ROC::_Internal {
 public:
};

ROC::ROC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ROC)
}
ROC::ROC(const ROC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fpr_(from.fpr_),
      tpr_(from.tpr_),
      thresholds_(from.thresholds_),
      fpr_per_image_(from.fpr_per_image_),
      fpr_per_object_(from.fpr_per_object_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ROC)
}

void ROC::SharedCtor() {
}

ROC::~ROC() {
  // @@protoc_insertion_point(destructor:clarifai.api.ROC)
  SharedDtor();
}

void ROC::SharedDtor() {
}

void ROC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ROC& ROC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ROC_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ROC::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ROC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fpr_.Clear();
  tpr_.Clear();
  thresholds_.Clear();
  fpr_per_image_.Clear();
  fpr_per_object_.Clear();
  _internal_metadata_.Clear();
}

const char* ROC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float fpr = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_fpr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_fpr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tpr = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_tpr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_tpr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_thresholds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float fpr_per_image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_fpr_per_image(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_fpr_per_image(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float fpr_per_object = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_fpr_per_object(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_fpr_per_object(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ROC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float fpr = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_fpr_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_fpr(), target);
  }

  // repeated float tpr = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_tpr_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_tpr(), target);
  }

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_thresholds_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_thresholds(), target);
  }

  // repeated float fpr_per_image = 4;
  if (this->_internal_fpr_per_image_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_fpr_per_image(), target);
  }

  // repeated float fpr_per_object = 5;
  if (this->_internal_fpr_per_object_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_fpr_per_object(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ROC)
  return target;
}

size_t ROC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ROC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float fpr = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fpr_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fpr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tpr = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_tpr_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_thresholds_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _thresholds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float fpr_per_image = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fpr_per_image_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fpr_per_image_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float fpr_per_object = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fpr_per_object_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fpr_per_object_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ROC)
  GOOGLE_DCHECK_NE(&from, this);
  const ROC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ROC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ROC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ROC)
    MergeFrom(*source);
  }
}

void ROC::MergeFrom(const ROC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ROC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fpr_.MergeFrom(from.fpr_);
  tpr_.MergeFrom(from.tpr_);
  thresholds_.MergeFrom(from.thresholds_);
  fpr_per_image_.MergeFrom(from.fpr_per_image_);
  fpr_per_object_.MergeFrom(from.fpr_per_object_);
}

void ROC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ROC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROC::CopyFrom(const ROC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ROC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROC::IsInitialized() const {
  return true;
}

void ROC::InternalSwap(ROC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fpr_.InternalSwap(&other->fpr_);
  tpr_.InternalSwap(&other->tpr_);
  thresholds_.InternalSwap(&other->thresholds_);
  fpr_per_image_.InternalSwap(&other->fpr_per_image_);
  fpr_per_object_.InternalSwap(&other->fpr_per_object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrecisionRecallCurve::InitAsDefaultInstance() {
}
class PrecisionRecallCurve::_Internal {
 public:
};

PrecisionRecallCurve::PrecisionRecallCurve()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PrecisionRecallCurve)
}
PrecisionRecallCurve::PrecisionRecallCurve(const PrecisionRecallCurve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      recall_(from.recall_),
      precision_(from.precision_),
      thresholds_(from.thresholds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PrecisionRecallCurve)
}

void PrecisionRecallCurve::SharedCtor() {
}

PrecisionRecallCurve::~PrecisionRecallCurve() {
  // @@protoc_insertion_point(destructor:clarifai.api.PrecisionRecallCurve)
  SharedDtor();
}

void PrecisionRecallCurve::SharedDtor() {
}

void PrecisionRecallCurve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrecisionRecallCurve& PrecisionRecallCurve::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrecisionRecallCurve_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void PrecisionRecallCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PrecisionRecallCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recall_.Clear();
  precision_.Clear();
  thresholds_.Clear();
  _internal_metadata_.Clear();
}

const char* PrecisionRecallCurve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float recall = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_recall(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_recall(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float precision = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_precision(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_precision(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_thresholds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrecisionRecallCurve::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PrecisionRecallCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float recall = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_recall_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_recall(), target);
  }

  // repeated float precision = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_precision_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_precision(), target);
  }

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_thresholds_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_thresholds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PrecisionRecallCurve)
  return target;
}

size_t PrecisionRecallCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PrecisionRecallCurve)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float recall = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_recall_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _recall_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float precision = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_precision_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _precision_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_thresholds_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _thresholds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrecisionRecallCurve::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PrecisionRecallCurve)
  GOOGLE_DCHECK_NE(&from, this);
  const PrecisionRecallCurve* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrecisionRecallCurve>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PrecisionRecallCurve)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PrecisionRecallCurve)
    MergeFrom(*source);
  }
}

void PrecisionRecallCurve::MergeFrom(const PrecisionRecallCurve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PrecisionRecallCurve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recall_.MergeFrom(from.recall_);
  precision_.MergeFrom(from.precision_);
  thresholds_.MergeFrom(from.thresholds_);
}

void PrecisionRecallCurve::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PrecisionRecallCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrecisionRecallCurve::CopyFrom(const PrecisionRecallCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PrecisionRecallCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrecisionRecallCurve::IsInitialized() const {
  return true;
}

void PrecisionRecallCurve::InternalSwap(PrecisionRecallCurve* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  recall_.InternalSwap(&other->recall_);
  precision_.InternalSwap(&other->precision_);
  thresholds_.InternalSwap(&other->thresholds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrecisionRecallCurve::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BinaryMetrics::InitAsDefaultInstance() {
  ::clarifai::api::_BinaryMetrics_default_instance_._instance.get_mutable()->concept_ = const_cast< ::clarifai::api::Concept*>(
      ::clarifai::api::Concept::internal_default_instance());
  ::clarifai::api::_BinaryMetrics_default_instance_._instance.get_mutable()->roc_curve_ = const_cast< ::clarifai::api::ROC*>(
      ::clarifai::api::ROC::internal_default_instance());
  ::clarifai::api::_BinaryMetrics_default_instance_._instance.get_mutable()->precision_recall_curve_ = const_cast< ::clarifai::api::PrecisionRecallCurve*>(
      ::clarifai::api::PrecisionRecallCurve::internal_default_instance());
}
class BinaryMetrics::_Internal {
 public:
  static const ::clarifai::api::Concept& concept(const BinaryMetrics* msg);
  static const ::clarifai::api::ROC& roc_curve(const BinaryMetrics* msg);
  static const ::clarifai::api::PrecisionRecallCurve& precision_recall_curve(const BinaryMetrics* msg);
};

const ::clarifai::api::Concept&
BinaryMetrics::_Internal::concept(const BinaryMetrics* msg) {
  return *msg->concept_;
}
const ::clarifai::api::ROC&
BinaryMetrics::_Internal::roc_curve(const BinaryMetrics* msg) {
  return *msg->roc_curve_;
}
const ::clarifai::api::PrecisionRecallCurve&
BinaryMetrics::_Internal::precision_recall_curve(const BinaryMetrics* msg) {
  return *msg->precision_recall_curve_;
}
BinaryMetrics::BinaryMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.BinaryMetrics)
}
BinaryMetrics::BinaryMetrics(const BinaryMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  area_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_area_name().empty()) {
    area_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.area_name_);
  }
  if (from._internal_has_concept()) {
    concept_ = new ::clarifai::api::Concept(*from.concept_);
  } else {
    concept_ = nullptr;
  }
  if (from._internal_has_roc_curve()) {
    roc_curve_ = new ::clarifai::api::ROC(*from.roc_curve_);
  } else {
    roc_curve_ = nullptr;
  }
  if (from._internal_has_precision_recall_curve()) {
    precision_recall_curve_ = new ::clarifai::api::PrecisionRecallCurve(*from.precision_recall_curve_);
  } else {
    precision_recall_curve_ = nullptr;
  }
  ::memcpy(&num_pos_, &from.num_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&iou_) -
    reinterpret_cast<char*>(&num_pos_)) + sizeof(iou_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.BinaryMetrics)
}

void BinaryMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinaryMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  area_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&concept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iou_) -
      reinterpret_cast<char*>(&concept_)) + sizeof(iou_));
}

BinaryMetrics::~BinaryMetrics() {
  // @@protoc_insertion_point(destructor:clarifai.api.BinaryMetrics)
  SharedDtor();
}

void BinaryMetrics::SharedDtor() {
  area_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete concept_;
  if (this != internal_default_instance()) delete roc_curve_;
  if (this != internal_default_instance()) delete precision_recall_curve_;
}

void BinaryMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinaryMetrics& BinaryMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinaryMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void BinaryMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.BinaryMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  area_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && concept_ != nullptr) {
    delete concept_;
  }
  concept_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && roc_curve_ != nullptr) {
    delete roc_curve_;
  }
  roc_curve_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && precision_recall_curve_ != nullptr) {
    delete precision_recall_curve_;
  }
  precision_recall_curve_ = nullptr;
  ::memset(&num_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iou_) -
      reinterpret_cast<char*>(&num_pos_)) + sizeof(iou_));
  _internal_metadata_.Clear();
}

const char* BinaryMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_pos = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_neg = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_neg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_tot = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_tot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          roc_auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f1 = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Concept concept = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ROC roc_curve = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_roc_curve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.PrecisionRecallCurve precision_recall_curve = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_precision_recall_curve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float avg_precision = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          avg_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string area_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_area_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.BinaryMetrics.area_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double area_min = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          area_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double area_max = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          area_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float iou = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          iou_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.BinaryMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_pos = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->num_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_pos(), target);
  }

  // uint32 num_neg = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->num_neg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_neg(), target);
  }

  // uint32 num_tot = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->num_tot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_tot(), target);
  }

  // float roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->roc_auc() <= 0 && this->roc_auc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_roc_auc(), target);
  }

  // float f1 = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->f1() <= 0 && this->f1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_f1(), target);
  }

  // .clarifai.api.Concept concept = 6;
  if (this->has_concept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::concept(this), target, stream);
  }

  // .clarifai.api.ROC roc_curve = 7;
  if (this->has_roc_curve()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::roc_curve(this), target, stream);
  }

  // .clarifai.api.PrecisionRecallCurve precision_recall_curve = 8;
  if (this->has_precision_recall_curve()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::precision_recall_curve(this), target, stream);
  }

  // float avg_precision = 9;
  if (!(this->avg_precision() <= 0 && this->avg_precision() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_avg_precision(), target);
  }

  // string area_name = 10;
  if (this->area_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_area_name().data(), static_cast<int>(this->_internal_area_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.BinaryMetrics.area_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_area_name(), target);
  }

  // double area_min = 11;
  if (!(this->area_min() <= 0 && this->area_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_area_min(), target);
  }

  // double area_max = 12;
  if (!(this->area_max() <= 0 && this->area_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_area_max(), target);
  }

  // float iou = 13;
  if (!(this->iou() <= 0 && this->iou() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_iou(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.BinaryMetrics)
  return target;
}

size_t BinaryMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.BinaryMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string area_name = 10;
  if (this->area_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_area_name());
  }

  // .clarifai.api.Concept concept = 6;
  if (this->has_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_);
  }

  // .clarifai.api.ROC roc_curve = 7;
  if (this->has_roc_curve()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roc_curve_);
  }

  // .clarifai.api.PrecisionRecallCurve precision_recall_curve = 8;
  if (this->has_precision_recall_curve()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *precision_recall_curve_);
  }

  // uint32 num_pos = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->num_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_pos());
  }

  // uint32 num_neg = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->num_neg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_neg());
  }

  // uint32 num_tot = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->num_tot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_tot());
  }

  // float roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->roc_auc() <= 0 && this->roc_auc() >= 0)) {
    total_size += 1 + 4;
  }

  // float f1 = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->f1() <= 0 && this->f1() >= 0)) {
    total_size += 1 + 4;
  }

  // float avg_precision = 9;
  if (!(this->avg_precision() <= 0 && this->avg_precision() >= 0)) {
    total_size += 1 + 4;
  }

  // double area_min = 11;
  if (!(this->area_min() <= 0 && this->area_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double area_max = 12;
  if (!(this->area_max() <= 0 && this->area_max() >= 0)) {
    total_size += 1 + 8;
  }

  // float iou = 13;
  if (!(this->iou() <= 0 && this->iou() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.BinaryMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.BinaryMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.BinaryMetrics)
    MergeFrom(*source);
  }
}

void BinaryMetrics::MergeFrom(const BinaryMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.BinaryMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.area_name().size() > 0) {

    area_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.area_name_);
  }
  if (from.has_concept()) {
    _internal_mutable_concept()->::clarifai::api::Concept::MergeFrom(from._internal_concept());
  }
  if (from.has_roc_curve()) {
    _internal_mutable_roc_curve()->::clarifai::api::ROC::MergeFrom(from._internal_roc_curve());
  }
  if (from.has_precision_recall_curve()) {
    _internal_mutable_precision_recall_curve()->::clarifai::api::PrecisionRecallCurve::MergeFrom(from._internal_precision_recall_curve());
  }
  if (from.num_pos() != 0) {
    _internal_set_num_pos(from._internal_num_pos());
  }
  if (from.num_neg() != 0) {
    _internal_set_num_neg(from._internal_num_neg());
  }
  if (from.num_tot() != 0) {
    _internal_set_num_tot(from._internal_num_tot());
  }
  if (!(from.roc_auc() <= 0 && from.roc_auc() >= 0)) {
    _internal_set_roc_auc(from._internal_roc_auc());
  }
  if (!(from.f1() <= 0 && from.f1() >= 0)) {
    _internal_set_f1(from._internal_f1());
  }
  if (!(from.avg_precision() <= 0 && from.avg_precision() >= 0)) {
    _internal_set_avg_precision(from._internal_avg_precision());
  }
  if (!(from.area_min() <= 0 && from.area_min() >= 0)) {
    _internal_set_area_min(from._internal_area_min());
  }
  if (!(from.area_max() <= 0 && from.area_max() >= 0)) {
    _internal_set_area_max(from._internal_area_max());
  }
  if (!(from.iou() <= 0 && from.iou() >= 0)) {
    _internal_set_iou(from._internal_iou());
  }
}

void BinaryMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.BinaryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryMetrics::CopyFrom(const BinaryMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.BinaryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryMetrics::IsInitialized() const {
  return true;
}

void BinaryMetrics::InternalSwap(BinaryMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  area_name_.Swap(&other->area_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(concept_, other->concept_);
  swap(roc_curve_, other->roc_curve_);
  swap(precision_recall_curve_, other->precision_recall_curve_);
  swap(num_pos_, other->num_pos_);
  swap(num_neg_, other->num_neg_);
  swap(num_tot_, other->num_tot_);
  swap(roc_auc_, other->roc_auc_);
  swap(f1_, other->f1_);
  swap(avg_precision_, other->avg_precision_);
  swap(area_min_, other->area_min_);
  swap(area_max_, other->area_max_);
  swap(iou_, other->iou_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackerMetrics::InitAsDefaultInstance() {
}
class TrackerMetrics::_Internal {
 public:
};

TrackerMetrics::TrackerMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TrackerMetrics)
}
TrackerMetrics::TrackerMetrics(const TrackerMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aiid().empty()) {
    aiid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aiid_);
  }
  ::memcpy(&mot_mota_, &from.mot_mota_,
    static_cast<size_t>(reinterpret_cast<char*>(&unique_switch_rate_) -
    reinterpret_cast<char*>(&mot_mota_)) + sizeof(unique_switch_rate_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TrackerMetrics)
}

void TrackerMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackerMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mot_mota_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_switch_rate_) -
      reinterpret_cast<char*>(&mot_mota_)) + sizeof(unique_switch_rate_));
}

TrackerMetrics::~TrackerMetrics() {
  // @@protoc_insertion_point(destructor:clarifai.api.TrackerMetrics)
  SharedDtor();
}

void TrackerMetrics::SharedDtor() {
  aiid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrackerMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackerMetrics& TrackerMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackerMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TrackerMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TrackerMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aiid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mot_mota_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_switch_rate_) -
      reinterpret_cast<char*>(&mot_mota_)) + sizeof(unique_switch_rate_));
  _internal_metadata_.Clear();
}

const char* TrackerMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float mot_mota = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          mot_mota_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 mot_num_switches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mot_num_switches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float morse_frag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          morse_frag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float avg_precision = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          avg_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string aiid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_aiid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TrackerMetrics.aiid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float unique_switch_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          unique_switch_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackerMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TrackerMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float mot_mota = 1;
  if (!(this->mot_mota() <= 0 && this->mot_mota() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_mot_mota(), target);
  }

  // int32 mot_num_switches = 2;
  if (this->mot_num_switches() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mot_num_switches(), target);
  }

  // float morse_frag = 3;
  if (!(this->morse_frag() <= 0 && this->morse_frag() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_morse_frag(), target);
  }

  // float avg_precision = 4;
  if (!(this->avg_precision() <= 0 && this->avg_precision() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_avg_precision(), target);
  }

  // string aiid = 5;
  if (this->aiid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aiid().data(), static_cast<int>(this->_internal_aiid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TrackerMetrics.aiid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_aiid(), target);
  }

  // float unique_switch_rate = 6;
  if (!(this->unique_switch_rate() <= 0 && this->unique_switch_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_unique_switch_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TrackerMetrics)
  return target;
}

size_t TrackerMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TrackerMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string aiid = 5;
  if (this->aiid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aiid());
  }

  // float mot_mota = 1;
  if (!(this->mot_mota() <= 0 && this->mot_mota() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 mot_num_switches = 2;
  if (this->mot_num_switches() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mot_num_switches());
  }

  // float morse_frag = 3;
  if (!(this->morse_frag() <= 0 && this->morse_frag() >= 0)) {
    total_size += 1 + 4;
  }

  // float avg_precision = 4;
  if (!(this->avg_precision() <= 0 && this->avg_precision() >= 0)) {
    total_size += 1 + 4;
  }

  // float unique_switch_rate = 6;
  if (!(this->unique_switch_rate() <= 0 && this->unique_switch_rate() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackerMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TrackerMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackerMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackerMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TrackerMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TrackerMetrics)
    MergeFrom(*source);
  }
}

void TrackerMetrics::MergeFrom(const TrackerMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TrackerMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aiid().size() > 0) {

    aiid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aiid_);
  }
  if (!(from.mot_mota() <= 0 && from.mot_mota() >= 0)) {
    _internal_set_mot_mota(from._internal_mot_mota());
  }
  if (from.mot_num_switches() != 0) {
    _internal_set_mot_num_switches(from._internal_mot_num_switches());
  }
  if (!(from.morse_frag() <= 0 && from.morse_frag() >= 0)) {
    _internal_set_morse_frag(from._internal_morse_frag());
  }
  if (!(from.avg_precision() <= 0 && from.avg_precision() >= 0)) {
    _internal_set_avg_precision(from._internal_avg_precision());
  }
  if (!(from.unique_switch_rate() <= 0 && from.unique_switch_rate() >= 0)) {
    _internal_set_unique_switch_rate(from._internal_unique_switch_rate());
  }
}

void TrackerMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TrackerMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerMetrics::CopyFrom(const TrackerMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TrackerMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerMetrics::IsInitialized() const {
  return true;
}

void TrackerMetrics::InternalSwap(TrackerMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  aiid_.Swap(&other->aiid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mot_mota_, other->mot_mota_);
  swap(mot_num_switches_, other->mot_num_switches_);
  swap(morse_frag_, other->morse_frag_);
  swap(avg_precision_, other->avg_precision_);
  swap(unique_switch_rate_, other->unique_switch_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackerMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EvalTestSetEntry::InitAsDefaultInstance() {
  ::clarifai::api::_EvalTestSetEntry_default_instance_._instance.get_mutable()->input_ = const_cast< ::clarifai::api::Input*>(
      ::clarifai::api::Input::internal_default_instance());
  ::clarifai::api::_EvalTestSetEntry_default_instance_._instance.get_mutable()->annotation_ = const_cast< ::clarifai::api::Annotation*>(
      ::clarifai::api::Annotation::internal_default_instance());
}
class EvalTestSetEntry::_Internal {
 public:
  static const ::clarifai::api::Input& input(const EvalTestSetEntry* msg);
  static const ::clarifai::api::Annotation& annotation(const EvalTestSetEntry* msg);
};

const ::clarifai::api::Input&
EvalTestSetEntry::_Internal::input(const EvalTestSetEntry* msg) {
  return *msg->input_;
}
const ::clarifai::api::Annotation&
EvalTestSetEntry::_Internal::annotation(const EvalTestSetEntry* msg) {
  return *msg->annotation_;
}
EvalTestSetEntry::EvalTestSetEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.EvalTestSetEntry)
}
EvalTestSetEntry::EvalTestSetEntry(const EvalTestSetEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      predicted_concepts_(from.predicted_concepts_),
      ground_truth_concepts_(from.ground_truth_concepts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from._internal_has_annotation()) {
    annotation_ = new ::clarifai::api::Annotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.EvalTestSetEntry)
}

void EvalTestSetEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EvalTestSetEntry_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&annotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_) -
      reinterpret_cast<char*>(&annotation_)) + sizeof(input_));
}

EvalTestSetEntry::~EvalTestSetEntry() {
  // @@protoc_insertion_point(destructor:clarifai.api.EvalTestSetEntry)
  SharedDtor();
}

void EvalTestSetEntry::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete annotation_;
  if (this != internal_default_instance()) delete input_;
}

void EvalTestSetEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EvalTestSetEntry& EvalTestSetEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EvalTestSetEntry_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void EvalTestSetEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.EvalTestSetEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predicted_concepts_.Clear();
  ground_truth_concepts_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear();
}

const char* EvalTestSetEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.EvalTestSetEntry.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.EvalTestSetEntry.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept predicted_concepts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predicted_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept ground_truth_concepts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ground_truth_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EvalTestSetEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.EvalTestSetEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [deprecated = true];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EvalTestSetEntry.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string url = 2 [deprecated = true];
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EvalTestSetEntry.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // repeated .clarifai.api.Concept predicted_concepts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_predicted_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_predicted_concepts(i), target, stream);
  }

  // repeated .clarifai.api.Concept ground_truth_concepts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ground_truth_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ground_truth_concepts(i), target, stream);
  }

  // .clarifai.api.Annotation annotation = 5;
  if (this->has_annotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::annotation(this), target, stream);
  }

  // .clarifai.api.Input input = 6;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::input(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.EvalTestSetEntry)
  return target;
}

size_t EvalTestSetEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.EvalTestSetEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept predicted_concepts = 3;
  total_size += 1UL * this->_internal_predicted_concepts_size();
  for (const auto& msg : this->predicted_concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Concept ground_truth_concepts = 4;
  total_size += 1UL * this->_internal_ground_truth_concepts_size();
  for (const auto& msg : this->ground_truth_concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [deprecated = true];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string url = 2 [deprecated = true];
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .clarifai.api.Annotation annotation = 5;
  if (this->has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  // .clarifai.api.Input input = 6;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvalTestSetEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.EvalTestSetEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const EvalTestSetEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EvalTestSetEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.EvalTestSetEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.EvalTestSetEntry)
    MergeFrom(*source);
  }
}

void EvalTestSetEntry::MergeFrom(const EvalTestSetEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.EvalTestSetEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predicted_concepts_.MergeFrom(from.predicted_concepts_);
  ground_truth_concepts_.MergeFrom(from.ground_truth_concepts_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_annotation()) {
    _internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(from._internal_annotation());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
}

void EvalTestSetEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.EvalTestSetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvalTestSetEntry::CopyFrom(const EvalTestSetEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.EvalTestSetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalTestSetEntry::IsInitialized() const {
  return true;
}

void EvalTestSetEntry::InternalSwap(EvalTestSetEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  predicted_concepts_.InternalSwap(&other->predicted_concepts_);
  ground_truth_concepts_.InternalSwap(&other->ground_truth_concepts_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(annotation_, other->annotation_);
  swap(input_, other->input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalTestSetEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQEvalResult::InitAsDefaultInstance() {
}
class LOPQEvalResult::_Internal {
 public:
};

LOPQEvalResult::LOPQEvalResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.LOPQEvalResult)
}
LOPQEvalResult::LOPQEvalResult(const LOPQEvalResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&brute_force_ndcg_) -
    reinterpret_cast<char*>(&k_)) + sizeof(brute_force_ndcg_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LOPQEvalResult)
}

void LOPQEvalResult::SharedCtor() {
  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brute_force_ndcg_) -
      reinterpret_cast<char*>(&k_)) + sizeof(brute_force_ndcg_));
}

LOPQEvalResult::~LOPQEvalResult() {
  // @@protoc_insertion_point(destructor:clarifai.api.LOPQEvalResult)
  SharedDtor();
}

void LOPQEvalResult::SharedDtor() {
}

void LOPQEvalResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQEvalResult& LOPQEvalResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQEvalResult_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void LOPQEvalResult::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LOPQEvalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brute_force_ndcg_) -
      reinterpret_cast<char*>(&k_)) + sizeof(brute_force_ndcg_));
  _internal_metadata_.Clear();
}

const char* LOPQEvalResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          recall_vs_brute_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          kendall_tau_vs_brute_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          most_frequent_code_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          lopq_ndcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          brute_force_ndcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQEvalResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LOPQEvalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 k = 1;
  if (this->k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_k(), target);
  }

  // float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->recall_vs_brute_force() <= 0 && this->recall_vs_brute_force() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_recall_vs_brute_force(), target);
  }

  // float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->kendall_tau_vs_brute_force() <= 0 && this->kendall_tau_vs_brute_force() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_kendall_tau_vs_brute_force(), target);
  }

  // float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->most_frequent_code_percent() <= 0 && this->most_frequent_code_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_most_frequent_code_percent(), target);
  }

  // float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->lopq_ndcg() <= 0 && this->lopq_ndcg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_lopq_ndcg(), target);
  }

  // float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->brute_force_ndcg() <= 0 && this->brute_force_ndcg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_brute_force_ndcg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LOPQEvalResult)
  return target;
}

size_t LOPQEvalResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LOPQEvalResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 k = 1;
  if (this->k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_k());
  }

  // float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->recall_vs_brute_force() <= 0 && this->recall_vs_brute_force() >= 0)) {
    total_size += 1 + 4;
  }

  // float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->kendall_tau_vs_brute_force() <= 0 && this->kendall_tau_vs_brute_force() >= 0)) {
    total_size += 1 + 4;
  }

  // float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->most_frequent_code_percent() <= 0 && this->most_frequent_code_percent() >= 0)) {
    total_size += 1 + 4;
  }

  // float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->lopq_ndcg() <= 0 && this->lopq_ndcg() >= 0)) {
    total_size += 1 + 4;
  }

  // float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->brute_force_ndcg() <= 0 && this->brute_force_ndcg() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQEvalResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.LOPQEvalResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQEvalResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQEvalResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.LOPQEvalResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.LOPQEvalResult)
    MergeFrom(*source);
  }
}

void LOPQEvalResult::MergeFrom(const LOPQEvalResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LOPQEvalResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.k() != 0) {
    _internal_set_k(from._internal_k());
  }
  if (!(from.recall_vs_brute_force() <= 0 && from.recall_vs_brute_force() >= 0)) {
    _internal_set_recall_vs_brute_force(from._internal_recall_vs_brute_force());
  }
  if (!(from.kendall_tau_vs_brute_force() <= 0 && from.kendall_tau_vs_brute_force() >= 0)) {
    _internal_set_kendall_tau_vs_brute_force(from._internal_kendall_tau_vs_brute_force());
  }
  if (!(from.most_frequent_code_percent() <= 0 && from.most_frequent_code_percent() >= 0)) {
    _internal_set_most_frequent_code_percent(from._internal_most_frequent_code_percent());
  }
  if (!(from.lopq_ndcg() <= 0 && from.lopq_ndcg() >= 0)) {
    _internal_set_lopq_ndcg(from._internal_lopq_ndcg());
  }
  if (!(from.brute_force_ndcg() <= 0 && from.brute_force_ndcg() >= 0)) {
    _internal_set_brute_force_ndcg(from._internal_brute_force_ndcg());
  }
}

void LOPQEvalResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.LOPQEvalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQEvalResult::CopyFrom(const LOPQEvalResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LOPQEvalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQEvalResult::IsInitialized() const {
  return true;
}

void LOPQEvalResult::InternalSwap(LOPQEvalResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(k_, other->k_);
  swap(recall_vs_brute_force_, other->recall_vs_brute_force_);
  swap(kendall_tau_vs_brute_force_, other->kendall_tau_vs_brute_force_);
  swap(most_frequent_code_percent_, other->most_frequent_code_percent_);
  swap(lopq_ndcg_, other->lopq_ndcg_);
  swap(brute_force_ndcg_, other->brute_force_ndcg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQEvalResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MetricsSummary::InitAsDefaultInstance() {
}
class MetricsSummary::_Internal {
 public:
};

MetricsSummary::MetricsSummary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MetricsSummary)
}
MetricsSummary::MetricsSummary(const MetricsSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lopq_metrics_(from.lopq_metrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&top1_accuracy_, &from.top1_accuracy_,
    static_cast<size_t>(reinterpret_cast<char*>(&mean_avg_precision_iou_range_) -
    reinterpret_cast<char*>(&top1_accuracy_)) + sizeof(mean_avg_precision_iou_range_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MetricsSummary)
}

void MetricsSummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetricsSummary_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&top1_accuracy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_avg_precision_iou_range_) -
      reinterpret_cast<char*>(&top1_accuracy_)) + sizeof(mean_avg_precision_iou_range_));
}

MetricsSummary::~MetricsSummary() {
  // @@protoc_insertion_point(destructor:clarifai.api.MetricsSummary)
  SharedDtor();
}

void MetricsSummary::SharedDtor() {
}

void MetricsSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricsSummary& MetricsSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricsSummary_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void MetricsSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MetricsSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lopq_metrics_.Clear();
  ::memset(&top1_accuracy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_avg_precision_iou_range_) -
      reinterpret_cast<char*>(&top1_accuracy_)) + sizeof(mean_avg_precision_iou_range_));
  _internal_metadata_.Clear();
}

const char* MetricsSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float top1_accuracy = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          top1_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float top5_accuracy = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          top5_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float macro_avg_roc_auc = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          macro_avg_roc_auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float macro_std_roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          macro_std_roc_auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float macro_avg_f1_score = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          macro_avg_f1_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float macro_std_f1_score = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          macro_std_f1_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float macro_avg_precision = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          macro_avg_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float macro_avg_recall = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          macro_avg_recall_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.LOPQEvalResult lopq_metrics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lopq_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // float mean_avg_precision_iou_50 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          mean_avg_precision_iou_50_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mean_avg_precision_iou_range = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          mean_avg_precision_iou_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MetricsSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float top1_accuracy = 1 [deprecated = true];
  if (!(this->top1_accuracy() <= 0 && this->top1_accuracy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_top1_accuracy(), target);
  }

  // float top5_accuracy = 2 [deprecated = true];
  if (!(this->top5_accuracy() <= 0 && this->top5_accuracy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_top5_accuracy(), target);
  }

  // float macro_avg_roc_auc = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->macro_avg_roc_auc() <= 0 && this->macro_avg_roc_auc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_macro_avg_roc_auc(), target);
  }

  // float macro_std_roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->macro_std_roc_auc() <= 0 && this->macro_std_roc_auc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_macro_std_roc_auc(), target);
  }

  // float macro_avg_f1_score = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->macro_avg_f1_score() <= 0 && this->macro_avg_f1_score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_macro_avg_f1_score(), target);
  }

  // float macro_std_f1_score = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->macro_std_f1_score() <= 0 && this->macro_std_f1_score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_macro_std_f1_score(), target);
  }

  // float macro_avg_precision = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->macro_avg_precision() <= 0 && this->macro_avg_precision() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_macro_avg_precision(), target);
  }

  // float macro_avg_recall = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->macro_avg_recall() <= 0 && this->macro_avg_recall() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_macro_avg_recall(), target);
  }

  // repeated .clarifai.api.LOPQEvalResult lopq_metrics = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lopq_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_lopq_metrics(i), target, stream);
  }

  // float mean_avg_precision_iou_50 = 10;
  if (!(this->mean_avg_precision_iou_50() <= 0 && this->mean_avg_precision_iou_50() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_mean_avg_precision_iou_50(), target);
  }

  // float mean_avg_precision_iou_range = 11;
  if (!(this->mean_avg_precision_iou_range() <= 0 && this->mean_avg_precision_iou_range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_mean_avg_precision_iou_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MetricsSummary)
  return target;
}

size_t MetricsSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MetricsSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LOPQEvalResult lopq_metrics = 9;
  total_size += 1UL * this->_internal_lopq_metrics_size();
  for (const auto& msg : this->lopq_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float top1_accuracy = 1 [deprecated = true];
  if (!(this->top1_accuracy() <= 0 && this->top1_accuracy() >= 0)) {
    total_size += 1 + 4;
  }

  // float top5_accuracy = 2 [deprecated = true];
  if (!(this->top5_accuracy() <= 0 && this->top5_accuracy() >= 0)) {
    total_size += 1 + 4;
  }

  // float macro_avg_roc_auc = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->macro_avg_roc_auc() <= 0 && this->macro_avg_roc_auc() >= 0)) {
    total_size += 1 + 4;
  }

  // float macro_std_roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->macro_std_roc_auc() <= 0 && this->macro_std_roc_auc() >= 0)) {
    total_size += 1 + 4;
  }

  // float macro_avg_f1_score = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->macro_avg_f1_score() <= 0 && this->macro_avg_f1_score() >= 0)) {
    total_size += 1 + 4;
  }

  // float macro_std_f1_score = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->macro_std_f1_score() <= 0 && this->macro_std_f1_score() >= 0)) {
    total_size += 1 + 4;
  }

  // float macro_avg_precision = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->macro_avg_precision() <= 0 && this->macro_avg_precision() >= 0)) {
    total_size += 1 + 4;
  }

  // float macro_avg_recall = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->macro_avg_recall() <= 0 && this->macro_avg_recall() >= 0)) {
    total_size += 1 + 4;
  }

  // float mean_avg_precision_iou_50 = 10;
  if (!(this->mean_avg_precision_iou_50() <= 0 && this->mean_avg_precision_iou_50() >= 0)) {
    total_size += 1 + 4;
  }

  // float mean_avg_precision_iou_range = 11;
  if (!(this->mean_avg_precision_iou_range() <= 0 && this->mean_avg_precision_iou_range() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricsSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MetricsSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricsSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricsSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MetricsSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MetricsSummary)
    MergeFrom(*source);
  }
}

void MetricsSummary::MergeFrom(const MetricsSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MetricsSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lopq_metrics_.MergeFrom(from.lopq_metrics_);
  if (!(from.top1_accuracy() <= 0 && from.top1_accuracy() >= 0)) {
    _internal_set_top1_accuracy(from._internal_top1_accuracy());
  }
  if (!(from.top5_accuracy() <= 0 && from.top5_accuracy() >= 0)) {
    _internal_set_top5_accuracy(from._internal_top5_accuracy());
  }
  if (!(from.macro_avg_roc_auc() <= 0 && from.macro_avg_roc_auc() >= 0)) {
    _internal_set_macro_avg_roc_auc(from._internal_macro_avg_roc_auc());
  }
  if (!(from.macro_std_roc_auc() <= 0 && from.macro_std_roc_auc() >= 0)) {
    _internal_set_macro_std_roc_auc(from._internal_macro_std_roc_auc());
  }
  if (!(from.macro_avg_f1_score() <= 0 && from.macro_avg_f1_score() >= 0)) {
    _internal_set_macro_avg_f1_score(from._internal_macro_avg_f1_score());
  }
  if (!(from.macro_std_f1_score() <= 0 && from.macro_std_f1_score() >= 0)) {
    _internal_set_macro_std_f1_score(from._internal_macro_std_f1_score());
  }
  if (!(from.macro_avg_precision() <= 0 && from.macro_avg_precision() >= 0)) {
    _internal_set_macro_avg_precision(from._internal_macro_avg_precision());
  }
  if (!(from.macro_avg_recall() <= 0 && from.macro_avg_recall() >= 0)) {
    _internal_set_macro_avg_recall(from._internal_macro_avg_recall());
  }
  if (!(from.mean_avg_precision_iou_50() <= 0 && from.mean_avg_precision_iou_50() >= 0)) {
    _internal_set_mean_avg_precision_iou_50(from._internal_mean_avg_precision_iou_50());
  }
  if (!(from.mean_avg_precision_iou_range() <= 0 && from.mean_avg_precision_iou_range() >= 0)) {
    _internal_set_mean_avg_precision_iou_range(from._internal_mean_avg_precision_iou_range());
  }
}

void MetricsSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MetricsSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricsSummary::CopyFrom(const MetricsSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MetricsSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsSummary::IsInitialized() const {
  return true;
}

void MetricsSummary::InternalSwap(MetricsSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lopq_metrics_.InternalSwap(&other->lopq_metrics_);
  swap(top1_accuracy_, other->top1_accuracy_);
  swap(top5_accuracy_, other->top5_accuracy_);
  swap(macro_avg_roc_auc_, other->macro_avg_roc_auc_);
  swap(macro_std_roc_auc_, other->macro_std_roc_auc_);
  swap(macro_avg_f1_score_, other->macro_avg_f1_score_);
  swap(macro_std_f1_score_, other->macro_std_f1_score_);
  swap(macro_avg_precision_, other->macro_avg_precision_);
  swap(macro_avg_recall_, other->macro_avg_recall_);
  swap(mean_avg_precision_iou_50_, other->mean_avg_precision_iou_50_);
  swap(mean_avg_precision_iou_range_, other->mean_avg_precision_iou_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EvalMetrics::InitAsDefaultInstance() {
  ::clarifai::api::_EvalMetrics_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_EvalMetrics_default_instance_._instance.get_mutable()->summary_ = const_cast< ::clarifai::api::MetricsSummary*>(
      ::clarifai::api::MetricsSummary::internal_default_instance());
  ::clarifai::api::_EvalMetrics_default_instance_._instance.get_mutable()->confusion_matrix_ = const_cast< ::clarifai::api::ConfusionMatrix*>(
      ::clarifai::api::ConfusionMatrix::internal_default_instance());
  ::clarifai::api::_EvalMetrics_default_instance_._instance.get_mutable()->cooccurrence_matrix_ = const_cast< ::clarifai::api::CooccurrenceMatrix*>(
      ::clarifai::api::CooccurrenceMatrix::internal_default_instance());
  ::clarifai::api::_EvalMetrics_default_instance_._instance.get_mutable()->label_counts_ = const_cast< ::clarifai::api::LabelDistribution*>(
      ::clarifai::api::LabelDistribution::internal_default_instance());
}
class EvalMetrics::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const EvalMetrics* msg);
  static const ::clarifai::api::MetricsSummary& summary(const EvalMetrics* msg);
  static const ::clarifai::api::ConfusionMatrix& confusion_matrix(const EvalMetrics* msg);
  static const ::clarifai::api::CooccurrenceMatrix& cooccurrence_matrix(const EvalMetrics* msg);
  static const ::clarifai::api::LabelDistribution& label_counts(const EvalMetrics* msg);
};

const ::clarifai::api::status::Status&
EvalMetrics::_Internal::status(const EvalMetrics* msg) {
  return *msg->status_;
}
const ::clarifai::api::MetricsSummary&
EvalMetrics::_Internal::summary(const EvalMetrics* msg) {
  return *msg->summary_;
}
const ::clarifai::api::ConfusionMatrix&
EvalMetrics::_Internal::confusion_matrix(const EvalMetrics* msg) {
  return *msg->confusion_matrix_;
}
const ::clarifai::api::CooccurrenceMatrix&
EvalMetrics::_Internal::cooccurrence_matrix(const EvalMetrics* msg) {
  return *msg->cooccurrence_matrix_;
}
const ::clarifai::api::LabelDistribution&
EvalMetrics::_Internal::label_counts(const EvalMetrics* msg) {
  return *msg->label_counts_;
}
void EvalMetrics::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
EvalMetrics::EvalMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.EvalMetrics)
}
EvalMetrics::EvalMetrics(const EvalMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      binary_metrics_(from.binary_metrics_),
      test_set_(from.test_set_),
      metrics_by_area_(from.metrics_by_area_),
      metrics_by_class_(from.metrics_by_class_),
      tracker_metrics_(from.tracker_metrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_summary()) {
    summary_ = new ::clarifai::api::MetricsSummary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  if (from._internal_has_confusion_matrix()) {
    confusion_matrix_ = new ::clarifai::api::ConfusionMatrix(*from.confusion_matrix_);
  } else {
    confusion_matrix_ = nullptr;
  }
  if (from._internal_has_cooccurrence_matrix()) {
    cooccurrence_matrix_ = new ::clarifai::api::CooccurrenceMatrix(*from.cooccurrence_matrix_);
  } else {
    cooccurrence_matrix_ = nullptr;
  }
  if (from._internal_has_label_counts()) {
    label_counts_ = new ::clarifai::api::LabelDistribution(*from.label_counts_);
  } else {
    label_counts_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.EvalMetrics)
}

void EvalMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EvalMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_counts_) -
      reinterpret_cast<char*>(&status_)) + sizeof(label_counts_));
}

EvalMetrics::~EvalMetrics() {
  // @@protoc_insertion_point(destructor:clarifai.api.EvalMetrics)
  SharedDtor();
}

void EvalMetrics::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete summary_;
  if (this != internal_default_instance()) delete confusion_matrix_;
  if (this != internal_default_instance()) delete cooccurrence_matrix_;
  if (this != internal_default_instance()) delete label_counts_;
}

void EvalMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EvalMetrics& EvalMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EvalMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void EvalMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.EvalMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  binary_metrics_.Clear();
  test_set_.Clear();
  metrics_by_area_.Clear();
  metrics_by_class_.Clear();
  tracker_metrics_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && summary_ != nullptr) {
    delete summary_;
  }
  summary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && confusion_matrix_ != nullptr) {
    delete confusion_matrix_;
  }
  confusion_matrix_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cooccurrence_matrix_ != nullptr) {
    delete cooccurrence_matrix_;
  }
  cooccurrence_matrix_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && label_counts_ != nullptr) {
    delete label_counts_;
  }
  label_counts_ = nullptr;
  _internal_metadata_.Clear();
}

const char* EvalMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.MetricsSummary summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ConfusionMatrix confusion_matrix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_confusion_matrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.CooccurrenceMatrix cooccurrence_matrix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cooccurrence_matrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.LabelDistribution label_counts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_counts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.BinaryMetrics binary_metrics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_binary_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.EvalTestSetEntry test_set = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_test_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.BinaryMetrics metrics_by_area = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics_by_area(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.BinaryMetrics metrics_by_class = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics_by_class(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // string id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.EvalMetrics.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.TrackerMetrics tracker_metrics = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracker_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EvalMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.EvalMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.MetricsSummary summary = 2;
  if (this->has_summary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::summary(this), target, stream);
  }

  // .clarifai.api.ConfusionMatrix confusion_matrix = 3;
  if (this->has_confusion_matrix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::confusion_matrix(this), target, stream);
  }

  // .clarifai.api.CooccurrenceMatrix cooccurrence_matrix = 4;
  if (this->has_cooccurrence_matrix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cooccurrence_matrix(this), target, stream);
  }

  // .clarifai.api.LabelDistribution label_counts = 5;
  if (this->has_label_counts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::label_counts(this), target, stream);
  }

  // repeated .clarifai.api.BinaryMetrics binary_metrics = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_binary_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_binary_metrics(i), target, stream);
  }

  // repeated .clarifai.api.EvalTestSetEntry test_set = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_test_set_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_test_set(i), target, stream);
  }

  // repeated .clarifai.api.BinaryMetrics metrics_by_area = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_by_area_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_metrics_by_area(i), target, stream);
  }

  // repeated .clarifai.api.BinaryMetrics metrics_by_class = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_by_class_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_metrics_by_class(i), target, stream);
  }

  // string id = 10;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EvalMetrics.id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_id(), target);
  }

  // repeated .clarifai.api.TrackerMetrics tracker_metrics = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tracker_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_tracker_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.EvalMetrics)
  return target;
}

size_t EvalMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.EvalMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.BinaryMetrics binary_metrics = 6;
  total_size += 1UL * this->_internal_binary_metrics_size();
  for (const auto& msg : this->binary_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.EvalTestSetEntry test_set = 7;
  total_size += 1UL * this->_internal_test_set_size();
  for (const auto& msg : this->test_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.BinaryMetrics metrics_by_area = 8;
  total_size += 1UL * this->_internal_metrics_by_area_size();
  for (const auto& msg : this->metrics_by_area_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.BinaryMetrics metrics_by_class = 9;
  total_size += 1UL * this->_internal_metrics_by_class_size();
  for (const auto& msg : this->metrics_by_class_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.TrackerMetrics tracker_metrics = 11;
  total_size += 1UL * this->_internal_tracker_metrics_size();
  for (const auto& msg : this->tracker_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 10;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.MetricsSummary summary = 2;
  if (this->has_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_);
  }

  // .clarifai.api.ConfusionMatrix confusion_matrix = 3;
  if (this->has_confusion_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *confusion_matrix_);
  }

  // .clarifai.api.CooccurrenceMatrix cooccurrence_matrix = 4;
  if (this->has_cooccurrence_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cooccurrence_matrix_);
  }

  // .clarifai.api.LabelDistribution label_counts = 5;
  if (this->has_label_counts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_counts_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvalMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.EvalMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const EvalMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EvalMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.EvalMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.EvalMetrics)
    MergeFrom(*source);
  }
}

void EvalMetrics::MergeFrom(const EvalMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.EvalMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  binary_metrics_.MergeFrom(from.binary_metrics_);
  test_set_.MergeFrom(from.test_set_);
  metrics_by_area_.MergeFrom(from.metrics_by_area_);
  metrics_by_class_.MergeFrom(from.metrics_by_class_);
  tracker_metrics_.MergeFrom(from.tracker_metrics_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_summary()) {
    _internal_mutable_summary()->::clarifai::api::MetricsSummary::MergeFrom(from._internal_summary());
  }
  if (from.has_confusion_matrix()) {
    _internal_mutable_confusion_matrix()->::clarifai::api::ConfusionMatrix::MergeFrom(from._internal_confusion_matrix());
  }
  if (from.has_cooccurrence_matrix()) {
    _internal_mutable_cooccurrence_matrix()->::clarifai::api::CooccurrenceMatrix::MergeFrom(from._internal_cooccurrence_matrix());
  }
  if (from.has_label_counts()) {
    _internal_mutable_label_counts()->::clarifai::api::LabelDistribution::MergeFrom(from._internal_label_counts());
  }
}

void EvalMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.EvalMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvalMetrics::CopyFrom(const EvalMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.EvalMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalMetrics::IsInitialized() const {
  return true;
}

void EvalMetrics::InternalSwap(EvalMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  binary_metrics_.InternalSwap(&other->binary_metrics_);
  test_set_.InternalSwap(&other->test_set_);
  metrics_by_area_.InternalSwap(&other->metrics_by_area_);
  metrics_by_class_.InternalSwap(&other->metrics_by_class_);
  tracker_metrics_.InternalSwap(&other->tracker_metrics_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(summary_, other->summary_);
  swap(confusion_matrix_, other->confusion_matrix_);
  swap(cooccurrence_matrix_, other->cooccurrence_matrix_);
  swap(label_counts_, other->label_counts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldsValue::InitAsDefaultInstance() {
}
class FieldsValue::_Internal {
 public:
};

FieldsValue::FieldsValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.FieldsValue)
}
FieldsValue::FieldsValue(const FieldsValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confusion_matrix_, &from.confusion_matrix_,
    static_cast<size_t>(reinterpret_cast<char*>(&metrics_by_class_) -
    reinterpret_cast<char*>(&confusion_matrix_)) + sizeof(metrics_by_class_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.FieldsValue)
}

void FieldsValue::SharedCtor() {
  ::memset(&confusion_matrix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metrics_by_class_) -
      reinterpret_cast<char*>(&confusion_matrix_)) + sizeof(metrics_by_class_));
}

FieldsValue::~FieldsValue() {
  // @@protoc_insertion_point(destructor:clarifai.api.FieldsValue)
  SharedDtor();
}

void FieldsValue::SharedDtor() {
}

void FieldsValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldsValue& FieldsValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldsValue_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void FieldsValue::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.FieldsValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confusion_matrix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metrics_by_class_) -
      reinterpret_cast<char*>(&confusion_matrix_)) + sizeof(metrics_by_class_));
  _internal_metadata_.Clear();
}

const char* FieldsValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool confusion_matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confusion_matrix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cooccurrence_matrix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cooccurrence_matrix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool label_counts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          label_counts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool binary_metrics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          binary_metrics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool test_set = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          test_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool metrics_by_area = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          metrics_by_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool metrics_by_class = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          metrics_by_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldsValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.FieldsValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool confusion_matrix = 1;
  if (this->confusion_matrix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_confusion_matrix(), target);
  }

  // bool cooccurrence_matrix = 2;
  if (this->cooccurrence_matrix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_cooccurrence_matrix(), target);
  }

  // bool label_counts = 3;
  if (this->label_counts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_label_counts(), target);
  }

  // bool binary_metrics = 4;
  if (this->binary_metrics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_binary_metrics(), target);
  }

  // bool test_set = 5;
  if (this->test_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_test_set(), target);
  }

  // bool metrics_by_area = 6;
  if (this->metrics_by_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_metrics_by_area(), target);
  }

  // bool metrics_by_class = 7;
  if (this->metrics_by_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_metrics_by_class(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.FieldsValue)
  return target;
}

size_t FieldsValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.FieldsValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool confusion_matrix = 1;
  if (this->confusion_matrix() != 0) {
    total_size += 1 + 1;
  }

  // bool cooccurrence_matrix = 2;
  if (this->cooccurrence_matrix() != 0) {
    total_size += 1 + 1;
  }

  // bool label_counts = 3;
  if (this->label_counts() != 0) {
    total_size += 1 + 1;
  }

  // bool binary_metrics = 4;
  if (this->binary_metrics() != 0) {
    total_size += 1 + 1;
  }

  // bool test_set = 5;
  if (this->test_set() != 0) {
    total_size += 1 + 1;
  }

  // bool metrics_by_area = 6;
  if (this->metrics_by_area() != 0) {
    total_size += 1 + 1;
  }

  // bool metrics_by_class = 7;
  if (this->metrics_by_class() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldsValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.FieldsValue)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldsValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldsValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.FieldsValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.FieldsValue)
    MergeFrom(*source);
  }
}

void FieldsValue::MergeFrom(const FieldsValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.FieldsValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confusion_matrix() != 0) {
    _internal_set_confusion_matrix(from._internal_confusion_matrix());
  }
  if (from.cooccurrence_matrix() != 0) {
    _internal_set_cooccurrence_matrix(from._internal_cooccurrence_matrix());
  }
  if (from.label_counts() != 0) {
    _internal_set_label_counts(from._internal_label_counts());
  }
  if (from.binary_metrics() != 0) {
    _internal_set_binary_metrics(from._internal_binary_metrics());
  }
  if (from.test_set() != 0) {
    _internal_set_test_set(from._internal_test_set());
  }
  if (from.metrics_by_area() != 0) {
    _internal_set_metrics_by_area(from._internal_metrics_by_area());
  }
  if (from.metrics_by_class() != 0) {
    _internal_set_metrics_by_class(from._internal_metrics_by_class());
  }
}

void FieldsValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.FieldsValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldsValue::CopyFrom(const FieldsValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.FieldsValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldsValue::IsInitialized() const {
  return true;
}

void FieldsValue::InternalSwap(FieldsValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confusion_matrix_, other->confusion_matrix_);
  swap(cooccurrence_matrix_, other->cooccurrence_matrix_);
  swap(label_counts_, other->label_counts_);
  swap(binary_metrics_, other->binary_metrics_);
  swap(test_set_, other->test_set_);
  swap(metrics_by_area_, other->metrics_by_area_);
  swap(metrics_by_class_, other->metrics_by_class_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldsValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Output::InitAsDefaultInstance() {
  ::clarifai::api::_Output_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_Output_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Output_default_instance_._instance.get_mutable()->model_ = const_cast< ::clarifai::api::Model*>(
      ::clarifai::api::Model::internal_default_instance());
  ::clarifai::api::_Output_default_instance_._instance.get_mutable()->input_ = const_cast< ::clarifai::api::Input*>(
      ::clarifai::api::Input::internal_default_instance());
  ::clarifai::api::_Output_default_instance_._instance.get_mutable()->data_ = const_cast< ::clarifai::api::Data*>(
      ::clarifai::api::Data::internal_default_instance());
}
class Output::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const Output* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Output* msg);
  static const ::clarifai::api::Model& model(const Output* msg);
  static const ::clarifai::api::Input& input(const Output* msg);
  static const ::clarifai::api::Data& data(const Output* msg);
};

const ::clarifai::api::status::Status&
Output::_Internal::status(const Output* msg) {
  return *msg->status_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Output::_Internal::created_at(const Output* msg) {
  return *msg->created_at_;
}
const ::clarifai::api::Model&
Output::_Internal::model(const Output* msg) {
  return *msg->model_;
}
const ::clarifai::api::Input&
Output::_Internal::input(const Output* msg) {
  return *msg->input_;
}
const ::clarifai::api::Data&
Output::_Internal::data(const Output* msg) {
  return *msg->data_;
}
void Output::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void Output::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
Output::Output()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Output)
}
Output::Output(const Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::api::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Output)
}

void Output::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&status_)) + sizeof(data_));
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:clarifai.api.Output)
  SharedDtor();
}

void Output::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete model_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete data_;
}

void Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Output& Output::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Output::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Output.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Output::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Output.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.status.Status status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::created_at(this), target, stream);
  }

  // .clarifai.api.Model model = 4;
  if (this->has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::model(this), target, stream);
  }

  // .clarifai.api.Input input = 5;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::input(this), target, stream);
  }

  // .clarifai.api.Data data = 6;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Output)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.status.Status status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .clarifai.api.Model model = 4;
  if (this->has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  // .clarifai.api.Input input = 5;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .clarifai.api.Data data = 6;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Output::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Output)
  GOOGLE_DCHECK_NE(&from, this);
  const Output* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Output>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Output)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Output)
    MergeFrom(*source);
  }
}

void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_model()) {
    _internal_mutable_model()->::clarifai::api::Model::MergeFrom(from._internal_model());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
}

void Output::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  return true;
}

void Output::InternalSwap(Output* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(created_at_, other->created_at_);
  swap(model_, other->model_);
  swap(input_, other->input_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Output::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScopeDeps::InitAsDefaultInstance() {
}
class ScopeDeps::_Internal {
 public:
};

ScopeDeps::ScopeDeps()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ScopeDeps)
}
ScopeDeps::ScopeDeps(const ScopeDeps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      depending_scopes_(from.depending_scopes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scope().empty()) {
    scope_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scope_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ScopeDeps)
}

void ScopeDeps::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScopeDeps_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ScopeDeps::~ScopeDeps() {
  // @@protoc_insertion_point(destructor:clarifai.api.ScopeDeps)
  SharedDtor();
}

void ScopeDeps::SharedDtor() {
  scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScopeDeps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScopeDeps& ScopeDeps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScopeDeps_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ScopeDeps::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ScopeDeps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  depending_scopes_.Clear();
  scope_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ScopeDeps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string scope = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_scope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ScopeDeps.scope"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string depending_scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_depending_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ScopeDeps.depending_scopes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScopeDeps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ScopeDeps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scope = 1;
  if (this->scope().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scope().data(), static_cast<int>(this->_internal_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ScopeDeps.scope");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scope(), target);
  }

  // repeated string depending_scopes = 2;
  for (int i = 0, n = this->_internal_depending_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_depending_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ScopeDeps.depending_scopes");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ScopeDeps)
  return target;
}

size_t ScopeDeps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ScopeDeps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string depending_scopes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(depending_scopes_.size());
  for (int i = 0, n = depending_scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      depending_scopes_.Get(i));
  }

  // string scope = 1;
  if (this->scope().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scope());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScopeDeps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ScopeDeps)
  GOOGLE_DCHECK_NE(&from, this);
  const ScopeDeps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScopeDeps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ScopeDeps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ScopeDeps)
    MergeFrom(*source);
  }
}

void ScopeDeps::MergeFrom(const ScopeDeps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ScopeDeps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  depending_scopes_.MergeFrom(from.depending_scopes_);
  if (from.scope().size() > 0) {

    scope_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scope_);
  }
}

void ScopeDeps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ScopeDeps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScopeDeps::CopyFrom(const ScopeDeps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ScopeDeps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScopeDeps::IsInitialized() const {
  return true;
}

void ScopeDeps::InternalSwap(ScopeDeps* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  depending_scopes_.InternalSwap(&other->depending_scopes_);
  scope_.Swap(&other->scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ScopeDeps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndpointDeps::InitAsDefaultInstance() {
}
class EndpointDeps::_Internal {
 public:
};

EndpointDeps::EndpointDeps()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.EndpointDeps)
}
EndpointDeps::EndpointDeps(const EndpointDeps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      depending_scopes_(from.depending_scopes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endpoint().empty()) {
    endpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.EndpointDeps)
}

void EndpointDeps::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndpointDeps_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EndpointDeps::~EndpointDeps() {
  // @@protoc_insertion_point(destructor:clarifai.api.EndpointDeps)
  SharedDtor();
}

void EndpointDeps::SharedDtor() {
  endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EndpointDeps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndpointDeps& EndpointDeps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndpointDeps_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void EndpointDeps::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.EndpointDeps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  depending_scopes_.Clear();
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* EndpointDeps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string endpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_endpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.EndpointDeps.endpoint"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string depending_scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_depending_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.EndpointDeps.depending_scopes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndpointDeps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.EndpointDeps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string endpoint = 1;
  if (this->endpoint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint().data(), static_cast<int>(this->_internal_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EndpointDeps.endpoint");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_endpoint(), target);
  }

  // repeated string depending_scopes = 2;
  for (int i = 0, n = this->_internal_depending_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_depending_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EndpointDeps.depending_scopes");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.EndpointDeps)
  return target;
}

size_t EndpointDeps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.EndpointDeps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string depending_scopes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(depending_scopes_.size());
  for (int i = 0, n = depending_scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      depending_scopes_.Get(i));
  }

  // string endpoint = 1;
  if (this->endpoint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndpointDeps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.EndpointDeps)
  GOOGLE_DCHECK_NE(&from, this);
  const EndpointDeps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndpointDeps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.EndpointDeps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.EndpointDeps)
    MergeFrom(*source);
  }
}

void EndpointDeps::MergeFrom(const EndpointDeps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.EndpointDeps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  depending_scopes_.MergeFrom(from.depending_scopes_);
  if (from.endpoint().size() > 0) {

    endpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
}

void EndpointDeps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.EndpointDeps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndpointDeps::CopyFrom(const EndpointDeps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.EndpointDeps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndpointDeps::IsInitialized() const {
  return true;
}

void EndpointDeps::InternalSwap(EndpointDeps* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  depending_scopes_.InternalSwap(&other->depending_scopes_);
  endpoint_.Swap(&other->endpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata EndpointDeps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Hit::InitAsDefaultInstance() {
  ::clarifai::api::_Hit_default_instance_._instance.get_mutable()->input_ = const_cast< ::clarifai::api::Input*>(
      ::clarifai::api::Input::internal_default_instance());
  ::clarifai::api::_Hit_default_instance_._instance.get_mutable()->annotation_ = const_cast< ::clarifai::api::Annotation*>(
      ::clarifai::api::Annotation::internal_default_instance());
}
class Hit::_Internal {
 public:
  static const ::clarifai::api::Input& input(const Hit* msg);
  static const ::clarifai::api::Annotation& annotation(const Hit* msg);
};

const ::clarifai::api::Input&
Hit::_Internal::input(const Hit* msg) {
  return *msg->input_;
}
const ::clarifai::api::Annotation&
Hit::_Internal::annotation(const Hit* msg) {
  return *msg->annotation_;
}
Hit::Hit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Hit)
}
Hit::Hit(const Hit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_annotation()) {
    annotation_ = new ::clarifai::api::Annotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Hit)
}

void Hit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&input_)) + sizeof(score_));
}

Hit::~Hit() {
  // @@protoc_insertion_point(destructor:clarifai.api.Hit)
  SharedDtor();
}

void Hit::SharedDtor() {
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete annotation_;
}

void Hit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hit& Hit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Hit::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Hit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
  score_ = 0;
  _internal_metadata_.Clear();
}

const char* Hit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float score = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Hit.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Hit.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Hit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float score = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_score(), target);
  }

  // .clarifai.api.Input input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // .clarifai.api.Annotation annotation = 3;
  if (this->has_annotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::annotation(this), target, stream);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Hit.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  // string app_id = 5;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Hit.app_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Hit)
  return target;
}

size_t Hit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Hit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string app_id = 5;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // .clarifai.api.Input input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .clarifai.api.Annotation annotation = 3;
  if (this->has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  // float score = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Hit)
  GOOGLE_DCHECK_NE(&from, this);
  const Hit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Hit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Hit)
    MergeFrom(*source);
  }
}

void Hit::MergeFrom(const Hit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Hit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
  if (from.has_annotation()) {
    _internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(from._internal_annotation());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    _internal_set_score(from._internal_score());
  }
}

void Hit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Hit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hit::CopyFrom(const Hit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Hit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hit::IsInitialized() const {
  return true;
}

void Hit::InternalSwap(Hit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(input_, other->input_);
  swap(annotation_, other->annotation_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void And::InitAsDefaultInstance() {
  ::clarifai::api::_And_default_instance_._instance.get_mutable()->input_ = const_cast< ::clarifai::api::Input*>(
      ::clarifai::api::Input::internal_default_instance());
  ::clarifai::api::_And_default_instance_._instance.get_mutable()->output_ = const_cast< ::clarifai::api::Output*>(
      ::clarifai::api::Output::internal_default_instance());
  ::clarifai::api::_And_default_instance_._instance.get_mutable()->annotation_ = const_cast< ::clarifai::api::Annotation*>(
      ::clarifai::api::Annotation::internal_default_instance());
}
class And::_Internal {
 public:
  static const ::clarifai::api::Input& input(const And* msg);
  static const ::clarifai::api::Output& output(const And* msg);
  static const ::clarifai::api::Annotation& annotation(const And* msg);
};

const ::clarifai::api::Input&
And::_Internal::input(const And* msg) {
  return *msg->input_;
}
const ::clarifai::api::Output&
And::_Internal::output(const And* msg) {
  return *msg->output_;
}
const ::clarifai::api::Annotation&
And::_Internal::annotation(const And* msg) {
  return *msg->annotation_;
}
And::And()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.And)
}
And::And(const And& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_output()) {
    output_ = new ::clarifai::api::Output(*from.output_);
  } else {
    output_ = nullptr;
  }
  if (from._internal_has_annotation()) {
    annotation_ = new ::clarifai::api::Annotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  negate_ = from.negate_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.And)
}

void And::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&negate_) -
      reinterpret_cast<char*>(&input_)) + sizeof(negate_));
}

And::~And() {
  // @@protoc_insertion_point(destructor:clarifai.api.And)
  SharedDtor();
}

void And::SharedDtor() {
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete output_;
  if (this != internal_default_instance()) delete annotation_;
}

void And::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const And& And::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void And::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.And)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
  negate_ = false;
  _internal_metadata_.Clear();
}

const char* And::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.Input input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Output output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool negate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          negate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* And::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.And)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Input input = 1;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  // .clarifai.api.Output output = 2;
  if (this->has_output()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::output(this), target, stream);
  }

  // bool negate = 3;
  if (this->negate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_negate(), target);
  }

  // .clarifai.api.Annotation annotation = 4;
  if (this->has_annotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::annotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.And)
  return target;
}

size_t And::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.And)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Input input = 1;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .clarifai.api.Output output = 2;
  if (this->has_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_);
  }

  // .clarifai.api.Annotation annotation = 4;
  if (this->has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  // bool negate = 3;
  if (this->negate() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void And::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.And)
  GOOGLE_DCHECK_NE(&from, this);
  const And* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<And>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.And)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.And)
    MergeFrom(*source);
  }
}

void And::MergeFrom(const And& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.And)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
  if (from.has_output()) {
    _internal_mutable_output()->::clarifai::api::Output::MergeFrom(from._internal_output());
  }
  if (from.has_annotation()) {
    _internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(from._internal_annotation());
  }
  if (from.negate() != 0) {
    _internal_set_negate(from._internal_negate());
  }
}

void And::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.And)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void And::CopyFrom(const And& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.And)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool And::IsInitialized() const {
  return true;
}

void And::InternalSwap(And* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(input_, other->input_);
  swap(output_, other->output_);
  swap(annotation_, other->annotation_);
  swap(negate_, other->negate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata And::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Query::InitAsDefaultInstance() {
}
class Query::_Internal {
 public:
};

Query::Query()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Query)
}
Query::Query(const Query& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ands_(from.ands_),
      filters_(from.filters_),
      ranks_(from.ranks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Query)
}

void Query::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:clarifai.api.Query)
  SharedDtor();
}

void Query::SharedDtor() {
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Query& Query::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Query)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ands_.Clear();
  filters_.Clear();
  ranks_.Clear();
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Query::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .clarifai.api.And ands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Query.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Filter filters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Rank ranks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Query::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Query)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.And ands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ands(i), target, stream);
  }

  // string language = 2;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Query.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  // repeated .clarifai.api.Filter filters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_filters(i), target, stream);
  }

  // repeated .clarifai.api.Rank ranks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ranks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Query)
  return target;
}

size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Query)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.And ands = 1;
  total_size += 1UL * this->_internal_ands_size();
  for (const auto& msg : this->ands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Filter filters = 3;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Rank ranks = 4;
  total_size += 1UL * this->_internal_ranks_size();
  for (const auto& msg : this->ranks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string language = 2;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Query::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Query* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Query)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Query)
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ands_.MergeFrom(from.ands_);
  filters_.MergeFrom(from.filters_);
  ranks_.MergeFrom(from.ranks_);
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void Query::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::InternalSwap(Query* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ands_.InternalSwap(&other->ands_);
  filters_.InternalSwap(&other->filters_);
  ranks_.InternalSwap(&other->ranks_);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Query::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Search::InitAsDefaultInstance() {
  ::clarifai::api::_Search_default_instance_._instance.get_mutable()->query_ = const_cast< ::clarifai::api::Query*>(
      ::clarifai::api::Query::internal_default_instance());
  ::clarifai::api::_Search_default_instance_._instance.get_mutable()->as_of_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Search_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Search_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Search_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::clarifai::api::Visibility*>(
      ::clarifai::api::Visibility::internal_default_instance());
}
class Search::_Internal {
 public:
  static const ::clarifai::api::Query& query(const Search* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& as_of(const Search* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Search* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Search* msg);
  static const ::clarifai::api::Visibility& visibility(const Search* msg);
};

const ::clarifai::api::Query&
Search::_Internal::query(const Search* msg) {
  return *msg->query_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Search::_Internal::as_of(const Search* msg) {
  return *msg->as_of_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Search::_Internal::created_at(const Search* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Search::_Internal::modified_at(const Search* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::Visibility&
Search::_Internal::visibility(const Search* msg) {
  return *msg->visibility_;
}
void Search::clear_as_of() {
  if (GetArenaNoVirtual() == nullptr && as_of_ != nullptr) {
    delete as_of_;
  }
  as_of_ = nullptr;
}
void Search::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Search::clear_modified_at() {
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
Search::Search()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Search)
}
Search::Search(const Search& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application_id().empty()) {
    application_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.application_id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  git_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_git_hash().empty()) {
    git_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.git_hash_);
  }
  algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_algorithm().empty()) {
    algorithm_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.algorithm_);
  }
  if (from._internal_has_query()) {
    query_ = new ::clarifai::api::Query(*from.query_);
  } else {
    query_ = nullptr;
  }
  if (from._internal_has_as_of()) {
    as_of_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.as_of_);
  } else {
    as_of_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  ::memcpy(&save_, &from.save_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_value_) -
    reinterpret_cast<char*>(&save_)) + sizeof(min_value_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Search)
}

void Search::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  git_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&query_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_value_) -
      reinterpret_cast<char*>(&query_)) + sizeof(min_value_));
}

Search::~Search() {
  // @@protoc_insertion_point(destructor:clarifai.api.Search)
  SharedDtor();
}

void Search::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  git_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_;
  if (this != internal_default_instance()) delete as_of_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete visibility_;
}

void Search::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Search& Search::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_And_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Search::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Search)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  git_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && as_of_ != nullptr) {
    delete as_of_;
  }
  as_of_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  ::memset(&save_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_value_) -
      reinterpret_cast<char*>(&save_)) + sizeof(min_value_));
  _internal_metadata_.Clear();
}

const char* Search::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.Query query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Search.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string application_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_application_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Search.application_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Search.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp as_of = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_as_of(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string git_hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_git_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Search.git_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string algorithm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_algorithm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Search.algorithm"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool save = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          save_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Search::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Search)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Query query = 1;
  if (this->has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::query(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Search.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string application_id = 3;
  if (this->application_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_id().data(), static_cast<int>(this->_internal_application_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Search.application_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_application_id(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Search.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp as_of = 5;
  if (this->has_as_of()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::as_of(this), target, stream);
  }

  // string git_hash = 6;
  if (this->git_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_git_hash().data(), static_cast<int>(this->_internal_git_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Search.git_hash");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_git_hash(), target);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 8;
  if (this->has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::modified_at(this), target, stream);
  }

  // string algorithm = 9;
  if (this->algorithm().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_algorithm().data(), static_cast<int>(this->_internal_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Search.algorithm");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_algorithm(), target);
  }

  // bool save = 10;
  if (this->save() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_save(), target);
  }

  // float min_value = 11;
  if (!(this->min_value() <= 0 && this->min_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_min_value(), target);
  }

  // .clarifai.api.Visibility visibility = 12;
  if (this->has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::visibility(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Search)
  return target;
}

size_t Search::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Search)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string application_id = 3;
  if (this->application_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_id());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string git_hash = 6;
  if (this->git_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_git_hash());
  }

  // string algorithm = 9;
  if (this->algorithm().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_algorithm());
  }

  // .clarifai.api.Query query = 1;
  if (this->has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_);
  }

  // .google.protobuf.Timestamp as_of = 5;
  if (this->has_as_of()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *as_of_);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 8;
  if (this->has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.Visibility visibility = 12;
  if (this->has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // bool save = 10;
  if (this->save() != 0) {
    total_size += 1 + 1;
  }

  // float min_value = 11;
  if (!(this->min_value() <= 0 && this->min_value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Search::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Search)
  GOOGLE_DCHECK_NE(&from, this);
  const Search* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Search>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Search)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Search)
    MergeFrom(*source);
  }
}

void Search::MergeFrom(const Search& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Search)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.application_id().size() > 0) {

    application_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.application_id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.git_hash().size() > 0) {

    git_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.git_hash_);
  }
  if (from.algorithm().size() > 0) {

    algorithm_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.algorithm_);
  }
  if (from.has_query()) {
    _internal_mutable_query()->::clarifai::api::Query::MergeFrom(from._internal_query());
  }
  if (from.has_as_of()) {
    _internal_mutable_as_of()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_as_of());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_modified_at()) {
    _internal_mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from.has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from.save() != 0) {
    _internal_set_save(from._internal_save());
  }
  if (!(from.min_value() <= 0 && from.min_value() >= 0)) {
    _internal_set_min_value(from._internal_min_value());
  }
}

void Search::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Search)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Search::CopyFrom(const Search& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Search)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Search::IsInitialized() const {
  return true;
}

void Search::InternalSwap(Search* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  application_id_.Swap(&other->application_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  git_hash_.Swap(&other->git_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  algorithm_.Swap(&other->algorithm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(query_, other->query_);
  swap(as_of_, other->as_of_);
  swap(created_at_, other->created_at_);
  swap(modified_at_, other->modified_at_);
  swap(visibility_, other->visibility_);
  swap(save_, other->save_);
  swap(min_value_, other->min_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Search::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Filter::InitAsDefaultInstance() {
  ::clarifai::api::_Filter_default_instance_._instance.get_mutable()->annotation_ = const_cast< ::clarifai::api::Annotation*>(
      ::clarifai::api::Annotation::internal_default_instance());
  ::clarifai::api::_Filter_default_instance_._instance.get_mutable()->input_ = const_cast< ::clarifai::api::Input*>(
      ::clarifai::api::Input::internal_default_instance());
  ::clarifai::api::_Filter_default_instance_._instance.get_mutable()->last_updated_time_range_ = const_cast< ::clarifai::api::TimeRange*>(
      ::clarifai::api::TimeRange::internal_default_instance());
}
class Filter::_Internal {
 public:
  static const ::clarifai::api::Annotation& annotation(const Filter* msg);
  static const ::clarifai::api::Input& input(const Filter* msg);
  static const ::clarifai::api::TimeRange& last_updated_time_range(const Filter* msg);
};

const ::clarifai::api::Annotation&
Filter::_Internal::annotation(const Filter* msg) {
  return *msg->annotation_;
}
const ::clarifai::api::Input&
Filter::_Internal::input(const Filter* msg) {
  return *msg->input_;
}
const ::clarifai::api::TimeRange&
Filter::_Internal::last_updated_time_range(const Filter* msg) {
  return *msg->last_updated_time_range_;
}
Filter::Filter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Filter)
}
Filter::Filter(const Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_annotation()) {
    annotation_ = new ::clarifai::api::Annotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_last_updated_time_range()) {
    last_updated_time_range_ = new ::clarifai::api::TimeRange(*from.last_updated_time_range_);
  } else {
    last_updated_time_range_ = nullptr;
  }
  negate_ = from.negate_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Filter)
}

void Filter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Filter_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&annotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&negate_) -
      reinterpret_cast<char*>(&annotation_)) + sizeof(negate_));
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:clarifai.api.Filter)
  SharedDtor();
}

void Filter::SharedDtor() {
  if (this != internal_default_instance()) delete annotation_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete last_updated_time_range_;
}

void Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Filter& Filter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Filter_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && last_updated_time_range_ != nullptr) {
    delete last_updated_time_range_;
  }
  last_updated_time_range_ = nullptr;
  negate_ = false;
  _internal_metadata_.Clear();
}

const char* Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool negate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          negate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.TimeRange last_updated_time_range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated_time_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool negate = 3;
  if (this->negate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_negate(), target);
  }

  // .clarifai.api.Annotation annotation = 4;
  if (this->has_annotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::annotation(this), target, stream);
  }

  // .clarifai.api.Input input = 5;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::input(this), target, stream);
  }

  // .clarifai.api.TimeRange last_updated_time_range = 6;
  if (this->has_last_updated_time_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::last_updated_time_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Filter)
  return target;
}

size_t Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Annotation annotation = 4;
  if (this->has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  // .clarifai.api.Input input = 5;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .clarifai.api.TimeRange last_updated_time_range = 6;
  if (this->has_last_updated_time_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_updated_time_range_);
  }

  // bool negate = 3;
  if (this->negate() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const Filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Filter)
    MergeFrom(*source);
  }
}

void Filter::MergeFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_annotation()) {
    _internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(from._internal_annotation());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
  if (from.has_last_updated_time_range()) {
    _internal_mutable_last_updated_time_range()->::clarifai::api::TimeRange::MergeFrom(from._internal_last_updated_time_range());
  }
  if (from.negate() != 0) {
    _internal_set_negate(from._internal_negate());
  }
}

void Filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filter::CopyFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {
  return true;
}

void Filter::InternalSwap(Filter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(annotation_, other->annotation_);
  swap(input_, other->input_);
  swap(last_updated_time_range_, other->last_updated_time_range_);
  swap(negate_, other->negate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Filter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeRange::InitAsDefaultInstance() {
  ::clarifai::api::_TimeRange_default_instance_._instance.get_mutable()->start_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_TimeRange_default_instance_._instance.get_mutable()->end_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class TimeRange::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const TimeRange* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const TimeRange* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TimeRange::_Internal::start_time(const TimeRange* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TimeRange::_Internal::end_time(const TimeRange* msg) {
  return *msg->end_time_;
}
void TimeRange::clear_start_time() {
  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void TimeRange::clear_end_time() {
  if (GetArenaNoVirtual() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
TimeRange::TimeRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TimeRange)
}
TimeRange::TimeRange(const TimeRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TimeRange)
}

void TimeRange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeRange_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

TimeRange::~TimeRange() {
  // @@protoc_insertion_point(destructor:clarifai.api.TimeRange)
  SharedDtor();
}

void TimeRange::SharedDtor() {
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void TimeRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeRange& TimeRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeRange_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TimeRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TimeRange)
  return target;
}

size_t TimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TimeRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TimeRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TimeRange)
    MergeFrom(*source);
  }
}

void TimeRange::MergeFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
}

void TimeRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeRange::CopyFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {
  return true;
}

void TimeRange::InternalSwap(TimeRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rank::InitAsDefaultInstance() {
  ::clarifai::api::_Rank_default_instance_._instance.get_mutable()->annotation_ = const_cast< ::clarifai::api::Annotation*>(
      ::clarifai::api::Annotation::internal_default_instance());
}
class Rank::_Internal {
 public:
  static const ::clarifai::api::Annotation& annotation(const Rank* msg);
};

const ::clarifai::api::Annotation&
Rank::_Internal::annotation(const Rank* msg) {
  return *msg->annotation_;
}
Rank::Rank()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Rank)
}
Rank::Rank(const Rank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_annotation()) {
    annotation_ = new ::clarifai::api::Annotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  negate_ = from.negate_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Rank)
}

void Rank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rank_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&annotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&negate_) -
      reinterpret_cast<char*>(&annotation_)) + sizeof(negate_));
}

Rank::~Rank() {
  // @@protoc_insertion_point(destructor:clarifai.api.Rank)
  SharedDtor();
}

void Rank::SharedDtor() {
  if (this != internal_default_instance()) delete annotation_;
}

void Rank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rank& Rank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rank_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Rank::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Rank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
  negate_ = false;
  _internal_metadata_.Clear();
}

const char* Rank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool negate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          negate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Rank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool negate = 3;
  if (this->negate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_negate(), target);
  }

  // .clarifai.api.Annotation annotation = 4;
  if (this->has_annotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::annotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Rank)
  return target;
}

size_t Rank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Rank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Annotation annotation = 4;
  if (this->has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  // bool negate = 3;
  if (this->negate() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Rank)
  GOOGLE_DCHECK_NE(&from, this);
  const Rank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Rank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Rank)
    MergeFrom(*source);
  }
}

void Rank::MergeFrom(const Rank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Rank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_annotation()) {
    _internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(from._internal_annotation());
  }
  if (from.negate() != 0) {
    _internal_set_negate(from._internal_negate());
  }
}

void Rank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rank::CopyFrom(const Rank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rank::IsInitialized() const {
  return true;
}

void Rank::InternalSwap(Rank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(annotation_, other->annotation_);
  swap(negate_, other->negate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnnotationSearchMetrics::InitAsDefaultInstance() {
  ::clarifai::api::_AnnotationSearchMetrics_default_instance_._instance.get_mutable()->ground_truth_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
  ::clarifai::api::_AnnotationSearchMetrics_default_instance_._instance.get_mutable()->search_to_eval_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
  ::clarifai::api::_AnnotationSearchMetrics_default_instance_._instance.get_mutable()->metrics_ = const_cast< ::clarifai::api::EvalMetrics*>(
      ::clarifai::api::EvalMetrics::internal_default_instance());
  ::clarifai::api::_AnnotationSearchMetrics_default_instance_._instance.get_mutable()->data_ = const_cast< ::clarifai::api::Data*>(
      ::clarifai::api::Data::internal_default_instance());
  ::clarifai::api::_AnnotationSearchMetrics_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::clarifai::api::Visibility*>(
      ::clarifai::api::Visibility::internal_default_instance());
}
class AnnotationSearchMetrics::_Internal {
 public:
  static const ::clarifai::api::Search& ground_truth(const AnnotationSearchMetrics* msg);
  static const ::clarifai::api::Search& search_to_eval(const AnnotationSearchMetrics* msg);
  static const ::clarifai::api::EvalMetrics& metrics(const AnnotationSearchMetrics* msg);
  static const ::clarifai::api::Data& data(const AnnotationSearchMetrics* msg);
  static const ::clarifai::api::Visibility& visibility(const AnnotationSearchMetrics* msg);
};

const ::clarifai::api::Search&
AnnotationSearchMetrics::_Internal::ground_truth(const AnnotationSearchMetrics* msg) {
  return *msg->ground_truth_;
}
const ::clarifai::api::Search&
AnnotationSearchMetrics::_Internal::search_to_eval(const AnnotationSearchMetrics* msg) {
  return *msg->search_to_eval_;
}
const ::clarifai::api::EvalMetrics&
AnnotationSearchMetrics::_Internal::metrics(const AnnotationSearchMetrics* msg) {
  return *msg->metrics_;
}
const ::clarifai::api::Data&
AnnotationSearchMetrics::_Internal::data(const AnnotationSearchMetrics* msg) {
  return *msg->data_;
}
const ::clarifai::api::Visibility&
AnnotationSearchMetrics::_Internal::visibility(const AnnotationSearchMetrics* msg) {
  return *msg->visibility_;
}
AnnotationSearchMetrics::AnnotationSearchMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.AnnotationSearchMetrics)
}
AnnotationSearchMetrics::AnnotationSearchMetrics(const AnnotationSearchMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ground_truth()) {
    ground_truth_ = new ::clarifai::api::Search(*from.ground_truth_);
  } else {
    ground_truth_ = nullptr;
  }
  if (from._internal_has_search_to_eval()) {
    search_to_eval_ = new ::clarifai::api::Search(*from.search_to_eval_);
  } else {
    search_to_eval_ = nullptr;
  }
  if (from._internal_has_metrics()) {
    metrics_ = new ::clarifai::api::EvalMetrics(*from.metrics_);
  } else {
    metrics_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  active_concept_count_ = from.active_concept_count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AnnotationSearchMetrics)
}

void AnnotationSearchMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnnotationSearchMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&ground_truth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_concept_count_) -
      reinterpret_cast<char*>(&ground_truth_)) + sizeof(active_concept_count_));
}

AnnotationSearchMetrics::~AnnotationSearchMetrics() {
  // @@protoc_insertion_point(destructor:clarifai.api.AnnotationSearchMetrics)
  SharedDtor();
}

void AnnotationSearchMetrics::SharedDtor() {
  if (this != internal_default_instance()) delete ground_truth_;
  if (this != internal_default_instance()) delete search_to_eval_;
  if (this != internal_default_instance()) delete metrics_;
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete visibility_;
}

void AnnotationSearchMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnnotationSearchMetrics& AnnotationSearchMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnnotationSearchMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void AnnotationSearchMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AnnotationSearchMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ground_truth_ != nullptr) {
    delete ground_truth_;
  }
  ground_truth_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && search_to_eval_ != nullptr) {
    delete search_to_eval_;
  }
  search_to_eval_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  active_concept_count_ = 0u;
  _internal_metadata_.Clear();
}

const char* AnnotationSearchMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.Search ground_truth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_truth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search search_to_eval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_to_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.EvalMetrics metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 active_concept_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          active_concept_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnnotationSearchMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AnnotationSearchMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Search ground_truth = 1;
  if (this->has_ground_truth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ground_truth(this), target, stream);
  }

  // .clarifai.api.Search search_to_eval = 2;
  if (this->has_search_to_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::search_to_eval(this), target, stream);
  }

  // .clarifai.api.EvalMetrics metrics = 3;
  if (this->has_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::metrics(this), target, stream);
  }

  // .clarifai.api.Data data = 4;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::data(this), target, stream);
  }

  // uint32 active_concept_count = 5;
  if (this->active_concept_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_active_concept_count(), target);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::visibility(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AnnotationSearchMetrics)
  return target;
}

size_t AnnotationSearchMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AnnotationSearchMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Search ground_truth = 1;
  if (this->has_ground_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ground_truth_);
  }

  // .clarifai.api.Search search_to_eval = 2;
  if (this->has_search_to_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_to_eval_);
  }

  // .clarifai.api.EvalMetrics metrics = 3;
  if (this->has_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metrics_);
  }

  // .clarifai.api.Data data = 4;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // uint32 active_concept_count = 5;
  if (this->active_concept_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_active_concept_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnotationSearchMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.AnnotationSearchMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotationSearchMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnnotationSearchMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.AnnotationSearchMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.AnnotationSearchMetrics)
    MergeFrom(*source);
  }
}

void AnnotationSearchMetrics::MergeFrom(const AnnotationSearchMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AnnotationSearchMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ground_truth()) {
    _internal_mutable_ground_truth()->::clarifai::api::Search::MergeFrom(from._internal_ground_truth());
  }
  if (from.has_search_to_eval()) {
    _internal_mutable_search_to_eval()->::clarifai::api::Search::MergeFrom(from._internal_search_to_eval());
  }
  if (from.has_metrics()) {
    _internal_mutable_metrics()->::clarifai::api::EvalMetrics::MergeFrom(from._internal_metrics());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (from.has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from.active_concept_count() != 0) {
    _internal_set_active_concept_count(from._internal_active_concept_count());
  }
}

void AnnotationSearchMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.AnnotationSearchMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotationSearchMetrics::CopyFrom(const AnnotationSearchMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AnnotationSearchMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationSearchMetrics::IsInitialized() const {
  return true;
}

void AnnotationSearchMetrics::InternalSwap(AnnotationSearchMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ground_truth_, other->ground_truth_);
  swap(search_to_eval_, other->search_to_eval_);
  swap(metrics_, other->metrics_);
  swap(data_, other->data_);
  swap(visibility_, other->visibility_);
  swap(active_concept_count_, other->active_concept_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationSearchMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Text::InitAsDefaultInstance() {
  ::clarifai::api::_Text_default_instance_._instance.get_mutable()->hosted_ = const_cast< ::clarifai::api::HostedURL*>(
      ::clarifai::api::HostedURL::internal_default_instance());
  ::clarifai::api::_Text_default_instance_._instance.get_mutable()->text_info_ = const_cast< ::clarifai::api::TextInfo*>(
      ::clarifai::api::TextInfo::internal_default_instance());
}
class Text::_Internal {
 public:
  static const ::clarifai::api::HostedURL& hosted(const Text* msg);
  static const ::clarifai::api::TextInfo& text_info(const Text* msg);
};

const ::clarifai::api::HostedURL&
Text::_Internal::hosted(const Text* msg) {
  return *msg->hosted_;
}
const ::clarifai::api::TextInfo&
Text::_Internal::text_info(const Text* msg) {
  return *msg->text_info_;
}
Text::Text()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Text)
}
Text::Text(const Text& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw().empty()) {
    raw_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from._internal_has_hosted()) {
    hosted_ = new ::clarifai::api::HostedURL(*from.hosted_);
  } else {
    hosted_ = nullptr;
  }
  if (from._internal_has_text_info()) {
    text_info_ = new ::clarifai::api::TextInfo(*from.text_info_);
  } else {
    text_info_ = nullptr;
  }
  allow_duplicate_url_ = from.allow_duplicate_url_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Text)
}

void Text::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Text_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hosted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_duplicate_url_) -
      reinterpret_cast<char*>(&hosted_)) + sizeof(allow_duplicate_url_));
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:clarifai.api.Text)
  SharedDtor();
}

void Text::SharedDtor() {
  raw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hosted_;
  if (this != internal_default_instance()) delete text_info_;
}

void Text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Text& Text::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Text_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hosted_ != nullptr) {
    delete hosted_;
  }
  hosted_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && text_info_ != nullptr) {
    delete text_info_;
  }
  text_info_ = nullptr;
  allow_duplicate_url_ = false;
  _internal_metadata_.Clear();
}

const char* Text::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string raw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_raw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Text.raw"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Text.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_duplicate_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          allow_duplicate_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.HostedURL hosted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hosted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.TextInfo text_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Text::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string raw = 1;
  if (this->raw().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw().data(), static_cast<int>(this->_internal_raw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Text.raw");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_raw(), target);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Text.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // bool allow_duplicate_url = 3;
  if (this->allow_duplicate_url() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_allow_duplicate_url(), target);
  }

  // .clarifai.api.HostedURL hosted = 4;
  if (this->has_hosted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hosted(this), target, stream);
  }

  // .clarifai.api.TextInfo text_info = 5;
  if (this->has_text_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::text_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Text)
  return target;
}

size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Text)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string raw = 1;
  if (this->raw().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw());
  }

  // string url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .clarifai.api.HostedURL hosted = 4;
  if (this->has_hosted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hosted_);
  }

  // .clarifai.api.TextInfo text_info = 5;
  if (this->has_text_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_info_);
  }

  // bool allow_duplicate_url = 3;
  if (this->allow_duplicate_url() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Text::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Text)
  GOOGLE_DCHECK_NE(&from, this);
  const Text* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Text>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Text)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Text)
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Text)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw().size() > 0) {

    raw_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_hosted()) {
    _internal_mutable_hosted()->::clarifai::api::HostedURL::MergeFrom(from._internal_hosted());
  }
  if (from.has_text_info()) {
    _internal_mutable_text_info()->::clarifai::api::TextInfo::MergeFrom(from._internal_text_info());
  }
  if (from.allow_duplicate_url() != 0) {
    _internal_set_allow_duplicate_url(from._internal_allow_duplicate_url());
  }
}

void Text::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  return true;
}

void Text::InternalSwap(Text* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  raw_.Swap(&other->raw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hosted_, other->hosted_);
  swap(text_info_, other->text_info_);
  swap(allow_duplicate_url_, other->allow_duplicate_url_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Text::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextInfo::InitAsDefaultInstance() {
}
class TextInfo::_Internal {
 public:
};

TextInfo::TextInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TextInfo)
}
TextInfo::TextInfo(const TextInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encoding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoding().empty()) {
    encoding_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoding_);
  }
  char_count_ = from.char_count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TextInfo)
}

void TextInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  encoding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  char_count_ = 0;
}

TextInfo::~TextInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TextInfo)
  SharedDtor();
}

void TextInfo::SharedDtor() {
  encoding_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextInfo& TextInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TextInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TextInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoding_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  char_count_ = 0;
  _internal_metadata_.Clear();
}

const char* TextInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 char_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          char_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string encoding = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_encoding();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TextInfo.encoding"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TextInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 char_count = 1;
  if (this->char_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_char_count(), target);
  }

  // string encoding = 2;
  if (this->encoding().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoding().data(), static_cast<int>(this->_internal_encoding().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TextInfo.encoding");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_encoding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TextInfo)
  return target;
}

size_t TextInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TextInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string encoding = 2;
  if (this->encoding().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoding());
  }

  // int32 char_count = 1;
  if (this->char_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_char_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TextInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TextInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TextInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TextInfo)
    MergeFrom(*source);
  }
}

void TextInfo::MergeFrom(const TextInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TextInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoding().size() > 0) {

    encoding_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoding_);
  }
  if (from.char_count() != 0) {
    _internal_set_char_count(from._internal_char_count());
  }
}

void TextInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TextInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextInfo::CopyFrom(const TextInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TextInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextInfo::IsInitialized() const {
  return true;
}

void TextInfo::InternalSwap(TextInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  encoding_.Swap(&other->encoding_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(char_count_, other->char_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void User::InitAsDefaultInstance() {
  ::clarifai::api::_User_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_User_default_instance_._instance.get_mutable()->date_gdpr_consent_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_User_default_instance_._instance.get_mutable()->date_tos_consent_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_User_default_instance_._instance.get_mutable()->date_marketing_consent_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_User_default_instance_._instance.get_mutable()->metadata_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::clarifai::api::_User_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::clarifai::api::Visibility*>(
      ::clarifai::api::Visibility::internal_default_instance());
  ::clarifai::api::_User_default_instance_._instance.get_mutable()->user_detail_ = const_cast< ::clarifai::api::UserDetail*>(
      ::clarifai::api::UserDetail::internal_default_instance());
}
class User::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const User* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& date_gdpr_consent(const User* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& date_tos_consent(const User* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& date_marketing_consent(const User* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& metadata(const User* msg);
  static const ::clarifai::api::Visibility& visibility(const User* msg);
  static const ::clarifai::api::UserDetail& user_detail(const User* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::created_at(const User* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::date_gdpr_consent(const User* msg) {
  return *msg->date_gdpr_consent_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::date_tos_consent(const User* msg) {
  return *msg->date_tos_consent_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::date_marketing_consent(const User* msg) {
  return *msg->date_marketing_consent_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
User::_Internal::metadata(const User* msg) {
  return *msg->metadata_;
}
const ::clarifai::api::Visibility&
User::_Internal::visibility(const User* msg) {
  return *msg->visibility_;
}
const ::clarifai::api::UserDetail&
User::_Internal::user_detail(const User* msg) {
  return *msg->user_detail_;
}
void User::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void User::clear_date_gdpr_consent() {
  if (GetArenaNoVirtual() == nullptr && date_gdpr_consent_ != nullptr) {
    delete date_gdpr_consent_;
  }
  date_gdpr_consent_ = nullptr;
}
void User::clear_date_tos_consent() {
  if (GetArenaNoVirtual() == nullptr && date_tos_consent_ != nullptr) {
    delete date_tos_consent_;
  }
  date_tos_consent_ = nullptr;
}
void User::clear_date_marketing_consent() {
  if (GetArenaNoVirtual() == nullptr && date_marketing_consent_ != nullptr) {
    delete date_marketing_consent_;
  }
  date_marketing_consent_ = nullptr;
}
void User::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
User::User()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      email_addresses_(from.email_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  primary_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_primary_email().empty()) {
    primary_email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primary_email_);
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_name().empty()) {
    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  bill_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bill_type().empty()) {
    bill_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bill_type_);
  }
  job_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_title().empty()) {
    job_title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.job_title_);
  }
  job_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_role().empty()) {
    job_role_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.job_role_);
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_date_gdpr_consent()) {
    date_gdpr_consent_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.date_gdpr_consent_);
  } else {
    date_gdpr_consent_ = nullptr;
  }
  if (from._internal_has_date_tos_consent()) {
    date_tos_consent_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.date_tos_consent_);
  } else {
    date_tos_consent_ = nullptr;
  }
  if (from._internal_has_date_marketing_consent()) {
    date_marketing_consent_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.date_marketing_consent_);
  } else {
    date_marketing_consent_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  if (from._internal_has_user_detail()) {
    user_detail_ = new ::clarifai::api::UserDetail(*from.user_detail_);
  } else {
    user_detail_ = nullptr;
  }
  ::memcpy(&teams_count_, &from.teams_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&star_count_) -
    reinterpret_cast<char*>(&teams_count_)) + sizeof(star_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.User)
}

void User::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_User_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bill_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_count_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(star_count_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:clarifai.api.User)
  SharedDtor();
}

void User::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bill_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete date_gdpr_consent_;
  if (this != internal_default_instance()) delete date_tos_consent_;
  if (this != internal_default_instance()) delete date_marketing_consent_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete visibility_;
  if (this != internal_default_instance()) delete user_detail_;
}

void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const User& User::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_User_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void User::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_addresses_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bill_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && date_gdpr_consent_ != nullptr) {
    delete date_gdpr_consent_;
  }
  date_gdpr_consent_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && date_tos_consent_ != nullptr) {
    delete date_tos_consent_;
  }
  date_tos_consent_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && date_marketing_consent_ != nullptr) {
    delete date_marketing_consent_;
  }
  date_marketing_consent_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && user_detail_ != nullptr) {
    delete user_detail_;
  }
  user_detail_ = nullptr;
  ::memset(&teams_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_count_) -
      reinterpret_cast<char*>(&teams_count_)) + sizeof(star_count_));
  _internal_metadata_.Clear();
}

const char* User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string primary_email = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_primary_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.primary_email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.company_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bill_type = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_bill_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.bill_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_gdpr_consent = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_gdpr_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_tos_consent = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_tos_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_marketing_consent = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_marketing_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.EmailAddress email_addresses = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_email_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_org_admin = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          is_org_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool two_factor_auth_enabled = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          two_factor_auth_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 teams_count = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          teams_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.UserDetail user_detail = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string job_title = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_job_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.job_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string job_role = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_job_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.job_role"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_starred = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 star_count = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          star_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* User::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string primary_email = 2 [deprecated = true];
  if (this->primary_email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_primary_email().data(), static_cast<int>(this->_internal_primary_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.primary_email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_primary_email(), target);
  }

  // string first_name = 3;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.first_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_first_name(), target);
  }

  // string last_name = 4;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.last_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_last_name(), target);
  }

  // string company_name = 5;
  if (this->company_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.company_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_company_name(), target);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::created_at(this), target, stream);
  }

  // string bill_type = 7 [deprecated = true];
  if (this->bill_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bill_type().data(), static_cast<int>(this->_internal_bill_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.bill_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_bill_type(), target);
  }

  // .google.protobuf.Timestamp date_gdpr_consent = 8 [deprecated = true];
  if (this->has_date_gdpr_consent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::date_gdpr_consent(this), target, stream);
  }

  // .google.protobuf.Timestamp date_tos_consent = 9 [deprecated = true];
  if (this->has_date_tos_consent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::date_tos_consent(this), target, stream);
  }

  // .google.protobuf.Timestamp date_marketing_consent = 10 [deprecated = true];
  if (this->has_date_marketing_consent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::date_marketing_consent(this), target, stream);
  }

  // .google.protobuf.Struct metadata = 11 [deprecated = true];
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::metadata(this), target, stream);
  }

  // repeated .clarifai.api.EmailAddress email_addresses = 12 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_email_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_email_addresses(i), target, stream);
  }

  // bool is_org_admin = 14 [deprecated = true];
  if (this->is_org_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_org_admin(), target);
  }

  // bool two_factor_auth_enabled = 15 [deprecated = true];
  if (this->two_factor_auth_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_two_factor_auth_enabled(), target);
  }

  // uint32 teams_count = 16 [deprecated = true];
  if (this->teams_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_teams_count(), target);
  }

  // .clarifai.api.Visibility visibility = 17;
  if (this->has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::visibility(this), target, stream);
  }

  // .clarifai.api.UserDetail user_detail = 18;
  if (this->has_user_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::user_detail(this), target, stream);
  }

  // string job_title = 19;
  if (this->job_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_title().data(), static_cast<int>(this->_internal_job_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.job_title");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_job_title(), target);
  }

  // string job_role = 20;
  if (this->job_role().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_role().data(), static_cast<int>(this->_internal_job_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.job_role");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_job_role(), target);
  }

  // bool is_starred = 21;
  if (this->is_starred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_is_starred(), target);
  }

  // int32 star_count = 22;
  if (this->star_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_star_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.User)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.EmailAddress email_addresses = 12 [deprecated = true];
  total_size += 1UL * this->_internal_email_addresses_size();
  for (const auto& msg : this->email_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string primary_email = 2 [deprecated = true];
  if (this->primary_email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primary_email());
  }

  // string first_name = 3;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 4;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string company_name = 5;
  if (this->company_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  // string bill_type = 7 [deprecated = true];
  if (this->bill_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bill_type());
  }

  // string job_title = 19;
  if (this->job_title().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_title());
  }

  // string job_role = 20;
  if (this->job_role().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_role());
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp date_gdpr_consent = 8 [deprecated = true];
  if (this->has_date_gdpr_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_gdpr_consent_);
  }

  // .google.protobuf.Timestamp date_tos_consent = 9 [deprecated = true];
  if (this->has_date_tos_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_tos_consent_);
  }

  // .google.protobuf.Timestamp date_marketing_consent = 10 [deprecated = true];
  if (this->has_date_marketing_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_marketing_consent_);
  }

  // .google.protobuf.Struct metadata = 11 [deprecated = true];
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .clarifai.api.Visibility visibility = 17;
  if (this->has_visibility()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .clarifai.api.UserDetail user_detail = 18;
  if (this->has_user_detail()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_detail_);
  }

  // uint32 teams_count = 16 [deprecated = true];
  if (this->teams_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_teams_count());
  }

  // bool is_org_admin = 14 [deprecated = true];
  if (this->is_org_admin() != 0) {
    total_size += 1 + 1;
  }

  // bool two_factor_auth_enabled = 15 [deprecated = true];
  if (this->two_factor_auth_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_starred = 21;
  if (this->is_starred() != 0) {
    total_size += 2 + 1;
  }

  // int32 star_count = 22;
  if (this->star_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_star_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.User)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  email_addresses_.MergeFrom(from.email_addresses_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.primary_email().size() > 0) {

    primary_email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primary_email_);
  }
  if (from.first_name().size() > 0) {

    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  if (from.last_name().size() > 0) {

    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  if (from.company_name().size() > 0) {

    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  if (from.bill_type().size() > 0) {

    bill_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bill_type_);
  }
  if (from.job_title().size() > 0) {

    job_title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.job_title_);
  }
  if (from.job_role().size() > 0) {

    job_role_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.job_role_);
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_date_gdpr_consent()) {
    _internal_mutable_date_gdpr_consent()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_date_gdpr_consent());
  }
  if (from.has_date_tos_consent()) {
    _internal_mutable_date_tos_consent()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_date_tos_consent());
  }
  if (from.has_date_marketing_consent()) {
    _internal_mutable_date_marketing_consent()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_date_marketing_consent());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from.has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from.has_user_detail()) {
    _internal_mutable_user_detail()->::clarifai::api::UserDetail::MergeFrom(from._internal_user_detail());
  }
  if (from.teams_count() != 0) {
    _internal_set_teams_count(from._internal_teams_count());
  }
  if (from.is_org_admin() != 0) {
    _internal_set_is_org_admin(from._internal_is_org_admin());
  }
  if (from.two_factor_auth_enabled() != 0) {
    _internal_set_two_factor_auth_enabled(from._internal_two_factor_auth_enabled());
  }
  if (from.is_starred() != 0) {
    _internal_set_is_starred(from._internal_is_starred());
  }
  if (from.star_count() != 0) {
    _internal_set_star_count(from._internal_star_count());
  }
}

void User::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  email_addresses_.InternalSwap(&other->email_addresses_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  primary_email_.Swap(&other->primary_email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_name_.Swap(&other->company_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bill_type_.Swap(&other->bill_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  job_title_.Swap(&other->job_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  job_role_.Swap(&other->job_role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(created_at_, other->created_at_);
  swap(date_gdpr_consent_, other->date_gdpr_consent_);
  swap(date_tos_consent_, other->date_tos_consent_);
  swap(date_marketing_consent_, other->date_marketing_consent_);
  swap(metadata_, other->metadata_);
  swap(visibility_, other->visibility_);
  swap(user_detail_, other->user_detail_);
  swap(teams_count_, other->teams_count_);
  swap(is_org_admin_, other->is_org_admin_);
  swap(two_factor_auth_enabled_, other->two_factor_auth_enabled_);
  swap(is_starred_, other->is_starred_);
  swap(star_count_, other->star_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserDetail::InitAsDefaultInstance() {
  ::clarifai::api::_UserDetail_default_instance_._instance.get_mutable()->date_gdpr_consent_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_UserDetail_default_instance_._instance.get_mutable()->date_tos_consent_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_UserDetail_default_instance_._instance.get_mutable()->date_marketing_consent_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_UserDetail_default_instance_._instance.get_mutable()->metadata_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class UserDetail::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& date_gdpr_consent(const UserDetail* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& date_tos_consent(const UserDetail* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& date_marketing_consent(const UserDetail* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& metadata(const UserDetail* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
UserDetail::_Internal::date_gdpr_consent(const UserDetail* msg) {
  return *msg->date_gdpr_consent_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
UserDetail::_Internal::date_tos_consent(const UserDetail* msg) {
  return *msg->date_tos_consent_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
UserDetail::_Internal::date_marketing_consent(const UserDetail* msg) {
  return *msg->date_marketing_consent_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
UserDetail::_Internal::metadata(const UserDetail* msg) {
  return *msg->metadata_;
}
void UserDetail::clear_date_gdpr_consent() {
  if (GetArenaNoVirtual() == nullptr && date_gdpr_consent_ != nullptr) {
    delete date_gdpr_consent_;
  }
  date_gdpr_consent_ = nullptr;
}
void UserDetail::clear_date_tos_consent() {
  if (GetArenaNoVirtual() == nullptr && date_tos_consent_ != nullptr) {
    delete date_tos_consent_;
  }
  date_tos_consent_ = nullptr;
}
void UserDetail::clear_date_marketing_consent() {
  if (GetArenaNoVirtual() == nullptr && date_marketing_consent_ != nullptr) {
    delete date_marketing_consent_;
  }
  date_marketing_consent_ = nullptr;
}
void UserDetail::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
UserDetail::UserDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.UserDetail)
}
UserDetail::UserDetail(const UserDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      email_addresses_(from.email_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  primary_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_primary_email().empty()) {
    primary_email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primary_email_);
  }
  bill_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bill_type().empty()) {
    bill_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bill_type_);
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from._internal_has_date_gdpr_consent()) {
    date_gdpr_consent_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.date_gdpr_consent_);
  } else {
    date_gdpr_consent_ = nullptr;
  }
  if (from._internal_has_date_tos_consent()) {
    date_tos_consent_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.date_tos_consent_);
  } else {
    date_tos_consent_ = nullptr;
  }
  if (from._internal_has_date_marketing_consent()) {
    date_marketing_consent_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.date_marketing_consent_);
  } else {
    date_marketing_consent_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&is_org_admin_, &from.is_org_admin_,
    static_cast<size_t>(reinterpret_cast<char*>(&teams_count_) -
    reinterpret_cast<char*>(&is_org_admin_)) + sizeof(teams_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.UserDetail)
}

void UserDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserDetail_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  primary_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bill_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&date_gdpr_consent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teams_count_) -
      reinterpret_cast<char*>(&date_gdpr_consent_)) + sizeof(teams_count_));
}

UserDetail::~UserDetail() {
  // @@protoc_insertion_point(destructor:clarifai.api.UserDetail)
  SharedDtor();
}

void UserDetail::SharedDtor() {
  primary_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bill_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete date_gdpr_consent_;
  if (this != internal_default_instance()) delete date_tos_consent_;
  if (this != internal_default_instance()) delete date_marketing_consent_;
  if (this != internal_default_instance()) delete metadata_;
}

void UserDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserDetail& UserDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserDetail_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void UserDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.UserDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_addresses_.Clear();
  primary_email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bill_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && date_gdpr_consent_ != nullptr) {
    delete date_gdpr_consent_;
  }
  date_gdpr_consent_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && date_tos_consent_ != nullptr) {
    delete date_tos_consent_;
  }
  date_tos_consent_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && date_marketing_consent_ != nullptr) {
    delete date_marketing_consent_;
  }
  date_marketing_consent_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&is_org_admin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teams_count_) -
      reinterpret_cast<char*>(&is_org_admin_)) + sizeof(teams_count_));
  _internal_metadata_.Clear();
}

const char* UserDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string primary_email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_primary_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.UserDetail.primary_email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bill_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bill_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.UserDetail.bill_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_gdpr_consent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_gdpr_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_tos_consent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_tos_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_marketing_consent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_marketing_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.EmailAddress email_addresses = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_email_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_org_admin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_org_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool two_factor_auth_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          two_factor_auth_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 teams_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          teams_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.UserDetail.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.UserDetail.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.UserDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string primary_email = 1;
  if (this->primary_email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_primary_email().data(), static_cast<int>(this->_internal_primary_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserDetail.primary_email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_primary_email(), target);
  }

  // string bill_type = 2;
  if (this->bill_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bill_type().data(), static_cast<int>(this->_internal_bill_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserDetail.bill_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bill_type(), target);
  }

  // .google.protobuf.Timestamp date_gdpr_consent = 3;
  if (this->has_date_gdpr_consent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::date_gdpr_consent(this), target, stream);
  }

  // .google.protobuf.Timestamp date_tos_consent = 4;
  if (this->has_date_tos_consent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::date_tos_consent(this), target, stream);
  }

  // .google.protobuf.Timestamp date_marketing_consent = 5;
  if (this->has_date_marketing_consent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::date_marketing_consent(this), target, stream);
  }

  // .google.protobuf.Struct metadata = 6;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::metadata(this), target, stream);
  }

  // repeated .clarifai.api.EmailAddress email_addresses = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_email_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_email_addresses(i), target, stream);
  }

  // bool is_org_admin = 8;
  if (this->is_org_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_org_admin(), target);
  }

  // bool two_factor_auth_enabled = 9;
  if (this->two_factor_auth_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_two_factor_auth_enabled(), target);
  }

  // uint32 teams_count = 10;
  if (this->teams_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_teams_count(), target);
  }

  // string country = 11;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserDetail.country");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_country(), target);
  }

  // string state = 12;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserDetail.state");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.UserDetail)
  return target;
}

size_t UserDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.UserDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.EmailAddress email_addresses = 7;
  total_size += 1UL * this->_internal_email_addresses_size();
  for (const auto& msg : this->email_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string primary_email = 1;
  if (this->primary_email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primary_email());
  }

  // string bill_type = 2;
  if (this->bill_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bill_type());
  }

  // string country = 11;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string state = 12;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // .google.protobuf.Timestamp date_gdpr_consent = 3;
  if (this->has_date_gdpr_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_gdpr_consent_);
  }

  // .google.protobuf.Timestamp date_tos_consent = 4;
  if (this->has_date_tos_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_tos_consent_);
  }

  // .google.protobuf.Timestamp date_marketing_consent = 5;
  if (this->has_date_marketing_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_marketing_consent_);
  }

  // .google.protobuf.Struct metadata = 6;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // bool is_org_admin = 8;
  if (this->is_org_admin() != 0) {
    total_size += 1 + 1;
  }

  // bool two_factor_auth_enabled = 9;
  if (this->two_factor_auth_enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 teams_count = 10;
  if (this->teams_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_teams_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.UserDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.UserDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.UserDetail)
    MergeFrom(*source);
  }
}

void UserDetail::MergeFrom(const UserDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.UserDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  email_addresses_.MergeFrom(from.email_addresses_);
  if (from.primary_email().size() > 0) {

    primary_email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primary_email_);
  }
  if (from.bill_type().size() > 0) {

    bill_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bill_type_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.has_date_gdpr_consent()) {
    _internal_mutable_date_gdpr_consent()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_date_gdpr_consent());
  }
  if (from.has_date_tos_consent()) {
    _internal_mutable_date_tos_consent()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_date_tos_consent());
  }
  if (from.has_date_marketing_consent()) {
    _internal_mutable_date_marketing_consent()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_date_marketing_consent());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from.is_org_admin() != 0) {
    _internal_set_is_org_admin(from._internal_is_org_admin());
  }
  if (from.two_factor_auth_enabled() != 0) {
    _internal_set_two_factor_auth_enabled(from._internal_two_factor_auth_enabled());
  }
  if (from.teams_count() != 0) {
    _internal_set_teams_count(from._internal_teams_count());
  }
}

void UserDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.UserDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDetail::CopyFrom(const UserDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.UserDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDetail::IsInitialized() const {
  return true;
}

void UserDetail::InternalSwap(UserDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  email_addresses_.InternalSwap(&other->email_addresses_);
  primary_email_.Swap(&other->primary_email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bill_type_.Swap(&other->bill_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(date_gdpr_consent_, other->date_gdpr_consent_);
  swap(date_tos_consent_, other->date_tos_consent_);
  swap(date_marketing_consent_, other->date_marketing_consent_);
  swap(metadata_, other->metadata_);
  swap(is_org_admin_, other->is_org_admin_);
  swap(two_factor_auth_enabled_, other->two_factor_auth_enabled_);
  swap(teams_count_, other->teams_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EmailAddress::InitAsDefaultInstance() {
}
class EmailAddress::_Internal {
 public:
};

EmailAddress::EmailAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.EmailAddress)
}
EmailAddress::EmailAddress(const EmailAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  ::memcpy(&primary_, &from.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&verified_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(verified_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.EmailAddress)
}

void EmailAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EmailAddress_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verified_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(verified_));
}

EmailAddress::~EmailAddress() {
  // @@protoc_insertion_point(destructor:clarifai.api.EmailAddress)
  SharedDtor();
}

void EmailAddress::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EmailAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmailAddress& EmailAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmailAddress_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void EmailAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.EmailAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verified_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(verified_));
  _internal_metadata_.Clear();
}

const char* EmailAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string email = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.EmailAddress.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool primary = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool verified = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmailAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.EmailAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EmailAddress.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // bool primary = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->primary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_primary(), target);
  }

  // bool verified = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->verified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_verified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.EmailAddress)
  return target;
}

size_t EmailAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.EmailAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // bool primary = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->primary() != 0) {
    total_size += 1 + 1;
  }

  // bool verified = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->verified() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmailAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.EmailAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const EmailAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmailAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.EmailAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.EmailAddress)
    MergeFrom(*source);
  }
}

void EmailAddress::MergeFrom(const EmailAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.EmailAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.primary() != 0) {
    _internal_set_primary(from._internal_primary());
  }
  if (from.verified() != 0) {
    _internal_set_verified(from._internal_verified());
  }
}

void EmailAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.EmailAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailAddress::CopyFrom(const EmailAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.EmailAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailAddress::IsInitialized() const {
  return true;
}

void EmailAddress::InternalSwap(EmailAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(primary_, other->primary_);
  swap(verified_, other->verified_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Password::InitAsDefaultInstance() {
}
class Password::_Internal {
 public:
};

Password::Password()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Password)
}
Password::Password(const Password& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plaintext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_plaintext().empty()) {
    plaintext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plaintext_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Password)
}

void Password::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Password_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  plaintext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Password::~Password() {
  // @@protoc_insertion_point(destructor:clarifai.api.Password)
  SharedDtor();
}

void Password::SharedDtor() {
  plaintext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Password::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Password& Password::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Password_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Password::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Password)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plaintext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Password::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string plaintext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_plaintext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Password.plaintext"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Password::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Password)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string plaintext = 1;
  if (this->plaintext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plaintext().data(), static_cast<int>(this->_internal_plaintext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Password.plaintext");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_plaintext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Password)
  return target;
}

size_t Password::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Password)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string plaintext = 1;
  if (this->plaintext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plaintext());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Password::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Password)
  GOOGLE_DCHECK_NE(&from, this);
  const Password* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Password>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Password)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Password)
    MergeFrom(*source);
  }
}

void Password::MergeFrom(const Password& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Password)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plaintext().size() > 0) {

    plaintext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plaintext_);
  }
}

void Password::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Password)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Password::CopyFrom(const Password& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Password)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Password::IsInitialized() const {
  return true;
}

void Password::InternalSwap(Password* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  plaintext_.Swap(&other->plaintext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Password::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PasswordViolations::InitAsDefaultInstance() {
}
class PasswordViolations::_Internal {
 public:
};

PasswordViolations::PasswordViolations()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PasswordViolations)
}
PasswordViolations::PasswordViolations(const PasswordViolations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&minimum_length_, &from.minimum_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&password_lifespan_) -
    reinterpret_cast<char*>(&minimum_length_)) + sizeof(password_lifespan_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PasswordViolations)
}

void PasswordViolations::SharedCtor() {
  ::memset(&minimum_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&password_lifespan_) -
      reinterpret_cast<char*>(&minimum_length_)) + sizeof(password_lifespan_));
}

PasswordViolations::~PasswordViolations() {
  // @@protoc_insertion_point(destructor:clarifai.api.PasswordViolations)
  SharedDtor();
}

void PasswordViolations::SharedDtor() {
}

void PasswordViolations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PasswordViolations& PasswordViolations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PasswordViolations_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void PasswordViolations::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PasswordViolations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&minimum_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&password_lifespan_) -
      reinterpret_cast<char*>(&minimum_length_)) + sizeof(password_lifespan_));
  _internal_metadata_.Clear();
}

const char* PasswordViolations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool minimum_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          minimum_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool maximum_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maximum_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool upper_case_needed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          upper_case_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lower_case_needed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lower_case_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool numeric_needed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          numeric_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool non_alphanumeric_needed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          non_alphanumeric_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool password_reuse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          password_reuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exclude_names = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          exclude_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exclude_email = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          exclude_email_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_confusing_letters = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          no_confusing_letters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_simple_passwords = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          no_simple_passwords_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_common_vocabs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          no_common_vocabs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_overlap_with_old = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          no_overlap_with_old_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool password_lifespan = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          password_lifespan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PasswordViolations::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PasswordViolations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool minimum_length = 1;
  if (this->minimum_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_minimum_length(), target);
  }

  // bool maximum_length = 2;
  if (this->maximum_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_maximum_length(), target);
  }

  // bool upper_case_needed = 3;
  if (this->upper_case_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_upper_case_needed(), target);
  }

  // bool lower_case_needed = 4;
  if (this->lower_case_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_lower_case_needed(), target);
  }

  // bool numeric_needed = 5;
  if (this->numeric_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_numeric_needed(), target);
  }

  // bool non_alphanumeric_needed = 6;
  if (this->non_alphanumeric_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_non_alphanumeric_needed(), target);
  }

  // bool password_reuse = 7;
  if (this->password_reuse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_password_reuse(), target);
  }

  // bool exclude_names = 8;
  if (this->exclude_names() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_exclude_names(), target);
  }

  // bool exclude_email = 9;
  if (this->exclude_email() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_exclude_email(), target);
  }

  // bool no_confusing_letters = 10;
  if (this->no_confusing_letters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_no_confusing_letters(), target);
  }

  // bool no_simple_passwords = 11;
  if (this->no_simple_passwords() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_no_simple_passwords(), target);
  }

  // bool no_common_vocabs = 12;
  if (this->no_common_vocabs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_no_common_vocabs(), target);
  }

  // bool no_overlap_with_old = 13;
  if (this->no_overlap_with_old() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_no_overlap_with_old(), target);
  }

  // bool password_lifespan = 14;
  if (this->password_lifespan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_password_lifespan(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PasswordViolations)
  return target;
}

size_t PasswordViolations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PasswordViolations)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool minimum_length = 1;
  if (this->minimum_length() != 0) {
    total_size += 1 + 1;
  }

  // bool maximum_length = 2;
  if (this->maximum_length() != 0) {
    total_size += 1 + 1;
  }

  // bool upper_case_needed = 3;
  if (this->upper_case_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool lower_case_needed = 4;
  if (this->lower_case_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool numeric_needed = 5;
  if (this->numeric_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool non_alphanumeric_needed = 6;
  if (this->non_alphanumeric_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool password_reuse = 7;
  if (this->password_reuse() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_names = 8;
  if (this->exclude_names() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_email = 9;
  if (this->exclude_email() != 0) {
    total_size += 1 + 1;
  }

  // bool no_confusing_letters = 10;
  if (this->no_confusing_letters() != 0) {
    total_size += 1 + 1;
  }

  // bool no_simple_passwords = 11;
  if (this->no_simple_passwords() != 0) {
    total_size += 1 + 1;
  }

  // bool no_common_vocabs = 12;
  if (this->no_common_vocabs() != 0) {
    total_size += 1 + 1;
  }

  // bool no_overlap_with_old = 13;
  if (this->no_overlap_with_old() != 0) {
    total_size += 1 + 1;
  }

  // bool password_lifespan = 14;
  if (this->password_lifespan() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PasswordViolations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PasswordViolations)
  GOOGLE_DCHECK_NE(&from, this);
  const PasswordViolations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PasswordViolations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PasswordViolations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PasswordViolations)
    MergeFrom(*source);
  }
}

void PasswordViolations::MergeFrom(const PasswordViolations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PasswordViolations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.minimum_length() != 0) {
    _internal_set_minimum_length(from._internal_minimum_length());
  }
  if (from.maximum_length() != 0) {
    _internal_set_maximum_length(from._internal_maximum_length());
  }
  if (from.upper_case_needed() != 0) {
    _internal_set_upper_case_needed(from._internal_upper_case_needed());
  }
  if (from.lower_case_needed() != 0) {
    _internal_set_lower_case_needed(from._internal_lower_case_needed());
  }
  if (from.numeric_needed() != 0) {
    _internal_set_numeric_needed(from._internal_numeric_needed());
  }
  if (from.non_alphanumeric_needed() != 0) {
    _internal_set_non_alphanumeric_needed(from._internal_non_alphanumeric_needed());
  }
  if (from.password_reuse() != 0) {
    _internal_set_password_reuse(from._internal_password_reuse());
  }
  if (from.exclude_names() != 0) {
    _internal_set_exclude_names(from._internal_exclude_names());
  }
  if (from.exclude_email() != 0) {
    _internal_set_exclude_email(from._internal_exclude_email());
  }
  if (from.no_confusing_letters() != 0) {
    _internal_set_no_confusing_letters(from._internal_no_confusing_letters());
  }
  if (from.no_simple_passwords() != 0) {
    _internal_set_no_simple_passwords(from._internal_no_simple_passwords());
  }
  if (from.no_common_vocabs() != 0) {
    _internal_set_no_common_vocabs(from._internal_no_common_vocabs());
  }
  if (from.no_overlap_with_old() != 0) {
    _internal_set_no_overlap_with_old(from._internal_no_overlap_with_old());
  }
  if (from.password_lifespan() != 0) {
    _internal_set_password_lifespan(from._internal_password_lifespan());
  }
}

void PasswordViolations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PasswordViolations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasswordViolations::CopyFrom(const PasswordViolations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PasswordViolations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordViolations::IsInitialized() const {
  return true;
}

void PasswordViolations::InternalSwap(PasswordViolations* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(minimum_length_, other->minimum_length_);
  swap(maximum_length_, other->maximum_length_);
  swap(upper_case_needed_, other->upper_case_needed_);
  swap(lower_case_needed_, other->lower_case_needed_);
  swap(numeric_needed_, other->numeric_needed_);
  swap(non_alphanumeric_needed_, other->non_alphanumeric_needed_);
  swap(password_reuse_, other->password_reuse_);
  swap(exclude_names_, other->exclude_names_);
  swap(exclude_email_, other->exclude_email_);
  swap(no_confusing_letters_, other->no_confusing_letters_);
  swap(no_simple_passwords_, other->no_simple_passwords_);
  swap(no_common_vocabs_, other->no_common_vocabs_);
  swap(no_overlap_with_old_, other->no_overlap_with_old_);
  swap(password_lifespan_, other->password_lifespan_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PasswordViolations::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Video::InitAsDefaultInstance() {
  ::clarifai::api::_Video_default_instance_._instance.get_mutable()->hosted_ = const_cast< ::clarifai::api::HostedURL*>(
      ::clarifai::api::HostedURL::internal_default_instance());
  ::clarifai::api::_Video_default_instance_._instance.get_mutable()->video_info_ = const_cast< ::clarifai::api::VideoInfo*>(
      ::clarifai::api::VideoInfo::internal_default_instance());
}
class Video::_Internal {
 public:
  static const ::clarifai::api::HostedURL& hosted(const Video* msg);
  static const ::clarifai::api::VideoInfo& video_info(const Video* msg);
};

const ::clarifai::api::HostedURL&
Video::_Internal::hosted(const Video* msg) {
  return *msg->hosted_;
}
const ::clarifai::api::VideoInfo&
Video::_Internal::video_info(const Video* msg) {
  return *msg->video_info_;
}
Video::Video()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Video)
}
Video::Video(const Video& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  base64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base64().empty()) {
    base64_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base64_);
  }
  thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_thumbnail_url().empty()) {
    thumbnail_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  if (from._internal_has_hosted()) {
    hosted_ = new ::clarifai::api::HostedURL(*from.hosted_);
  } else {
    hosted_ = nullptr;
  }
  if (from._internal_has_video_info()) {
    video_info_ = new ::clarifai::api::VideoInfo(*from.video_info_);
  } else {
    video_info_ = nullptr;
  }
  allow_duplicate_url_ = from.allow_duplicate_url_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Video)
}

void Video::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Video_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hosted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_duplicate_url_) -
      reinterpret_cast<char*>(&hosted_)) + sizeof(allow_duplicate_url_));
}

Video::~Video() {
  // @@protoc_insertion_point(destructor:clarifai.api.Video)
  SharedDtor();
}

void Video::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base64_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hosted_;
  if (this != internal_default_instance()) delete video_info_;
}

void Video::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Video& Video::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Video_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Video::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Video)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base64_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hosted_ != nullptr) {
    delete hosted_;
  }
  hosted_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && video_info_ != nullptr) {
    delete video_info_;
  }
  video_info_ = nullptr;
  allow_duplicate_url_ = false;
  _internal_metadata_.Clear();
}

const char* Video::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Video.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes base64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_base64();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_duplicate_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          allow_duplicate_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string thumbnail_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Video.thumbnail_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.HostedURL hosted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_hosted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.VideoInfo video_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Video::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Video)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Video.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // bytes base64 = 2;
  if (this->base64().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_base64(), target);
  }

  // bool allow_duplicate_url = 4;
  if (this->allow_duplicate_url() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_duplicate_url(), target);
  }

  // string thumbnail_url = 5;
  if (this->thumbnail_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Video.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_thumbnail_url(), target);
  }

  // .clarifai.api.HostedURL hosted = 6;
  if (this->has_hosted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::hosted(this), target, stream);
  }

  // .clarifai.api.VideoInfo video_info = 7;
  if (this->has_video_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::video_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Video)
  return target;
}

size_t Video::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Video)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // bytes base64 = 2;
  if (this->base64().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_base64());
  }

  // string thumbnail_url = 5;
  if (this->thumbnail_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thumbnail_url());
  }

  // .clarifai.api.HostedURL hosted = 6;
  if (this->has_hosted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hosted_);
  }

  // .clarifai.api.VideoInfo video_info = 7;
  if (this->has_video_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *video_info_);
  }

  // bool allow_duplicate_url = 4;
  if (this->allow_duplicate_url() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Video::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Video)
  GOOGLE_DCHECK_NE(&from, this);
  const Video* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Video>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Video)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Video)
    MergeFrom(*source);
  }
}

void Video::MergeFrom(const Video& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Video)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.base64().size() > 0) {

    base64_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base64_);
  }
  if (from.thumbnail_url().size() > 0) {

    thumbnail_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  if (from.has_hosted()) {
    _internal_mutable_hosted()->::clarifai::api::HostedURL::MergeFrom(from._internal_hosted());
  }
  if (from.has_video_info()) {
    _internal_mutable_video_info()->::clarifai::api::VideoInfo::MergeFrom(from._internal_video_info());
  }
  if (from.allow_duplicate_url() != 0) {
    _internal_set_allow_duplicate_url(from._internal_allow_duplicate_url());
  }
}

void Video::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Video::CopyFrom(const Video& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Video::IsInitialized() const {
  return true;
}

void Video::InternalSwap(Video* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  base64_.Swap(&other->base64_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  thumbnail_url_.Swap(&other->thumbnail_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hosted_, other->hosted_);
  swap(video_info_, other->video_info_);
  swap(allow_duplicate_url_, other->allow_duplicate_url_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Video::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoInfo::InitAsDefaultInstance() {
}
class VideoInfo::_Internal {
 public:
};

VideoInfo::VideoInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.VideoInfo)
}
VideoInfo::VideoInfo(const VideoInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  video_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_video_format().empty()) {
    video_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.video_format_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_seconds_) -
    reinterpret_cast<char*>(&width_)) + sizeof(duration_seconds_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.VideoInfo)
}

void VideoInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  video_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_seconds_) -
      reinterpret_cast<char*>(&width_)) + sizeof(duration_seconds_));
}

VideoInfo::~VideoInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.VideoInfo)
  SharedDtor();
}

void VideoInfo::SharedDtor() {
  video_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoInfo& VideoInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void VideoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.VideoInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  video_format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_seconds_) -
      reinterpret_cast<char*>(&width_)) + sizeof(duration_seconds_));
  _internal_metadata_.Clear();
}

const char* VideoInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string video_format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_video_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.VideoInfo.video_format"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bit_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bit_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frame_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          frame_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float duration_seconds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.VideoInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // float fps = 3;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_fps(), target);
  }

  // string video_format = 4;
  if (this->video_format().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_video_format().data(), static_cast<int>(this->_internal_video_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.VideoInfo.video_format");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_video_format(), target);
  }

  // int32 bit_rate = 5;
  if (this->bit_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_bit_rate(), target);
  }

  // int32 frame_count = 6;
  if (this->frame_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_frame_count(), target);
  }

  // float duration_seconds = 7;
  if (!(this->duration_seconds() <= 0 && this->duration_seconds() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_duration_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.VideoInfo)
  return target;
}

size_t VideoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.VideoInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string video_format = 4;
  if (this->video_format().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_video_format());
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // float fps = 3;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 bit_rate = 5;
  if (this->bit_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bit_rate());
  }

  // int32 frame_count = 6;
  if (this->frame_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_count());
  }

  // float duration_seconds = 7;
  if (!(this->duration_seconds() <= 0 && this->duration_seconds() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.VideoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.VideoInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.VideoInfo)
    MergeFrom(*source);
  }
}

void VideoInfo::MergeFrom(const VideoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.VideoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.video_format().size() > 0) {

    video_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.video_format_);
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.fps() <= 0 && from.fps() >= 0)) {
    _internal_set_fps(from._internal_fps());
  }
  if (from.bit_rate() != 0) {
    _internal_set_bit_rate(from._internal_bit_rate());
  }
  if (from.frame_count() != 0) {
    _internal_set_frame_count(from._internal_frame_count());
  }
  if (!(from.duration_seconds() <= 0 && from.duration_seconds() >= 0)) {
    _internal_set_duration_seconds(from._internal_duration_seconds());
  }
}

void VideoInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.VideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoInfo::CopyFrom(const VideoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.VideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoInfo::IsInitialized() const {
  return true;
}

void VideoInfo::InternalSwap(VideoInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  video_format_.Swap(&other->video_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(fps_, other->fps_);
  swap(bit_rate_, other->bit_rate_);
  swap(frame_count_, other->frame_count_);
  swap(duration_seconds_, other->duration_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Workflow::InitAsDefaultInstance() {
  ::clarifai::api::_Workflow_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Workflow_default_instance_._instance.get_mutable()->metadata_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::clarifai::api::_Workflow_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::clarifai::api::Visibility*>(
      ::clarifai::api::Visibility::internal_default_instance());
  ::clarifai::api::_Workflow_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Workflow_default_instance_._instance.get_mutable()->version_ = const_cast< ::clarifai::api::WorkflowVersion*>(
      ::clarifai::api::WorkflowVersion::internal_default_instance());
}
class Workflow::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Workflow* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& metadata(const Workflow* msg);
  static const ::clarifai::api::Visibility& visibility(const Workflow* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Workflow* msg);
  static const ::clarifai::api::WorkflowVersion& version(const Workflow* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Workflow::_Internal::created_at(const Workflow* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
Workflow::_Internal::metadata(const Workflow* msg) {
  return *msg->metadata_;
}
const ::clarifai::api::Visibility&
Workflow::_Internal::visibility(const Workflow* msg) {
  return *msg->visibility_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Workflow::_Internal::modified_at(const Workflow* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::WorkflowVersion&
Workflow::_Internal::version(const Workflow* msg) {
  return *msg->version_;
}
void Workflow::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Workflow::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
void Workflow::clear_modified_at() {
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
Workflow::Workflow()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Workflow)
}
Workflow::Workflow(const Workflow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      nodes_(from.nodes_),
      use_cases_(from.use_cases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notes().empty()) {
    notes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::clarifai::api::WorkflowVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  ::memcpy(&is_starred_, &from.is_starred_,
    static_cast<size_t>(reinterpret_cast<char*>(&star_count_) -
    reinterpret_cast<char*>(&is_starred_)) + sizeof(star_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Workflow)
}

void Workflow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_count_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(star_count_));
}

Workflow::~Workflow() {
  // @@protoc_insertion_point(destructor:clarifai.api.Workflow)
  SharedDtor();
}

void Workflow::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete visibility_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete version_;
}

void Workflow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Workflow& Workflow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Workflow::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Workflow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  use_cases_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  ::memset(&is_starred_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_count_) -
      reinterpret_cast<char*>(&is_starred_)) + sizeof(star_count_));
  _internal_metadata_.Clear();
}

const char* Workflow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Workflow.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Workflow.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowNode nodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Workflow.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.WorkflowVersion version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_starred = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 star_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          star_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Workflow.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Workflow.notes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string use_cases = 14 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_use_cases();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Workflow.use_cases"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Workflow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Workflow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::created_at(this), target, stream);
  }

  // repeated .clarifai.api.WorkflowNode nodes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_nodes(i), target, stream);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metadata(this), target, stream);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::visibility(this), target, stream);
  }

  // string user_id = 7;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.user_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_id(), target);
  }

  // .google.protobuf.Timestamp modified_at = 8;
  if (this->has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::modified_at(this), target, stream);
  }

  // .clarifai.api.WorkflowVersion version = 9;
  if (this->has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::version(this), target, stream);
  }

  // bool is_starred = 10;
  if (this->is_starred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_starred(), target);
  }

  // int32 star_count = 11;
  if (this->star_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_star_count(), target);
  }

  // string description = 12;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.description");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_description(), target);
  }

  // string notes = 13;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.notes");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_notes(), target);
  }

  // repeated string use_cases = 14 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (int i = 0, n = this->_internal_use_cases_size(); i < n; i++) {
    const auto& s = this->_internal_use_cases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.use_cases");
    target = stream->WriteString(14, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Workflow)
  return target;
}

size_t Workflow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Workflow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowNode nodes = 4;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string use_cases = 14 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(use_cases_.size());
  for (int i = 0, n = use_cases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      use_cases_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 7;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string description = 12;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string notes = 13;
  if (this->notes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .google.protobuf.Timestamp modified_at = 8;
  if (this->has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.WorkflowVersion version = 9;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // bool is_starred = 10;
  if (this->is_starred() != 0) {
    total_size += 1 + 1;
  }

  // int32 star_count = 11;
  if (this->star_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_star_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Workflow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Workflow)
  GOOGLE_DCHECK_NE(&from, this);
  const Workflow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Workflow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Workflow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Workflow)
    MergeFrom(*source);
  }
}

void Workflow::MergeFrom(const Workflow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Workflow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  use_cases_.MergeFrom(from.use_cases_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.notes().size() > 0) {

    notes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from.has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from.has_modified_at()) {
    _internal_mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from.has_version()) {
    _internal_mutable_version()->::clarifai::api::WorkflowVersion::MergeFrom(from._internal_version());
  }
  if (from.is_starred() != 0) {
    _internal_set_is_starred(from._internal_is_starred());
  }
  if (from.star_count() != 0) {
    _internal_set_star_count(from._internal_star_count());
  }
}

void Workflow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Workflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Workflow::CopyFrom(const Workflow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Workflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workflow::IsInitialized() const {
  return true;
}

void Workflow::InternalSwap(Workflow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  use_cases_.InternalSwap(&other->use_cases_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(created_at_, other->created_at_);
  swap(metadata_, other->metadata_);
  swap(visibility_, other->visibility_);
  swap(modified_at_, other->modified_at_);
  swap(version_, other->version_);
  swap(is_starred_, other->is_starred_);
  swap(star_count_, other->star_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Workflow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkflowVersion::InitAsDefaultInstance() {
  ::clarifai::api::_WorkflowVersion_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_WorkflowVersion_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_WorkflowVersion_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::clarifai::api::Visibility*>(
      ::clarifai::api::Visibility::internal_default_instance());
  ::clarifai::api::_WorkflowVersion_default_instance_._instance.get_mutable()->metadata_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class WorkflowVersion::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const WorkflowVersion* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const WorkflowVersion* msg);
  static const ::clarifai::api::Visibility& visibility(const WorkflowVersion* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& metadata(const WorkflowVersion* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
WorkflowVersion::_Internal::created_at(const WorkflowVersion* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
WorkflowVersion::_Internal::modified_at(const WorkflowVersion* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::Visibility&
WorkflowVersion::_Internal::visibility(const WorkflowVersion* msg) {
  return *msg->visibility_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
WorkflowVersion::_Internal::metadata(const WorkflowVersion* msg) {
  return *msg->metadata_;
}
void WorkflowVersion::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void WorkflowVersion::clear_modified_at() {
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void WorkflowVersion::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
WorkflowVersion::WorkflowVersion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.WorkflowVersion)
}
WorkflowVersion::WorkflowVersion(const WorkflowVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  license_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_license().empty()) {
    license_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.license_);
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowVersion)
}

void WorkflowVersion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkflowVersion_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  license_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(metadata_));
}

WorkflowVersion::~WorkflowVersion() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowVersion)
  SharedDtor();
}

void WorkflowVersion::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  license_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete visibility_;
  if (this != internal_default_instance()) delete metadata_;
}

void WorkflowVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowVersion& WorkflowVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkflowVersion_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void WorkflowVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  license_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear();
}

const char* WorkflowVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowVersion.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowVersion.workflow_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowNode nodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowVersion.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowVersion.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowVersion.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string license = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_license();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowVersion.license"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkflowVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 4;
  if (this->has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::modified_at(this), target, stream);
  }

  // .clarifai.api.Visibility visibility = 5;
  if (this->has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::visibility(this), target, stream);
  }

  // repeated .clarifai.api.WorkflowNode nodes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_nodes(i), target, stream);
  }

  // .google.protobuf.Struct metadata = 7;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::metadata(this), target, stream);
  }

  // string app_id = 8;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.app_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_app_id(), target);
  }

  // string user_id = 9;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.user_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_user_id(), target);
  }

  // string description = 10;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.description");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_description(), target);
  }

  // string license = 11;
  if (this->license().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.license");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_license(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowVersion)
  return target;
}

size_t WorkflowVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowNode nodes = 6;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // string app_id = 8;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 9;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string description = 10;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string license = 11;
  if (this->license().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 4;
  if (this->has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.Visibility visibility = 5;
  if (this->has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .google.protobuf.Struct metadata = 7;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.WorkflowVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkflowVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.WorkflowVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.WorkflowVersion)
    MergeFrom(*source);
  }
}

void WorkflowVersion::MergeFrom(const WorkflowVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.workflow_id().size() > 0) {

    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.license().size() > 0) {

    license_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.license_);
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_modified_at()) {
    _internal_mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from.has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
}

void WorkflowVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.WorkflowVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowVersion::CopyFrom(const WorkflowVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowVersion::IsInitialized() const {
  return true;
}

void WorkflowVersion::InternalSwap(WorkflowVersion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  workflow_id_.Swap(&other->workflow_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  license_.Swap(&other->license_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(created_at_, other->created_at_);
  swap(modified_at_, other->modified_at_);
  swap(visibility_, other->visibility_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkflowNode::InitAsDefaultInstance() {
  ::clarifai::api::_WorkflowNode_default_instance_._instance.get_mutable()->model_ = const_cast< ::clarifai::api::Model*>(
      ::clarifai::api::Model::internal_default_instance());
}
class WorkflowNode::_Internal {
 public:
  static const ::clarifai::api::Model& model(const WorkflowNode* msg);
};

const ::clarifai::api::Model&
WorkflowNode::_Internal::model(const WorkflowNode* msg) {
  return *msg->model_;
}
WorkflowNode::WorkflowNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.WorkflowNode)
}
WorkflowNode::WorkflowNode(const WorkflowNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      node_inputs_(from.node_inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::api::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  suppress_output_ = from.suppress_output_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowNode)
}

void WorkflowNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkflowNode_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&suppress_output_) -
      reinterpret_cast<char*>(&model_)) + sizeof(suppress_output_));
}

WorkflowNode::~WorkflowNode() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowNode)
  SharedDtor();
}

void WorkflowNode::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete model_;
}

void WorkflowNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowNode& WorkflowNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkflowNode_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void WorkflowNode::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_inputs_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  suppress_output_ = false;
  _internal_metadata_.Clear();
}

const char* WorkflowNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowNode.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.NodeInput node_inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool suppress_output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          suppress_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkflowNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowNode.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.Model model = 2;
  if (this->has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model(this), target, stream);
  }

  // repeated .clarifai.api.NodeInput node_inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_node_inputs(i), target, stream);
  }

  // bool suppress_output = 4;
  if (this->suppress_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_suppress_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowNode)
  return target;
}

size_t WorkflowNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.NodeInput node_inputs = 3;
  total_size += 1UL * this->_internal_node_inputs_size();
  for (const auto& msg : this->node_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.Model model = 2;
  if (this->has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  // bool suppress_output = 4;
  if (this->suppress_output() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.WorkflowNode)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkflowNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.WorkflowNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.WorkflowNode)
    MergeFrom(*source);
  }
}

void WorkflowNode::MergeFrom(const WorkflowNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_inputs_.MergeFrom(from.node_inputs_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_model()) {
    _internal_mutable_model()->::clarifai::api::Model::MergeFrom(from._internal_model());
  }
  if (from.suppress_output() != 0) {
    _internal_set_suppress_output(from._internal_suppress_output());
  }
}

void WorkflowNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.WorkflowNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowNode::CopyFrom(const WorkflowNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowNode::IsInitialized() const {
  return true;
}

void WorkflowNode::InternalSwap(WorkflowNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_inputs_.InternalSwap(&other->node_inputs_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(model_, other->model_);
  swap(suppress_output_, other->suppress_output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeInput::InitAsDefaultInstance() {
}
class NodeInput::_Internal {
 public:
};

NodeInput::NodeInput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.NodeInput)
}
NodeInput::NodeInput(const NodeInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.NodeInput)
}

void NodeInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInput_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NodeInput::~NodeInput() {
  // @@protoc_insertion_point(destructor:clarifai.api.NodeInput)
  SharedDtor();
}

void NodeInput::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInput& NodeInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInput_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void NodeInput::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.NodeInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* NodeInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.NodeInput.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.NodeInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.NodeInput.node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.NodeInput)
  return target;
}

size_t NodeInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.NodeInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.NodeInput)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.NodeInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.NodeInput)
    MergeFrom(*source);
  }
}

void NodeInput::MergeFrom(const NodeInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.NodeInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
}

void NodeInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.NodeInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInput::CopyFrom(const NodeInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.NodeInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInput::IsInitialized() const {
  return true;
}

void NodeInput::InternalSwap(NodeInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkflowResult::InitAsDefaultInstance() {
  ::clarifai::api::_WorkflowResult_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_WorkflowResult_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_WorkflowResult_default_instance_._instance.get_mutable()->model_ = const_cast< ::clarifai::api::Model*>(
      ::clarifai::api::Model::internal_default_instance());
  ::clarifai::api::_WorkflowResult_default_instance_._instance.get_mutable()->input_ = const_cast< ::clarifai::api::Input*>(
      ::clarifai::api::Input::internal_default_instance());
}
class WorkflowResult::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const WorkflowResult* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const WorkflowResult* msg);
  static const ::clarifai::api::Model& model(const WorkflowResult* msg);
  static const ::clarifai::api::Input& input(const WorkflowResult* msg);
};

const ::clarifai::api::status::Status&
WorkflowResult::_Internal::status(const WorkflowResult* msg) {
  return *msg->status_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
WorkflowResult::_Internal::created_at(const WorkflowResult* msg) {
  return *msg->created_at_;
}
const ::clarifai::api::Model&
WorkflowResult::_Internal::model(const WorkflowResult* msg) {
  return *msg->model_;
}
const ::clarifai::api::Input&
WorkflowResult::_Internal::input(const WorkflowResult* msg) {
  return *msg->input_;
}
void WorkflowResult::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void WorkflowResult::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
WorkflowResult::WorkflowResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.WorkflowResult)
}
WorkflowResult::WorkflowResult(const WorkflowResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::api::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  suppress_output_ = from.suppress_output_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowResult)
}

void WorkflowResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkflowResult_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&suppress_output_) -
      reinterpret_cast<char*>(&status_)) + sizeof(suppress_output_));
}

WorkflowResult::~WorkflowResult() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowResult)
  SharedDtor();
}

void WorkflowResult::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete model_;
  if (this != internal_default_instance()) delete input_;
}

void WorkflowResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowResult& WorkflowResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkflowResult_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void WorkflowResult::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  suppress_output_ = false;
  _internal_metadata_.Clear();
}

const char* WorkflowResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowResult.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Output outputs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool suppress_output = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          suppress_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkflowResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowResult.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.status.Status status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::created_at(this), target, stream);
  }

  // .clarifai.api.Model model = 4;
  if (this->has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::model(this), target, stream);
  }

  // .clarifai.api.Input input = 5;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::input(this), target, stream);
  }

  // repeated .clarifai.api.Output outputs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_outputs(i), target, stream);
  }

  // bool suppress_output = 7;
  if (this->suppress_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_suppress_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowResult)
  return target;
}

size_t WorkflowResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Output outputs = 6;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.status.Status status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .clarifai.api.Model model = 4;
  if (this->has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  // .clarifai.api.Input input = 5;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // bool suppress_output = 7;
  if (this->suppress_output() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.WorkflowResult)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkflowResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.WorkflowResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.WorkflowResult)
    MergeFrom(*source);
  }
}

void WorkflowResult::MergeFrom(const WorkflowResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_model()) {
    _internal_mutable_model()->::clarifai::api::Model::MergeFrom(from._internal_model());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
  if (from.suppress_output() != 0) {
    _internal_set_suppress_output(from._internal_suppress_output());
  }
}

void WorkflowResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.WorkflowResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowResult::CopyFrom(const WorkflowResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowResult::IsInitialized() const {
  return true;
}

void WorkflowResult::InternalSwap(WorkflowResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  outputs_.InternalSwap(&other->outputs_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(created_at_, other->created_at_);
  swap(model_, other->model_);
  swap(input_, other->input_);
  swap(suppress_output_, other->suppress_output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkflowState::InitAsDefaultInstance() {
}
class WorkflowState::_Internal {
 public:
};

WorkflowState::WorkflowState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.WorkflowState)
}
WorkflowState::WorkflowState(const WorkflowState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowState)
}

void WorkflowState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkflowState_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WorkflowState::~WorkflowState() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowState)
  SharedDtor();
}

void WorkflowState::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkflowState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowState& WorkflowState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkflowState_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void WorkflowState::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* WorkflowState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowState.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkflowState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowState.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowState)
  return target;
}

size_t WorkflowState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.WorkflowState)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkflowState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.WorkflowState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.WorkflowState)
    MergeFrom(*source);
  }
}

void WorkflowState::MergeFrom(const WorkflowState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void WorkflowState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.WorkflowState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowState::CopyFrom(const WorkflowState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowState::IsInitialized() const {
  return true;
}

void WorkflowState::InternalSwap(WorkflowState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppDuplication::InitAsDefaultInstance() {
  ::clarifai::api::_AppDuplication_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_AppDuplication_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_AppDuplication_default_instance_._instance.get_mutable()->last_modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_AppDuplication_default_instance_._instance.get_mutable()->filter_ = const_cast< ::clarifai::api::AppDuplicationFilters*>(
      ::clarifai::api::AppDuplicationFilters::internal_default_instance());
}
class AppDuplication::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const AppDuplication* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const AppDuplication* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_modified_at(const AppDuplication* msg);
  static const ::clarifai::api::AppDuplicationFilters& filter(const AppDuplication* msg);
};

const ::clarifai::api::status::Status&
AppDuplication::_Internal::status(const AppDuplication* msg) {
  return *msg->status_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
AppDuplication::_Internal::created_at(const AppDuplication* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
AppDuplication::_Internal::last_modified_at(const AppDuplication* msg) {
  return *msg->last_modified_at_;
}
const ::clarifai::api::AppDuplicationFilters&
AppDuplication::_Internal::filter(const AppDuplication* msg) {
  return *msg->filter_;
}
void AppDuplication::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void AppDuplication::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void AppDuplication::clear_last_modified_at() {
  if (GetArenaNoVirtual() == nullptr && last_modified_at_ != nullptr) {
    delete last_modified_at_;
  }
  last_modified_at_ = nullptr;
}
AppDuplication::AppDuplication()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.AppDuplication)
}
AppDuplication::AppDuplication(const AppDuplication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  new_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_app_id().empty()) {
    new_app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_app_id_);
  }
  new_app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_app_name().empty()) {
    new_app_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_app_name_);
  }
  existing_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_existing_app_id().empty()) {
    existing_app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.existing_app_id_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_last_modified_at()) {
    last_modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_modified_at_);
  } else {
    last_modified_at_ = nullptr;
  }
  if (from._internal_has_filter()) {
    filter_ = new ::clarifai::api::AppDuplicationFilters(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AppDuplication)
}

void AppDuplication::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppDuplication_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  existing_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_) -
      reinterpret_cast<char*>(&status_)) + sizeof(filter_));
}

AppDuplication::~AppDuplication() {
  // @@protoc_insertion_point(destructor:clarifai.api.AppDuplication)
  SharedDtor();
}

void AppDuplication::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_app_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  existing_app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete last_modified_at_;
  if (this != internal_default_instance()) delete filter_;
}

void AppDuplication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppDuplication& AppDuplication::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppDuplication_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void AppDuplication::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AppDuplication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_app_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  existing_app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && last_modified_at_ != nullptr) {
    delete last_modified_at_;
  }
  last_modified_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AppDuplication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AppDuplication.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AppDuplication.new_app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_app_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_new_app_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AppDuplication.new_app_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_modified_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.AppDuplicationFilters filter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string existing_app_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_existing_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AppDuplication.existing_app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppDuplication::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AppDuplication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppDuplication.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string new_app_id = 2;
  if (this->new_app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_app_id().data(), static_cast<int>(this->_internal_new_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppDuplication.new_app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_app_id(), target);
  }

  // string new_app_name = 3;
  if (this->new_app_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_app_name().data(), static_cast<int>(this->_internal_new_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppDuplication.new_app_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_new_app_name(), target);
  }

  // .clarifai.api.status.Status status = 4;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp last_modified_at = 6;
  if (this->has_last_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::last_modified_at(this), target, stream);
  }

  // .clarifai.api.AppDuplicationFilters filter = 7;
  if (this->has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::filter(this), target, stream);
  }

  // string existing_app_id = 8;
  if (this->existing_app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_existing_app_id().data(), static_cast<int>(this->_internal_existing_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppDuplication.existing_app_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_existing_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AppDuplication)
  return target;
}

size_t AppDuplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AppDuplication)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string new_app_id = 2;
  if (this->new_app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_app_id());
  }

  // string new_app_name = 3;
  if (this->new_app_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_app_name());
  }

  // string existing_app_id = 8;
  if (this->existing_app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_existing_app_id());
  }

  // .clarifai.api.status.Status status = 4;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp last_modified_at = 6;
  if (this->has_last_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_modified_at_);
  }

  // .clarifai.api.AppDuplicationFilters filter = 7;
  if (this->has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppDuplication::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.AppDuplication)
  GOOGLE_DCHECK_NE(&from, this);
  const AppDuplication* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppDuplication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.AppDuplication)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.AppDuplication)
    MergeFrom(*source);
  }
}

void AppDuplication::MergeFrom(const AppDuplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AppDuplication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.new_app_id().size() > 0) {

    new_app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_app_id_);
  }
  if (from.new_app_name().size() > 0) {

    new_app_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_app_name_);
  }
  if (from.existing_app_id().size() > 0) {

    existing_app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.existing_app_id_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_last_modified_at()) {
    _internal_mutable_last_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_modified_at());
  }
  if (from.has_filter()) {
    _internal_mutable_filter()->::clarifai::api::AppDuplicationFilters::MergeFrom(from._internal_filter());
  }
}

void AppDuplication::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.AppDuplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppDuplication::CopyFrom(const AppDuplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AppDuplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppDuplication::IsInitialized() const {
  return true;
}

void AppDuplication::InternalSwap(AppDuplication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_app_id_.Swap(&other->new_app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_app_name_.Swap(&other->new_app_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  existing_app_id_.Swap(&other->existing_app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(created_at_, other->created_at_);
  swap(last_modified_at_, other->last_modified_at_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppDuplication::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppDuplicationFilters::InitAsDefaultInstance() {
}
class AppDuplicationFilters::_Internal {
 public:
};

AppDuplicationFilters::AppDuplicationFilters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.AppDuplicationFilters)
}
AppDuplicationFilters::AppDuplicationFilters(const AppDuplicationFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&copy_inputs_, &from.copy_inputs_,
    static_cast<size_t>(reinterpret_cast<char*>(&copy_workflows_) -
    reinterpret_cast<char*>(&copy_inputs_)) + sizeof(copy_workflows_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AppDuplicationFilters)
}

void AppDuplicationFilters::SharedCtor() {
  ::memset(&copy_inputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copy_workflows_) -
      reinterpret_cast<char*>(&copy_inputs_)) + sizeof(copy_workflows_));
}

AppDuplicationFilters::~AppDuplicationFilters() {
  // @@protoc_insertion_point(destructor:clarifai.api.AppDuplicationFilters)
  SharedDtor();
}

void AppDuplicationFilters::SharedDtor() {
}

void AppDuplicationFilters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppDuplicationFilters& AppDuplicationFilters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppDuplicationFilters_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void AppDuplicationFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AppDuplicationFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&copy_inputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copy_workflows_) -
      reinterpret_cast<char*>(&copy_inputs_)) + sizeof(copy_workflows_));
  _internal_metadata_.Clear();
}

const char* AppDuplicationFilters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool copy_inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          copy_inputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool copy_concepts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          copy_concepts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool copy_annotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          copy_annotations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool copy_models = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          copy_models_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool copy_workflows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          copy_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppDuplicationFilters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AppDuplicationFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool copy_inputs = 1;
  if (this->copy_inputs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_copy_inputs(), target);
  }

  // bool copy_concepts = 2;
  if (this->copy_concepts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_copy_concepts(), target);
  }

  // bool copy_annotations = 3;
  if (this->copy_annotations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_copy_annotations(), target);
  }

  // bool copy_models = 4;
  if (this->copy_models() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_copy_models(), target);
  }

  // bool copy_workflows = 5;
  if (this->copy_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_copy_workflows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AppDuplicationFilters)
  return target;
}

size_t AppDuplicationFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AppDuplicationFilters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool copy_inputs = 1;
  if (this->copy_inputs() != 0) {
    total_size += 1 + 1;
  }

  // bool copy_concepts = 2;
  if (this->copy_concepts() != 0) {
    total_size += 1 + 1;
  }

  // bool copy_annotations = 3;
  if (this->copy_annotations() != 0) {
    total_size += 1 + 1;
  }

  // bool copy_models = 4;
  if (this->copy_models() != 0) {
    total_size += 1 + 1;
  }

  // bool copy_workflows = 5;
  if (this->copy_workflows() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppDuplicationFilters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.AppDuplicationFilters)
  GOOGLE_DCHECK_NE(&from, this);
  const AppDuplicationFilters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppDuplicationFilters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.AppDuplicationFilters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.AppDuplicationFilters)
    MergeFrom(*source);
  }
}

void AppDuplicationFilters::MergeFrom(const AppDuplicationFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AppDuplicationFilters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.copy_inputs() != 0) {
    _internal_set_copy_inputs(from._internal_copy_inputs());
  }
  if (from.copy_concepts() != 0) {
    _internal_set_copy_concepts(from._internal_copy_concepts());
  }
  if (from.copy_annotations() != 0) {
    _internal_set_copy_annotations(from._internal_copy_annotations());
  }
  if (from.copy_models() != 0) {
    _internal_set_copy_models(from._internal_copy_models());
  }
  if (from.copy_workflows() != 0) {
    _internal_set_copy_workflows(from._internal_copy_workflows());
  }
}

void AppDuplicationFilters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.AppDuplicationFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppDuplicationFilters::CopyFrom(const AppDuplicationFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AppDuplicationFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppDuplicationFilters::IsInitialized() const {
  return true;
}

void AppDuplicationFilters::InternalSwap(AppDuplicationFilters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(copy_inputs_, other->copy_inputs_);
  swap(copy_concepts_, other->copy_concepts_);
  swap(copy_annotations_, other->copy_annotations_);
  swap(copy_models_, other->copy_models_);
  swap(copy_workflows_, other->copy_workflows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppDuplicationFilters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelOrder::InitAsDefaultInstance() {
  ::clarifai::api::_LabelOrder_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_LabelOrder_default_instance_._instance.get_mutable()->desired_fulfill_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_LabelOrder_default_instance_._instance.get_mutable()->estimate_fulfill_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_LabelOrder_default_instance_._instance.get_mutable()->task_ = const_cast< ::clarifai::api::Task*>(
      ::clarifai::api::Task::internal_default_instance());
  ::clarifai::api::_LabelOrder_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_LabelOrder_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class LabelOrder::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const LabelOrder* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& desired_fulfill_time(const LabelOrder* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& estimate_fulfill_time(const LabelOrder* msg);
  static const ::clarifai::api::Task& task(const LabelOrder* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const LabelOrder* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const LabelOrder* msg);
};

const ::clarifai::api::status::Status&
LabelOrder::_Internal::status(const LabelOrder* msg) {
  return *msg->status_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LabelOrder::_Internal::desired_fulfill_time(const LabelOrder* msg) {
  return *msg->desired_fulfill_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LabelOrder::_Internal::estimate_fulfill_time(const LabelOrder* msg) {
  return *msg->estimate_fulfill_time_;
}
const ::clarifai::api::Task&
LabelOrder::_Internal::task(const LabelOrder* msg) {
  return *msg->task_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LabelOrder::_Internal::created_at(const LabelOrder* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LabelOrder::_Internal::modified_at(const LabelOrder* msg) {
  return *msg->modified_at_;
}
void LabelOrder::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void LabelOrder::clear_desired_fulfill_time() {
  if (GetArenaNoVirtual() == nullptr && desired_fulfill_time_ != nullptr) {
    delete desired_fulfill_time_;
  }
  desired_fulfill_time_ = nullptr;
}
void LabelOrder::clear_estimate_fulfill_time() {
  if (GetArenaNoVirtual() == nullptr && estimate_fulfill_time_ != nullptr) {
    delete estimate_fulfill_time_;
  }
  estimate_fulfill_time_ = nullptr;
}
void LabelOrder::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void LabelOrder::clear_modified_at() {
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
LabelOrder::LabelOrder()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.LabelOrder)
}
LabelOrder::LabelOrder(const LabelOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_desired_fulfill_time()) {
    desired_fulfill_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.desired_fulfill_time_);
  } else {
    desired_fulfill_time_ = nullptr;
  }
  if (from._internal_has_estimate_fulfill_time()) {
    estimate_fulfill_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.estimate_fulfill_time_);
  } else {
    estimate_fulfill_time_ = nullptr;
  }
  if (from._internal_has_task()) {
    task_ = new ::clarifai::api::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  ::memcpy(&auto_release_, &from.auto_release_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_empty_tag_) -
    reinterpret_cast<char*>(&auto_release_)) + sizeof(allow_empty_tag_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LabelOrder)
}

void LabelOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelOrder_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_empty_tag_) -
      reinterpret_cast<char*>(&status_)) + sizeof(allow_empty_tag_));
}

LabelOrder::~LabelOrder() {
  // @@protoc_insertion_point(destructor:clarifai.api.LabelOrder)
  SharedDtor();
}

void LabelOrder::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete desired_fulfill_time_;
  if (this != internal_default_instance()) delete estimate_fulfill_time_;
  if (this != internal_default_instance()) delete task_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
}

void LabelOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelOrder& LabelOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelOrder_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void LabelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LabelOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && desired_fulfill_time_ != nullptr) {
    delete desired_fulfill_time_;
  }
  desired_fulfill_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && estimate_fulfill_time_ != nullptr) {
    delete estimate_fulfill_time_;
  }
  estimate_fulfill_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  ::memset(&auto_release_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_empty_tag_) -
      reinterpret_cast<char*>(&auto_release_)) + sizeof(allow_empty_tag_));
  _internal_metadata_.Clear();
}

const char* LabelOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.LabelOrder.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.LabelOrder.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool auto_release = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          auto_release_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_empty_tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          allow_empty_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp desired_fulfill_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_desired_fulfill_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp estimate_fulfill_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_estimate_fulfill_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Task task = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LabelOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.LabelOrder.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.LabelOrder.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .clarifai.api.status.Status status = 3;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  // bool auto_release = 4;
  if (this->auto_release() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_auto_release(), target);
  }

  // bool allow_empty_tag = 5;
  if (this->allow_empty_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_allow_empty_tag(), target);
  }

  // .google.protobuf.Timestamp desired_fulfill_time = 6;
  if (this->has_desired_fulfill_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::desired_fulfill_time(this), target, stream);
  }

  // .google.protobuf.Timestamp estimate_fulfill_time = 7;
  if (this->has_estimate_fulfill_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::estimate_fulfill_time(this), target, stream);
  }

  // .clarifai.api.Task task = 8;
  if (this->has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::task(this), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 10;
  if (this->has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::modified_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LabelOrder)
  return target;
}

size_t LabelOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LabelOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .clarifai.api.status.Status status = 3;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Timestamp desired_fulfill_time = 6;
  if (this->has_desired_fulfill_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *desired_fulfill_time_);
  }

  // .google.protobuf.Timestamp estimate_fulfill_time = 7;
  if (this->has_estimate_fulfill_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *estimate_fulfill_time_);
  }

  // .clarifai.api.Task task = 8;
  if (this->has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 10;
  if (this->has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // bool auto_release = 4;
  if (this->auto_release() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_empty_tag = 5;
  if (this->allow_empty_tag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.LabelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.LabelOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.LabelOrder)
    MergeFrom(*source);
  }
}

void LabelOrder::MergeFrom(const LabelOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LabelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_desired_fulfill_time()) {
    _internal_mutable_desired_fulfill_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_desired_fulfill_time());
  }
  if (from.has_estimate_fulfill_time()) {
    _internal_mutable_estimate_fulfill_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_estimate_fulfill_time());
  }
  if (from.has_task()) {
    _internal_mutable_task()->::clarifai::api::Task::MergeFrom(from._internal_task());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_modified_at()) {
    _internal_mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from.auto_release() != 0) {
    _internal_set_auto_release(from._internal_auto_release());
  }
  if (from.allow_empty_tag() != 0) {
    _internal_set_allow_empty_tag(from._internal_allow_empty_tag());
  }
}

void LabelOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.LabelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelOrder::CopyFrom(const LabelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LabelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelOrder::IsInitialized() const {
  return true;
}

void LabelOrder::InternalSwap(LabelOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(desired_fulfill_time_, other->desired_fulfill_time_);
  swap(estimate_fulfill_time_, other->estimate_fulfill_time_);
  swap(task_, other->task_);
  swap(created_at_, other->created_at_);
  swap(modified_at_, other->modified_at_);
  swap(auto_release_, other->auto_release_);
  swap(allow_empty_tag_, other->allow_empty_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Task::InitAsDefaultInstance() {
  ::clarifai::api::_Task_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Task_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Task_default_instance_._instance.get_mutable()->worker_ = const_cast< ::clarifai::api::TaskWorker*>(
      ::clarifai::api::TaskWorker::internal_default_instance());
  ::clarifai::api::_Task_default_instance_._instance.get_mutable()->input_source_ = const_cast< ::clarifai::api::TaskInputSource*>(
      ::clarifai::api::TaskInputSource::internal_default_instance());
  ::clarifai::api::_Task_default_instance_._instance.get_mutable()->ai_assistant_ = const_cast< ::clarifai::api::TaskAIAssistant*>(
      ::clarifai::api::TaskAIAssistant::internal_default_instance());
  ::clarifai::api::_Task_default_instance_._instance.get_mutable()->review_ = const_cast< ::clarifai::api::TaskReview*>(
      ::clarifai::api::TaskReview::internal_default_instance());
  ::clarifai::api::_Task_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_Task_default_instance_._instance.get_mutable()->ai_assist_params_ = const_cast< ::clarifai::api::AiAssistParameters*>(
      ::clarifai::api::AiAssistParameters::internal_default_instance());
  ::clarifai::api::_Task_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::clarifai::api::Visibility*>(
      ::clarifai::api::Visibility::internal_default_instance());
}
class Task::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Task* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Task* msg);
  static const ::clarifai::api::TaskWorker& worker(const Task* msg);
  static const ::clarifai::api::TaskInputSource& input_source(const Task* msg);
  static const ::clarifai::api::TaskAIAssistant& ai_assistant(const Task* msg);
  static const ::clarifai::api::TaskReview& review(const Task* msg);
  static const ::clarifai::api::status::Status& status(const Task* msg);
  static const ::clarifai::api::AiAssistParameters& ai_assist_params(const Task* msg);
  static const ::clarifai::api::Visibility& visibility(const Task* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Task::_Internal::created_at(const Task* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Task::_Internal::modified_at(const Task* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::TaskWorker&
Task::_Internal::worker(const Task* msg) {
  return *msg->worker_;
}
const ::clarifai::api::TaskInputSource&
Task::_Internal::input_source(const Task* msg) {
  return *msg->input_source_;
}
const ::clarifai::api::TaskAIAssistant&
Task::_Internal::ai_assistant(const Task* msg) {
  return *msg->ai_assistant_;
}
const ::clarifai::api::TaskReview&
Task::_Internal::review(const Task* msg) {
  return *msg->review_;
}
const ::clarifai::api::status::Status&
Task::_Internal::status(const Task* msg) {
  return *msg->status_;
}
const ::clarifai::api::AiAssistParameters&
Task::_Internal::ai_assist_params(const Task* msg) {
  return *msg->ai_assist_params_;
}
const ::clarifai::api::Visibility&
Task::_Internal::visibility(const Task* msg) {
  return *msg->visibility_;
}
void Task::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Task::clear_modified_at() {
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void Task::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
Task::Task()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_ids_(from.concept_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_worker()) {
    worker_ = new ::clarifai::api::TaskWorker(*from.worker_);
  } else {
    worker_ = nullptr;
  }
  if (from._internal_has_input_source()) {
    input_source_ = new ::clarifai::api::TaskInputSource(*from.input_source_);
  } else {
    input_source_ = nullptr;
  }
  if (from._internal_has_ai_assistant()) {
    ai_assistant_ = new ::clarifai::api::TaskAIAssistant(*from.ai_assistant_);
  } else {
    ai_assistant_ = nullptr;
  }
  if (from._internal_has_review()) {
    review_ = new ::clarifai::api::TaskReview(*from.review_);
  } else {
    review_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_ai_assist_params()) {
    ai_assist_params_ = new ::clarifai::api::AiAssistParameters(*from.ai_assist_params_);
  } else {
    ai_assist_params_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_ms_) -
    reinterpret_cast<char*>(&type_)) + sizeof(sample_ms_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Task)
}

void Task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_ms_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(sample_ms_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:clarifai.api.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete worker_;
  if (this != internal_default_instance()) delete input_source_;
  if (this != internal_default_instance()) delete ai_assistant_;
  if (this != internal_default_instance()) delete review_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete ai_assist_params_;
  if (this != internal_default_instance()) delete visibility_;
}

void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Task& Task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_ids_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && worker_ != nullptr) {
    delete worker_;
  }
  worker_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_source_ != nullptr) {
    delete input_source_;
  }
  input_source_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ai_assistant_ != nullptr) {
    delete ai_assistant_;
  }
  ai_assistant_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && review_ != nullptr) {
    delete review_;
  }
  review_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ai_assist_params_ != nullptr) {
    delete ai_assist_params_;
  }
  ai_assist_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_ms_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sample_ms_));
  _internal_metadata_.Clear();
}

const char* Task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Task.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Task.TaskType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::clarifai::api::Task_TaskType>(val));
        } else goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Task.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.TaskWorker worker = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_worker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string concept_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Task.concept_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.TaskInputSource input_source = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sample_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          sample_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.TaskAIAssistant ai_assistant = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ai_assistant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.TaskReview review = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_review(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Task.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.AiAssistParameters ai_assist_params = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ai_assist_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Task.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Task.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Task::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::modified_at(this), target, stream);
  }

  // .clarifai.api.Task.TaskType type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // string description = 5;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // .clarifai.api.TaskWorker worker = 6;
  if (this->has_worker()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::worker(this), target, stream);
  }

  // repeated string concept_ids = 7;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.concept_ids");
    target = stream->WriteString(7, s, target);
  }

  // .clarifai.api.TaskInputSource input_source = 8;
  if (this->has_input_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::input_source(this), target, stream);
  }

  // uint32 sample_ms = 9;
  if (this->sample_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_sample_ms(), target);
  }

  // .clarifai.api.TaskAIAssistant ai_assistant = 10;
  if (this->has_ai_assistant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::ai_assistant(this), target, stream);
  }

  // .clarifai.api.TaskReview review = 11;
  if (this->has_review()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::review(this), target, stream);
  }

  // .clarifai.api.status.Status status = 12;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::status(this), target, stream);
  }

  // string name = 13;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_name(), target);
  }

  // .clarifai.api.AiAssistParameters ai_assist_params = 14;
  if (this->has_ai_assist_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::ai_assist_params(this), target, stream);
  }

  // .clarifai.api.Visibility visibility = 15;
  if (this->has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::visibility(this), target, stream);
  }

  // string app_id = 16;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.app_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_app_id(), target);
  }

  // string user_id = 17;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.user_id");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Task)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string concept_ids = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(concept_ids_.size());
  for (int i = 0, n = concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      concept_ids_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string name = 13;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string app_id = 16;
  if (this->app_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 17;
  if (this->user_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.TaskWorker worker = 6;
  if (this->has_worker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *worker_);
  }

  // .clarifai.api.TaskInputSource input_source = 8;
  if (this->has_input_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_source_);
  }

  // .clarifai.api.TaskAIAssistant ai_assistant = 10;
  if (this->has_ai_assistant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ai_assistant_);
  }

  // .clarifai.api.TaskReview review = 11;
  if (this->has_review()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *review_);
  }

  // .clarifai.api.status.Status status = 12;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.AiAssistParameters ai_assist_params = 14;
  if (this->has_ai_assist_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ai_assist_params_);
  }

  // .clarifai.api.Visibility visibility = 15;
  if (this->has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .clarifai.api.Task.TaskType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 sample_ms = 9;
  if (this->sample_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sample_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_ids_.MergeFrom(from.concept_ids_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_modified_at()) {
    _internal_mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from.has_worker()) {
    _internal_mutable_worker()->::clarifai::api::TaskWorker::MergeFrom(from._internal_worker());
  }
  if (from.has_input_source()) {
    _internal_mutable_input_source()->::clarifai::api::TaskInputSource::MergeFrom(from._internal_input_source());
  }
  if (from.has_ai_assistant()) {
    _internal_mutable_ai_assistant()->::clarifai::api::TaskAIAssistant::MergeFrom(from._internal_ai_assistant());
  }
  if (from.has_review()) {
    _internal_mutable_review()->::clarifai::api::TaskReview::MergeFrom(from._internal_review());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_ai_assist_params()) {
    _internal_mutable_ai_assist_params()->::clarifai::api::AiAssistParameters::MergeFrom(from._internal_ai_assist_params());
  }
  if (from.has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.sample_ms() != 0) {
    _internal_set_sample_ms(from._internal_sample_ms());
  }
}

void Task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_ids_.InternalSwap(&other->concept_ids_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(created_at_, other->created_at_);
  swap(modified_at_, other->modified_at_);
  swap(worker_, other->worker_);
  swap(input_source_, other->input_source_);
  swap(ai_assistant_, other->ai_assistant_);
  swap(review_, other->review_);
  swap(status_, other->status_);
  swap(ai_assist_params_, other->ai_assist_params_);
  swap(visibility_, other->visibility_);
  swap(type_, other->type_);
  swap(sample_ms_, other->sample_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AiAssistParameters::InitAsDefaultInstance() {
}
class AiAssistParameters::_Internal {
 public:
};

AiAssistParameters::AiAssistParameters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.AiAssistParameters)
}
AiAssistParameters::AiAssistParameters(const AiAssistParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_relation_ids_(from.concept_relation_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_threshold_, &from.min_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_threshold_) -
    reinterpret_cast<char*>(&min_threshold_)) + sizeof(max_threshold_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AiAssistParameters)
}

void AiAssistParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AiAssistParameters_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&min_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_threshold_) -
      reinterpret_cast<char*>(&min_threshold_)) + sizeof(max_threshold_));
}

AiAssistParameters::~AiAssistParameters() {
  // @@protoc_insertion_point(destructor:clarifai.api.AiAssistParameters)
  SharedDtor();
}

void AiAssistParameters::SharedDtor() {
}

void AiAssistParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AiAssistParameters& AiAssistParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AiAssistParameters_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void AiAssistParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AiAssistParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_relation_ids_.Clear();
  ::memset(&min_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_threshold_) -
      reinterpret_cast<char*>(&min_threshold_)) + sizeof(max_threshold_));
  _internal_metadata_.Clear();
}

const char* AiAssistParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float min_threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          min_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          max_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string concept_relation_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_relation_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AiAssistParameters.concept_relation_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AiAssistParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AiAssistParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_threshold = 1;
  if (!(this->min_threshold() <= 0 && this->min_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_threshold(), target);
  }

  // float max_threshold = 2;
  if (!(this->max_threshold() <= 0 && this->max_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_threshold(), target);
  }

  // repeated string concept_relation_ids = 3;
  for (int i = 0, n = this->_internal_concept_relation_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_relation_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AiAssistParameters.concept_relation_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AiAssistParameters)
  return target;
}

size_t AiAssistParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AiAssistParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string concept_relation_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(concept_relation_ids_.size());
  for (int i = 0, n = concept_relation_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      concept_relation_ids_.Get(i));
  }

  // float min_threshold = 1;
  if (!(this->min_threshold() <= 0 && this->min_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_threshold = 2;
  if (!(this->max_threshold() <= 0 && this->max_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AiAssistParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.AiAssistParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const AiAssistParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AiAssistParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.AiAssistParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.AiAssistParameters)
    MergeFrom(*source);
  }
}

void AiAssistParameters::MergeFrom(const AiAssistParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AiAssistParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_relation_ids_.MergeFrom(from.concept_relation_ids_);
  if (!(from.min_threshold() <= 0 && from.min_threshold() >= 0)) {
    _internal_set_min_threshold(from._internal_min_threshold());
  }
  if (!(from.max_threshold() <= 0 && from.max_threshold() >= 0)) {
    _internal_set_max_threshold(from._internal_max_threshold());
  }
}

void AiAssistParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.AiAssistParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AiAssistParameters::CopyFrom(const AiAssistParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AiAssistParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AiAssistParameters::IsInitialized() const {
  return true;
}

void AiAssistParameters::InternalSwap(AiAssistParameters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_relation_ids_.InternalSwap(&other->concept_relation_ids_);
  swap(min_threshold_, other->min_threshold_);
  swap(max_threshold_, other->max_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AiAssistParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskWorker::InitAsDefaultInstance() {
  ::clarifai::api::_TaskWorker_default_instance_.partitioned_strategy_info_ = const_cast< ::clarifai::api::TaskWorkerPartitionedStrategyInfo*>(
      ::clarifai::api::TaskWorkerPartitionedStrategyInfo::internal_default_instance());
}
class TaskWorker::_Internal {
 public:
  static const ::clarifai::api::TaskWorkerPartitionedStrategyInfo& partitioned_strategy_info(const TaskWorker* msg);
};

const ::clarifai::api::TaskWorkerPartitionedStrategyInfo&
TaskWorker::_Internal::partitioned_strategy_info(const TaskWorker* msg) {
  return *msg->strategy_info_.partitioned_strategy_info_;
}
void TaskWorker::set_allocated_partitioned_strategy_info(::clarifai::api::TaskWorkerPartitionedStrategyInfo* partitioned_strategy_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_strategy_info();
  if (partitioned_strategy_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      partitioned_strategy_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partitioned_strategy_info, submessage_arena);
    }
    set_has_partitioned_strategy_info();
    strategy_info_.partitioned_strategy_info_ = partitioned_strategy_info;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TaskWorker.partitioned_strategy_info)
}
TaskWorker::TaskWorker()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TaskWorker)
}
TaskWorker::TaskWorker(const TaskWorker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strategy_ = from.strategy_;
  clear_has_strategy_info();
  switch (from.strategy_info_case()) {
    case kPartitionedStrategyInfo: {
      _internal_mutable_partitioned_strategy_info()->::clarifai::api::TaskWorkerPartitionedStrategyInfo::MergeFrom(from._internal_partitioned_strategy_info());
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskWorker)
}

void TaskWorker::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskWorker_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  strategy_ = 0;
  clear_has_strategy_info();
}

TaskWorker::~TaskWorker() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskWorker)
  SharedDtor();
}

void TaskWorker::SharedDtor() {
  if (has_strategy_info()) {
    clear_strategy_info();
  }
}

void TaskWorker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskWorker& TaskWorker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskWorker_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TaskWorker::clear_strategy_info() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.TaskWorker)
  switch (strategy_info_case()) {
    case kPartitionedStrategyInfo: {
      delete strategy_info_.partitioned_strategy_info_;
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STRATEGY_INFO_NOT_SET;
}


void TaskWorker::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskWorker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  strategy_ = 0;
  clear_strategy_info();
  _internal_metadata_.Clear();
}

const char* TaskWorker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.TaskWorker.TaskWorkerStrategy strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_strategy(static_cast<::clarifai::api::TaskWorker_TaskWorkerStrategy>(val));
        } else goto handle_unusual;
        continue;
      // repeated string user_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TaskWorker.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.TaskWorkerPartitionedStrategyInfo partitioned_strategy_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_partitioned_strategy_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskWorker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskWorker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.TaskWorker.TaskWorkerStrategy strategy = 1;
  if (this->strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_strategy(), target);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TaskWorker.user_ids");
    target = stream->WriteString(2, s, target);
  }

  // .clarifai.api.TaskWorkerPartitionedStrategyInfo partitioned_strategy_info = 3;
  if (_internal_has_partitioned_strategy_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::partitioned_strategy_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskWorker)
  return target;
}

size_t TaskWorker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskWorker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // .clarifai.api.TaskWorker.TaskWorkerStrategy strategy = 1;
  if (this->strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_strategy());
  }

  switch (strategy_info_case()) {
    // .clarifai.api.TaskWorkerPartitionedStrategyInfo partitioned_strategy_info = 3;
    case kPartitionedStrategyInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strategy_info_.partitioned_strategy_info_);
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskWorker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TaskWorker)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskWorker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskWorker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TaskWorker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TaskWorker)
    MergeFrom(*source);
  }
}

void TaskWorker::MergeFrom(const TaskWorker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskWorker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (from.strategy() != 0) {
    _internal_set_strategy(from._internal_strategy());
  }
  switch (from.strategy_info_case()) {
    case kPartitionedStrategyInfo: {
      _internal_mutable_partitioned_strategy_info()->::clarifai::api::TaskWorkerPartitionedStrategyInfo::MergeFrom(from._internal_partitioned_strategy_info());
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
}

void TaskWorker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TaskWorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskWorker::CopyFrom(const TaskWorker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskWorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskWorker::IsInitialized() const {
  return true;
}

void TaskWorker::InternalSwap(TaskWorker* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  swap(strategy_, other->strategy_);
  swap(strategy_info_, other->strategy_info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskWorker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskWorkerPartitionedStrategyInfo::InitAsDefaultInstance() {
  ::clarifai::api::_TaskWorkerPartitionedStrategyInfo_default_instance_._instance.get_mutable()->weights_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class TaskWorkerPartitionedStrategyInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& weights(const TaskWorkerPartitionedStrategyInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
TaskWorkerPartitionedStrategyInfo::_Internal::weights(const TaskWorkerPartitionedStrategyInfo* msg) {
  return *msg->weights_;
}
void TaskWorkerPartitionedStrategyInfo::clear_weights() {
  if (GetArenaNoVirtual() == nullptr && weights_ != nullptr) {
    delete weights_;
  }
  weights_ = nullptr;
}
TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategyInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TaskWorkerPartitionedStrategyInfo)
}
TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategyInfo(const TaskWorkerPartitionedStrategyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_weights()) {
    weights_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.weights_);
  } else {
    weights_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&workers_per_input_) -
    reinterpret_cast<char*>(&type_)) + sizeof(workers_per_input_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskWorkerPartitionedStrategyInfo)
}

void TaskWorkerPartitionedStrategyInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskWorkerPartitionedStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&weights_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workers_per_input_) -
      reinterpret_cast<char*>(&weights_)) + sizeof(workers_per_input_));
}

TaskWorkerPartitionedStrategyInfo::~TaskWorkerPartitionedStrategyInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  SharedDtor();
}

void TaskWorkerPartitionedStrategyInfo::SharedDtor() {
  if (this != internal_default_instance()) delete weights_;
}

void TaskWorkerPartitionedStrategyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskWorkerPartitionedStrategyInfo& TaskWorkerPartitionedStrategyInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskWorkerPartitionedStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TaskWorkerPartitionedStrategyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && weights_ != nullptr) {
    delete weights_;
  }
  weights_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workers_per_input_) -
      reinterpret_cast<char*>(&type_)) + sizeof(workers_per_input_));
  _internal_metadata_.Clear();
}

const char* TaskWorkerPartitionedStrategyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.TaskWorkerPartitionedStrategyInfo.TaskWorkerPartitionedStrategy type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::clarifai::api::TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy>(val));
        } else goto handle_unusual;
        continue;
      // int32 workers_per_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          workers_per_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct weights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskWorkerPartitionedStrategyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.TaskWorkerPartitionedStrategyInfo.TaskWorkerPartitionedStrategy type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 workers_per_input = 2;
  if (this->workers_per_input() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_workers_per_input(), target);
  }

  // .google.protobuf.Struct weights = 3;
  if (this->has_weights()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::weights(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  return target;
}

size_t TaskWorkerPartitionedStrategyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct weights = 3;
  if (this->has_weights()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weights_);
  }

  // .clarifai.api.TaskWorkerPartitionedStrategyInfo.TaskWorkerPartitionedStrategy type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 workers_per_input = 2;
  if (this->workers_per_input() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_workers_per_input());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskWorkerPartitionedStrategyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskWorkerPartitionedStrategyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskWorkerPartitionedStrategyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TaskWorkerPartitionedStrategyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TaskWorkerPartitionedStrategyInfo)
    MergeFrom(*source);
  }
}

void TaskWorkerPartitionedStrategyInfo::MergeFrom(const TaskWorkerPartitionedStrategyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_weights()) {
    _internal_mutable_weights()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_weights());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.workers_per_input() != 0) {
    _internal_set_workers_per_input(from._internal_workers_per_input());
  }
}

void TaskWorkerPartitionedStrategyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskWorkerPartitionedStrategyInfo::CopyFrom(const TaskWorkerPartitionedStrategyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskWorkerPartitionedStrategyInfo::IsInitialized() const {
  return true;
}

void TaskWorkerPartitionedStrategyInfo::InternalSwap(TaskWorkerPartitionedStrategyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(weights_, other->weights_);
  swap(type_, other->type_);
  swap(workers_per_input_, other->workers_per_input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskWorkerPartitionedStrategyInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskInputSource::InitAsDefaultInstance() {
}
class TaskInputSource::_Internal {
 public:
};

TaskInputSource::TaskInputSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TaskInputSource)
}
TaskInputSource::TaskInputSource(const TaskInputSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskInputSource)
}

void TaskInputSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskInputSource_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

TaskInputSource::~TaskInputSource() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskInputSource)
  SharedDtor();
}

void TaskInputSource::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskInputSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskInputSource& TaskInputSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskInputSource_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TaskInputSource::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskInputSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* TaskInputSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.TaskInputSource.TaskInputSourceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::clarifai::api::TaskInputSource_TaskInputSourceType>(val));
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TaskInputSource.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskInputSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskInputSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.TaskInputSource.TaskInputSourceType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TaskInputSource.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskInputSource)
  return target;
}

size_t TaskInputSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskInputSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.TaskInputSource.TaskInputSourceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskInputSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TaskInputSource)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskInputSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskInputSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TaskInputSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TaskInputSource)
    MergeFrom(*source);
  }
}

void TaskInputSource::MergeFrom(const TaskInputSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskInputSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void TaskInputSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TaskInputSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInputSource::CopyFrom(const TaskInputSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskInputSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInputSource::IsInitialized() const {
  return true;
}

void TaskInputSource::InternalSwap(TaskInputSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskInputSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskReview::InitAsDefaultInstance() {
  ::clarifai::api::_TaskReview_default_instance_.manual_strategy_info_ = const_cast< ::clarifai::api::TaskReviewManualStrategyInfo*>(
      ::clarifai::api::TaskReviewManualStrategyInfo::internal_default_instance());
  ::clarifai::api::_TaskReview_default_instance_.consensus_strategy_info_ = const_cast< ::clarifai::api::TaskReviewConsensusStrategyInfo*>(
      ::clarifai::api::TaskReviewConsensusStrategyInfo::internal_default_instance());
}
class TaskReview::_Internal {
 public:
  static const ::clarifai::api::TaskReviewManualStrategyInfo& manual_strategy_info(const TaskReview* msg);
  static const ::clarifai::api::TaskReviewConsensusStrategyInfo& consensus_strategy_info(const TaskReview* msg);
};

const ::clarifai::api::TaskReviewManualStrategyInfo&
TaskReview::_Internal::manual_strategy_info(const TaskReview* msg) {
  return *msg->strategy_info_.manual_strategy_info_;
}
const ::clarifai::api::TaskReviewConsensusStrategyInfo&
TaskReview::_Internal::consensus_strategy_info(const TaskReview* msg) {
  return *msg->strategy_info_.consensus_strategy_info_;
}
void TaskReview::set_allocated_manual_strategy_info(::clarifai::api::TaskReviewManualStrategyInfo* manual_strategy_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_strategy_info();
  if (manual_strategy_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      manual_strategy_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manual_strategy_info, submessage_arena);
    }
    set_has_manual_strategy_info();
    strategy_info_.manual_strategy_info_ = manual_strategy_info;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TaskReview.manual_strategy_info)
}
void TaskReview::set_allocated_consensus_strategy_info(::clarifai::api::TaskReviewConsensusStrategyInfo* consensus_strategy_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_strategy_info();
  if (consensus_strategy_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      consensus_strategy_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus_strategy_info, submessage_arena);
    }
    set_has_consensus_strategy_info();
    strategy_info_.consensus_strategy_info_ = consensus_strategy_info;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TaskReview.consensus_strategy_info)
}
TaskReview::TaskReview()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TaskReview)
}
TaskReview::TaskReview(const TaskReview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strategy_ = from.strategy_;
  clear_has_strategy_info();
  switch (from.strategy_info_case()) {
    case kManualStrategyInfo: {
      _internal_mutable_manual_strategy_info()->::clarifai::api::TaskReviewManualStrategyInfo::MergeFrom(from._internal_manual_strategy_info());
      break;
    }
    case kConsensusStrategyInfo: {
      _internal_mutable_consensus_strategy_info()->::clarifai::api::TaskReviewConsensusStrategyInfo::MergeFrom(from._internal_consensus_strategy_info());
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskReview)
}

void TaskReview::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskReview_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  strategy_ = 0;
  clear_has_strategy_info();
}

TaskReview::~TaskReview() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskReview)
  SharedDtor();
}

void TaskReview::SharedDtor() {
  if (has_strategy_info()) {
    clear_strategy_info();
  }
}

void TaskReview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskReview& TaskReview::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskReview_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TaskReview::clear_strategy_info() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.TaskReview)
  switch (strategy_info_case()) {
    case kManualStrategyInfo: {
      delete strategy_info_.manual_strategy_info_;
      break;
    }
    case kConsensusStrategyInfo: {
      delete strategy_info_.consensus_strategy_info_;
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STRATEGY_INFO_NOT_SET;
}


void TaskReview::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskReview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  strategy_ = 0;
  clear_strategy_info();
  _internal_metadata_.Clear();
}

const char* TaskReview::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.TaskReview.TaskReviewStrategy strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_strategy(static_cast<::clarifai::api::TaskReview_TaskReviewStrategy>(val));
        } else goto handle_unusual;
        continue;
      // repeated string user_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TaskReview.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.TaskReviewManualStrategyInfo manual_strategy_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_manual_strategy_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.TaskReviewConsensusStrategyInfo consensus_strategy_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_strategy_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskReview::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskReview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.TaskReview.TaskReviewStrategy strategy = 1;
  if (this->strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_strategy(), target);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TaskReview.user_ids");
    target = stream->WriteString(2, s, target);
  }

  // .clarifai.api.TaskReviewManualStrategyInfo manual_strategy_info = 3;
  if (_internal_has_manual_strategy_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::manual_strategy_info(this), target, stream);
  }

  // .clarifai.api.TaskReviewConsensusStrategyInfo consensus_strategy_info = 4;
  if (_internal_has_consensus_strategy_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::consensus_strategy_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskReview)
  return target;
}

size_t TaskReview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskReview)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // .clarifai.api.TaskReview.TaskReviewStrategy strategy = 1;
  if (this->strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_strategy());
  }

  switch (strategy_info_case()) {
    // .clarifai.api.TaskReviewManualStrategyInfo manual_strategy_info = 3;
    case kManualStrategyInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strategy_info_.manual_strategy_info_);
      break;
    }
    // .clarifai.api.TaskReviewConsensusStrategyInfo consensus_strategy_info = 4;
    case kConsensusStrategyInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strategy_info_.consensus_strategy_info_);
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskReview::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TaskReview)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskReview* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskReview>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TaskReview)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TaskReview)
    MergeFrom(*source);
  }
}

void TaskReview::MergeFrom(const TaskReview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskReview)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (from.strategy() != 0) {
    _internal_set_strategy(from._internal_strategy());
  }
  switch (from.strategy_info_case()) {
    case kManualStrategyInfo: {
      _internal_mutable_manual_strategy_info()->::clarifai::api::TaskReviewManualStrategyInfo::MergeFrom(from._internal_manual_strategy_info());
      break;
    }
    case kConsensusStrategyInfo: {
      _internal_mutable_consensus_strategy_info()->::clarifai::api::TaskReviewConsensusStrategyInfo::MergeFrom(from._internal_consensus_strategy_info());
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
}

void TaskReview::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TaskReview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskReview::CopyFrom(const TaskReview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskReview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskReview::IsInitialized() const {
  return true;
}

void TaskReview::InternalSwap(TaskReview* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  swap(strategy_, other->strategy_);
  swap(strategy_info_, other->strategy_info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskReview::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskReviewManualStrategyInfo::InitAsDefaultInstance() {
}
class TaskReviewManualStrategyInfo::_Internal {
 public:
};

TaskReviewManualStrategyInfo::TaskReviewManualStrategyInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TaskReviewManualStrategyInfo)
}
TaskReviewManualStrategyInfo::TaskReviewManualStrategyInfo(const TaskReviewManualStrategyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sample_percentage_ = from.sample_percentage_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskReviewManualStrategyInfo)
}

void TaskReviewManualStrategyInfo::SharedCtor() {
  sample_percentage_ = 0;
}

TaskReviewManualStrategyInfo::~TaskReviewManualStrategyInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskReviewManualStrategyInfo)
  SharedDtor();
}

void TaskReviewManualStrategyInfo::SharedDtor() {
}

void TaskReviewManualStrategyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskReviewManualStrategyInfo& TaskReviewManualStrategyInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskReviewManualStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TaskReviewManualStrategyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskReviewManualStrategyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_percentage_ = 0;
  _internal_metadata_.Clear();
}

const char* TaskReviewManualStrategyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float sample_percentage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          sample_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskReviewManualStrategyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskReviewManualStrategyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float sample_percentage = 1;
  if (!(this->sample_percentage() <= 0 && this->sample_percentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_sample_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskReviewManualStrategyInfo)
  return target;
}

size_t TaskReviewManualStrategyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskReviewManualStrategyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float sample_percentage = 1;
  if (!(this->sample_percentage() <= 0 && this->sample_percentage() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskReviewManualStrategyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TaskReviewManualStrategyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskReviewManualStrategyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskReviewManualStrategyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TaskReviewManualStrategyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TaskReviewManualStrategyInfo)
    MergeFrom(*source);
  }
}

void TaskReviewManualStrategyInfo::MergeFrom(const TaskReviewManualStrategyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskReviewManualStrategyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.sample_percentage() <= 0 && from.sample_percentage() >= 0)) {
    _internal_set_sample_percentage(from._internal_sample_percentage());
  }
}

void TaskReviewManualStrategyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TaskReviewManualStrategyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskReviewManualStrategyInfo::CopyFrom(const TaskReviewManualStrategyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskReviewManualStrategyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskReviewManualStrategyInfo::IsInitialized() const {
  return true;
}

void TaskReviewManualStrategyInfo::InternalSwap(TaskReviewManualStrategyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sample_percentage_, other->sample_percentage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskReviewManualStrategyInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskReviewConsensusStrategyInfo::InitAsDefaultInstance() {
}
class TaskReviewConsensusStrategyInfo::_Internal {
 public:
};

TaskReviewConsensusStrategyInfo::TaskReviewConsensusStrategyInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TaskReviewConsensusStrategyInfo)
}
TaskReviewConsensusStrategyInfo::TaskReviewConsensusStrategyInfo(const TaskReviewConsensusStrategyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  approval_threshold_ = from.approval_threshold_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskReviewConsensusStrategyInfo)
}

void TaskReviewConsensusStrategyInfo::SharedCtor() {
  approval_threshold_ = 0u;
}

TaskReviewConsensusStrategyInfo::~TaskReviewConsensusStrategyInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskReviewConsensusStrategyInfo)
  SharedDtor();
}

void TaskReviewConsensusStrategyInfo::SharedDtor() {
}

void TaskReviewConsensusStrategyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskReviewConsensusStrategyInfo& TaskReviewConsensusStrategyInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskReviewConsensusStrategyInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TaskReviewConsensusStrategyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  approval_threshold_ = 0u;
  _internal_metadata_.Clear();
}

const char* TaskReviewConsensusStrategyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 approval_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          approval_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskReviewConsensusStrategyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 approval_threshold = 2;
  if (this->approval_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_approval_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskReviewConsensusStrategyInfo)
  return target;
}

size_t TaskReviewConsensusStrategyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 approval_threshold = 2;
  if (this->approval_threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_approval_threshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskReviewConsensusStrategyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskReviewConsensusStrategyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskReviewConsensusStrategyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TaskReviewConsensusStrategyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TaskReviewConsensusStrategyInfo)
    MergeFrom(*source);
  }
}

void TaskReviewConsensusStrategyInfo::MergeFrom(const TaskReviewConsensusStrategyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.approval_threshold() != 0) {
    _internal_set_approval_threshold(from._internal_approval_threshold());
  }
}

void TaskReviewConsensusStrategyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskReviewConsensusStrategyInfo::CopyFrom(const TaskReviewConsensusStrategyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskReviewConsensusStrategyInfo::IsInitialized() const {
  return true;
}

void TaskReviewConsensusStrategyInfo::InternalSwap(TaskReviewConsensusStrategyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(approval_threshold_, other->approval_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskReviewConsensusStrategyInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskAIAssistant::InitAsDefaultInstance() {
}
class TaskAIAssistant::_Internal {
 public:
};

TaskAIAssistant::TaskAIAssistant()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TaskAIAssistant)
}
TaskAIAssistant::TaskAIAssistant(const TaskAIAssistant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskAIAssistant)
}

void TaskAIAssistant::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskAIAssistant_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TaskAIAssistant::~TaskAIAssistant() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskAIAssistant)
  SharedDtor();
}

void TaskAIAssistant::SharedDtor() {
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskAIAssistant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskAIAssistant& TaskAIAssistant::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskAIAssistant_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TaskAIAssistant::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskAIAssistant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TaskAIAssistant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string workflow_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TaskAIAssistant.workflow_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskAIAssistant::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskAIAssistant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string workflow_id = 1;
  if (this->workflow_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TaskAIAssistant.workflow_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_workflow_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskAIAssistant)
  return target;
}

size_t TaskAIAssistant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskAIAssistant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workflow_id = 1;
  if (this->workflow_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskAIAssistant::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TaskAIAssistant)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskAIAssistant* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskAIAssistant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TaskAIAssistant)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TaskAIAssistant)
    MergeFrom(*source);
  }
}

void TaskAIAssistant::MergeFrom(const TaskAIAssistant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskAIAssistant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.workflow_id().size() > 0) {

    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
}

void TaskAIAssistant::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TaskAIAssistant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskAIAssistant::CopyFrom(const TaskAIAssistant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskAIAssistant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskAIAssistant::IsInitialized() const {
  return true;
}

void TaskAIAssistant::InternalSwap(TaskAIAssistant* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  workflow_id_.Swap(&other->workflow_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskAIAssistant::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskStatusCountPerUser::InitAsDefaultInstance() {
}
class TaskStatusCountPerUser::_Internal {
 public:
};

TaskStatusCountPerUser::TaskStatusCountPerUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TaskStatusCountPerUser)
}
TaskStatusCountPerUser::TaskStatusCountPerUser(const TaskStatusCountPerUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  ::memcpy(&pending_, &from.pending_,
    static_cast<size_t>(reinterpret_cast<char*>(&awaiting_consensus_review_) -
    reinterpret_cast<char*>(&pending_)) + sizeof(awaiting_consensus_review_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskStatusCountPerUser)
}

void TaskStatusCountPerUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskStatusCountPerUser_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pending_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&awaiting_consensus_review_) -
      reinterpret_cast<char*>(&pending_)) + sizeof(awaiting_consensus_review_));
}

TaskStatusCountPerUser::~TaskStatusCountPerUser() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskStatusCountPerUser)
  SharedDtor();
}

void TaskStatusCountPerUser::SharedDtor() {
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskStatusCountPerUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskStatusCountPerUser& TaskStatusCountPerUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskStatusCountPerUser_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TaskStatusCountPerUser::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskStatusCountPerUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pending_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&awaiting_consensus_review_) -
      reinterpret_cast<char*>(&pending_)) + sizeof(awaiting_consensus_review_));
  _internal_metadata_.Clear();
}

const char* TaskStatusCountPerUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TaskStatusCountPerUser.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pending = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 awaiting_review = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          awaiting_review_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 success = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 review_denied = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          review_denied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 awaiting_consensus_review = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          awaiting_consensus_review_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskStatusCountPerUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskStatusCountPerUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TaskStatusCountPerUser.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // uint32 pending = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pending(), target);
  }

  // uint32 awaiting_review = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->awaiting_review() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_awaiting_review(), target);
  }

  // uint32 success = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_success(), target);
  }

  // uint32 review_denied = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->review_denied() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_review_denied(), target);
  }

  // uint32 awaiting_consensus_review = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->awaiting_consensus_review() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_awaiting_consensus_review(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskStatusCountPerUser)
  return target;
}

size_t TaskStatusCountPerUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskStatusCountPerUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // uint32 pending = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->pending() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pending());
  }

  // uint32 awaiting_review = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->awaiting_review() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_awaiting_review());
  }

  // uint32 success = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->success() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_success());
  }

  // uint32 review_denied = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->review_denied() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_review_denied());
  }

  // uint32 awaiting_consensus_review = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->awaiting_consensus_review() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_awaiting_consensus_review());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskStatusCountPerUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TaskStatusCountPerUser)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskStatusCountPerUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskStatusCountPerUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TaskStatusCountPerUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TaskStatusCountPerUser)
    MergeFrom(*source);
  }
}

void TaskStatusCountPerUser::MergeFrom(const TaskStatusCountPerUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskStatusCountPerUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.pending() != 0) {
    _internal_set_pending(from._internal_pending());
  }
  if (from.awaiting_review() != 0) {
    _internal_set_awaiting_review(from._internal_awaiting_review());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.review_denied() != 0) {
    _internal_set_review_denied(from._internal_review_denied());
  }
  if (from.awaiting_consensus_review() != 0) {
    _internal_set_awaiting_consensus_review(from._internal_awaiting_consensus_review());
  }
}

void TaskStatusCountPerUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TaskStatusCountPerUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStatusCountPerUser::CopyFrom(const TaskStatusCountPerUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskStatusCountPerUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStatusCountPerUser::IsInitialized() const {
  return true;
}

void TaskStatusCountPerUser::InternalSwap(TaskStatusCountPerUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pending_, other->pending_);
  swap(awaiting_review_, other->awaiting_review_);
  swap(success_, other->success_);
  swap(review_denied_, other->review_denied_);
  swap(awaiting_consensus_review_, other->awaiting_consensus_review_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskStatusCountPerUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Collector::InitAsDefaultInstance() {
  ::clarifai::api::_Collector_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_Collector_default_instance_._instance.get_mutable()->collector_source_ = const_cast< ::clarifai::api::CollectorSource*>(
      ::clarifai::api::CollectorSource::internal_default_instance());
  ::clarifai::api::_Collector_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class Collector::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Collector* msg);
  static const ::clarifai::api::CollectorSource& collector_source(const Collector* msg);
  static const ::clarifai::api::status::Status& status(const Collector* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Collector::_Internal::created_at(const Collector* msg) {
  return *msg->created_at_;
}
const ::clarifai::api::CollectorSource&
Collector::_Internal::collector_source(const Collector* msg) {
  return *msg->collector_source_;
}
const ::clarifai::api::status::Status&
Collector::_Internal::status(const Collector* msg) {
  return *msg->status_;
}
void Collector::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Collector::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
Collector::Collector()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Collector)
}
Collector::Collector(const Collector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  pre_queue_workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pre_queue_workflow_id().empty()) {
    pre_queue_workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pre_queue_workflow_id_);
  }
  post_queue_workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_queue_workflow_id().empty()) {
    post_queue_workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.post_queue_workflow_id_);
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_collector_source()) {
    collector_source_ = new ::clarifai::api::CollectorSource(*from.collector_source_);
  } else {
    collector_source_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Collector)
}

void Collector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre_queue_workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  post_queue_workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(status_));
}

Collector::~Collector() {
  // @@protoc_insertion_point(destructor:clarifai.api.Collector)
  SharedDtor();
}

void Collector::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre_queue_workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  post_queue_workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete collector_source_;
  if (this != internal_default_instance()) delete status_;
}

void Collector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Collector& Collector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Collector::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Collector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre_queue_workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  post_queue_workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && collector_source_ != nullptr) {
    delete collector_source_;
  }
  collector_source_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Collector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collector.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collector.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pre_queue_workflow_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pre_queue_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collector.pre_queue_workflow_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_queue_workflow_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_post_queue_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collector.post_queue_workflow_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.CollectorSource collector_source = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_collector_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Collector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Collector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collector.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collector.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::created_at(this), target, stream);
  }

  // string pre_queue_workflow_id = 4;
  if (this->pre_queue_workflow_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pre_queue_workflow_id().data(), static_cast<int>(this->_internal_pre_queue_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collector.pre_queue_workflow_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pre_queue_workflow_id(), target);
  }

  // string post_queue_workflow_id = 5;
  if (this->post_queue_workflow_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_queue_workflow_id().data(), static_cast<int>(this->_internal_post_queue_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collector.post_queue_workflow_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_post_queue_workflow_id(), target);
  }

  // .clarifai.api.CollectorSource collector_source = 6;
  if (this->has_collector_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::collector_source(this), target, stream);
  }

  // .clarifai.api.status.Status status = 7;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Collector)
  return target;
}

size_t Collector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Collector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string pre_queue_workflow_id = 4;
  if (this->pre_queue_workflow_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pre_queue_workflow_id());
  }

  // string post_queue_workflow_id = 5;
  if (this->post_queue_workflow_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_queue_workflow_id());
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .clarifai.api.CollectorSource collector_source = 6;
  if (this->has_collector_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *collector_source_);
  }

  // .clarifai.api.status.Status status = 7;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Collector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Collector)
  GOOGLE_DCHECK_NE(&from, this);
  const Collector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Collector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Collector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Collector)
    MergeFrom(*source);
  }
}

void Collector::MergeFrom(const Collector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Collector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.pre_queue_workflow_id().size() > 0) {

    pre_queue_workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pre_queue_workflow_id_);
  }
  if (from.post_queue_workflow_id().size() > 0) {

    post_queue_workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.post_queue_workflow_id_);
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_collector_source()) {
    _internal_mutable_collector_source()->::clarifai::api::CollectorSource::MergeFrom(from._internal_collector_source());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void Collector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Collector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collector::CopyFrom(const Collector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Collector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collector::IsInitialized() const {
  return true;
}

void Collector::InternalSwap(Collector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pre_queue_workflow_id_.Swap(&other->pre_queue_workflow_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  post_queue_workflow_id_.Swap(&other->post_queue_workflow_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(created_at_, other->created_at_);
  swap(collector_source_, other->collector_source_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Collector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectorSource::InitAsDefaultInstance() {
  ::clarifai::api::_CollectorSource_default_instance_._instance.get_mutable()->api_post_model_outputs_collector_source_ = const_cast< ::clarifai::api::APIPostModelOutputsCollectorSource*>(
      ::clarifai::api::APIPostModelOutputsCollectorSource::internal_default_instance());
}
class CollectorSource::_Internal {
 public:
  static const ::clarifai::api::APIPostModelOutputsCollectorSource& api_post_model_outputs_collector_source(const CollectorSource* msg);
};

const ::clarifai::api::APIPostModelOutputsCollectorSource&
CollectorSource::_Internal::api_post_model_outputs_collector_source(const CollectorSource* msg) {
  return *msg->api_post_model_outputs_collector_source_;
}
CollectorSource::CollectorSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.CollectorSource)
}
CollectorSource::CollectorSource(const CollectorSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_api_post_model_outputs_collector_source()) {
    api_post_model_outputs_collector_source_ = new ::clarifai::api::APIPostModelOutputsCollectorSource(*from.api_post_model_outputs_collector_source_);
  } else {
    api_post_model_outputs_collector_source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.CollectorSource)
}

void CollectorSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  api_post_model_outputs_collector_source_ = nullptr;
}

CollectorSource::~CollectorSource() {
  // @@protoc_insertion_point(destructor:clarifai.api.CollectorSource)
  SharedDtor();
}

void CollectorSource::SharedDtor() {
  if (this != internal_default_instance()) delete api_post_model_outputs_collector_source_;
}

void CollectorSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectorSource& CollectorSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void CollectorSource::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.CollectorSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && api_post_model_outputs_collector_source_ != nullptr) {
    delete api_post_model_outputs_collector_source_;
  }
  api_post_model_outputs_collector_source_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CollectorSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.APIPostModelOutputsCollectorSource api_post_model_outputs_collector_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_api_post_model_outputs_collector_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectorSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.CollectorSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.APIPostModelOutputsCollectorSource api_post_model_outputs_collector_source = 2;
  if (this->has_api_post_model_outputs_collector_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::api_post_model_outputs_collector_source(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.CollectorSource)
  return target;
}

size_t CollectorSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.CollectorSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.APIPostModelOutputsCollectorSource api_post_model_outputs_collector_source = 2;
  if (this->has_api_post_model_outputs_collector_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *api_post_model_outputs_collector_source_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectorSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.CollectorSource)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectorSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectorSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.CollectorSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.CollectorSource)
    MergeFrom(*source);
  }
}

void CollectorSource::MergeFrom(const CollectorSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.CollectorSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_api_post_model_outputs_collector_source()) {
    _internal_mutable_api_post_model_outputs_collector_source()->::clarifai::api::APIPostModelOutputsCollectorSource::MergeFrom(from._internal_api_post_model_outputs_collector_source());
  }
}

void CollectorSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.CollectorSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectorSource::CopyFrom(const CollectorSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.CollectorSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectorSource::IsInitialized() const {
  return true;
}

void CollectorSource::InternalSwap(CollectorSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(api_post_model_outputs_collector_source_, other->api_post_model_outputs_collector_source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectorSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void APIPostModelOutputsCollectorSource::InitAsDefaultInstance() {
}
class APIPostModelOutputsCollectorSource::_Internal {
 public:
};

APIPostModelOutputsCollectorSource::APIPostModelOutputsCollectorSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.APIPostModelOutputsCollectorSource)
}
APIPostModelOutputsCollectorSource::APIPostModelOutputsCollectorSource(const APIPostModelOutputsCollectorSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_user_id().empty()) {
    model_user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_user_id_);
  }
  model_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_app_id().empty()) {
    model_app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_app_id_);
  }
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_version_id_);
  }
  post_inputs_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_post_inputs_key_id().empty()) {
    post_inputs_key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.post_inputs_key_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.APIPostModelOutputsCollectorSource)
}

void APIPostModelOutputsCollectorSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_APIPostModelOutputsCollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  model_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  post_inputs_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

APIPostModelOutputsCollectorSource::~APIPostModelOutputsCollectorSource() {
  // @@protoc_insertion_point(destructor:clarifai.api.APIPostModelOutputsCollectorSource)
  SharedDtor();
}

void APIPostModelOutputsCollectorSource::SharedDtor() {
  model_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  post_inputs_key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void APIPostModelOutputsCollectorSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const APIPostModelOutputsCollectorSource& APIPostModelOutputsCollectorSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_APIPostModelOutputsCollectorSource_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void APIPostModelOutputsCollectorSource::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.APIPostModelOutputsCollectorSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  post_inputs_key_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* APIPostModelOutputsCollectorSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.APIPostModelOutputsCollectorSource.model_user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.APIPostModelOutputsCollectorSource.model_app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.APIPostModelOutputsCollectorSource.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_version_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.APIPostModelOutputsCollectorSource.model_version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string post_inputs_key_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_post_inputs_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* APIPostModelOutputsCollectorSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.APIPostModelOutputsCollectorSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_user_id = 1;
  if (this->model_user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_user_id().data(), static_cast<int>(this->_internal_model_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.APIPostModelOutputsCollectorSource.model_user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_user_id(), target);
  }

  // string model_app_id = 2;
  if (this->model_app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_app_id().data(), static_cast<int>(this->_internal_model_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.APIPostModelOutputsCollectorSource.model_app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_app_id(), target);
  }

  // string model_id = 3;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.APIPostModelOutputsCollectorSource.model_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_id(), target);
  }

  // string model_version_id = 4;
  if (this->model_version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.APIPostModelOutputsCollectorSource.model_version_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model_version_id(), target);
  }

  // string post_inputs_key_id = 5;
  if (this->post_inputs_key_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_inputs_key_id().data(), static_cast<int>(this->_internal_post_inputs_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_post_inputs_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.APIPostModelOutputsCollectorSource)
  return target;
}

size_t APIPostModelOutputsCollectorSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.APIPostModelOutputsCollectorSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_user_id = 1;
  if (this->model_user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_user_id());
  }

  // string model_app_id = 2;
  if (this->model_app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_app_id());
  }

  // string model_id = 3;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_version_id = 4;
  if (this->model_version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // string post_inputs_key_id = 5;
  if (this->post_inputs_key_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_inputs_key_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APIPostModelOutputsCollectorSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.APIPostModelOutputsCollectorSource)
  GOOGLE_DCHECK_NE(&from, this);
  const APIPostModelOutputsCollectorSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APIPostModelOutputsCollectorSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.APIPostModelOutputsCollectorSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.APIPostModelOutputsCollectorSource)
    MergeFrom(*source);
  }
}

void APIPostModelOutputsCollectorSource::MergeFrom(const APIPostModelOutputsCollectorSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.APIPostModelOutputsCollectorSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_user_id().size() > 0) {

    model_user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_user_id_);
  }
  if (from.model_app_id().size() > 0) {

    model_app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_app_id_);
  }
  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.model_version_id().size() > 0) {

    model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_version_id_);
  }
  if (from.post_inputs_key_id().size() > 0) {

    post_inputs_key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.post_inputs_key_id_);
  }
}

void APIPostModelOutputsCollectorSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.APIPostModelOutputsCollectorSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APIPostModelOutputsCollectorSource::CopyFrom(const APIPostModelOutputsCollectorSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.APIPostModelOutputsCollectorSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APIPostModelOutputsCollectorSource::IsInitialized() const {
  return true;
}

void APIPostModelOutputsCollectorSource::InternalSwap(APIPostModelOutputsCollectorSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_user_id_.Swap(&other->model_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_app_id_.Swap(&other->model_app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_version_id_.Swap(&other->model_version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  post_inputs_key_id_.Swap(&other->post_inputs_key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata APIPostModelOutputsCollectorSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatValue::InitAsDefaultInstance() {
  ::clarifai::api::_StatValue_default_instance_._instance.get_mutable()->time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class StatValue::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const StatValue* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
StatValue::_Internal::time(const StatValue* msg) {
  return *msg->time_;
}
void StatValue::clear_time() {
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
StatValue::StatValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.StatValue)
}
StatValue::StatValue(const StatValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StatValue)
}

void StatValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatValue_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_)) + sizeof(value_));
}

StatValue::~StatValue() {
  // @@protoc_insertion_point(destructor:clarifai.api.StatValue)
  SharedDtor();
}

void StatValue::SharedDtor() {
  if (this != internal_default_instance()) delete time_;
}

void StatValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatValue& StatValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatValue_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void StatValue::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StatValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* StatValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.StatValue.tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StatValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  // repeated string tags = 3;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StatValue.tags");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StatValue)
  return target;
}

size_t StatValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StatValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.StatValue)
  GOOGLE_DCHECK_NE(&from, this);
  const StatValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.StatValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.StatValue)
    MergeFrom(*source);
  }
}

void StatValue::MergeFrom(const StatValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StatValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void StatValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.StatValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatValue::CopyFrom(const StatValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StatValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatValue::IsInitialized() const {
  return true;
}

void StatValue::InternalSwap(StatValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  swap(time_, other->time_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatValueAggregateResult::InitAsDefaultInstance() {
  ::clarifai::api::_StatValueAggregateResult_default_instance_._instance.get_mutable()->stat_value_aggregate_query_ = const_cast< ::clarifai::api::StatValueAggregateQuery*>(
      ::clarifai::api::StatValueAggregateQuery::internal_default_instance());
}
class StatValueAggregateResult::_Internal {
 public:
  static const ::clarifai::api::StatValueAggregateQuery& stat_value_aggregate_query(const StatValueAggregateResult* msg);
};

const ::clarifai::api::StatValueAggregateQuery&
StatValueAggregateResult::_Internal::stat_value_aggregate_query(const StatValueAggregateResult* msg) {
  return *msg->stat_value_aggregate_query_;
}
StatValueAggregateResult::StatValueAggregateResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.StatValueAggregateResult)
}
StatValueAggregateResult::StatValueAggregateResult(const StatValueAggregateResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stat_value_aggregates_(from.stat_value_aggregates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stat_value_aggregate_query()) {
    stat_value_aggregate_query_ = new ::clarifai::api::StatValueAggregateQuery(*from.stat_value_aggregate_query_);
  } else {
    stat_value_aggregate_query_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StatValueAggregateResult)
}

void StatValueAggregateResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatValueAggregateResult_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  stat_value_aggregate_query_ = nullptr;
}

StatValueAggregateResult::~StatValueAggregateResult() {
  // @@protoc_insertion_point(destructor:clarifai.api.StatValueAggregateResult)
  SharedDtor();
}

void StatValueAggregateResult::SharedDtor() {
  if (this != internal_default_instance()) delete stat_value_aggregate_query_;
}

void StatValueAggregateResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatValueAggregateResult& StatValueAggregateResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatValueAggregateResult_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void StatValueAggregateResult::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StatValueAggregateResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_value_aggregates_.Clear();
  if (GetArenaNoVirtual() == nullptr && stat_value_aggregate_query_ != nullptr) {
    delete stat_value_aggregate_query_;
  }
  stat_value_aggregate_query_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StatValueAggregateResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .clarifai.api.StatValueAggregate stat_value_aggregates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_value_aggregates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.StatValueAggregateQuery stat_value_aggregate_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat_value_aggregate_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatValueAggregateResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StatValueAggregateResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValueAggregate stat_value_aggregates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_value_aggregates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stat_value_aggregates(i), target, stream);
  }

  // .clarifai.api.StatValueAggregateQuery stat_value_aggregate_query = 2;
  if (this->has_stat_value_aggregate_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stat_value_aggregate_query(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StatValueAggregateResult)
  return target;
}

size_t StatValueAggregateResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StatValueAggregateResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValueAggregate stat_value_aggregates = 1;
  total_size += 1UL * this->_internal_stat_value_aggregates_size();
  for (const auto& msg : this->stat_value_aggregates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.StatValueAggregateQuery stat_value_aggregate_query = 2;
  if (this->has_stat_value_aggregate_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stat_value_aggregate_query_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatValueAggregateResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.StatValueAggregateResult)
  GOOGLE_DCHECK_NE(&from, this);
  const StatValueAggregateResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatValueAggregateResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.StatValueAggregateResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.StatValueAggregateResult)
    MergeFrom(*source);
  }
}

void StatValueAggregateResult::MergeFrom(const StatValueAggregateResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StatValueAggregateResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_value_aggregates_.MergeFrom(from.stat_value_aggregates_);
  if (from.has_stat_value_aggregate_query()) {
    _internal_mutable_stat_value_aggregate_query()->::clarifai::api::StatValueAggregateQuery::MergeFrom(from._internal_stat_value_aggregate_query());
  }
}

void StatValueAggregateResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.StatValueAggregateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatValueAggregateResult::CopyFrom(const StatValueAggregateResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StatValueAggregateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatValueAggregateResult::IsInitialized() const {
  return true;
}

void StatValueAggregateResult::InternalSwap(StatValueAggregateResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stat_value_aggregates_.InternalSwap(&other->stat_value_aggregates_);
  swap(stat_value_aggregate_query_, other->stat_value_aggregate_query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatValueAggregateResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatValueAggregate::InitAsDefaultInstance() {
  ::clarifai::api::_StatValueAggregate_default_instance_._instance.get_mutable()->time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class StatValueAggregate::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const StatValueAggregate* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
StatValueAggregate::_Internal::time(const StatValueAggregate* msg) {
  return *msg->time_;
}
void StatValueAggregate::clear_time() {
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
StatValueAggregate::StatValueAggregate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.StatValueAggregate)
}
StatValueAggregate::StatValueAggregate(const StatValueAggregate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&aggregate_value_) -
    reinterpret_cast<char*>(&count_)) + sizeof(aggregate_value_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StatValueAggregate)
}

void StatValueAggregate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatValueAggregate_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggregate_value_) -
      reinterpret_cast<char*>(&time_)) + sizeof(aggregate_value_));
}

StatValueAggregate::~StatValueAggregate() {
  // @@protoc_insertion_point(destructor:clarifai.api.StatValueAggregate)
  SharedDtor();
}

void StatValueAggregate::SharedDtor() {
  if (this != internal_default_instance()) delete time_;
}

void StatValueAggregate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatValueAggregate& StatValueAggregate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatValueAggregate_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void StatValueAggregate::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StatValueAggregate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggregate_value_) -
      reinterpret_cast<char*>(&count_)) + sizeof(aggregate_value_));
  _internal_metadata_.Clear();
}

const char* StatValueAggregate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float aggregate_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          aggregate_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.StatValueAggregate.tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatValueAggregate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StatValueAggregate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // float aggregate_value = 2;
  if (!(this->aggregate_value() <= 0 && this->aggregate_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_aggregate_value(), target);
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_count(), target);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StatValueAggregate.tags");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StatValueAggregate)
  return target;
}

size_t StatValueAggregate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StatValueAggregate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  // float aggregate_value = 2;
  if (!(this->aggregate_value() <= 0 && this->aggregate_value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatValueAggregate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.StatValueAggregate)
  GOOGLE_DCHECK_NE(&from, this);
  const StatValueAggregate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatValueAggregate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.StatValueAggregate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.StatValueAggregate)
    MergeFrom(*source);
  }
}

void StatValueAggregate::MergeFrom(const StatValueAggregate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StatValueAggregate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (!(from.aggregate_value() <= 0 && from.aggregate_value() >= 0)) {
    _internal_set_aggregate_value(from._internal_aggregate_value());
  }
}

void StatValueAggregate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.StatValueAggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatValueAggregate::CopyFrom(const StatValueAggregate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StatValueAggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatValueAggregate::IsInitialized() const {
  return true;
}

void StatValueAggregate::InternalSwap(StatValueAggregate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  swap(time_, other->time_);
  swap(count_, other->count_);
  swap(aggregate_value_, other->aggregate_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatValueAggregate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatValueAggregateQuery::InitAsDefaultInstance() {
  ::clarifai::api::_StatValueAggregateQuery_default_instance_._instance.get_mutable()->start_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::api::_StatValueAggregateQuery_default_instance_._instance.get_mutable()->end_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class StatValueAggregateQuery::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const StatValueAggregateQuery* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const StatValueAggregateQuery* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
StatValueAggregateQuery::_Internal::start_time(const StatValueAggregateQuery* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
StatValueAggregateQuery::_Internal::end_time(const StatValueAggregateQuery* msg) {
  return *msg->end_time_;
}
void StatValueAggregateQuery::clear_start_time() {
  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void StatValueAggregateQuery::clear_end_time() {
  if (GetArenaNoVirtual() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
StatValueAggregateQuery::StatValueAggregateQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.StatValueAggregateQuery)
}
StatValueAggregateQuery::StatValueAggregateQuery(const StatValueAggregateQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_),
      tag_groups_(from.tag_groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  ::memcpy(&stat_value_agg_type_, &from.stat_value_agg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_time_agg_type_) -
    reinterpret_cast<char*>(&stat_value_agg_type_)) + sizeof(stat_time_agg_type_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StatValueAggregateQuery)
}

void StatValueAggregateQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatValueAggregateQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stat_time_agg_type_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(stat_time_agg_type_));
}

StatValueAggregateQuery::~StatValueAggregateQuery() {
  // @@protoc_insertion_point(destructor:clarifai.api.StatValueAggregateQuery)
  SharedDtor();
}

void StatValueAggregateQuery::SharedDtor() {
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void StatValueAggregateQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatValueAggregateQuery& StatValueAggregateQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatValueAggregateQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void StatValueAggregateQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StatValueAggregateQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  tag_groups_.Clear();
  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  ::memset(&stat_value_agg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stat_time_agg_type_) -
      reinterpret_cast<char*>(&stat_value_agg_type_)) + sizeof(stat_time_agg_type_));
  _internal_metadata_.Clear();
}

const char* StatValueAggregateQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.StatValueAggregateQuery.tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string tag_groups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tag_groups();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.StatValueAggregateQuery.tag_groups"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.StatValueAggType stat_value_agg_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_stat_value_agg_type(static_cast<::clarifai::api::StatValueAggType>(val));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.StatTimeAggType stat_time_agg_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_stat_time_agg_type(static_cast<::clarifai::api::StatTimeAggType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatValueAggregateQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StatValueAggregateQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tags = 1;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StatValueAggregateQuery.tags");
    target = stream->WriteString(1, s, target);
  }

  // repeated string tag_groups = 2;
  for (int i = 0, n = this->_internal_tag_groups_size(); i < n; i++) {
    const auto& s = this->_internal_tag_groups(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StatValueAggregateQuery.tag_groups");
    target = stream->WriteString(2, s, target);
  }

  // .clarifai.api.StatValueAggType stat_value_agg_type = 3;
  if (this->stat_value_agg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_stat_value_agg_type(), target);
  }

  // .clarifai.api.StatTimeAggType stat_time_agg_type = 4;
  if (this->stat_time_agg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_stat_time_agg_type(), target);
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::end_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StatValueAggregateQuery)
  return target;
}

size_t StatValueAggregateQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StatValueAggregateQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // repeated string tag_groups = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tag_groups_.size());
  for (int i = 0, n = tag_groups_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tag_groups_.Get(i));
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // .clarifai.api.StatValueAggType stat_value_agg_type = 3;
  if (this->stat_value_agg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stat_value_agg_type());
  }

  // .clarifai.api.StatTimeAggType stat_time_agg_type = 4;
  if (this->stat_time_agg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stat_time_agg_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatValueAggregateQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.StatValueAggregateQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const StatValueAggregateQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatValueAggregateQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.StatValueAggregateQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.StatValueAggregateQuery)
    MergeFrom(*source);
  }
}

void StatValueAggregateQuery::MergeFrom(const StatValueAggregateQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StatValueAggregateQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  tag_groups_.MergeFrom(from.tag_groups_);
  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
  if (from.stat_value_agg_type() != 0) {
    _internal_set_stat_value_agg_type(from._internal_stat_value_agg_type());
  }
  if (from.stat_time_agg_type() != 0) {
    _internal_set_stat_time_agg_type(from._internal_stat_time_agg_type());
  }
}

void StatValueAggregateQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.StatValueAggregateQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatValueAggregateQuery::CopyFrom(const StatValueAggregateQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StatValueAggregateQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatValueAggregateQuery::IsInitialized() const {
  return true;
}

void StatValueAggregateQuery::InternalSwap(StatValueAggregateQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  tag_groups_.InternalSwap(&other->tag_groups_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(stat_value_agg_type_, other->stat_value_agg_type_);
  swap(stat_time_agg_type_, other->stat_time_agg_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatValueAggregateQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Visibility::InitAsDefaultInstance() {
}
class Visibility::_Internal {
 public:
};

Visibility::Visibility()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Visibility)
}
Visibility::Visibility(const Visibility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gettable_ = from.gettable_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Visibility)
}

void Visibility::SharedCtor() {
  gettable_ = 0;
}

Visibility::~Visibility() {
  // @@protoc_insertion_point(destructor:clarifai.api.Visibility)
  SharedDtor();
}

void Visibility::SharedDtor() {
}

void Visibility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Visibility& Visibility::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Visibility_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Visibility::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Visibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gettable_ = 0;
  _internal_metadata_.Clear();
}

const char* Visibility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.Visibility.Gettable gettable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_gettable(static_cast<::clarifai::api::Visibility_Gettable>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Visibility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Visibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Visibility.Gettable gettable = 1;
  if (this->gettable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gettable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Visibility)
  return target;
}

size_t Visibility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Visibility)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Visibility.Gettable gettable = 1;
  if (this->gettable() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gettable());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Visibility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Visibility)
  GOOGLE_DCHECK_NE(&from, this);
  const Visibility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Visibility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Visibility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Visibility)
    MergeFrom(*source);
  }
}

void Visibility::MergeFrom(const Visibility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Visibility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gettable() != 0) {
    _internal_set_gettable(from._internal_gettable());
  }
}

void Visibility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Visibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visibility::CopyFrom(const Visibility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Visibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visibility::IsInitialized() const {
  return true;
}

void Visibility::InternalSwap(Visibility* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gettable_, other->gettable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Visibility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrendingMetric::InitAsDefaultInstance() {
}
class TrendingMetric::_Internal {
 public:
};

TrendingMetric::TrendingMetric()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TrendingMetric)
}
TrendingMetric::TrendingMetric(const TrendingMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_object_id().empty()) {
    object_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  view_count_ = from.view_count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TrendingMetric)
}

void TrendingMetric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrendingMetric_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  view_count_ = PROTOBUF_ULONGLONG(0);
}

TrendingMetric::~TrendingMetric() {
  // @@protoc_insertion_point(destructor:clarifai.api.TrendingMetric)
  SharedDtor();
}

void TrendingMetric::SharedDtor() {
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrendingMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrendingMetric& TrendingMetric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrendingMetric_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TrendingMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TrendingMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  view_count_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* TrendingMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TrendingMetric.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TrendingMetric.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_object_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TrendingMetric.object_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 view_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          view_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrendingMetric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TrendingMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TrendingMetric.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TrendingMetric.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // string object_id = 3;
  if (this->object_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object_id().data(), static_cast<int>(this->_internal_object_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TrendingMetric.object_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_object_id(), target);
  }

  // uint64 view_count = 4;
  if (this->view_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_view_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TrendingMetric)
  return target;
}

size_t TrendingMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TrendingMetric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string object_id = 3;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object_id());
  }

  // uint64 view_count = 4;
  if (this->view_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrendingMetric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TrendingMetric)
  GOOGLE_DCHECK_NE(&from, this);
  const TrendingMetric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrendingMetric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TrendingMetric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TrendingMetric)
    MergeFrom(*source);
  }
}

void TrendingMetric::MergeFrom(const TrendingMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TrendingMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.view_count() != 0) {
    _internal_set_view_count(from._internal_view_count());
  }
}

void TrendingMetric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TrendingMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendingMetric::CopyFrom(const TrendingMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TrendingMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendingMetric::IsInitialized() const {
  return true;
}

void TrendingMetric::InternalSwap(TrendingMetric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  object_id_.Swap(&other->object_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(view_count_, other->view_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrendingMetric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeSegment::InitAsDefaultInstance() {
  ::clarifai::api::_TimeSegment_default_instance_._instance.get_mutable()->data_ = const_cast< ::clarifai::api::Data*>(
      ::clarifai::api::Data::internal_default_instance());
  ::clarifai::api::_TimeSegment_default_instance_._instance.get_mutable()->time_info_ = const_cast< ::clarifai::api::TimeInfo*>(
      ::clarifai::api::TimeInfo::internal_default_instance());
}
class TimeSegment::_Internal {
 public:
  static const ::clarifai::api::Data& data(const TimeSegment* msg);
  static const ::clarifai::api::TimeInfo& time_info(const TimeSegment* msg);
};

const ::clarifai::api::Data&
TimeSegment::_Internal::data(const TimeSegment* msg) {
  return *msg->data_;
}
const ::clarifai::api::TimeInfo&
TimeSegment::_Internal::time_info(const TimeSegment* msg) {
  return *msg->time_info_;
}
TimeSegment::TimeSegment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TimeSegment)
}
TimeSegment::TimeSegment(const TimeSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_time_info()) {
    time_info_ = new ::clarifai::api::TimeInfo(*from.time_info_);
  } else {
    time_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TimeSegment)
}

void TimeSegment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_info_) -
      reinterpret_cast<char*>(&data_)) + sizeof(time_info_));
}

TimeSegment::~TimeSegment() {
  // @@protoc_insertion_point(destructor:clarifai.api.TimeSegment)
  SharedDtor();
}

void TimeSegment::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete time_info_;
}

void TimeSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeSegment& TimeSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TimeSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TimeSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_info_ != nullptr) {
    delete time_info_;
  }
  time_info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TimeSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TimeSegment.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.TimeInfo time_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TimeSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TimeSegment.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.Data data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // .clarifai.api.TimeInfo time_info = 3;
  if (this->has_time_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TimeSegment)
  return target;
}

size_t TimeSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TimeSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.Data data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .clarifai.api.TimeInfo time_info = 3;
  if (this->has_time_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TimeSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TimeSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TimeSegment)
    MergeFrom(*source);
  }
}

void TimeSegment::MergeFrom(const TimeSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TimeSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (from.has_time_info()) {
    _internal_mutable_time_info()->::clarifai::api::TimeInfo::MergeFrom(from._internal_time_info());
  }
}

void TimeSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TimeSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSegment::CopyFrom(const TimeSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TimeSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSegment::IsInitialized() const {
  return true;
}

void TimeSegment::InternalSwap(TimeSegment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(time_info_, other->time_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeInfo::InitAsDefaultInstance() {
}
class TimeInfo::_Internal {
 public:
};

TimeInfo::TimeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TimeInfo)
}
TimeInfo::TimeInfo(const TimeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_frames_, &from.num_frames_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&num_frames_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TimeInfo)
}

void TimeInfo::SharedCtor() {
  ::memset(&num_frames_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&num_frames_)) + sizeof(end_time_));
}

TimeInfo::~TimeInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TimeInfo)
  SharedDtor();
}

void TimeInfo::SharedDtor() {
}

void TimeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeInfo& TimeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void TimeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TimeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_frames_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&num_frames_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

const char* TimeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_frames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 begin_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TimeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_frames = 1;
  if (this->num_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_frames(), target);
  }

  // uint32 begin_time = 2;
  if (this->begin_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_begin_time(), target);
  }

  // uint32 end_time = 3;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TimeInfo)
  return target;
}

size_t TimeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TimeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 num_frames = 1;
  if (this->num_frames() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_frames());
  }

  // uint32 begin_time = 2;
  if (this->begin_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_begin_time());
  }

  // uint32 end_time = 3;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_end_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TimeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TimeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TimeInfo)
    MergeFrom(*source);
  }
}

void TimeInfo::MergeFrom(const TimeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TimeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_frames() != 0) {
    _internal_set_num_frames(from._internal_num_frames());
  }
  if (from.begin_time() != 0) {
    _internal_set_begin_time(from._internal_begin_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
}

void TimeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeInfo::CopyFrom(const TimeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeInfo::IsInitialized() const {
  return true;
}

void TimeInfo::InternalSwap(TimeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_frames_, other->num_frames_);
  swap(begin_time_, other->begin_time_);
  swap(end_time_, other->end_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::api::Annotation* Arena::CreateMaybeMessage< ::clarifai::api::Annotation >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Annotation >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::App* Arena::CreateMaybeMessage< ::clarifai::api::App >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::App >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AppQuery* Arena::CreateMaybeMessage< ::clarifai::api::AppQuery >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::AppQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Collaborator* Arena::CreateMaybeMessage< ::clarifai::api::Collaborator >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Collaborator >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Collaboration* Arena::CreateMaybeMessage< ::clarifai::api::Collaboration >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Collaboration >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Audio* Arena::CreateMaybeMessage< ::clarifai::api::Audio >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Audio >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AudioInfo* Arena::CreateMaybeMessage< ::clarifai::api::AudioInfo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::AudioInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Track* Arena::CreateMaybeMessage< ::clarifai::api::Track >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Track >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Cluster* Arena::CreateMaybeMessage< ::clarifai::api::Cluster >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Cluster >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Color* Arena::CreateMaybeMessage< ::clarifai::api::Color >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::W3C* Arena::CreateMaybeMessage< ::clarifai::api::W3C >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::W3C >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::UserAppIDSet* Arena::CreateMaybeMessage< ::clarifai::api::UserAppIDSet >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::UserAppIDSet >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAction* Arena::CreateMaybeMessage< ::clarifai::api::PatchAction >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchAction >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Concept* Arena::CreateMaybeMessage< ::clarifai::api::Concept >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Concept >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptCount* Arena::CreateMaybeMessage< ::clarifai::api::ConceptCount >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ConceptCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptTypeCount* Arena::CreateMaybeMessage< ::clarifai::api::ConceptTypeCount >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ConceptTypeCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DetailConceptCount* Arena::CreateMaybeMessage< ::clarifai::api::DetailConceptCount >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DetailConceptCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptQuery* Arena::CreateMaybeMessage< ::clarifai::api::ConceptQuery >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ConceptQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptRelation* Arena::CreateMaybeMessage< ::clarifai::api::ConceptRelation >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ConceptRelation >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::KnowledgeGraph* Arena::CreateMaybeMessage< ::clarifai::api::KnowledgeGraph >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::KnowledgeGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptMappingJob* Arena::CreateMaybeMessage< ::clarifai::api::ConceptMappingJob >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ConceptMappingJob >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptLanguage* Arena::CreateMaybeMessage< ::clarifai::api::ConceptLanguage >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ConceptLanguage >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Data* Arena::CreateMaybeMessage< ::clarifai::api::Data >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Data >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Region* Arena::CreateMaybeMessage< ::clarifai::api::Region >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Region >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::RegionInfo* Arena::CreateMaybeMessage< ::clarifai::api::RegionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::RegionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::BoundingBox* Arena::CreateMaybeMessage< ::clarifai::api::BoundingBox >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::BoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::FrameInfo* Arena::CreateMaybeMessage< ::clarifai::api::FrameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::FrameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Frame* Arena::CreateMaybeMessage< ::clarifai::api::Frame >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Mask* Arena::CreateMaybeMessage< ::clarifai::api::Mask >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Mask >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Polygon* Arena::CreateMaybeMessage< ::clarifai::api::Polygon >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Point* Arena::CreateMaybeMessage< ::clarifai::api::Point >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Span* Arena::CreateMaybeMessage< ::clarifai::api::Span >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Span >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Token* Arena::CreateMaybeMessage< ::clarifai::api::Token >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Token >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Embedding* Arena::CreateMaybeMessage< ::clarifai::api::Embedding >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Embedding >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GeoPoint* Arena::CreateMaybeMessage< ::clarifai::api::GeoPoint >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GeoPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GeoLimit* Arena::CreateMaybeMessage< ::clarifai::api::GeoLimit >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GeoLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GeoBoxedPoint* Arena::CreateMaybeMessage< ::clarifai::api::GeoBoxedPoint >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GeoBoxedPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Geo* Arena::CreateMaybeMessage< ::clarifai::api::Geo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Geo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Image* Arena::CreateMaybeMessage< ::clarifai::api::Image >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ImageInfo* Arena::CreateMaybeMessage< ::clarifai::api::ImageInfo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ImageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::HostedURL* Arena::CreateMaybeMessage< ::clarifai::api::HostedURL >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::HostedURL >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Input* Arena::CreateMaybeMessage< ::clarifai::api::Input >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Input >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::InputCount* Arena::CreateMaybeMessage< ::clarifai::api::InputCount >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::InputCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AnnotationFilter* Arena::CreateMaybeMessage< ::clarifai::api::AnnotationFilter >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::AnnotationFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetVersion* Arena::CreateMaybeMessage< ::clarifai::api::DatasetVersion >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DatasetVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AnnotationFilterConfig* Arena::CreateMaybeMessage< ::clarifai::api::AnnotationFilterConfig >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::AnnotationFilterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetVersionMetrics* Arena::CreateMaybeMessage< ::clarifai::api::DatasetVersionMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DatasetVersionMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowResultsSimilarity* Arena::CreateMaybeMessage< ::clarifai::api::WorkflowResultsSimilarity >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::WorkflowResultsSimilarity >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Key* Arena::CreateMaybeMessage< ::clarifai::api::Key >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Key >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Model* Arena::CreateMaybeMessage< ::clarifai::api::Model >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Model >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelReference* Arena::CreateMaybeMessage< ::clarifai::api::ModelReference >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ModelReference >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelVersionInputExample* Arena::CreateMaybeMessage< ::clarifai::api::ModelVersionInputExample >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ModelVersionInputExample >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::OutputInfo* Arena::CreateMaybeMessage< ::clarifai::api::OutputInfo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::OutputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::InputInfo* Arena::CreateMaybeMessage< ::clarifai::api::InputInfo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::InputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TrainInfo* Arena::CreateMaybeMessage< ::clarifai::api::TrainInfo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TrainInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ImportInfo* Arena::CreateMaybeMessage< ::clarifai::api::ImportInfo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ImportInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::OutputConfig* Arena::CreateMaybeMessage< ::clarifai::api::OutputConfig >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::OutputConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelType* Arena::CreateMaybeMessage< ::clarifai::api::ModelType >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ModelType >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelTypeField* Arena::CreateMaybeMessage< ::clarifai::api::ModelTypeField >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ModelTypeField >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelTypeRangeInfo* Arena::CreateMaybeMessage< ::clarifai::api::ModelTypeRangeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ModelTypeRangeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelTypeEnumOption* Arena::CreateMaybeMessage< ::clarifai::api::ModelTypeEnumOption >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ModelTypeEnumOption >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelTypeEnumOptionAlias* Arena::CreateMaybeMessage< ::clarifai::api::ModelTypeEnumOptionAlias >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ModelTypeEnumOptionAlias >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelQuery* Arena::CreateMaybeMessage< ::clarifai::api::ModelQuery >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ModelQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelVersion* Arena::CreateMaybeMessage< ::clarifai::api::ModelVersion >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ModelVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PretrainedModelConfig* Arena::CreateMaybeMessage< ::clarifai::api::PretrainedModelConfig >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PretrainedModelConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TrainStats* Arena::CreateMaybeMessage< ::clarifai::api::TrainStats >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TrainStats >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LossCurveEntry* Arena::CreateMaybeMessage< ::clarifai::api::LossCurveEntry >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::LossCurveEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LabelCount* Arena::CreateMaybeMessage< ::clarifai::api::LabelCount >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::LabelCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LabelDistribution* Arena::CreateMaybeMessage< ::clarifai::api::LabelDistribution >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::LabelDistribution >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::CooccurrenceMatrixEntry* Arena::CreateMaybeMessage< ::clarifai::api::CooccurrenceMatrixEntry >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::CooccurrenceMatrixEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::CooccurrenceMatrix* Arena::CreateMaybeMessage< ::clarifai::api::CooccurrenceMatrix >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::CooccurrenceMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConfusionMatrixEntry* Arena::CreateMaybeMessage< ::clarifai::api::ConfusionMatrixEntry >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ConfusionMatrixEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConfusionMatrix* Arena::CreateMaybeMessage< ::clarifai::api::ConfusionMatrix >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ConfusionMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ROC* Arena::CreateMaybeMessage< ::clarifai::api::ROC >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ROC >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PrecisionRecallCurve* Arena::CreateMaybeMessage< ::clarifai::api::PrecisionRecallCurve >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PrecisionRecallCurve >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::BinaryMetrics* Arena::CreateMaybeMessage< ::clarifai::api::BinaryMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::BinaryMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TrackerMetrics* Arena::CreateMaybeMessage< ::clarifai::api::TrackerMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TrackerMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::EvalTestSetEntry* Arena::CreateMaybeMessage< ::clarifai::api::EvalTestSetEntry >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::EvalTestSetEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LOPQEvalResult* Arena::CreateMaybeMessage< ::clarifai::api::LOPQEvalResult >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::LOPQEvalResult >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MetricsSummary* Arena::CreateMaybeMessage< ::clarifai::api::MetricsSummary >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MetricsSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::EvalMetrics* Arena::CreateMaybeMessage< ::clarifai::api::EvalMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::EvalMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::FieldsValue* Arena::CreateMaybeMessage< ::clarifai::api::FieldsValue >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::FieldsValue >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Output* Arena::CreateMaybeMessage< ::clarifai::api::Output >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Output >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ScopeDeps* Arena::CreateMaybeMessage< ::clarifai::api::ScopeDeps >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ScopeDeps >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::EndpointDeps* Arena::CreateMaybeMessage< ::clarifai::api::EndpointDeps >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::EndpointDeps >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Hit* Arena::CreateMaybeMessage< ::clarifai::api::Hit >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Hit >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::And* Arena::CreateMaybeMessage< ::clarifai::api::And >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::And >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Query* Arena::CreateMaybeMessage< ::clarifai::api::Query >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Query >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Search* Arena::CreateMaybeMessage< ::clarifai::api::Search >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Search >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Filter* Arena::CreateMaybeMessage< ::clarifai::api::Filter >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TimeRange* Arena::CreateMaybeMessage< ::clarifai::api::TimeRange >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TimeRange >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Rank* Arena::CreateMaybeMessage< ::clarifai::api::Rank >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Rank >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AnnotationSearchMetrics* Arena::CreateMaybeMessage< ::clarifai::api::AnnotationSearchMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::AnnotationSearchMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Text* Arena::CreateMaybeMessage< ::clarifai::api::Text >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Text >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TextInfo* Arena::CreateMaybeMessage< ::clarifai::api::TextInfo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TextInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::User* Arena::CreateMaybeMessage< ::clarifai::api::User >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::User >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::UserDetail* Arena::CreateMaybeMessage< ::clarifai::api::UserDetail >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::UserDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::EmailAddress* Arena::CreateMaybeMessage< ::clarifai::api::EmailAddress >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::EmailAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Password* Arena::CreateMaybeMessage< ::clarifai::api::Password >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Password >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PasswordViolations* Arena::CreateMaybeMessage< ::clarifai::api::PasswordViolations >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PasswordViolations >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Video* Arena::CreateMaybeMessage< ::clarifai::api::Video >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Video >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::VideoInfo* Arena::CreateMaybeMessage< ::clarifai::api::VideoInfo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::VideoInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Workflow* Arena::CreateMaybeMessage< ::clarifai::api::Workflow >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Workflow >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowVersion* Arena::CreateMaybeMessage< ::clarifai::api::WorkflowVersion >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::WorkflowVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowNode* Arena::CreateMaybeMessage< ::clarifai::api::WorkflowNode >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::WorkflowNode >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::NodeInput* Arena::CreateMaybeMessage< ::clarifai::api::NodeInput >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::NodeInput >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowResult* Arena::CreateMaybeMessage< ::clarifai::api::WorkflowResult >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::WorkflowResult >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowState* Arena::CreateMaybeMessage< ::clarifai::api::WorkflowState >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::WorkflowState >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AppDuplication* Arena::CreateMaybeMessage< ::clarifai::api::AppDuplication >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::AppDuplication >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AppDuplicationFilters* Arena::CreateMaybeMessage< ::clarifai::api::AppDuplicationFilters >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::AppDuplicationFilters >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LabelOrder* Arena::CreateMaybeMessage< ::clarifai::api::LabelOrder >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::LabelOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Task* Arena::CreateMaybeMessage< ::clarifai::api::Task >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AiAssistParameters* Arena::CreateMaybeMessage< ::clarifai::api::AiAssistParameters >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::AiAssistParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskWorker* Arena::CreateMaybeMessage< ::clarifai::api::TaskWorker >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TaskWorker >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskWorkerPartitionedStrategyInfo* Arena::CreateMaybeMessage< ::clarifai::api::TaskWorkerPartitionedStrategyInfo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TaskWorkerPartitionedStrategyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskInputSource* Arena::CreateMaybeMessage< ::clarifai::api::TaskInputSource >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TaskInputSource >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskReview* Arena::CreateMaybeMessage< ::clarifai::api::TaskReview >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TaskReview >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskReviewManualStrategyInfo* Arena::CreateMaybeMessage< ::clarifai::api::TaskReviewManualStrategyInfo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TaskReviewManualStrategyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskReviewConsensusStrategyInfo* Arena::CreateMaybeMessage< ::clarifai::api::TaskReviewConsensusStrategyInfo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TaskReviewConsensusStrategyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskAIAssistant* Arena::CreateMaybeMessage< ::clarifai::api::TaskAIAssistant >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TaskAIAssistant >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskStatusCountPerUser* Arena::CreateMaybeMessage< ::clarifai::api::TaskStatusCountPerUser >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TaskStatusCountPerUser >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Collector* Arena::CreateMaybeMessage< ::clarifai::api::Collector >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Collector >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::CollectorSource* Arena::CreateMaybeMessage< ::clarifai::api::CollectorSource >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::CollectorSource >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::APIPostModelOutputsCollectorSource* Arena::CreateMaybeMessage< ::clarifai::api::APIPostModelOutputsCollectorSource >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::APIPostModelOutputsCollectorSource >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StatValue* Arena::CreateMaybeMessage< ::clarifai::api::StatValue >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::StatValue >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StatValueAggregateResult* Arena::CreateMaybeMessage< ::clarifai::api::StatValueAggregateResult >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::StatValueAggregateResult >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StatValueAggregate* Arena::CreateMaybeMessage< ::clarifai::api::StatValueAggregate >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::StatValueAggregate >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StatValueAggregateQuery* Arena::CreateMaybeMessage< ::clarifai::api::StatValueAggregateQuery >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::StatValueAggregateQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Visibility* Arena::CreateMaybeMessage< ::clarifai::api::Visibility >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Visibility >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TrendingMetric* Arena::CreateMaybeMessage< ::clarifai::api::TrendingMetric >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TrendingMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TimeSegment* Arena::CreateMaybeMessage< ::clarifai::api::TimeSegment >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TimeSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TimeInfo* Arena::CreateMaybeMessage< ::clarifai::api::TimeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TimeInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
