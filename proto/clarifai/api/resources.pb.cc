// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/resources.proto

#include "proto/clarifai/api/resources.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace clarifai {
namespace api {
constexpr Annotation::Annotation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , embed_model_version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(nullptr)
  , status_(nullptr)
  , created_at_(nullptr)
  , modified_at_(nullptr)
  , annotation_info_(nullptr)
  , consensus_info_(nullptr)
  , trusted_(false)
  , input_level_(false){}
struct AnnotationDefaultTypeInternal {
  constexpr AnnotationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnnotationDefaultTypeInternal() {}
  union {
    Annotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnnotationDefaultTypeInternal _Annotation_default_instance_;
constexpr App::App(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , default_language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , default_workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_tier_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , metadata_(nullptr)
  , visibility_(nullptr)
  , modified_at_(nullptr)
  , legal_consent_status_(0u)
  , sample_ms_(0u)
  , is_starred_(false)
  , star_count_(0){}
struct AppDefaultTypeInternal {
  constexpr AppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppDefaultTypeInternal() {}
  union {
    App _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppDefaultTypeInternal _App_default_instance_;
constexpr AppQuery::AppQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AppQueryDefaultTypeInternal {
  constexpr AppQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppQueryDefaultTypeInternal() {}
  union {
    AppQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppQueryDefaultTypeInternal _AppQuery_default_instance_;
constexpr Collaborator::Collaborator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scopes_()
  , endpoints_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_(nullptr)
  , user_(nullptr)
  , created_at_(nullptr)
  , modified_at_(nullptr)
  , deleted_at_(nullptr){}
struct CollaboratorDefaultTypeInternal {
  constexpr CollaboratorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollaboratorDefaultTypeInternal() {}
  union {
    Collaborator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollaboratorDefaultTypeInternal _Collaborator_default_instance_;
constexpr Collaboration::Collaboration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scopes_()
  , endpoints_()
  , app_(nullptr)
  , app_owner_(nullptr)
  , created_at_(nullptr){}
struct CollaborationDefaultTypeInternal {
  constexpr CollaborationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollaborationDefaultTypeInternal() {}
  union {
    Collaboration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollaborationDefaultTypeInternal _Collaboration_default_instance_;
constexpr Audio::Audio(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base64_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hosted_(nullptr)
  , audio_info_(nullptr)
  , allow_duplicate_url_(false){}
struct AudioDefaultTypeInternal {
  constexpr AudioDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioDefaultTypeInternal() {}
  union {
    Audio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioDefaultTypeInternal _Audio_default_instance_;
constexpr AudioInfo::AudioInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : audio_format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sample_rate_(0)
  , duration_seconds_(0)
  , bit_rate_(0){}
struct AudioInfoDefaultTypeInternal {
  constexpr AudioInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioInfoDefaultTypeInternal() {}
  union {
    AudioInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioInfoDefaultTypeInternal _AudioInfo_default_instance_;
constexpr Track::Track(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(nullptr)
  , time_info_(nullptr)
  , quality_(0){}
struct TrackDefaultTypeInternal {
  constexpr TrackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackDefaultTypeInternal() {}
  union {
    Track _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackDefaultTypeInternal _Track_default_instance_;
constexpr Cluster::Cluster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hits_()
  , projection_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(0u)
  , score_(0){}
struct ClusterDefaultTypeInternal {
  constexpr ClusterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClusterDefaultTypeInternal() {}
  union {
    Cluster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClusterDefaultTypeInternal _Cluster_default_instance_;
constexpr Color::Color(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : raw_hex_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , w3c_(nullptr)
  , value_(0){}
struct ColorDefaultTypeInternal {
  constexpr ColorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorDefaultTypeInternal _Color_default_instance_;
constexpr W3C::W3C(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hex_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct W3CDefaultTypeInternal {
  constexpr W3CDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~W3CDefaultTypeInternal() {}
  union {
    W3C _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT W3CDefaultTypeInternal _W3C_default_instance_;
constexpr UserAppIDSet::UserAppIDSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UserAppIDSetDefaultTypeInternal {
  constexpr UserAppIDSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserAppIDSetDefaultTypeInternal() {}
  union {
    UserAppIDSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserAppIDSetDefaultTypeInternal _UserAppIDSet_default_instance_;
constexpr PatchAction::PatchAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : op_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , merge_conflict_resolution_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PatchActionDefaultTypeInternal {
  constexpr PatchActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchActionDefaultTypeInternal() {}
  union {
    PatchAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchActionDefaultTypeInternal _PatchAction_default_instance_;
constexpr Concept::Concept(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , definition_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vocab_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , visibility_(nullptr)
  , value_(0){}
struct ConceptDefaultTypeInternal {
  constexpr ConceptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConceptDefaultTypeInternal() {}
  union {
    Concept _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConceptDefaultTypeInternal _Concept_default_instance_;
constexpr ConceptCount::ConceptCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , concept_type_count_(nullptr)
  , detail_concept_count_(nullptr){}
struct ConceptCountDefaultTypeInternal {
  constexpr ConceptCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConceptCountDefaultTypeInternal() {}
  union {
    ConceptCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConceptCountDefaultTypeInternal _ConceptCount_default_instance_;
constexpr ConceptTypeCount::ConceptTypeCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : positive_(0u)
  , negative_(0u){}
struct ConceptTypeCountDefaultTypeInternal {
  constexpr ConceptTypeCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConceptTypeCountDefaultTypeInternal() {}
  union {
    ConceptTypeCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConceptTypeCountDefaultTypeInternal _ConceptTypeCount_default_instance_;
constexpr DetailConceptCount::DetailConceptCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : processed_(nullptr)
  , to_process_(nullptr)
  , errors_(nullptr)
  , processing_(nullptr){}
struct DetailConceptCountDefaultTypeInternal {
  constexpr DetailConceptCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetailConceptCountDefaultTypeInternal() {}
  union {
    DetailConceptCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetailConceptCountDefaultTypeInternal _DetailConceptCount_default_instance_;
constexpr ConceptQuery::ConceptQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ConceptQueryDefaultTypeInternal {
  constexpr ConceptQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConceptQueryDefaultTypeInternal() {}
  union {
    ConceptQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConceptQueryDefaultTypeInternal _ConceptQuery_default_instance_;
constexpr ConceptRelation::ConceptRelation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , predicate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , knowledge_graph_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subject_concept_(nullptr)
  , object_concept_(nullptr)
  , visibility_(nullptr){}
struct ConceptRelationDefaultTypeInternal {
  constexpr ConceptRelationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConceptRelationDefaultTypeInternal() {}
  union {
    ConceptRelation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConceptRelationDefaultTypeInternal _ConceptRelation_default_instance_;
constexpr KnowledgeGraph::KnowledgeGraph(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , examples_app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sampled_examples_app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct KnowledgeGraphDefaultTypeInternal {
  constexpr KnowledgeGraphDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KnowledgeGraphDefaultTypeInternal() {}
  union {
    KnowledgeGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KnowledgeGraphDefaultTypeInternal _KnowledgeGraph_default_instance_;
constexpr ConceptMappingJob::ConceptMappingJob(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_ids_()
  , knowledge_graph_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ConceptMappingJobDefaultTypeInternal {
  constexpr ConceptMappingJobDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConceptMappingJobDefaultTypeInternal() {}
  union {
    ConceptMappingJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConceptMappingJobDefaultTypeInternal _ConceptMappingJob_default_instance_;
constexpr ConceptLanguage::ConceptLanguage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , definition_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ConceptLanguageDefaultTypeInternal {
  constexpr ConceptLanguageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConceptLanguageDefaultTypeInternal() {}
  union {
    ConceptLanguage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConceptLanguageDefaultTypeInternal _ConceptLanguage_default_instance_;
constexpr Data::Data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concepts_()
  , colors_()
  , clusters_()
  , embeddings_()
  , regions_()
  , frames_()
  , tracks_()
  , time_segments_()
  , hits_()
  , heatmaps_()
  , image_(nullptr)
  , video_(nullptr)
  , metadata_(nullptr)
  , geo_(nullptr)
  , text_(nullptr)
  , audio_(nullptr){}
struct DataDefaultTypeInternal {
  constexpr DataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataDefaultTypeInternal _Data_default_instance_;
constexpr Region::Region(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , track_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , region_info_(nullptr)
  , data_(nullptr)
  , value_(0){}
struct RegionDefaultTypeInternal {
  constexpr RegionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionDefaultTypeInternal() {}
  union {
    Region _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionDefaultTypeInternal _Region_default_instance_;
constexpr RegionInfo::RegionInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bounding_box_(nullptr)
  , mask_(nullptr)
  , polygon_(nullptr)
  , point_(nullptr)
  , span_(nullptr)
  , token_(nullptr){}
struct RegionInfoDefaultTypeInternal {
  constexpr RegionInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionInfoDefaultTypeInternal() {}
  union {
    RegionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionInfoDefaultTypeInternal _RegionInfo_default_instance_;
constexpr BoundingBox::BoundingBox(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : top_row_(0)
  , left_col_(0)
  , bottom_row_(0)
  , right_col_(0){}
struct BoundingBoxDefaultTypeInternal {
  constexpr BoundingBoxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoundingBoxDefaultTypeInternal() {}
  union {
    BoundingBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;
constexpr FrameInfo::FrameInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(0u)
  , time_(0u){}
struct FrameInfoDefaultTypeInternal {
  constexpr FrameInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrameInfoDefaultTypeInternal() {}
  union {
    FrameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrameInfoDefaultTypeInternal _FrameInfo_default_instance_;
constexpr Frame::Frame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , frame_info_(nullptr)
  , data_(nullptr){}
struct FrameDefaultTypeInternal {
  constexpr FrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrameDefaultTypeInternal() {}
  union {
    Frame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrameDefaultTypeInternal _Frame_default_instance_;
constexpr Mask::Mask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_(nullptr){}
struct MaskDefaultTypeInternal {
  constexpr MaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaskDefaultTypeInternal() {}
  union {
    Mask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaskDefaultTypeInternal _Mask_default_instance_;
constexpr Polygon::Polygon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_(){}
struct PolygonDefaultTypeInternal {
  constexpr PolygonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolygonDefaultTypeInternal() {}
  union {
    Polygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolygonDefaultTypeInternal _Polygon_default_instance_;
constexpr Point::Point(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_(0)
  , col_(0)
  , z_(0){}
struct PointDefaultTypeInternal {
  constexpr PointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointDefaultTypeInternal _Point_default_instance_;
constexpr Span::Span(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : raw_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , char_start_(0u)
  , char_end_(0u){}
struct SpanDefaultTypeInternal {
  constexpr SpanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpanDefaultTypeInternal() {}
  union {
    Span _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpanDefaultTypeInternal _Span_default_instance_;
constexpr Token::Token(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : raw_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , char_start_(0u)
  , char_end_(0u){}
struct TokenDefaultTypeInternal {
  constexpr TokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TokenDefaultTypeInternal() {}
  union {
    Token _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TokenDefaultTypeInternal _Token_default_instance_;
constexpr Embedding::Embedding(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vector_()
  , num_dimensions_(0u){}
struct EmbeddingDefaultTypeInternal {
  constexpr EmbeddingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmbeddingDefaultTypeInternal() {}
  union {
    Embedding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmbeddingDefaultTypeInternal _Embedding_default_instance_;
constexpr GeoPoint::GeoPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : longitude_(0)
  , latitude_(0){}
struct GeoPointDefaultTypeInternal {
  constexpr GeoPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GeoPointDefaultTypeInternal() {}
  union {
    GeoPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GeoPointDefaultTypeInternal _GeoPoint_default_instance_;
constexpr GeoLimit::GeoLimit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(0){}
struct GeoLimitDefaultTypeInternal {
  constexpr GeoLimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GeoLimitDefaultTypeInternal() {}
  union {
    GeoLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GeoLimitDefaultTypeInternal _GeoLimit_default_instance_;
constexpr GeoBoxedPoint::GeoBoxedPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : geo_point_(nullptr){}
struct GeoBoxedPointDefaultTypeInternal {
  constexpr GeoBoxedPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GeoBoxedPointDefaultTypeInternal() {}
  union {
    GeoBoxedPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GeoBoxedPointDefaultTypeInternal _GeoBoxedPoint_default_instance_;
constexpr Geo::Geo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : geo_box_()
  , geo_point_(nullptr)
  , geo_limit_(nullptr){}
struct GeoDefaultTypeInternal {
  constexpr GeoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GeoDefaultTypeInternal() {}
  union {
    Geo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GeoDefaultTypeInternal _Geo_default_instance_;
constexpr Image::Image(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base64_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hosted_(nullptr)
  , image_info_(nullptr)
  , allow_duplicate_url_(false){}
struct ImageDefaultTypeInternal {
  constexpr ImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageDefaultTypeInternal _Image_default_instance_;
constexpr ImageInfo::ImageInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_mode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0)
  , height_(0){}
struct ImageInfoDefaultTypeInternal {
  constexpr ImageInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageInfoDefaultTypeInternal() {}
  union {
    ImageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageInfoDefaultTypeInternal _ImageInfo_default_instance_;
constexpr HostedURL::HostedURL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sizes_()
  , prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , suffix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , crossorigin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct HostedURLDefaultTypeInternal {
  constexpr HostedURLDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HostedURLDefaultTypeInternal() {}
  union {
    HostedURL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HostedURLDefaultTypeInternal _HostedURL_default_instance_;
constexpr Input::Input(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_ids_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(nullptr)
  , created_at_(nullptr)
  , modified_at_(nullptr)
  , status_(nullptr){}
struct InputDefaultTypeInternal {
  constexpr InputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InputDefaultTypeInternal() {}
  union {
    Input _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InputDefaultTypeInternal _Input_default_instance_;
constexpr InputCount::InputCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : processed_(0u)
  , to_process_(0u)
  , errors_(0u)
  , processing_(0u)
  , reindexed_(0u)
  , to_reindex_(0u)
  , reindex_errors_(0u)
  , reindexing_(0u){}
struct InputCountDefaultTypeInternal {
  constexpr InputCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InputCountDefaultTypeInternal() {}
  union {
    InputCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InputCountDefaultTypeInternal _InputCount_default_instance_;
constexpr Dataset::Dataset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , modified_at_(nullptr)
  , metadata_(nullptr)
  , visibility_(nullptr)
  , default_annotation_filter_(nullptr)
  , version_(nullptr){}
struct DatasetDefaultTypeInternal {
  constexpr DatasetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DatasetDefaultTypeInternal() {}
  union {
    Dataset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DatasetDefaultTypeInternal _Dataset_default_instance_;
constexpr AnnotationFilter::AnnotationFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , modified_at_(nullptr)
  , saved_search_(nullptr){}
struct AnnotationFilterDefaultTypeInternal {
  constexpr AnnotationFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnnotationFilterDefaultTypeInternal() {}
  union {
    AnnotationFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnnotationFilterDefaultTypeInternal _AnnotationFilter_default_instance_;
constexpr DatasetInput::DatasetInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : created_at_(nullptr)
  , input_(nullptr){}
struct DatasetInputDefaultTypeInternal {
  constexpr DatasetInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DatasetInputDefaultTypeInternal() {}
  union {
    DatasetInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DatasetInputDefaultTypeInternal _DatasetInput_default_instance_;
constexpr DatasetVersion_MetricsEntry_DoNotUse::DatasetVersion_MetricsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DatasetVersion_MetricsEntry_DoNotUseDefaultTypeInternal {
  constexpr DatasetVersion_MetricsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DatasetVersion_MetricsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DatasetVersion_MetricsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DatasetVersion_MetricsEntry_DoNotUseDefaultTypeInternal _DatasetVersion_MetricsEntry_DoNotUse_default_instance_;
constexpr DatasetVersion::DatasetVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : embed_model_version_ids_()
  , metrics_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dataset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , modified_at_(nullptr)
  , status_(nullptr)
  , metadata_(nullptr)
  , visibility_(nullptr)
  , _oneof_case_{}{}
struct DatasetVersionDefaultTypeInternal {
  constexpr DatasetVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DatasetVersionDefaultTypeInternal() {}
  union {
    DatasetVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DatasetVersionDefaultTypeInternal _DatasetVersion_default_instance_;
constexpr AnnotationFilterConfig::AnnotationFilterConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotation_filter_(nullptr){}
struct AnnotationFilterConfigDefaultTypeInternal {
  constexpr AnnotationFilterConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnnotationFilterConfigDefaultTypeInternal() {}
  union {
    AnnotationFilterConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnnotationFilterConfigDefaultTypeInternal _AnnotationFilterConfig_default_instance_;
constexpr DatasetVersionMetrics::DatasetVersionMetrics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_count_(nullptr)
  , unlabeled_inputs_count_(nullptr)
  , inputs_with_metadata_count_(nullptr)
  , inputs_with_geo_count_(nullptr)
  , regions_count_(nullptr)
  , region_location_matrix_(nullptr)
  , bounding_boxes_count_(nullptr)
  , polygons_count_(nullptr)
  , points_count_(nullptr)
  , masks_count_(nullptr)
  , frames_count_(nullptr)
  , embeddings_count_(nullptr)
  , positive_input_tags_count_(nullptr)
  , positive_region_tags_count_(nullptr)
  , positive_frame_tags_count_(nullptr)
  , region_inputs_count_(nullptr)
  , region_frames_count_(nullptr)
  , frame_inputs_count_(nullptr){}
struct DatasetVersionMetricsDefaultTypeInternal {
  constexpr DatasetVersionMetricsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DatasetVersionMetricsDefaultTypeInternal() {}
  union {
    DatasetVersionMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DatasetVersionMetricsDefaultTypeInternal _DatasetVersionMetrics_default_instance_;
constexpr DatasetVersionMetricsGroup::DatasetVersionMetricsGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr)
  , metrics_(nullptr)
  , type_(0)
{}
struct DatasetVersionMetricsGroupDefaultTypeInternal {
  constexpr DatasetVersionMetricsGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DatasetVersionMetricsGroupDefaultTypeInternal() {}
  union {
    DatasetVersionMetricsGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DatasetVersionMetricsGroupDefaultTypeInternal _DatasetVersionMetricsGroup_default_instance_;
constexpr WorkflowResultsSimilarity::WorkflowResultsSimilarity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pool_results_()
  , probe_input_(nullptr){}
struct WorkflowResultsSimilarityDefaultTypeInternal {
  constexpr WorkflowResultsSimilarityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowResultsSimilarityDefaultTypeInternal() {}
  union {
    WorkflowResultsSimilarity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowResultsSimilarityDefaultTypeInternal _WorkflowResultsSimilarity_default_instance_;
constexpr Key::Key(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scopes_()
  , apps_()
  , endpoints_()
  , authorized_idp_ids_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , expires_at_(nullptr){}
struct KeyDefaultTypeInternal {
  constexpr KeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyDefaultTypeInternal() {}
  union {
    Key _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyDefaultTypeInternal _Key_default_instance_;
constexpr Model::Model(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : toolkits_()
  , use_cases_()
  , languages_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , display_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_type_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , output_info_(nullptr)
  , model_version_(nullptr)
  , input_info_(nullptr)
  , train_info_(nullptr)
  , visibility_(nullptr)
  , metadata_(nullptr)
  , modified_at_(nullptr)
  , import_info_(nullptr)
  , presets_(nullptr)
  , workflow_recommended_(nullptr)
  , default_eval_info_(nullptr)
  , is_starred_(false)
  , star_count_(0){}
struct ModelDefaultTypeInternal {
  constexpr ModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelDefaultTypeInternal() {}
  union {
    Model _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelDefaultTypeInternal _Model_default_instance_;
constexpr ModelReference::ModelReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr){}
struct ModelReferenceDefaultTypeInternal {
  constexpr ModelReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelReferenceDefaultTypeInternal() {}
  union {
    ModelReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelReferenceDefaultTypeInternal _ModelReference_default_instance_;
constexpr ModelVersionInputExample::ModelVersionInputExample(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(nullptr){}
struct ModelVersionInputExampleDefaultTypeInternal {
  constexpr ModelVersionInputExampleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelVersionInputExampleDefaultTypeInternal() {}
  union {
    ModelVersionInputExample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelVersionInputExampleDefaultTypeInternal _ModelVersionInputExample_default_instance_;
constexpr OutputInfo::OutputInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(nullptr)
  , output_config_(nullptr)
  , fields_map_(nullptr)
  , params_(nullptr){}
struct OutputInfoDefaultTypeInternal {
  constexpr OutputInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutputInfoDefaultTypeInternal() {}
  union {
    OutputInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutputInfoDefaultTypeInternal _OutputInfo_default_instance_;
constexpr InputInfo::InputInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_map_(nullptr)
  , params_(nullptr){}
struct InputInfoDefaultTypeInternal {
  constexpr InputInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InputInfoDefaultTypeInternal() {}
  union {
    InputInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InputInfoDefaultTypeInternal _InputInfo_default_instance_;
constexpr TrainInfo::TrainInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_(nullptr){}
struct TrainInfoDefaultTypeInternal {
  constexpr TrainInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrainInfoDefaultTypeInternal() {}
  union {
    TrainInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrainInfoDefaultTypeInternal _TrainInfo_default_instance_;
constexpr EvalInfo::EvalInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_(nullptr){}
struct EvalInfoDefaultTypeInternal {
  constexpr EvalInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EvalInfoDefaultTypeInternal() {}
  union {
    EvalInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EvalInfoDefaultTypeInternal _EvalInfo_default_instance_;
constexpr ImportInfo::ImportInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_(nullptr){}
struct ImportInfoDefaultTypeInternal {
  constexpr ImportInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImportInfoDefaultTypeInternal() {}
  union {
    ImportInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImportInfoDefaultTypeInternal _ImportInfo_default_instance_;
constexpr OutputConfig::OutputConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : select_concepts_()
  , existing_model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hyper_parameters_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , embed_model_version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hyper_params_(nullptr)
  , model_metadata_(nullptr)
  , max_concepts_(0u)
  , concepts_mutually_exclusive_(false)
  , closed_environment_(false)
  , fail_on_missing_positive_examples_(false)
  , min_value_(0)
  , training_timeout_(0u)
  , sample_ms_(0u){}
struct OutputConfigDefaultTypeInternal {
  constexpr OutputConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutputConfigDefaultTypeInternal() {}
  union {
    OutputConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutputConfigDefaultTypeInternal _OutputConfig_default_instance_;
constexpr ModelType::ModelType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_fields_()
  , output_fields_()
  , model_type_fields_()
  , expected_input_layers_()
  , expected_output_layers_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , trainable_(false)
  , creatable_(false)
  , internal_only_(false)
  , requires_sequential_frames_(false)
  , evaluable_(false){}
struct ModelTypeDefaultTypeInternal {
  constexpr ModelTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelTypeDefaultTypeInternal() {}
  union {
    ModelType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelTypeDefaultTypeInternal _ModelType_default_instance_;
constexpr ModelLayerInfo::ModelLayerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shapes_()
  , data_field_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , requires_label_filename_(false){}
struct ModelLayerInfoDefaultTypeInternal {
  constexpr ModelLayerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelLayerInfoDefaultTypeInternal() {}
  union {
    ModelLayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelLayerInfoDefaultTypeInternal _ModelLayerInfo_default_instance_;
constexpr LayerShape::LayerShape(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dims_()
  , _dims_cached_byte_size_(0)
  , max_dims_()
  , _max_dims_cached_byte_size_(0)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_type_(0)
{}
struct LayerShapeDefaultTypeInternal {
  constexpr LayerShapeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LayerShapeDefaultTypeInternal() {}
  union {
    LayerShape _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LayerShapeDefaultTypeInternal _LayerShape_default_instance_;
constexpr ModelTypeField::ModelTypeField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_type_enum_options_()
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , placeholder_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , default_value_(nullptr)
  , model_type_range_info_(nullptr)
  , field_type_(0)

  , internal_only_(false)
  , required_(false){}
struct ModelTypeFieldDefaultTypeInternal {
  constexpr ModelTypeFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelTypeFieldDefaultTypeInternal() {}
  union {
    ModelTypeField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelTypeFieldDefaultTypeInternal _ModelTypeField_default_instance_;
constexpr ModelTypeRangeInfo::ModelTypeRangeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_(0)
  , max_(0)
  , step_(0){}
struct ModelTypeRangeInfoDefaultTypeInternal {
  constexpr ModelTypeRangeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelTypeRangeInfoDefaultTypeInternal() {}
  union {
    ModelTypeRangeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelTypeRangeInfoDefaultTypeInternal _ModelTypeRangeInfo_default_instance_;
constexpr ModelTypeEnumOption::ModelTypeEnumOption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_type_fields_()
  , aliases_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , internal_only_(false){}
struct ModelTypeEnumOptionDefaultTypeInternal {
  constexpr ModelTypeEnumOptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelTypeEnumOptionDefaultTypeInternal() {}
  union {
    ModelTypeEnumOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelTypeEnumOptionDefaultTypeInternal _ModelTypeEnumOption_default_instance_;
constexpr ModelTypeEnumOptionAlias::ModelTypeEnumOptionAlias(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_int_(int64_t{0}){}
struct ModelTypeEnumOptionAliasDefaultTypeInternal {
  constexpr ModelTypeEnumOptionAliasDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelTypeEnumOptionAliasDefaultTypeInternal() {}
  union {
    ModelTypeEnumOptionAlias _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelTypeEnumOptionAliasDefaultTypeInternal _ModelTypeEnumOptionAlias_default_instance_;
constexpr ModelQuery::ModelQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_type_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ModelQueryDefaultTypeInternal {
  constexpr ModelQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelQueryDefaultTypeInternal() {}
  union {
    ModelQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelQueryDefaultTypeInternal _ModelQuery_default_instance_;
constexpr ModelVersion::ModelVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , license_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , status_(nullptr)
  , metrics_(nullptr)
  , pretrained_model_config_(nullptr)
  , completed_at_(nullptr)
  , visibility_(nullptr)
  , modified_at_(nullptr)
  , metadata_(nullptr)
  , dataset_version_(nullptr)
  , active_concept_count_(0u)
  , total_input_count_(0u){}
struct ModelVersionDefaultTypeInternal {
  constexpr ModelVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelVersionDefaultTypeInternal() {}
  union {
    ModelVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelVersionDefaultTypeInternal _ModelVersion_default_instance_;
constexpr PretrainedModelConfig::PretrainedModelConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_zip_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_fields_map_(nullptr)
  , output_fields_map_(nullptr){}
struct PretrainedModelConfigDefaultTypeInternal {
  constexpr PretrainedModelConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PretrainedModelConfigDefaultTypeInternal() {}
  union {
    PretrainedModelConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PretrainedModelConfigDefaultTypeInternal _PretrainedModelConfig_default_instance_;
constexpr TrainStats::TrainStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : loss_curve_(){}
struct TrainStatsDefaultTypeInternal {
  constexpr TrainStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrainStatsDefaultTypeInternal() {}
  union {
    TrainStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrainStatsDefaultTypeInternal _TrainStats_default_instance_;
constexpr LossCurveEntry::LossCurveEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : epoch_(0u)
  , global_step_(0u)
  , cost_(0){}
struct LossCurveEntryDefaultTypeInternal {
  constexpr LossCurveEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LossCurveEntryDefaultTypeInternal() {}
  union {
    LossCurveEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LossCurveEntryDefaultTypeInternal _LossCurveEntry_default_instance_;
constexpr LabelCount::LabelCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(0u){}
struct LabelCountDefaultTypeInternal {
  constexpr LabelCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LabelCountDefaultTypeInternal() {}
  union {
    LabelCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LabelCountDefaultTypeInternal _LabelCount_default_instance_;
constexpr LabelDistribution::LabelDistribution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : positive_label_counts_(){}
struct LabelDistributionDefaultTypeInternal {
  constexpr LabelDistributionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LabelDistributionDefaultTypeInternal() {}
  union {
    LabelDistribution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LabelDistributionDefaultTypeInternal _LabelDistribution_default_instance_;
constexpr CooccurrenceMatrixEntry::CooccurrenceMatrixEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , col_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(0u){}
struct CooccurrenceMatrixEntryDefaultTypeInternal {
  constexpr CooccurrenceMatrixEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CooccurrenceMatrixEntryDefaultTypeInternal() {}
  union {
    CooccurrenceMatrixEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CooccurrenceMatrixEntryDefaultTypeInternal _CooccurrenceMatrixEntry_default_instance_;
constexpr CooccurrenceMatrix::CooccurrenceMatrix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matrix_()
  , concept_ids_(){}
struct CooccurrenceMatrixDefaultTypeInternal {
  constexpr CooccurrenceMatrixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CooccurrenceMatrixDefaultTypeInternal() {}
  union {
    CooccurrenceMatrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CooccurrenceMatrixDefaultTypeInternal _CooccurrenceMatrix_default_instance_;
constexpr ConfusionMatrixEntry::ConfusionMatrixEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : predicted_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , actual_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(0){}
struct ConfusionMatrixEntryDefaultTypeInternal {
  constexpr ConfusionMatrixEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfusionMatrixEntryDefaultTypeInternal() {}
  union {
    ConfusionMatrixEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfusionMatrixEntryDefaultTypeInternal _ConfusionMatrixEntry_default_instance_;
constexpr ConfusionMatrix::ConfusionMatrix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matrix_()
  , concept_ids_(){}
struct ConfusionMatrixDefaultTypeInternal {
  constexpr ConfusionMatrixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfusionMatrixDefaultTypeInternal() {}
  union {
    ConfusionMatrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfusionMatrixDefaultTypeInternal _ConfusionMatrix_default_instance_;
constexpr ROC::ROC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fpr_()
  , tpr_()
  , thresholds_()
  , fpr_per_image_()
  , fpr_per_object_(){}
struct ROCDefaultTypeInternal {
  constexpr ROCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ROCDefaultTypeInternal() {}
  union {
    ROC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ROCDefaultTypeInternal _ROC_default_instance_;
constexpr PrecisionRecallCurve::PrecisionRecallCurve(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recall_()
  , precision_()
  , thresholds_(){}
struct PrecisionRecallCurveDefaultTypeInternal {
  constexpr PrecisionRecallCurveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrecisionRecallCurveDefaultTypeInternal() {}
  union {
    PrecisionRecallCurve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrecisionRecallCurveDefaultTypeInternal _PrecisionRecallCurve_default_instance_;
constexpr BinaryMetrics::BinaryMetrics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : area_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , concept_(nullptr)
  , roc_curve_(nullptr)
  , precision_recall_curve_(nullptr)
  , num_pos_(0u)
  , num_neg_(0u)
  , num_tot_(0u)
  , roc_auc_(0)
  , f1_(0)
  , avg_precision_(0)
  , area_min_(0)
  , area_max_(0)
  , iou_(0){}
struct BinaryMetricsDefaultTypeInternal {
  constexpr BinaryMetricsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BinaryMetricsDefaultTypeInternal() {}
  union {
    BinaryMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BinaryMetricsDefaultTypeInternal _BinaryMetrics_default_instance_;
constexpr TrackerMetrics::TrackerMetrics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aiid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mot_mota_(0)
  , mot_num_switches_(0)
  , morse_frag_(0)
  , avg_precision_(0)
  , unique_switch_rate_(0){}
struct TrackerMetricsDefaultTypeInternal {
  constexpr TrackerMetricsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackerMetricsDefaultTypeInternal() {}
  union {
    TrackerMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackerMetricsDefaultTypeInternal _TrackerMetrics_default_instance_;
constexpr EvalTestSetEntry::EvalTestSetEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : predicted_concepts_()
  , ground_truth_concepts_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , annotation_(nullptr)
  , input_(nullptr){}
struct EvalTestSetEntryDefaultTypeInternal {
  constexpr EvalTestSetEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EvalTestSetEntryDefaultTypeInternal() {}
  union {
    EvalTestSetEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EvalTestSetEntryDefaultTypeInternal _EvalTestSetEntry_default_instance_;
constexpr LOPQEvalResult::LOPQEvalResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : k_(0)
  , recall_vs_brute_force_(0)
  , kendall_tau_vs_brute_force_(0)
  , most_frequent_code_percent_(0)
  , lopq_ndcg_(0)
  , brute_force_ndcg_(0){}
struct LOPQEvalResultDefaultTypeInternal {
  constexpr LOPQEvalResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LOPQEvalResultDefaultTypeInternal() {}
  union {
    LOPQEvalResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LOPQEvalResultDefaultTypeInternal _LOPQEvalResult_default_instance_;
constexpr MetricsSummary::MetricsSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lopq_metrics_()
  , top1_accuracy_(0)
  , top5_accuracy_(0)
  , macro_avg_roc_auc_(0)
  , macro_std_roc_auc_(0)
  , macro_avg_f1_score_(0)
  , macro_std_f1_score_(0)
  , macro_avg_precision_(0)
  , macro_avg_recall_(0)
  , mean_avg_precision_iou_50_(0)
  , mean_avg_precision_iou_range_(0){}
struct MetricsSummaryDefaultTypeInternal {
  constexpr MetricsSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricsSummaryDefaultTypeInternal() {}
  union {
    MetricsSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsSummaryDefaultTypeInternal _MetricsSummary_default_instance_;
constexpr EvalMetrics::EvalMetrics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : binary_metrics_()
  , test_set_()
  , metrics_by_area_()
  , metrics_by_class_()
  , tracker_metrics_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr)
  , summary_(nullptr)
  , confusion_matrix_(nullptr)
  , cooccurrence_matrix_(nullptr)
  , label_counts_(nullptr)
  , eval_info_(nullptr){}
struct EvalMetricsDefaultTypeInternal {
  constexpr EvalMetricsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EvalMetricsDefaultTypeInternal() {}
  union {
    EvalMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EvalMetricsDefaultTypeInternal _EvalMetrics_default_instance_;
constexpr FieldsValue::FieldsValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : confusion_matrix_(false)
  , cooccurrence_matrix_(false)
  , label_counts_(false)
  , binary_metrics_(false)
  , test_set_(false)
  , metrics_by_area_(false)
  , metrics_by_class_(false){}
struct FieldsValueDefaultTypeInternal {
  constexpr FieldsValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldsValueDefaultTypeInternal() {}
  union {
    FieldsValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldsValueDefaultTypeInternal _FieldsValue_default_instance_;
constexpr Output::Output(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr)
  , created_at_(nullptr)
  , model_(nullptr)
  , input_(nullptr)
  , data_(nullptr){}
struct OutputDefaultTypeInternal {
  constexpr OutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutputDefaultTypeInternal() {}
  union {
    Output _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutputDefaultTypeInternal _Output_default_instance_;
constexpr ScopeDeps::ScopeDeps(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : depending_scopes_()
  , scope_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ScopeDepsDefaultTypeInternal {
  constexpr ScopeDepsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScopeDepsDefaultTypeInternal() {}
  union {
    ScopeDeps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScopeDepsDefaultTypeInternal _ScopeDeps_default_instance_;
constexpr EndpointDeps::EndpointDeps(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : depending_scopes_()
  , endpoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EndpointDepsDefaultTypeInternal {
  constexpr EndpointDepsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EndpointDepsDefaultTypeInternal() {}
  union {
    EndpointDeps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EndpointDepsDefaultTypeInternal _EndpointDeps_default_instance_;
constexpr Hit::Hit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_(nullptr)
  , annotation_(nullptr)
  , score_(0){}
struct HitDefaultTypeInternal {
  constexpr HitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HitDefaultTypeInternal() {}
  union {
    Hit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HitDefaultTypeInternal _Hit_default_instance_;
constexpr And::And(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_(nullptr)
  , output_(nullptr)
  , annotation_(nullptr)
  , negate_(false){}
struct AndDefaultTypeInternal {
  constexpr AndDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AndDefaultTypeInternal() {}
  union {
    And _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AndDefaultTypeInternal _And_default_instance_;
constexpr Query::Query(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ands_()
  , filters_()
  , ranks_()
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct QueryDefaultTypeInternal {
  constexpr QueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryDefaultTypeInternal() {}
  union {
    Query _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryDefaultTypeInternal _Query_default_instance_;
constexpr Search::Search(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , application_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , git_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , algorithm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_(nullptr)
  , as_of_(nullptr)
  , created_at_(nullptr)
  , modified_at_(nullptr)
  , visibility_(nullptr)
  , save_(false)
  , min_value_(0){}
struct SearchDefaultTypeInternal {
  constexpr SearchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SearchDefaultTypeInternal() {}
  union {
    Search _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SearchDefaultTypeInternal _Search_default_instance_;
constexpr Filter::Filter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotation_(nullptr)
  , input_(nullptr)
  , last_updated_time_range_(nullptr)
  , negate_(false){}
struct FilterDefaultTypeInternal {
  constexpr FilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilterDefaultTypeInternal() {}
  union {
    Filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilterDefaultTypeInternal _Filter_default_instance_;
constexpr TimeRange::TimeRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_time_(nullptr)
  , end_time_(nullptr){}
struct TimeRangeDefaultTypeInternal {
  constexpr TimeRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeRangeDefaultTypeInternal() {}
  union {
    TimeRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
constexpr Rank::Rank(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotation_(nullptr)
  , negate_(false){}
struct RankDefaultTypeInternal {
  constexpr RankDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RankDefaultTypeInternal() {}
  union {
    Rank _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RankDefaultTypeInternal _Rank_default_instance_;
constexpr AnnotationSearchMetrics::AnnotationSearchMetrics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ground_truth_(nullptr)
  , search_to_eval_(nullptr)
  , metrics_(nullptr)
  , data_(nullptr)
  , visibility_(nullptr)
  , active_concept_count_(0u){}
struct AnnotationSearchMetricsDefaultTypeInternal {
  constexpr AnnotationSearchMetricsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnnotationSearchMetricsDefaultTypeInternal() {}
  union {
    AnnotationSearchMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnnotationSearchMetricsDefaultTypeInternal _AnnotationSearchMetrics_default_instance_;
constexpr Text::Text(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : raw_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hosted_(nullptr)
  , text_info_(nullptr)
  , allow_duplicate_url_(false){}
struct TextDefaultTypeInternal {
  constexpr TextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextDefaultTypeInternal() {}
  union {
    Text _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextDefaultTypeInternal _Text_default_instance_;
constexpr TextInfo::TextInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoding_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , char_count_(0){}
struct TextInfoDefaultTypeInternal {
  constexpr TextInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextInfoDefaultTypeInternal() {}
  union {
    TextInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextInfoDefaultTypeInternal _TextInfo_default_instance_;
constexpr User::User(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_addresses_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , primary_email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , first_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , company_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bill_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , job_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , job_role_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , date_gdpr_consent_(nullptr)
  , date_tos_consent_(nullptr)
  , date_marketing_consent_(nullptr)
  , metadata_(nullptr)
  , visibility_(nullptr)
  , user_detail_(nullptr)
  , teams_count_(0u)
  , is_org_admin_(false)
  , two_factor_auth_enabled_(false)
  , is_starred_(false)
  , star_count_(0){}
struct UserDefaultTypeInternal {
  constexpr UserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserDefaultTypeInternal() {}
  union {
    User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserDefaultTypeInternal _User_default_instance_;
constexpr UserDetail::UserDetail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_addresses_()
  , primary_email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bill_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , date_gdpr_consent_(nullptr)
  , date_tos_consent_(nullptr)
  , date_marketing_consent_(nullptr)
  , metadata_(nullptr)
  , is_org_admin_(false)
  , two_factor_auth_enabled_(false)
  , teams_count_(0u){}
struct UserDetailDefaultTypeInternal {
  constexpr UserDetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserDetailDefaultTypeInternal() {}
  union {
    UserDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserDetailDefaultTypeInternal _UserDetail_default_instance_;
constexpr EmailAddress::EmailAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , primary_(false)
  , verified_(false){}
struct EmailAddressDefaultTypeInternal {
  constexpr EmailAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmailAddressDefaultTypeInternal() {}
  union {
    EmailAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmailAddressDefaultTypeInternal _EmailAddress_default_instance_;
constexpr Password::Password(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : plaintext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PasswordDefaultTypeInternal {
  constexpr PasswordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PasswordDefaultTypeInternal() {}
  union {
    Password _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PasswordDefaultTypeInternal _Password_default_instance_;
constexpr PasswordViolations::PasswordViolations(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : minimum_length_(false)
  , maximum_length_(false)
  , upper_case_needed_(false)
  , lower_case_needed_(false)
  , numeric_needed_(false)
  , non_alphanumeric_needed_(false)
  , password_reuse_(false)
  , exclude_names_(false)
  , exclude_email_(false)
  , no_confusing_letters_(false)
  , no_simple_passwords_(false)
  , no_common_vocabs_(false)
  , no_overlap_with_old_(false)
  , password_lifespan_(false){}
struct PasswordViolationsDefaultTypeInternal {
  constexpr PasswordViolationsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PasswordViolationsDefaultTypeInternal() {}
  union {
    PasswordViolations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PasswordViolationsDefaultTypeInternal _PasswordViolations_default_instance_;
constexpr Video::Video(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base64_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thumbnail_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hosted_(nullptr)
  , video_info_(nullptr)
  , allow_duplicate_url_(false){}
struct VideoDefaultTypeInternal {
  constexpr VideoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VideoDefaultTypeInternal() {}
  union {
    Video _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VideoDefaultTypeInternal _Video_default_instance_;
constexpr VideoInfo::VideoInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : video_format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0)
  , height_(0)
  , fps_(0)
  , bit_rate_(0)
  , frame_count_(0)
  , duration_seconds_(0){}
struct VideoInfoDefaultTypeInternal {
  constexpr VideoInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VideoInfoDefaultTypeInternal() {}
  union {
    VideoInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VideoInfoDefaultTypeInternal _VideoInfo_default_instance_;
constexpr Workflow::Workflow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_()
  , use_cases_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , metadata_(nullptr)
  , visibility_(nullptr)
  , modified_at_(nullptr)
  , version_(nullptr)
  , is_starred_(false)
  , star_count_(0){}
struct WorkflowDefaultTypeInternal {
  constexpr WorkflowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowDefaultTypeInternal() {}
  union {
    Workflow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowDefaultTypeInternal _Workflow_default_instance_;
constexpr WorkflowVersion::WorkflowVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , license_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , modified_at_(nullptr)
  , visibility_(nullptr)
  , metadata_(nullptr){}
struct WorkflowVersionDefaultTypeInternal {
  constexpr WorkflowVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowVersionDefaultTypeInternal() {}
  union {
    WorkflowVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowVersionDefaultTypeInternal _WorkflowVersion_default_instance_;
constexpr WorkflowNode::WorkflowNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_inputs_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_(nullptr)
  , suppress_output_(false){}
struct WorkflowNodeDefaultTypeInternal {
  constexpr WorkflowNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowNodeDefaultTypeInternal() {}
  union {
    WorkflowNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowNodeDefaultTypeInternal _WorkflowNode_default_instance_;
constexpr NodeInput::NodeInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NodeInputDefaultTypeInternal {
  constexpr NodeInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeInputDefaultTypeInternal() {}
  union {
    NodeInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInputDefaultTypeInternal _NodeInput_default_instance_;
constexpr WorkflowResult::WorkflowResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : outputs_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr)
  , created_at_(nullptr)
  , model_(nullptr)
  , input_(nullptr)
  , suppress_output_(false){}
struct WorkflowResultDefaultTypeInternal {
  constexpr WorkflowResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowResultDefaultTypeInternal() {}
  union {
    WorkflowResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowResultDefaultTypeInternal _WorkflowResult_default_instance_;
constexpr WorkflowState::WorkflowState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WorkflowStateDefaultTypeInternal {
  constexpr WorkflowStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowStateDefaultTypeInternal() {}
  union {
    WorkflowState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowStateDefaultTypeInternal _WorkflowState_default_instance_;
constexpr AppDuplication::AppDuplication(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : progress_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , new_app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , new_app_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , existing_app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr)
  , created_at_(nullptr)
  , last_modified_at_(nullptr)
  , filter_(nullptr){}
struct AppDuplicationDefaultTypeInternal {
  constexpr AppDuplicationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppDuplicationDefaultTypeInternal() {}
  union {
    AppDuplication _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppDuplicationDefaultTypeInternal _AppDuplication_default_instance_;
constexpr AppCopyProgress::AppCopyProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(0){}
struct AppCopyProgressDefaultTypeInternal {
  constexpr AppCopyProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppCopyProgressDefaultTypeInternal() {}
  union {
    AppCopyProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppCopyProgressDefaultTypeInternal _AppCopyProgress_default_instance_;
constexpr AppDuplicationFilters::AppDuplicationFilters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : copy_inputs_(false)
  , copy_concepts_(false)
  , copy_annotations_(false)
  , copy_models_(false)
  , copy_workflows_(false){}
struct AppDuplicationFiltersDefaultTypeInternal {
  constexpr AppDuplicationFiltersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppDuplicationFiltersDefaultTypeInternal() {}
  union {
    AppDuplicationFilters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppDuplicationFiltersDefaultTypeInternal _AppDuplicationFilters_default_instance_;
constexpr LabelOrder::LabelOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr)
  , desired_fulfill_time_(nullptr)
  , estimate_fulfill_time_(nullptr)
  , task_(nullptr)
  , created_at_(nullptr)
  , modified_at_(nullptr)
  , auto_release_(false)
  , allow_empty_tag_(false){}
struct LabelOrderDefaultTypeInternal {
  constexpr LabelOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LabelOrderDefaultTypeInternal() {}
  union {
    LabelOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LabelOrderDefaultTypeInternal _LabelOrder_default_instance_;
constexpr Task::Task(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_ids_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , modified_at_(nullptr)
  , worker_(nullptr)
  , input_source_(nullptr)
  , ai_assistant_(nullptr)
  , review_(nullptr)
  , status_(nullptr)
  , ai_assist_params_(nullptr)
  , visibility_(nullptr)
  , type_(0)

  , sample_ms_(0u){}
struct TaskDefaultTypeInternal {
  constexpr TaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskDefaultTypeInternal _Task_default_instance_;
constexpr AiAssistParameters::AiAssistParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_relation_ids_()
  , min_threshold_(0)
  , max_threshold_(0){}
struct AiAssistParametersDefaultTypeInternal {
  constexpr AiAssistParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AiAssistParametersDefaultTypeInternal() {}
  union {
    AiAssistParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AiAssistParametersDefaultTypeInternal _AiAssistParameters_default_instance_;
constexpr TaskWorker::TaskWorker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_ids_()
  , users_()
  , strategy_(0)

  , _oneof_case_{}{}
struct TaskWorkerDefaultTypeInternal {
  constexpr TaskWorkerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskWorkerDefaultTypeInternal() {}
  union {
    TaskWorker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskWorkerDefaultTypeInternal _TaskWorker_default_instance_;
constexpr TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategyInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weights_(nullptr)
  , type_(0)

  , workers_per_input_(0){}
struct TaskWorkerPartitionedStrategyInfoDefaultTypeInternal {
  constexpr TaskWorkerPartitionedStrategyInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskWorkerPartitionedStrategyInfoDefaultTypeInternal() {}
  union {
    TaskWorkerPartitionedStrategyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskWorkerPartitionedStrategyInfoDefaultTypeInternal _TaskWorkerPartitionedStrategyInfo_default_instance_;
constexpr TaskInputSource::TaskInputSource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct TaskInputSourceDefaultTypeInternal {
  constexpr TaskInputSourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskInputSourceDefaultTypeInternal() {}
  union {
    TaskInputSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskInputSourceDefaultTypeInternal _TaskInputSource_default_instance_;
constexpr TaskReview::TaskReview(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_ids_()
  , users_()
  , strategy_(0)

  , _oneof_case_{}{}
struct TaskReviewDefaultTypeInternal {
  constexpr TaskReviewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskReviewDefaultTypeInternal() {}
  union {
    TaskReview _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskReviewDefaultTypeInternal _TaskReview_default_instance_;
constexpr TaskReviewManualStrategyInfo::TaskReviewManualStrategyInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sample_percentage_(0){}
struct TaskReviewManualStrategyInfoDefaultTypeInternal {
  constexpr TaskReviewManualStrategyInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskReviewManualStrategyInfoDefaultTypeInternal() {}
  union {
    TaskReviewManualStrategyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskReviewManualStrategyInfoDefaultTypeInternal _TaskReviewManualStrategyInfo_default_instance_;
constexpr TaskReviewConsensusStrategyInfo::TaskReviewConsensusStrategyInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : approval_threshold_(0u){}
struct TaskReviewConsensusStrategyInfoDefaultTypeInternal {
  constexpr TaskReviewConsensusStrategyInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskReviewConsensusStrategyInfoDefaultTypeInternal() {}
  union {
    TaskReviewConsensusStrategyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskReviewConsensusStrategyInfoDefaultTypeInternal _TaskReviewConsensusStrategyInfo_default_instance_;
constexpr TaskAIAssistant::TaskAIAssistant(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TaskAIAssistantDefaultTypeInternal {
  constexpr TaskAIAssistantDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskAIAssistantDefaultTypeInternal() {}
  union {
    TaskAIAssistant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskAIAssistantDefaultTypeInternal _TaskAIAssistant_default_instance_;
constexpr TaskStatusCountPerUser::TaskStatusCountPerUser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pending_(0u)
  , awaiting_review_(0u)
  , success_(0u)
  , review_denied_(0u)
  , awaiting_consensus_review_(0u){}
struct TaskStatusCountPerUserDefaultTypeInternal {
  constexpr TaskStatusCountPerUserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskStatusCountPerUserDefaultTypeInternal() {}
  union {
    TaskStatusCountPerUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskStatusCountPerUserDefaultTypeInternal _TaskStatusCountPerUser_default_instance_;
constexpr Collector::Collector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pre_queue_workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , post_queue_workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , collector_source_(nullptr)
  , status_(nullptr){}
struct CollectorDefaultTypeInternal {
  constexpr CollectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollectorDefaultTypeInternal() {}
  union {
    Collector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollectorDefaultTypeInternal _Collector_default_instance_;
constexpr CollectorSource::CollectorSource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : api_post_model_outputs_collector_source_(nullptr){}
struct CollectorSourceDefaultTypeInternal {
  constexpr CollectorSourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollectorSourceDefaultTypeInternal() {}
  union {
    CollectorSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollectorSourceDefaultTypeInternal _CollectorSource_default_instance_;
constexpr APIPostModelOutputsCollectorSource::APIPostModelOutputsCollectorSource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , post_inputs_key_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct APIPostModelOutputsCollectorSourceDefaultTypeInternal {
  constexpr APIPostModelOutputsCollectorSourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~APIPostModelOutputsCollectorSourceDefaultTypeInternal() {}
  union {
    APIPostModelOutputsCollectorSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT APIPostModelOutputsCollectorSourceDefaultTypeInternal _APIPostModelOutputsCollectorSource_default_instance_;
constexpr StatValue::StatValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , time_(nullptr)
  , value_(0){}
struct StatValueDefaultTypeInternal {
  constexpr StatValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatValueDefaultTypeInternal() {}
  union {
    StatValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatValueDefaultTypeInternal _StatValue_default_instance_;
constexpr StatValueAggregateResult::StatValueAggregateResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_value_aggregates_()
  , stat_value_aggregate_query_(nullptr){}
struct StatValueAggregateResultDefaultTypeInternal {
  constexpr StatValueAggregateResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatValueAggregateResultDefaultTypeInternal() {}
  union {
    StatValueAggregateResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatValueAggregateResultDefaultTypeInternal _StatValueAggregateResult_default_instance_;
constexpr StatValueAggregate::StatValueAggregate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , time_(nullptr)
  , count_(uint64_t{0u})
  , aggregate_value_(0){}
struct StatValueAggregateDefaultTypeInternal {
  constexpr StatValueAggregateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatValueAggregateDefaultTypeInternal() {}
  union {
    StatValueAggregate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatValueAggregateDefaultTypeInternal _StatValueAggregate_default_instance_;
constexpr StatValueAggregateQuery::StatValueAggregateQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , tag_groups_()
  , start_time_(nullptr)
  , end_time_(nullptr)
  , stat_value_agg_type_(0)

  , stat_time_agg_type_(0)
{}
struct StatValueAggregateQueryDefaultTypeInternal {
  constexpr StatValueAggregateQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatValueAggregateQueryDefaultTypeInternal() {}
  union {
    StatValueAggregateQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatValueAggregateQueryDefaultTypeInternal _StatValueAggregateQuery_default_instance_;
constexpr DatasetInputsSearchAddJob::DatasetInputsSearchAddJob(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dataset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , modified_at_(nullptr)
  , status_(nullptr)
  , search_(nullptr){}
struct DatasetInputsSearchAddJobDefaultTypeInternal {
  constexpr DatasetInputsSearchAddJobDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DatasetInputsSearchAddJobDefaultTypeInternal() {}
  union {
    DatasetInputsSearchAddJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DatasetInputsSearchAddJobDefaultTypeInternal _DatasetInputsSearchAddJob_default_instance_;
constexpr Visibility::Visibility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gettable_(0)
{}
struct VisibilityDefaultTypeInternal {
  constexpr VisibilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VisibilityDefaultTypeInternal() {}
  union {
    Visibility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VisibilityDefaultTypeInternal _Visibility_default_instance_;
constexpr TrendingMetric::TrendingMetric(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , view_count_(uint64_t{0u}){}
struct TrendingMetricDefaultTypeInternal {
  constexpr TrendingMetricDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrendingMetricDefaultTypeInternal() {}
  union {
    TrendingMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrendingMetricDefaultTypeInternal _TrendingMetric_default_instance_;
constexpr TimeSegment::TimeSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(nullptr)
  , time_info_(nullptr){}
struct TimeSegmentDefaultTypeInternal {
  constexpr TimeSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeSegmentDefaultTypeInternal() {}
  union {
    TimeSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeSegmentDefaultTypeInternal _TimeSegment_default_instance_;
constexpr TimeInfo::TimeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_frames_(0u)
  , begin_time_(0u)
  , end_time_(0u){}
struct TimeInfoDefaultTypeInternal {
  constexpr TimeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeInfoDefaultTypeInternal() {}
  union {
    TimeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeInfoDefaultTypeInternal _TimeInfo_default_instance_;
}  // namespace api
}  // namespace clarifai
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[141];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[19];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto = nullptr;

const uint32_t TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, input_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, annotation_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, embed_model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, trusted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, input_level_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, consensus_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Annotation, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, default_language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, default_workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, legal_consent_status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, sample_ms_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, data_tier_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, is_starred_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, star_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::App, notes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppQuery, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, app_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, user_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, endpoints_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaborator, deleted_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, app_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, app_owner_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, endpoints_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collaboration, created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, base64_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, allow_duplicate_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, hosted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Audio, audio_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AudioInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AudioInfo, audio_format_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AudioInfo, sample_rate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AudioInfo, duration_seconds_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AudioInfo, bit_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Track, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Track, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Track, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Track, time_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Track, quality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, score_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, hits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Cluster, projection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Color, raw_hex_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Color, w3c_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Color, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::W3C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::W3C, hex_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::W3C, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserAppIDSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserAppIDSet, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserAppIDSet, app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAction, op_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAction, merge_conflict_resolution_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAction, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, definition_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, vocab_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Concept, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptCount, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptCount, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptCount, concept_type_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptCount, detail_concept_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptTypeCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptTypeCount, positive_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptTypeCount, negative_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DetailConceptCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DetailConceptCount, processed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DetailConceptCount, to_process_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DetailConceptCount, errors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DetailConceptCount, processing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptQuery, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptQuery, language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptQuery, workflow_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, subject_concept_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, object_concept_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, predicate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, knowledge_graph_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptRelation, visibility_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, examples_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::KnowledgeGraph, sampled_examples_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptMappingJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptMappingJob, knowledge_graph_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptMappingJob, concept_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptLanguage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptLanguage, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptLanguage, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptLanguage, definition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, image_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, video_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, geo_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, colors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, clusters_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, embeddings_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, regions_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, frames_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, text_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, audio_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, tracks_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, time_segments_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, hits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Data, heatmaps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, region_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Region, track_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, bounding_box_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, mask_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, polygon_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, point_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, span_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RegionInfo, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BoundingBox, top_row_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BoundingBox, left_col_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BoundingBox, bottom_row_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BoundingBox, right_col_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FrameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FrameInfo, index_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FrameInfo, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Frame, frame_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Frame, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Frame, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Mask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Mask, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Polygon, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Point, row_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Point, col_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Point, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Span, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Span, char_start_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Span, char_end_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Span, raw_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Token, char_start_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Token, char_end_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Token, raw_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Embedding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Embedding, vector_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Embedding, num_dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoPoint, longitude_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoPoint, latitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoLimit, type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoLimit, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoBoxedPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GeoBoxedPoint, geo_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Geo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Geo, geo_point_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Geo, geo_limit_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Geo, geo_box_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, base64_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, allow_duplicate_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, hosted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Image, image_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImageInfo, width_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImageInfo, height_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImageInfo, format_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImageInfo, color_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HostedURL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HostedURL, prefix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HostedURL, suffix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HostedURL, sizes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::HostedURL, crossorigin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Input, dataset_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, processed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, to_process_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, errors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, processing_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, reindexed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, to_reindex_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, reindex_errors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputCount, reindexing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, default_annotation_filter_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, notes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Dataset, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilter, saved_search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInput, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInput, input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, dataset_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, embed_model_version_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersion, data_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationFilterConfig, annotation_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, unlabeled_inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, inputs_with_metadata_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, inputs_with_geo_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, regions_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, region_location_matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, bounding_boxes_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, polygons_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, points_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, masks_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, region_inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, region_frames_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, frames_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, frame_inputs_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, embeddings_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, positive_input_tags_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, positive_region_tags_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetrics, positive_frame_tags_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetricsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetricsGroup, parent_path_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetricsGroup, type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetricsGroup, value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetVersionMetricsGroup, metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResultsSimilarity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResultsSimilarity, probe_input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResultsSimilarity, pool_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, endpoints_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, apps_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, expires_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Key, authorized_idp_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, output_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, model_version_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, display_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, input_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, train_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, default_eval_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, model_type_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, task_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, presets_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, notes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, toolkits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, use_cases_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, languages_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, is_starred_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, star_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, import_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Model, workflow_recommended_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelReference, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionInputExample, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, output_config_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, message_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, fields_map_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputInfo, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputInfo, fields_map_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::InputInfo, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainInfo, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalInfo, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImportInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ImportInfo, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, concepts_mutually_exclusive_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, closed_environment_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, existing_model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, hyper_parameters_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, max_concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, min_value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, select_concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, training_timeout_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, sample_ms_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, hyper_params_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, embed_model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, fail_on_missing_positive_examples_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::OutputConfig, model_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, title_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, input_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, output_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, trainable_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, creatable_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, internal_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, model_type_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, requires_sequential_frames_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, evaluable_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, expected_input_layers_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelType, expected_output_layers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelLayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelLayerInfo, data_field_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelLayerInfo, shapes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelLayerInfo, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelLayerInfo, requires_label_filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LayerShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LayerShape, dims_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LayerShape, max_dims_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LayerShape, data_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LayerShape, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, path_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, field_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, default_value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, placeholder_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, model_type_enum_options_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, internal_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, required_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeField, model_type_range_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeRangeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeRangeInfo, min_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeRangeInfo, max_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeRangeInfo, step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, aliases_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, model_type_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOption, internal_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOptionAlias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelTypeEnumOptionAlias, id_int_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelQuery, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelQuery, model_type_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, active_concept_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, total_input_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, pretrained_model_config_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, completed_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, license_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersion, dataset_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, input_fields_map_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, output_fields_map_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PretrainedModelConfig, model_zip_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainStats, loss_curve_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LossCurveEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LossCurveEntry, epoch_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LossCurveEntry, global_step_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LossCurveEntry, cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelCount, concept_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelCount, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelDistribution, positive_label_counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrixEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrixEntry, row_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrixEntry, col_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrixEntry, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrix, matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CooccurrenceMatrix, concept_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrixEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrixEntry, predicted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrixEntry, actual_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrixEntry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrix, matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConfusionMatrix, concept_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, fpr_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, tpr_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, thresholds_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, fpr_per_image_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ROC, fpr_per_object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PrecisionRecallCurve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PrecisionRecallCurve, recall_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PrecisionRecallCurve, precision_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PrecisionRecallCurve, thresholds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, num_pos_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, num_neg_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, num_tot_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, roc_auc_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, f1_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, concept_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, roc_curve_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, precision_recall_curve_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, avg_precision_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, area_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, area_min_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, area_max_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::BinaryMetrics, iou_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, mot_mota_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, mot_num_switches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, morse_frag_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, avg_precision_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, aiid_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrackerMetrics, unique_switch_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, predicted_concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, ground_truth_concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalTestSetEntry, annotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, k_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, recall_vs_brute_force_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, kendall_tau_vs_brute_force_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, most_frequent_code_percent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, lopq_ndcg_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LOPQEvalResult, brute_force_ndcg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, top1_accuracy_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, top5_accuracy_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, macro_avg_roc_auc_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, macro_std_roc_auc_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, macro_avg_f1_score_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, macro_std_f1_score_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, macro_avg_precision_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, macro_avg_recall_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, mean_avg_precision_iou_50_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, mean_avg_precision_iou_range_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MetricsSummary, lopq_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, summary_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, confusion_matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, cooccurrence_matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, label_counts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, binary_metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, test_set_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, metrics_by_area_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, metrics_by_class_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, tracker_metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EvalMetrics, eval_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, confusion_matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, cooccurrence_matrix_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, label_counts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, binary_metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, test_set_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, metrics_by_area_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FieldsValue, metrics_by_class_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Output, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ScopeDeps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ScopeDeps, scope_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ScopeDeps, depending_scopes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EndpointDeps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EndpointDeps, endpoint_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EndpointDeps, depending_scopes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, score_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, annotation_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Hit, app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::And, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::And, input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::And, output_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::And, negate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::And, annotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Query, ands_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Query, language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Query, filters_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Query, ranks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, application_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, as_of_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, git_hash_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, algorithm_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, save_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, min_value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Search, visibility_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Filter, negate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Filter, annotation_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Filter, input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Filter, last_updated_time_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeRange, start_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeRange, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Rank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Rank, negate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Rank, annotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, ground_truth_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, search_to_eval_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, metrics_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, active_concept_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AnnotationSearchMetrics, visibility_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, raw_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, allow_duplicate_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, hosted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Text, text_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TextInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TextInfo, char_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TextInfo, encoding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, primary_email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, first_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, last_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, company_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, job_title_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, job_role_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, bill_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, date_gdpr_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, date_tos_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, date_marketing_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, email_addresses_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, is_org_admin_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, two_factor_auth_enabled_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, teams_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, is_starred_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, star_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::User, user_detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, primary_email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, bill_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, date_gdpr_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, date_tos_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, date_marketing_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, email_addresses_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, is_org_admin_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, two_factor_auth_enabled_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, teams_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, country_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::UserDetail, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EmailAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EmailAddress, email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EmailAddress, primary_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::EmailAddress, verified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Password, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Password, plaintext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, minimum_length_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, maximum_length_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, upper_case_needed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, lower_case_needed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, numeric_needed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, non_alphanumeric_needed_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, password_reuse_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, exclude_names_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, exclude_email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, no_confusing_letters_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, no_simple_passwords_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, no_common_vocabs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, no_overlap_with_old_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PasswordViolations, password_lifespan_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, base64_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, allow_duplicate_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, hosted_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Video, video_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, width_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, height_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, fps_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, video_format_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, bit_rate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, frame_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::VideoInfo, duration_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, nodes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, version_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, is_starred_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, star_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, notes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Workflow, use_cases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, nodes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersion, license_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, node_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowNode, suppress_output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::NodeInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::NodeInput, node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, outputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowResult, suppress_output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowState, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, new_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, new_app_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, last_modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, filter_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, existing_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplication, progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppCopyProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppCopyProgress, field_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppCopyProgress, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, copy_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, copy_concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, copy_annotations_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, copy_models_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AppDuplicationFilters, copy_workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, auto_release_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, allow_empty_tag_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, desired_fulfill_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, estimate_fulfill_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, task_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::LabelOrder, modified_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, worker_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, concept_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, input_source_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, sample_ms_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, ai_assistant_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, review_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, ai_assist_params_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, visibility_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Task, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AiAssistParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AiAssistParameters, min_threshold_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AiAssistParameters, max_threshold_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::AiAssistParameters, concept_relation_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, strategy_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, users_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorker, strategy_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorkerPartitionedStrategyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorkerPartitionedStrategyInfo, type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorkerPartitionedStrategyInfo, workers_per_input_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskWorkerPartitionedStrategyInfo, weights_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskInputSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskInputSource, type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskInputSource, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, strategy_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, users_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReview, strategy_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReviewManualStrategyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReviewManualStrategyInfo, sample_percentage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReviewConsensusStrategyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskReviewConsensusStrategyInfo, approval_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskAIAssistant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskAIAssistant, workflow_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, pending_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, awaiting_review_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, success_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, review_denied_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TaskStatusCountPerUser, awaiting_consensus_review_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, pre_queue_workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, post_queue_workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, collector_source_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Collector, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CollectorSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CollectorSource, api_post_model_outputs_collector_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, model_user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, model_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::APIPostModelOutputsCollectorSource, post_inputs_key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValue, time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValue, value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValue, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateResult, stat_value_aggregates_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateResult, stat_value_aggregate_query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregate, time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregate, aggregate_value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregate, count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregate, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, tags_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, tag_groups_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, stat_value_agg_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, stat_time_agg_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, start_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StatValueAggregateQuery, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInputsSearchAddJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInputsSearchAddJob, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInputsSearchAddJob, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInputsSearchAddJob, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInputsSearchAddJob, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInputsSearchAddJob, dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DatasetInputsSearchAddJob, search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Visibility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Visibility, gettable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrendingMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrendingMetric, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrendingMetric, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrendingMetric, object_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrendingMetric, view_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeSegment, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeSegment, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeSegment, time_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeInfo, num_frames_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeInfo, begin_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TimeInfo, end_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::clarifai::api::Annotation)},
  { 20, -1, -1, sizeof(::clarifai::api::App)},
  { 42, -1, -1, sizeof(::clarifai::api::AppQuery)},
  { 49, -1, -1, sizeof(::clarifai::api::Collaborator)},
  { 63, -1, -1, sizeof(::clarifai::api::Collaboration)},
  { 74, -1, -1, sizeof(::clarifai::api::Audio)},
  { 85, -1, -1, sizeof(::clarifai::api::AudioInfo)},
  { 95, -1, -1, sizeof(::clarifai::api::Track)},
  { 105, -1, -1, sizeof(::clarifai::api::Cluster)},
  { 116, -1, -1, sizeof(::clarifai::api::Color)},
  { 125, -1, -1, sizeof(::clarifai::api::W3C)},
  { 133, -1, -1, sizeof(::clarifai::api::UserAppIDSet)},
  { 141, -1, -1, sizeof(::clarifai::api::PatchAction)},
  { 150, -1, -1, sizeof(::clarifai::api::Concept)},
  { 166, -1, -1, sizeof(::clarifai::api::ConceptCount)},
  { 176, -1, -1, sizeof(::clarifai::api::ConceptTypeCount)},
  { 184, -1, -1, sizeof(::clarifai::api::DetailConceptCount)},
  { 194, -1, -1, sizeof(::clarifai::api::ConceptQuery)},
  { 203, -1, -1, sizeof(::clarifai::api::ConceptRelation)},
  { 215, -1, -1, sizeof(::clarifai::api::KnowledgeGraph)},
  { 226, -1, -1, sizeof(::clarifai::api::ConceptMappingJob)},
  { 234, -1, -1, sizeof(::clarifai::api::ConceptLanguage)},
  { 243, -1, -1, sizeof(::clarifai::api::Data)},
  { 265, -1, -1, sizeof(::clarifai::api::Region)},
  { 276, -1, -1, sizeof(::clarifai::api::RegionInfo)},
  { 288, -1, -1, sizeof(::clarifai::api::BoundingBox)},
  { 298, -1, -1, sizeof(::clarifai::api::FrameInfo)},
  { 306, -1, -1, sizeof(::clarifai::api::Frame)},
  { 315, -1, -1, sizeof(::clarifai::api::Mask)},
  { 322, -1, -1, sizeof(::clarifai::api::Polygon)},
  { 329, -1, -1, sizeof(::clarifai::api::Point)},
  { 338, -1, -1, sizeof(::clarifai::api::Span)},
  { 347, -1, -1, sizeof(::clarifai::api::Token)},
  { 356, -1, -1, sizeof(::clarifai::api::Embedding)},
  { 364, -1, -1, sizeof(::clarifai::api::GeoPoint)},
  { 372, -1, -1, sizeof(::clarifai::api::GeoLimit)},
  { 380, -1, -1, sizeof(::clarifai::api::GeoBoxedPoint)},
  { 387, -1, -1, sizeof(::clarifai::api::Geo)},
  { 396, -1, -1, sizeof(::clarifai::api::Image)},
  { 407, -1, -1, sizeof(::clarifai::api::ImageInfo)},
  { 417, -1, -1, sizeof(::clarifai::api::HostedURL)},
  { 427, -1, -1, sizeof(::clarifai::api::Input)},
  { 439, -1, -1, sizeof(::clarifai::api::InputCount)},
  { 453, -1, -1, sizeof(::clarifai::api::Dataset)},
  { 470, -1, -1, sizeof(::clarifai::api::AnnotationFilter)},
  { 482, -1, -1, sizeof(::clarifai::api::DatasetInput)},
  { 490, 498, -1, sizeof(::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse)},
  { 500, -1, -1, sizeof(::clarifai::api::DatasetVersion)},
  { 520, -1, -1, sizeof(::clarifai::api::AnnotationFilterConfig)},
  { 527, -1, -1, sizeof(::clarifai::api::DatasetVersionMetrics)},
  { 551, -1, -1, sizeof(::clarifai::api::DatasetVersionMetricsGroup)},
  { 561, -1, -1, sizeof(::clarifai::api::WorkflowResultsSimilarity)},
  { 569, -1, -1, sizeof(::clarifai::api::Key)},
  { 584, -1, -1, sizeof(::clarifai::api::Model)},
  { 616, -1, -1, sizeof(::clarifai::api::ModelReference)},
  { 627, -1, -1, sizeof(::clarifai::api::ModelVersionInputExample)},
  { 639, -1, -1, sizeof(::clarifai::api::OutputInfo)},
  { 650, -1, -1, sizeof(::clarifai::api::InputInfo)},
  { 658, -1, -1, sizeof(::clarifai::api::TrainInfo)},
  { 665, -1, -1, sizeof(::clarifai::api::EvalInfo)},
  { 672, -1, -1, sizeof(::clarifai::api::ImportInfo)},
  { 679, -1, -1, sizeof(::clarifai::api::OutputConfig)},
  { 699, -1, -1, sizeof(::clarifai::api::ModelType)},
  { 718, -1, -1, sizeof(::clarifai::api::ModelLayerInfo)},
  { 728, -1, -1, sizeof(::clarifai::api::LayerShape)},
  { 738, -1, -1, sizeof(::clarifai::api::ModelTypeField)},
  { 753, -1, -1, sizeof(::clarifai::api::ModelTypeRangeInfo)},
  { 762, -1, -1, sizeof(::clarifai::api::ModelTypeEnumOption)},
  { 773, -1, -1, sizeof(::clarifai::api::ModelTypeEnumOptionAlias)},
  { 780, -1, -1, sizeof(::clarifai::api::ModelQuery)},
  { 788, -1, -1, sizeof(::clarifai::api::ModelVersion)},
  { 810, -1, -1, sizeof(::clarifai::api::PretrainedModelConfig)},
  { 819, -1, -1, sizeof(::clarifai::api::TrainStats)},
  { 826, -1, -1, sizeof(::clarifai::api::LossCurveEntry)},
  { 835, -1, -1, sizeof(::clarifai::api::LabelCount)},
  { 843, -1, -1, sizeof(::clarifai::api::LabelDistribution)},
  { 850, -1, -1, sizeof(::clarifai::api::CooccurrenceMatrixEntry)},
  { 859, -1, -1, sizeof(::clarifai::api::CooccurrenceMatrix)},
  { 867, -1, -1, sizeof(::clarifai::api::ConfusionMatrixEntry)},
  { 876, -1, -1, sizeof(::clarifai::api::ConfusionMatrix)},
  { 884, -1, -1, sizeof(::clarifai::api::ROC)},
  { 895, -1, -1, sizeof(::clarifai::api::PrecisionRecallCurve)},
  { 904, -1, -1, sizeof(::clarifai::api::BinaryMetrics)},
  { 923, -1, -1, sizeof(::clarifai::api::TrackerMetrics)},
  { 935, -1, -1, sizeof(::clarifai::api::EvalTestSetEntry)},
  { 947, -1, -1, sizeof(::clarifai::api::LOPQEvalResult)},
  { 959, -1, -1, sizeof(::clarifai::api::MetricsSummary)},
  { 976, -1, -1, sizeof(::clarifai::api::EvalMetrics)},
  { 994, -1, -1, sizeof(::clarifai::api::FieldsValue)},
  { 1007, -1, -1, sizeof(::clarifai::api::Output)},
  { 1019, -1, -1, sizeof(::clarifai::api::ScopeDeps)},
  { 1027, -1, -1, sizeof(::clarifai::api::EndpointDeps)},
  { 1035, -1, -1, sizeof(::clarifai::api::Hit)},
  { 1046, -1, -1, sizeof(::clarifai::api::And)},
  { 1056, -1, -1, sizeof(::clarifai::api::Query)},
  { 1066, -1, -1, sizeof(::clarifai::api::Search)},
  { 1084, -1, -1, sizeof(::clarifai::api::Filter)},
  { 1094, -1, -1, sizeof(::clarifai::api::TimeRange)},
  { 1102, -1, -1, sizeof(::clarifai::api::Rank)},
  { 1110, -1, -1, sizeof(::clarifai::api::AnnotationSearchMetrics)},
  { 1122, -1, -1, sizeof(::clarifai::api::Text)},
  { 1133, -1, -1, sizeof(::clarifai::api::TextInfo)},
  { 1141, -1, -1, sizeof(::clarifai::api::User)},
  { 1168, -1, -1, sizeof(::clarifai::api::UserDetail)},
  { 1186, -1, -1, sizeof(::clarifai::api::EmailAddress)},
  { 1195, -1, -1, sizeof(::clarifai::api::Password)},
  { 1202, -1, -1, sizeof(::clarifai::api::PasswordViolations)},
  { 1222, -1, -1, sizeof(::clarifai::api::Video)},
  { 1234, -1, -1, sizeof(::clarifai::api::VideoInfo)},
  { 1247, -1, -1, sizeof(::clarifai::api::Workflow)},
  { 1267, -1, -1, sizeof(::clarifai::api::WorkflowVersion)},
  { 1284, -1, -1, sizeof(::clarifai::api::WorkflowNode)},
  { 1294, -1, -1, sizeof(::clarifai::api::NodeInput)},
  { 1301, -1, -1, sizeof(::clarifai::api::WorkflowResult)},
  { 1314, -1, -1, sizeof(::clarifai::api::WorkflowState)},
  { 1321, -1, -1, sizeof(::clarifai::api::AppDuplication)},
  { 1336, -1, -1, sizeof(::clarifai::api::AppCopyProgress)},
  { 1344, -1, -1, sizeof(::clarifai::api::AppDuplicationFilters)},
  { 1355, -1, -1, sizeof(::clarifai::api::LabelOrder)},
  { 1371, -1, -1, sizeof(::clarifai::api::Task)},
  { 1394, -1, -1, sizeof(::clarifai::api::AiAssistParameters)},
  { 1403, -1, -1, sizeof(::clarifai::api::TaskWorker)},
  { 1414, -1, -1, sizeof(::clarifai::api::TaskWorkerPartitionedStrategyInfo)},
  { 1423, -1, -1, sizeof(::clarifai::api::TaskInputSource)},
  { 1431, -1, -1, sizeof(::clarifai::api::TaskReview)},
  { 1443, -1, -1, sizeof(::clarifai::api::TaskReviewManualStrategyInfo)},
  { 1450, -1, -1, sizeof(::clarifai::api::TaskReviewConsensusStrategyInfo)},
  { 1457, -1, -1, sizeof(::clarifai::api::TaskAIAssistant)},
  { 1464, -1, -1, sizeof(::clarifai::api::TaskStatusCountPerUser)},
  { 1476, -1, -1, sizeof(::clarifai::api::Collector)},
  { 1489, -1, -1, sizeof(::clarifai::api::CollectorSource)},
  { 1496, -1, -1, sizeof(::clarifai::api::APIPostModelOutputsCollectorSource)},
  { 1507, -1, -1, sizeof(::clarifai::api::StatValue)},
  { 1516, -1, -1, sizeof(::clarifai::api::StatValueAggregateResult)},
  { 1524, -1, -1, sizeof(::clarifai::api::StatValueAggregate)},
  { 1534, -1, -1, sizeof(::clarifai::api::StatValueAggregateQuery)},
  { 1546, -1, -1, sizeof(::clarifai::api::DatasetInputsSearchAddJob)},
  { 1558, -1, -1, sizeof(::clarifai::api::Visibility)},
  { 1565, -1, -1, sizeof(::clarifai::api::TrendingMetric)},
  { 1575, -1, -1, sizeof(::clarifai::api::TimeSegment)},
  { 1584, -1, -1, sizeof(::clarifai::api::TimeInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Annotation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_App_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AppQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Collaborator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Collaboration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Audio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AudioInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Track_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Cluster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_W3C_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_UserAppIDSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Concept_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConceptCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConceptTypeCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DetailConceptCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConceptQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConceptRelation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_KnowledgeGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConceptMappingJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConceptLanguage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Region_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_RegionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_BoundingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_FrameInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Frame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Mask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Span_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Token_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Embedding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GeoPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GeoLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GeoBoxedPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Geo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ImageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_HostedURL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Input_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_InputCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Dataset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AnnotationFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DatasetInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DatasetVersion_MetricsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DatasetVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AnnotationFilterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DatasetVersionMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DatasetVersionMetricsGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_WorkflowResultsSimilarity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Key_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Model_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelVersionInputExample_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_OutputInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_InputInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TrainInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_EvalInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ImportInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_OutputConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelLayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_LayerShape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelTypeField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelTypeRangeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelTypeEnumOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelTypeEnumOptionAlias_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PretrainedModelConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TrainStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_LossCurveEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_LabelCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_LabelDistribution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_CooccurrenceMatrixEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_CooccurrenceMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConfusionMatrixEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConfusionMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ROC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PrecisionRecallCurve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_BinaryMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TrackerMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_EvalTestSetEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_LOPQEvalResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MetricsSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_EvalMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_FieldsValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Output_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ScopeDeps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_EndpointDeps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Hit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_And_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Query_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Search_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TimeRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Rank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AnnotationSearchMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Text_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TextInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_UserDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_EmailAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Password_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PasswordViolations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Video_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_VideoInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Workflow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_WorkflowVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_WorkflowNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_NodeInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_WorkflowResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_WorkflowState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AppDuplication_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AppCopyProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AppDuplicationFilters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_LabelOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_AiAssistParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskWorker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskWorkerPartitionedStrategyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskInputSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskReview_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskReviewManualStrategyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskReviewConsensusStrategyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskAIAssistant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TaskStatusCountPerUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Collector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_CollectorSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_APIPostModelOutputsCollectorSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_StatValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_StatValueAggregateResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_StatValueAggregate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_StatValueAggregateQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DatasetInputsSearchAddJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Visibility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TrendingMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TimeSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TimeInfo_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fapi_2fresources_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"proto/clarifai/api/resources.proto\022\014cl"
  "arifai.api\032&proto/clarifai/api/status/st"
  "atus.proto\032)proto/clarifai/api/utils/ext"
  "ensions.proto\032%proto/clarifai/api/utils/"
  "matrix.proto\032(proto/clarifai/auth/util/e"
  "xtension.proto\032\034google/protobuf/struct.p"
  "roto\032\037google/protobuf/timestamp.proto\032\036g"
  "oogle/protobuf/wrappers.proto\"\345\003\n\nAnnota"
  "tion\022\n\n\002id\030\001 \001(\t\022\020\n\010input_id\030\002 \001(\t\022 \n\004da"
  "ta\030\003 \001(\0132\022.clarifai.api.Data\0220\n\017annotati"
  "on_info\030\r \001(\0132\027.google.protobuf.Struct\022\017"
  "\n\007user_id\030\017 \001(\t\022\030\n\020model_version_id\030\020 \001("
  "\t\022\"\n\026embed_model_version_id\030\016 \001(\tB\002\030\001\022+\n"
  "\006status\030\007 \001(\0132\033.clarifai.api.status.Stat"
  "us\022.\n\ncreated_at\030\010 \001(\0132\032.google.protobuf"
  ".Timestamp\022/\n\013modified_at\030\t \001(\0132\032.google"
  ".protobuf.Timestamp\022\023\n\007trusted\030\n \001(\010B\002\030\001"
  "\022\023\n\013input_level\030\021 \001(\010\022/\n\016consensus_info\030"
  "\022 \001(\0132\027.google.protobuf.Struct\022\017\n\007task_i"
  "d\030\023 \001(\tJ\004\010\004\020\005J\004\010\005\020\006J\004\010\006\020\007J\004\010\013\020\014J\004\010\014\020\r\"\306\003"
  "\n\003App\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\030\n\020defau"
  "lt_language\030\003 \001(\t\022\033\n\023default_workflow_id"
  "\030\004 \001(\t\022\017\n\007user_id\030\005 \001(\t\022.\n\ncreated_at\030\006 "
  "\001(\0132\032.google.protobuf.Timestamp\022/\n\013modif"
  "ied_at\030\021 \001(\0132\032.google.protobuf.Timestamp"
  "\022\034\n\024legal_consent_status\030\007 \001(\r\022)\n\010metada"
  "ta\030\r \001(\0132\027.google.protobuf.Struct\022\023\n\013des"
  "cription\030\016 \001(\t\022\021\n\tsample_ms\030\017 \001(\r\022,\n\nvis"
  "ibility\030\020 \001(\0132\030.clarifai.api.Visibility\022"
  "\024\n\014data_tier_id\030\022 \001(\t\022\022\n\nis_starred\030\023 \001("
  "\010\022\022\n\nstar_count\030\024 \001(\005\022\r\n\005notes\030\025 \001(\tJ\004\010\n"
  "\020\013J\004\010\013\020\014J\004\010\014\020\r\"\030\n\010AppQuery\022\014\n\004name\030\001 \001(\t"
  "\"\220\002\n\014Collaborator\022\n\n\002id\030\001 \001(\t\022\036\n\003app\030\002 \001"
  "(\0132\021.clarifai.api.App\022 \n\004user\030\003 \001(\0132\022.cl"
  "arifai.api.User\022\016\n\006scopes\030\004 \003(\t\022\021\n\tendpo"
  "ints\030\005 \003(\t\022.\n\ncreated_at\030\006 \001(\0132\032.google."
  "protobuf.Timestamp\022/\n\013modified_at\030\007 \001(\0132"
  "\032.google.protobuf.Timestamp\022.\n\ndeleted_a"
  "t\030\010 \001(\0132\032.google.protobuf.Timestamp\"\251\001\n\r"
  "Collaboration\022\036\n\003app\030\001 \001(\0132\021.clarifai.ap"
  "i.App\022%\n\tapp_owner\030\002 \001(\0132\022.clarifai.api."
  "User\022\016\n\006scopes\030\003 \003(\t\022\021\n\tendpoints\030\004 \003(\t\022"
  ".\n\ncreated_at\030\005 \001(\0132\032.google.protobuf.Ti"
  "mestamp\"\227\001\n\005Audio\022\013\n\003url\030\001 \001(\t\022\016\n\006base64"
  "\030\002 \001(\014\022\033\n\023allow_duplicate_url\030\004 \001(\010\022\'\n\006h"
  "osted\030\005 \001(\0132\027.clarifai.api.HostedURL\022+\n\n"
  "audio_info\030\006 \001(\0132\027.clarifai.api.AudioInf"
  "o\"b\n\tAudioInfo\022\024\n\014audio_format\030\001 \001(\t\022\023\n\013"
  "sample_rate\030\002 \001(\005\022\030\n\020duration_seconds\030\003 "
  "\001(\002\022\020\n\010bit_rate\030\004 \001(\005\"w\n\005Track\022\n\n\002id\030\001 \001"
  "(\t\022 \n\004data\030\002 \001(\0132\022.clarifai.api.Data\022)\n\t"
  "time_info\030\004 \001(\0132\026.clarifai.api.TimeInfo\022"
  "\017\n\007quality\030\005 \001(\002J\004\010\003\020\004\"h\n\007Cluster\022\n\n\002id\030"
  "\001 \001(\t\022\r\n\005count\030\002 \001(\r\022\r\n\005score\030\003 \001(\002\022\037\n\004h"
  "its\030\004 \003(\0132\021.clarifai.api.Hit\022\022\n\nprojecti"
  "on\030\005 \003(\002\"M\n\005Color\022\017\n\007raw_hex\030\001 \001(\t\022\036\n\003w3"
  "c\030\002 \001(\0132\021.clarifai.api.W3C\022\023\n\005value\030\003 \001("
  "\002B\004\200\265\030\001\" \n\003W3C\022\013\n\003hex\030\001 \001(\t\022\014\n\004name\030\002 \001("
  "\t\"/\n\014UserAppIDSet\022\017\n\007user_id\030\001 \001(\t\022\016\n\006ap"
  "p_id\030\002 \001(\t\"J\n\013PatchAction\022\n\n\002op\030\001 \001(\t\022!\n"
  "\031merge_conflict_resolution\030\002 \001(\t\022\014\n\004path"
  "\030\003 \001(\t\"\366\001\n\007Concept\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002"
  " \001(\t\022\032\n\005value\030\003 \001(\002B\013\325\265\030\000\000\200\?\200\265\030\001\022.\n\ncrea"
  "ted_at\030\004 \001(\0132\032.google.protobuf.Timestamp"
  "\022\020\n\010language\030\005 \001(\t\022\016\n\006app_id\030\006 \001(\t\022\022\n\nde"
  "finition\030\007 \001(\t\022\020\n\010vocab_id\030\010 \001(\t\022,\n\nvisi"
  "bility\030\t \001(\0132\030.clarifai.api.Visibility\022\017"
  "\n\007user_id\030\n \001(\t\"\244\001\n\014ConceptCount\022\n\n\002id\030\001"
  " \001(\t\022\014\n\004name\030\002 \001(\t\022:\n\022concept_type_count"
  "\030\003 \001(\0132\036.clarifai.api.ConceptTypeCount\022>"
  "\n\024detail_concept_count\030\004 \001(\0132 .clarifai."
  "api.DetailConceptCount\"B\n\020ConceptTypeCou"
  "nt\022\026\n\010positive\030\001 \001(\rB\004\200\265\030\001\022\026\n\010negative\030\002"
  " \001(\rB\004\200\265\030\001\"\337\001\n\022DetailConceptCount\0221\n\tpro"
  "cessed\030\001 \001(\0132\036.clarifai.api.ConceptTypeC"
  "ount\0222\n\nto_process\030\002 \001(\0132\036.clarifai.api."
  "ConceptTypeCount\022.\n\006errors\030\003 \001(\0132\036.clari"
  "fai.api.ConceptTypeCount\0222\n\nprocessing\030\004"
  " \001(\0132\036.clarifai.api.ConceptTypeCount\"C\n\014"
  "ConceptQuery\022\014\n\004name\030\001 \001(\t\022\020\n\010language\030\002"
  " \001(\t\022\023\n\013workflow_id\030\003 \001(\t\"\331\001\n\017ConceptRel"
  "ation\022\n\n\002id\030\001 \001(\t\022.\n\017subject_concept\030\002 \001"
  "(\0132\025.clarifai.api.Concept\022-\n\016object_conc"
  "ept\030\003 \001(\0132\025.clarifai.api.Concept\022\021\n\tpred"
  "icate\030\004 \001(\t\022\032\n\022knowledge_graph_id\030\005 \001(\t\022"
  ",\n\nvisibility\030\006 \001(\0132\030.clarifai.api.Visib"
  "ility\"y\n\016KnowledgeGraph\022\n\n\002id\030\001 \001(\t\022\014\n\004n"
  "ame\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\027\n\017exampl"
  "es_app_id\030\004 \001(\t\022\037\n\027sampled_examples_app_"
  "id\030\005 \001(\t\"D\n\021ConceptMappingJob\022\032\n\022knowled"
  "ge_graph_id\030\001 \001(\t\022\023\n\013concept_ids\030\002 \003(\t\"\?"
  "\n\017ConceptLanguage\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 "
  "\001(\t\022\022\n\ndefinition\030\003 \001(\t\"\372\004\n\004Data\022\"\n\005imag"
  "e\030\001 \001(\0132\023.clarifai.api.Image\022\"\n\005video\030\002 "
  "\001(\0132\023.clarifai.api.Video\022\'\n\010concepts\030\003 \003"
  "(\0132\025.clarifai.api.Concept\022)\n\010metadata\030\005 "
  "\001(\0132\027.google.protobuf.Struct\022\036\n\003geo\030\006 \001("
  "\0132\021.clarifai.api.Geo\022#\n\006colors\030\007 \003(\0132\023.c"
  "larifai.api.Color\022\'\n\010clusters\030\010 \003(\0132\025.cl"
  "arifai.api.Cluster\022+\n\nembeddings\030\t \003(\0132\027"
  ".clarifai.api.Embedding\022%\n\007regions\030\013 \003(\013"
  "2\024.clarifai.api.Region\022#\n\006frames\030\014 \003(\0132\023"
  ".clarifai.api.Frame\022 \n\004text\030\r \001(\0132\022.clar"
  "ifai.api.Text\022\"\n\005audio\030\016 \001(\0132\023.clarifai."
  "api.Audio\022#\n\006tracks\030\017 \003(\0132\023.clarifai.api"
  ".Track\0220\n\rtime_segments\030\020 \003(\0132\031.clarifai"
  ".api.TimeSegment\022\037\n\004hits\030\021 \003(\0132\021.clarifa"
  "i.api.Hit\022%\n\010heatmaps\030\022 \003(\0132\023.clarifai.a"
  "pi.ImageJ\004\010\004\020\005J\004\010\n\020\013\"\206\001\n\006Region\022\n\n\002id\030\001 "
  "\001(\t\022-\n\013region_info\030\002 \001(\0132\030.clarifai.api."
  "RegionInfo\022 \n\004data\030\003 \001(\0132\022.clarifai.api."
  "Data\022\r\n\005value\030\004 \001(\002\022\020\n\010track_id\030\005 \001(\t\"\375\001"
  "\n\nRegionInfo\022/\n\014bounding_box\030\001 \001(\0132\031.cla"
  "rifai.api.BoundingBox\022 \n\004mask\030\004 \001(\0132\022.cl"
  "arifai.api.Mask\022&\n\007polygon\030\005 \001(\0132\025.clari"
  "fai.api.Polygon\022\"\n\005point\030\006 \001(\0132\023.clarifa"
  "i.api.Point\022 \n\004span\030\007 \001(\0132\022.clarifai.api"
  ".Span\022\"\n\005token\030\010 \001(\0132\023.clarifai.api.Toke"
  "nJ\004\010\002\020\003J\004\010\003\020\004\"o\n\013BoundingBox\022\025\n\007top_row\030"
  "\001 \001(\002B\004\200\265\030\001\022\026\n\010left_col\030\002 \001(\002B\004\200\265\030\001\022\030\n\nb"
  "ottom_row\030\003 \001(\002B\004\200\265\030\001\022\027\n\tright_col\030\004 \001(\002"
  "B\004\200\265\030\001\"4\n\tFrameInfo\022\023\n\005index\030\001 \001(\rB\004\200\265\030\001"
  "\022\022\n\004time\030\002 \001(\rB\004\200\265\030\001\"b\n\005Frame\022+\n\nframe_i"
  "nfo\030\001 \001(\0132\027.clarifai.api.FrameInfo\022 \n\004da"
  "ta\030\002 \001(\0132\022.clarifai.api.Data\022\n\n\002id\030\003 \001(\t"
  "\"0\n\004Mask\022\"\n\005image\030\002 \001(\0132\023.clarifai.api.I"
  "mageJ\004\010\001\020\002\".\n\007Polygon\022#\n\006points\030\001 \003(\0132\023."
  "clarifai.api.Point\"8\n\005Point\022\021\n\003row\030\001 \001(\002"
  "B\004\200\265\030\001\022\021\n\003col\030\002 \001(\002B\004\200\265\030\001\022\t\n\001z\030\003 \001(\002\"J\n\004"
  "Span\022\030\n\nchar_start\030\001 \001(\rB\004\200\265\030\001\022\026\n\010char_e"
  "nd\030\002 \001(\rB\004\200\265\030\001\022\020\n\010raw_text\030\003 \001(\t\"K\n\005Toke"
  "n\022\030\n\nchar_start\030\001 \001(\rB\004\200\265\030\001\022\026\n\010char_end\030"
  "\002 \001(\rB\004\200\265\030\001\022\020\n\010raw_text\030\003 \001(\t\"7\n\tEmbeddi"
  "ng\022\022\n\006vector\030\001 \003(\002B\002\020\001\022\026\n\016num_dimensions"
  "\030\002 \001(\r\";\n\010GeoPoint\022\027\n\tlongitude\030\001 \001(\002B\004\200"
  "\265\030\001\022\026\n\010latitude\030\002 \001(\002B\004\200\265\030\001\"-\n\010GeoLimit\022"
  "\014\n\004type\030\001 \001(\t\022\023\n\005value\030\002 \001(\002B\004\200\265\030\001\":\n\rGe"
  "oBoxedPoint\022)\n\tgeo_point\030\001 \001(\0132\026.clarifa"
  "i.api.GeoPoint\"\211\001\n\003Geo\022)\n\tgeo_point\030\001 \001("
  "\0132\026.clarifai.api.GeoPoint\022)\n\tgeo_limit\030\002"
  " \001(\0132\026.clarifai.api.GeoLimit\022,\n\007geo_box\030"
  "\003 \003(\0132\033.clarifai.api.GeoBoxedPoint\"\235\001\n\005I"
  "mage\022\013\n\003url\030\001 \001(\t\022\016\n\006base64\030\002 \001(\014\022\033\n\023all"
  "ow_duplicate_url\030\004 \001(\010\022\'\n\006hosted\030\005 \001(\0132\027"
  ".clarifai.api.HostedURL\022+\n\nimage_info\030\006 "
  "\001(\0132\027.clarifai.api.ImageInfoJ\004\010\003\020\004\"N\n\tIm"
  "ageInfo\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\016"
  "\n\006format\030\003 \001(\t\022\022\n\ncolor_mode\030\004 \001(\t\"O\n\tHo"
  "stedURL\022\016\n\006prefix\030\001 \001(\t\022\016\n\006suffix\030\002 \001(\t\022"
  "\r\n\005sizes\030\003 \003(\t\022\023\n\013crossorigin\030\004 \001(\t\"\336\001\n\005"
  "Input\022\n\n\002id\030\001 \001(\t\022 \n\004data\030\002 \001(\0132\022.clarif"
  "ai.api.Data\022.\n\ncreated_at\030\004 \001(\0132\032.google"
  ".protobuf.Timestamp\022/\n\013modified_at\030\005 \001(\013"
  "2\032.google.protobuf.Timestamp\022+\n\006status\030\006"
  " \001(\0132\033.clarifai.api.status.Status\022\023\n\013dat"
  "aset_ids\030\007 \003(\tJ\004\010\003\020\004\"\332\001\n\nInputCount\022\027\n\tp"
  "rocessed\030\001 \001(\rB\004\200\265\030\001\022\030\n\nto_process\030\002 \001(\r"
  "B\004\200\265\030\001\022\024\n\006errors\030\003 \001(\rB\004\200\265\030\001\022\030\n\nprocessi"
  "ng\030\004 \001(\rB\004\200\265\030\001\022\027\n\treindexed\030\005 \001(\rB\004\200\265\030\001\022"
  "\030\n\nto_reindex\030\006 \001(\rB\004\200\265\030\001\022\034\n\016reindex_err"
  "ors\030\007 \001(\rB\004\200\265\030\001\022\030\n\nreindexing\030\010 \001(\rB\004\200\265\030"
  "\001\"\222\003\n\007Dataset\022\n\n\002id\030\001 \001(\t\022.\n\ncreated_at\030"
  "\002 \001(\0132\032.google.protobuf.Timestamp\022/\n\013mod"
  "ified_at\030\003 \001(\0132\032.google.protobuf.Timesta"
  "mp\022\016\n\006app_id\030\004 \001(\t\022\017\n\007user_id\030\005 \001(\t\022\023\n\013d"
  "escription\030\007 \001(\t\022)\n\010metadata\030\010 \001(\0132\027.goo"
  "gle.protobuf.Struct\022,\n\nvisibility\030\t \001(\0132"
  "\030.clarifai.api.Visibility\022A\n\031default_ann"
  "otation_filter\030\014 \001(\0132\036.clarifai.api.Anno"
  "tationFilter\022\r\n\005notes\030\013 \001(\t\022-\n\007version\030\r"
  " \001(\0132\034.clarifai.api.DatasetVersionJ\004\010\006\020\007"
  "J\004\010\n\020\013\"\330\001\n\020AnnotationFilter\022\n\n\002id\030\001 \001(\t\022"
  ".\n\ncreated_at\030\002 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022/\n\013modified_at\030\003 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022\017\n\007user_id\030\004 \001(\t\022\016\n\006app"
  "_id\030\005 \001(\t\022*\n\014saved_search\030\010 \001(\0132\024.clarif"
  "ai.api.SearchJ\004\010\006\020\007J\004\010\007\020\010\"b\n\014DatasetInpu"
  "t\022.\n\ncreated_at\030\001 \001(\0132\032.google.protobuf."
  "Timestamp\022\"\n\005input\030\002 \001(\0132\023.clarifai.api."
  "Input\"\352\004\n\016DatasetVersion\022\n\n\002id\030\001 \001(\t\022.\n\n"
  "created_at\030\002 \001(\0132\032.google.protobuf.Times"
  "tamp\022/\n\013modified_at\030\003 \001(\0132\032.google.proto"
  "buf.Timestamp\022\016\n\006app_id\030\004 \001(\t\022\017\n\007user_id"
  "\030\005 \001(\t\022\022\n\ndataset_id\030\006 \001(\t\022H\n\030annotation"
  "_filter_config\030\017 \001(\0132$.clarifai.api.Anno"
  "tationFilterConfigH\000\022+\n\006status\030\010 \001(\0132\033.c"
  "larifai.api.status.Status\022\023\n\013description"
  "\030\n \001(\t\022:\n\007metrics\030\020 \003(\0132).clarifai.api.D"
  "atasetVersion.MetricsEntry\022)\n\010metadata\030\014"
  " \001(\0132\027.google.protobuf.Struct\022,\n\nvisibil"
  "ity\030\r \001(\0132\030.clarifai.api.Visibility\022\037\n\027e"
  "mbed_model_version_ids\030\016 \003(\t\032S\n\014MetricsE"
  "ntry\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002 \001(\0132#.clari"
  "fai.api.DatasetVersionMetrics:\0028\001B\r\n\013dat"
  "a_configJ\004\010\007\020\010J\004\010\t\020\nJ\004\010\013\020\014\"S\n\026Annotation"
  "FilterConfig\0229\n\021annotation_filter\030\001 \001(\0132"
  "\036.clarifai.api.AnnotationFilter\"\303\010\n\025Data"
  "setVersionMetrics\0222\n\014inputs_count\030\001 \001(\0132"
  "\034.google.protobuf.UInt64Value\022<\n\026unlabel"
  "ed_inputs_count\030\006 \001(\0132\034.google.protobuf."
  "UInt64Value\022@\n\032inputs_with_metadata_coun"
  "t\030\010 \001(\0132\034.google.protobuf.UInt64Value\022;\n"
  "\025inputs_with_geo_count\030\t \001(\0132\034.google.pr"
  "otobuf.UInt64Value\0223\n\rregions_count\030\024 \001("
  "\0132\034.google.protobuf.UInt64Value\022-\n\026regio"
  "n_location_matrix\030\025 \001(\0132\r.MatrixUint64\022:"
  "\n\024bounding_boxes_count\030\026 \001(\0132\034.google.pr"
  "otobuf.UInt64Value\0224\n\016polygons_count\030\027 \001"
  "(\0132\034.google.protobuf.UInt64Value\0222\n\014poin"
  "ts_count\030\030 \001(\0132\034.google.protobuf.UInt64V"
  "alue\0221\n\013masks_count\030\031 \001(\0132\034.google.proto"
  "buf.UInt64Value\0229\n\023region_inputs_count\030<"
  " \001(\0132\034.google.protobuf.UInt64Value\0229\n\023re"
  "gion_frames_count\030= \001(\0132\034.google.protobu"
  "f.UInt64Value\0222\n\014frames_count\030\036 \001(\0132\034.go"
  "ogle.protobuf.UInt64Value\0228\n\022frame_input"
  "s_count\030F \001(\0132\034.google.protobuf.UInt64Va"
  "lue\0226\n\020embeddings_count\030( \001(\0132\034.google.p"
  "rotobuf.UInt64Value\022\?\n\031positive_input_ta"
  "gs_count\0302 \001(\0132\034.google.protobuf.UInt64V"
  "alue\022@\n\032positive_region_tags_count\0303 \001(\013"
  "2\034.google.protobuf.UInt64Value\022\?\n\031positi"
  "ve_frame_tags_count\0304 \001(\0132\034.google.proto"
  "buf.UInt64ValueJ\004\010\002\020\003J\004\010\003\020\004J\004\010\004\020\005J\004\010\005\020\006J"
  "\004\010\007\020\010\"\312\001\n\032DatasetVersionMetricsGroup\022\023\n\013"
  "parent_path\030\001 \001(\t\022:\n\004type\030\002 \001(\0162,.clarif"
  "ai.api.DatasetVersionMetricsGroupType\022%\n"
  "\005value\030\003 \001(\0132\026.google.protobuf.Value\0224\n\007"
  "metrics\030\004 \001(\0132#.clarifai.api.DatasetVers"
  "ionMetrics\"n\n\031WorkflowResultsSimilarity\022"
  "(\n\013probe_input\030\001 \001(\0132\023.clarifai.api.Inpu"
  "t\022\'\n\014pool_results\030\002 \003(\0132\021.clarifai.api.H"
  "it\"\364\001\n\003Key\022\n\n\002id\030\001 \001(\t\022\014\n\004type\030\010 \001(\t\022\023\n\013"
  "description\030\002 \001(\t\022\016\n\006scopes\030\003 \003(\t\022\021\n\tend"
  "points\030\007 \003(\t\022\037\n\004apps\030\004 \003(\0132\021.clarifai.ap"
  "i.App\022.\n\ncreated_at\030\005 \001(\0132\032.google.proto"
  "buf.Timestamp\022.\n\nexpires_at\030\006 \001(\0132\032.goog"
  "le.protobuf.Timestamp\022\032\n\022authorized_idp_"
  "ids\030\t \003(\t\"\365\006\n\005Model\022\n\n\002id\030\001 \001(\t\022\020\n\004name\030"
  "\002 \001(\tB\002\030\001\022.\n\ncreated_at\030\003 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022/\n\013modified_at\030\023 \001(\0132\032"
  ".google.protobuf.Timestamp\022\024\n\006app_id\030\004 \001"
  "(\tB\004\200\265\030\001\022-\n\013output_info\030\005 \001(\0132\030.clarifai"
  ".api.OutputInfo\0221\n\rmodel_version\030\006 \001(\0132\032"
  ".clarifai.api.ModelVersion\022\030\n\014display_na"
  "me\030\007 \001(\tB\002\030\001\022\017\n\007user_id\030\t \001(\t\022+\n\ninput_i"
  "nfo\030\014 \001(\0132\027.clarifai.api.InputInfo\022+\n\ntr"
  "ain_info\030\r \001(\0132\027.clarifai.api.TrainInfo\022"
  "1\n\021default_eval_info\030\036 \001(\0132\026.clarifai.ap"
  "i.EvalInfo\022\025\n\rmodel_type_id\030\016 \001(\t\022\014\n\004tas"
  "k\030\032 \001(\t\022,\n\nvisibility\030\017 \001(\0132\030.clarifai.a"
  "pi.Visibility\022\023\n\013description\030\020 \001(\t\022)\n\010me"
  "tadata\030\021 \001(\0132\027.google.protobuf.Struct\022(\n"
  "\007presets\030\033 \001(\0132\027.google.protobuf.Struct\022"
  "\r\n\005notes\030\022 \001(\t\022\026\n\010toolkits\030\024 \003(\tB\004\200\265\030\001\022\027"
  "\n\tuse_cases\030\025 \003(\tB\004\200\265\030\001\022\027\n\tlanguages\030\031 \003"
  "(\tB\004\200\265\030\001\022\022\n\nis_starred\030\026 \001(\010\022\022\n\nstar_cou"
  "nt\030\027 \001(\005\022-\n\013import_info\030\030 \001(\0132\030.clarifai"
  ".api.ImportInfo\0228\n\024workflow_recommended\030"
  "\035 \001(\0132\032.google.protobuf.BoolValueJ\004\010\010\020\tJ"
  "\004\010\n\020\013J\004\010\013\020\014J\004\010\034\020\035\"t\n\016ModelReference\022\n\n\002i"
  "d\030\001 \001(\t\022\020\n\010model_id\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022\014"
  "\n\004name\030\004 \001(\t\022)\n\010metadata\030\005 \001(\0132\027.google."
  "protobuf.Struct\"\227\001\n\030ModelVersionInputExa"
  "mple\022\n\n\002id\030\001 \001(\t\022\020\n\010model_id\030\002 \001(\t\022\030\n\020mo"
  "del_version_id\030\003 \001(\t\022 \n\004data\030\004 \001(\0132\022.cla"
  "rifai.api.Data\022\014\n\004name\030\005 \001(\t\022\023\n\013descript"
  "ion\030\006 \001(\t\"\324\001\n\nOutputInfo\022 \n\004data\030\001 \001(\0132\022"
  ".clarifai.api.Data\0221\n\routput_config\030\002 \001("
  "\0132\032.clarifai.api.OutputConfig\022\017\n\007message"
  "\030\003 \001(\t\022+\n\nfields_map\030\006 \001(\0132\027.google.prot"
  "obuf.Struct\022\'\n\006params\030\007 \001(\0132\027.google.pro"
  "tobuf.StructJ\004\010\004\020\005J\004\010\005\020\006\"a\n\tInputInfo\022+\n"
  "\nfields_map\030\001 \001(\0132\027.google.protobuf.Stru"
  "ct\022\'\n\006params\030\002 \001(\0132\027.google.protobuf.Str"
  "uct\"4\n\tTrainInfo\022\'\n\006params\030\001 \001(\0132\027.googl"
  "e.protobuf.Struct\"3\n\010EvalInfo\022\'\n\006params\030"
  "\001 \001(\0132\027.google.protobuf.Struct\"5\n\nImport"
  "Info\022\'\n\006params\030\001 \001(\0132\027.google.protobuf.S"
  "truct\"\203\004\n\014OutputConfig\022)\n\033concepts_mutua"
  "lly_exclusive\030\001 \001(\010B\004\200\265\030\001\022 \n\022closed_envi"
  "ronment\030\002 \001(\010B\004\200\265\030\001\022\035\n\021existing_model_id"
  "\030\003 \001(\tB\002\030\001\022\020\n\010language\030\004 \001(\t\022\034\n\020hyper_pa"
  "rameters\030\005 \001(\tB\002\030\001\022\032\n\014max_concepts\030\006 \001(\r"
  "B\004\200\265\030\001\022\027\n\tmin_value\030\007 \001(\002B\004\200\265\030\001\022.\n\017selec"
  "t_concepts\030\010 \003(\0132\025.clarifai.api.Concept\022"
  "\030\n\020training_timeout\030\t \001(\r\022\021\n\tsample_ms\030\n"
  " \001(\r\022-\n\014hyper_params\030\r \001(\0132\027.google.prot"
  "obuf.Struct\022\036\n\026embed_model_version_id\030\016 "
  "\001(\t\022)\n!fail_on_missing_positive_examples"
  "\030\017 \001(\010\0223\n\016model_metadata\030\021 \001(\0132\027.google."
  "protobuf.StructB\002\030\001J\004\010\013\020\014J\004\010\014\020\rJ\004\010\020\020\021J\004\010"
  "\022\020\023\"\250\003\n\tModelType\022\n\n\002id\030\001 \001(\t\022\r\n\005title\030\002"
  " \001(\t\022\023\n\013description\030\003 \001(\t\022\024\n\014input_field"
  "s\030\005 \003(\t\022\025\n\routput_fields\030\006 \003(\t\022\021\n\ttraina"
  "ble\030\010 \001(\010\022\021\n\tcreatable\030\t \001(\010\022\025\n\rinternal"
  "_only\030\n \001(\010\0227\n\021model_type_fields\030\013 \003(\0132\034"
  ".clarifai.api.ModelTypeField\022\"\n\032requires"
  "_sequential_frames\030\014 \001(\010\022\021\n\tevaluable\030\r "
  "\001(\010\022;\n\025expected_input_layers\030\020 \003(\0132\034.cla"
  "rifai.api.ModelLayerInfo\022<\n\026expected_out"
  "put_layers\030\021 \003(\0132\034.clarifai.api.ModelLay"
  "erInfoJ\004\010\007\020\010J\004\010\004\020\005J\004\010\016\020\017J\004\010\017\020\020\"\211\001\n\016Model"
  "LayerInfo\022\027\n\017data_field_name\030\001 \001(\t\022(\n\006sh"
  "apes\030\002 \003(\0132\030.clarifai.api.LayerShape\022\023\n\013"
  "description\030\003 \001(\t\022\037\n\027requires_label_file"
  "name\030\004 \001(\010\"l\n\nLayerShape\022\014\n\004dims\030\001 \003(\005\022\020"
  "\n\010max_dims\030\002 \003(\005\022)\n\tdata_type\030\003 \001(\0162\026.cl"
  "arifai.api.DataType\022\023\n\013description\030\004 \001(\t"
  "\"\272\005\n\016ModelTypeField\022\014\n\004path\030\001 \001(\t\022C\n\nfie"
  "ld_type\030\002 \001(\0162/.clarifai.api.ModelTypeFi"
  "eld.ModelTypeFieldType\022-\n\rdefault_value\030"
  "\003 \001(\0132\026.google.protobuf.Value\022\023\n\013descrip"
  "tion\030\004 \001(\t\022\023\n\013placeholder\030\005 \001(\t\022B\n\027model"
  "_type_enum_options\030\006 \003(\0132!.clarifai.api."
  "ModelTypeEnumOption\022\025\n\rinternal_only\030\007 \001"
  "(\010\022\020\n\010required\030\010 \001(\010\022\?\n\025model_type_range"
  "_info\030\t \001(\0132 .clarifai.api.ModelTypeRang"
  "eInfo\"\315\002\n\022ModelTypeFieldType\022!\n\035INVALID_"
  "MODEL_TYPE_FIELD_TYPE\020\000\022\013\n\007BOOLEAN\020\001\022\n\n\006"
  "STRING\020\002\022\n\n\006NUMBER\020\003\022\025\n\021ARRAY_OF_CONCEPT"
  "S\020\004\022$\n ARRAY_OF_CONCEPTS_WITH_THRESHOLD\020"
  "\005\022\t\n\005RANGE\020\007\022\010\n\004ENUM\020\010\022\021\n\rCOLLABORATORS\020"
  "\t\022\010\n\004JSON\020\n\022\024\n\020ARRAY_OF_NUMBERS\020\013\022\031\n\025WOR"
  "KFLOW_EMBED_MODELS\020\014\022\024\n\020ARRAY_OF_STRINGS"
  "\020\r\022\022\n\016RECURSIVE_ENUM\020\016\022\017\n\013PYTHON_CODE\020\017\022"
  "\016\n\nDATASET_ID\020\020\"\004\010\006\020\006\"<\n\022ModelTypeRangeI"
  "nfo\022\013\n\003min\030\001 \001(\002\022\013\n\003max\030\002 \001(\002\022\014\n\004step\030\003 "
  "\001(\002\"\277\001\n\023ModelTypeEnumOption\022\n\n\002id\030\001 \001(\t\022"
  "7\n\007aliases\030\005 \003(\0132&.clarifai.api.ModelTyp"
  "eEnumOptionAlias\022\023\n\013description\030\002 \001(\t\0227\n"
  "\021model_type_fields\030\003 \003(\0132\034.clarifai.api."
  "ModelTypeField\022\025\n\rinternal_only\030\004 \001(\010\"*\n"
  "\030ModelTypeEnumOptionAlias\022\016\n\006id_int\030\001 \001("
  "\003\"7\n\nModelQuery\022\014\n\004name\030\001 \001(\t\022\025\n\rmodel_t"
  "ype_id\030\003 \001(\tJ\004\010\002\020\003\"\342\004\n\014ModelVersion\022\n\n\002i"
  "d\030\001 \001(\t\022.\n\ncreated_at\030\002 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022+\n\006status\030\003 \001(\0132\033.clarif"
  "ai.api.status.Status\022\034\n\024active_concept_c"
  "ount\030\004 \001(\r\022*\n\007metrics\030\005 \001(\0132\031.clarifai.a"
  "pi.EvalMetrics\022\031\n\021total_input_count\030\006 \001("
  "\r\022D\n\027pretrained_model_config\030\007 \001(\0132#.cla"
  "rifai.api.PretrainedModelConfig\0220\n\014compl"
  "eted_at\030\n \001(\0132\032.google.protobuf.Timestam"
  "p\022\023\n\013description\030\013 \001(\t\022,\n\nvisibility\030\014 \001"
  "(\0132\030.clarifai.api.Visibility\022\016\n\006app_id\030\r"
  " \001(\t\022\017\n\007user_id\030\016 \001(\t\022/\n\013modified_at\030\017 \001"
  "(\0132\032.google.protobuf.Timestamp\022)\n\010metada"
  "ta\030\020 \001(\0132\027.google.protobuf.Struct\022\017\n\007lic"
  "ense\030\021 \001(\t\0225\n\017dataset_version\030\022 \001(\0132\034.cl"
  "arifai.api.DatasetVersionJ\004\010\t\020\n\"\241\001\n\025Pret"
  "rainedModelConfig\0221\n\020input_fields_map\030\003 "
  "\001(\0132\027.google.protobuf.Struct\0222\n\021output_f"
  "ields_map\030\004 \001(\0132\027.google.protobuf.Struct"
  "\022\025\n\rmodel_zip_url\030\006 \001(\tJ\004\010\002\020\003J\004\010\005\020\006\">\n\nT"
  "rainStats\0220\n\nloss_curve\030\001 \003(\0132\034.clarifai"
  ".api.LossCurveEntry\"B\n\016LossCurveEntry\022\r\n"
  "\005epoch\030\001 \001(\r\022\023\n\013global_step\030\002 \001(\r\022\014\n\004cos"
  "t\030\003 \001(\002\"1\n\nLabelCount\022\024\n\014concept_name\030\001 "
  "\001(\t\022\r\n\005count\030\002 \001(\r\"L\n\021LabelDistribution\022"
  "7\n\025positive_label_counts\030\001 \003(\0132\030.clarifa"
  "i.api.LabelCount\"B\n\027CooccurrenceMatrixEn"
  "try\022\013\n\003row\030\001 \001(\t\022\013\n\003col\030\002 \001(\t\022\r\n\005count\030\003"
  " \001(\r\"`\n\022CooccurrenceMatrix\0225\n\006matrix\030\001 \003"
  "(\0132%.clarifai.api.CooccurrenceMatrixEntr"
  "y\022\023\n\013concept_ids\030\002 \003(\t\"N\n\024ConfusionMatri"
  "xEntry\022\021\n\tpredicted\030\001 \001(\t\022\016\n\006actual\030\002 \001("
  "\t\022\023\n\005value\030\004 \001(\002B\004\200\265\030\001\"Z\n\017ConfusionMatri"
  "x\0222\n\006matrix\030\001 \003(\0132\".clarifai.api.Confusi"
  "onMatrixEntry\022\023\n\013concept_ids\030\002 \003(\t\"t\n\003RO"
  "C\022\021\n\003fpr\030\001 \003(\002B\004\200\265\030\001\022\021\n\003tpr\030\002 \003(\002B\004\200\265\030\001\022"
  "\030\n\nthresholds\030\003 \003(\002B\004\200\265\030\001\022\025\n\rfpr_per_ima"
  "ge\030\004 \003(\002\022\026\n\016fpr_per_object\030\005 \003(\002\"_\n\024Prec"
  "isionRecallCurve\022\024\n\006recall\030\001 \003(\002B\004\200\265\030\001\022\027"
  "\n\tprecision\030\002 \003(\002B\004\200\265\030\001\022\030\n\nthresholds\030\003 "
  "\003(\002B\004\200\265\030\001\"\352\002\n\rBinaryMetrics\022\025\n\007num_pos\030\001"
  " \001(\rB\004\200\265\030\001\022\025\n\007num_neg\030\002 \001(\rB\004\200\265\030\001\022\025\n\007num"
  "_tot\030\003 \001(\rB\004\200\265\030\001\022\025\n\007roc_auc\030\004 \001(\002B\004\200\265\030\001\022"
  "\020\n\002f1\030\005 \001(\002B\004\200\265\030\001\022&\n\007concept\030\006 \001(\0132\025.cla"
  "rifai.api.Concept\022$\n\troc_curve\030\007 \001(\0132\021.c"
  "larifai.api.ROC\022B\n\026precision_recall_curv"
  "e\030\010 \001(\0132\".clarifai.api.PrecisionRecallCu"
  "rve\022\025\n\ravg_precision\030\t \001(\002\022\021\n\tarea_name\030"
  "\n \001(\t\022\020\n\010area_min\030\013 \001(\001\022\020\n\010area_max\030\014 \001("
  "\001\022\013\n\003iou\030\r \001(\002\"\221\001\n\016TrackerMetrics\022\020\n\010mot"
  "_mota\030\001 \001(\002\022\030\n\020mot_num_switches\030\002 \001(\005\022\022\n"
  "\nmorse_frag\030\003 \001(\002\022\025\n\ravg_precision\030\004 \001(\002"
  "\022\014\n\004aiid\030\005 \001(\t\022\032\n\022unique_switch_rate\030\006 \001"
  "(\002\"\356\001\n\020EvalTestSetEntry\022\016\n\002id\030\001 \001(\tB\002\030\001\022"
  "\017\n\003url\030\002 \001(\tB\002\030\001\022\"\n\005input\030\006 \001(\0132\023.clarif"
  "ai.api.Input\0221\n\022predicted_concepts\030\003 \003(\013"
  "2\025.clarifai.api.Concept\0224\n\025ground_truth_"
  "concepts\030\004 \003(\0132\025.clarifai.api.Concept\022,\n"
  "\nannotation\030\005 \001(\0132\030.clarifai.api.Annotat"
  "ion\"\315\001\n\016LOPQEvalResult\022\t\n\001k\030\001 \001(\005\022#\n\025rec"
  "all_vs_brute_force\030\002 \001(\002B\004\200\265\030\001\022(\n\032kendal"
  "l_tau_vs_brute_force\030\003 \001(\002B\004\200\265\030\001\022(\n\032most"
  "_frequent_code_percent\030\004 \001(\002B\004\200\265\030\001\022\027\n\tlo"
  "pq_ndcg\030\005 \001(\002B\004\200\265\030\001\022\036\n\020brute_force_ndcg\030"
  "\006 \001(\002B\004\200\265\030\001\"\214\003\n\016MetricsSummary\022\031\n\rtop1_a"
  "ccuracy\030\001 \001(\002B\002\030\001\022\031\n\rtop5_accuracy\030\002 \001(\002"
  "B\002\030\001\022\037\n\021macro_avg_roc_auc\030\003 \001(\002B\004\200\265\030\001\022\037\n"
  "\021macro_std_roc_auc\030\004 \001(\002B\004\200\265\030\001\022 \n\022macro_"
  "avg_f1_score\030\005 \001(\002B\004\200\265\030\001\022 \n\022macro_std_f1"
  "_score\030\006 \001(\002B\004\200\265\030\001\022!\n\023macro_avg_precisio"
  "n\030\007 \001(\002B\004\200\265\030\001\022\036\n\020macro_avg_recall\030\010 \001(\002B"
  "\004\200\265\030\001\022!\n\031mean_avg_precision_iou_50\030\n \001(\002"
  "\022$\n\034mean_avg_precision_iou_range\030\013 \001(\002\0222"
  "\n\014lopq_metrics\030\t \003(\0132\034.clarifai.api.LOPQ"
  "EvalResult\"\332\004\n\013EvalMetrics\022+\n\006status\030\001 \001"
  "(\0132\033.clarifai.api.status.Status\022\n\n\002id\030\n "
  "\001(\t\022-\n\007summary\030\002 \001(\0132\034.clarifai.api.Metr"
  "icsSummary\0227\n\020confusion_matrix\030\003 \001(\0132\035.c"
  "larifai.api.ConfusionMatrix\022=\n\023cooccurre"
  "nce_matrix\030\004 \001(\0132 .clarifai.api.Cooccurr"
  "enceMatrix\0225\n\014label_counts\030\005 \001(\0132\037.clari"
  "fai.api.LabelDistribution\0223\n\016binary_metr"
  "ics\030\006 \003(\0132\033.clarifai.api.BinaryMetrics\0220"
  "\n\010test_set\030\007 \003(\0132\036.clarifai.api.EvalTest"
  "SetEntry\0224\n\017metrics_by_area\030\010 \003(\0132\033.clar"
  "ifai.api.BinaryMetrics\0225\n\020metrics_by_cla"
  "ss\030\t \003(\0132\033.clarifai.api.BinaryMetrics\0225\n"
  "\017tracker_metrics\030\013 \003(\0132\034.clarifai.api.Tr"
  "ackerMetrics\022)\n\teval_info\030\014 \001(\0132\026.clarif"
  "ai.api.EvalInfo\"\267\001\n\013FieldsValue\022\030\n\020confu"
  "sion_matrix\030\001 \001(\010\022\033\n\023cooccurrence_matrix"
  "\030\002 \001(\010\022\024\n\014label_counts\030\003 \001(\010\022\026\n\016binary_m"
  "etrics\030\004 \001(\010\022\020\n\010test_set\030\005 \001(\010\022\027\n\017metric"
  "s_by_area\030\006 \001(\010\022\030\n\020metrics_by_class\030\007 \001("
  "\010\"\333\001\n\006Output\022\n\n\002id\030\001 \001(\t\022+\n\006status\030\002 \001(\013"
  "2\033.clarifai.api.status.Status\022.\n\ncreated"
  "_at\030\003 \001(\0132\032.google.protobuf.Timestamp\022\"\n"
  "\005model\030\004 \001(\0132\023.clarifai.api.Model\022\"\n\005inp"
  "ut\030\005 \001(\0132\023.clarifai.api.Input\022 \n\004data\030\006 "
  "\001(\0132\022.clarifai.api.Data\"4\n\tScopeDeps\022\r\n\005"
  "scope\030\001 \001(\t\022\030\n\020depending_scopes\030\002 \003(\t\":\n"
  "\014EndpointDeps\022\020\n\010endpoint\030\001 \001(\t\022\030\n\020depen"
  "ding_scopes\030\002 \003(\t\"\215\001\n\003Hit\022\023\n\005score\030\001 \001(\002"
  "B\004\200\265\030\001\022\"\n\005input\030\002 \001(\0132\023.clarifai.api.Inp"
  "ut\022,\n\nannotation\030\003 \001(\0132\030.clarifai.api.An"
  "notation\022\017\n\007user_id\030\004 \001(\t\022\016\n\006app_id\030\005 \001("
  "\t\"\215\001\n\003And\022\"\n\005input\030\001 \001(\0132\023.clarifai.api."
  "Input\022$\n\006output\030\002 \001(\0132\024.clarifai.api.Out"
  "put\022\016\n\006negate\030\003 \001(\010\022,\n\nannotation\030\004 \001(\0132"
  "\030.clarifai.api.Annotation\"\204\001\n\005Query\022\037\n\004a"
  "nds\030\001 \003(\0132\021.clarifai.api.And\022\020\n\010language"
  "\030\002 \001(\t\022%\n\007filters\030\003 \003(\0132\024.clarifai.api.F"
  "ilter\022!\n\005ranks\030\004 \003(\0132\022.clarifai.api.Rank"
  "\"\336\002\n\006Search\022\"\n\005query\030\001 \001(\0132\023.clarifai.ap"
  "i.Query\022\n\n\002id\030\002 \001(\t\022\026\n\016application_id\030\003 "
  "\001(\t\022\014\n\004name\030\004 \001(\t\022)\n\005as_of\030\005 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022\020\n\010git_hash\030\006 \001(\t\022."
  "\n\ncreated_at\030\007 \001(\0132\032.google.protobuf.Tim"
  "estamp\022/\n\013modified_at\030\010 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022\021\n\talgorithm\030\t \001(\t\022\014\n\004sa"
  "ve\030\n \001(\010\022\021\n\tmin_value\030\013 \001(\002\022,\n\nvisibilit"
  "y\030\014 \001(\0132\030.clarifai.api.Visibility\"\244\001\n\006Fi"
  "lter\022\016\n\006negate\030\003 \001(\010\022,\n\nannotation\030\004 \001(\013"
  "2\030.clarifai.api.Annotation\022\"\n\005input\030\005 \001("
  "\0132\023.clarifai.api.Input\0228\n\027last_updated_t"
  "ime_range\030\006 \001(\0132\027.clarifai.api.TimeRange"
  "\"i\n\tTimeRange\022.\n\nstart_time\030\001 \001(\0132\032.goog"
  "le.protobuf.Timestamp\022,\n\010end_time\030\002 \001(\0132"
  "\032.google.protobuf.Timestamp\"D\n\004Rank\022\016\n\006n"
  "egate\030\003 \001(\010\022,\n\nannotation\030\004 \001(\0132\030.clarif"
  "ai.api.Annotation\"\215\002\n\027AnnotationSearchMe"
  "trics\022*\n\014ground_truth\030\001 \001(\0132\024.clarifai.a"
  "pi.Search\022,\n\016search_to_eval\030\002 \001(\0132\024.clar"
  "ifai.api.Search\022*\n\007metrics\030\003 \001(\0132\031.clari"
  "fai.api.EvalMetrics\022 \n\004data\030\004 \001(\0132\022.clar"
  "ifai.api.Data\022\034\n\024active_concept_count\030\005 "
  "\001(\r\022,\n\nvisibility\030\006 \001(\0132\030.clarifai.api.V"
  "isibility\"\221\001\n\004Text\022\013\n\003raw\030\001 \001(\t\022\013\n\003url\030\002"
  " \001(\t\022\033\n\023allow_duplicate_url\030\003 \001(\010\022\'\n\006hos"
  "ted\030\004 \001(\0132\027.clarifai.api.HostedURL\022)\n\tte"
  "xt_info\030\005 \001(\0132\026.clarifai.api.TextInfo\"0\n"
  "\010TextInfo\022\022\n\nchar_count\030\001 \001(\005\022\020\n\010encodin"
  "g\030\002 \001(\t\"\326\005\n\004User\022\n\n\002id\030\001 \001(\t\022\031\n\rprimary_"
  "email\030\002 \001(\tB\002\030\001\022\022\n\nfirst_name\030\003 \001(\t\022\021\n\tl"
  "ast_name\030\004 \001(\t\022\024\n\014company_name\030\005 \001(\t\022\021\n\t"
  "job_title\030\023 \001(\t\022\020\n\010job_role\030\024 \001(\t\022\025\n\tbil"
  "l_type\030\007 \001(\tB\002\030\001\022.\n\ncreated_at\030\006 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\0229\n\021date_gdpr_co"
  "nsent\030\010 \001(\0132\032.google.protobuf.TimestampB"
  "\002\030\001\0228\n\020date_tos_consent\030\t \001(\0132\032.google.p"
  "rotobuf.TimestampB\002\030\001\022>\n\026date_marketing_"
  "consent\030\n \001(\0132\032.google.protobuf.Timestam"
  "pB\002\030\001\022-\n\010metadata\030\013 \001(\0132\027.google.protobu"
  "f.StructB\002\030\001\0227\n\017email_addresses\030\014 \003(\0132\032."
  "clarifai.api.EmailAddressB\002\030\001\022\030\n\014is_org_"
  "admin\030\016 \001(\010B\002\030\001\022#\n\027two_factor_auth_enabl"
  "ed\030\017 \001(\010B\002\030\001\022\027\n\013teams_count\030\020 \001(\rB\002\030\001\022\022\n"
  "\nis_starred\030\025 \001(\010\022\022\n\nstar_count\030\026 \001(\005\022,\n"
  "\nvisibility\030\021 \001(\0132\030.clarifai.api.Visibil"
  "ity\022-\n\013user_detail\030\022 \001(\0132\030.clarifai.api."
  "UserDetailJ\004\010\r\020\016\"\253\003\n\nUserDetail\022\025\n\rprima"
  "ry_email\030\001 \001(\t\022\021\n\tbill_type\030\002 \001(\t\0225\n\021dat"
  "e_gdpr_consent\030\003 \001(\0132\032.google.protobuf.T"
  "imestamp\0224\n\020date_tos_consent\030\004 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\022:\n\026date_marketing"
  "_consent\030\005 \001(\0132\032.google.protobuf.Timesta"
  "mp\022)\n\010metadata\030\006 \001(\0132\027.google.protobuf.S"
  "truct\0223\n\017email_addresses\030\007 \003(\0132\032.clarifa"
  "i.api.EmailAddress\022\024\n\014is_org_admin\030\010 \001(\010"
  "\022\037\n\027two_factor_auth_enabled\030\t \001(\010\022\023\n\013tea"
  "ms_count\030\n \001(\r\022\017\n\007country\030\013 \001(\t\022\r\n\005state"
  "\030\014 \001(\t\"R\n\014EmailAddress\022\023\n\005email\030\001 \001(\tB\004\200"
  "\265\030\001\022\025\n\007primary\030\002 \001(\010B\004\200\265\030\001\022\026\n\010verified\030\003"
  " \001(\010B\004\200\265\030\001\"\035\n\010Password\022\021\n\tplaintext\030\001 \001("
  "\t\"\206\003\n\022PasswordViolations\022\026\n\016minimum_leng"
  "th\030\001 \001(\010\022\026\n\016maximum_length\030\002 \001(\010\022\031\n\021uppe"
  "r_case_needed\030\003 \001(\010\022\031\n\021lower_case_needed"
  "\030\004 \001(\010\022\026\n\016numeric_needed\030\005 \001(\010\022\037\n\027non_al"
  "phanumeric_needed\030\006 \001(\010\022\026\n\016password_reus"
  "e\030\007 \001(\010\022\025\n\rexclude_names\030\010 \001(\010\022\025\n\rexclud"
  "e_email\030\t \001(\010\022\034\n\024no_confusing_letters\030\n "
  "\001(\010\022\033\n\023no_simple_passwords\030\013 \001(\010\022\030\n\020no_c"
  "ommon_vocabs\030\014 \001(\010\022\033\n\023no_overlap_with_ol"
  "d\030\r \001(\010\022\031\n\021password_lifespan\030\016 \001(\010\"\256\001\n\005V"
  "ideo\022\013\n\003url\030\001 \001(\t\022\016\n\006base64\030\002 \001(\014\022\033\n\023all"
  "ow_duplicate_url\030\004 \001(\010\022\025\n\rthumbnail_url\030"
  "\005 \001(\t\022\'\n\006hosted\030\006 \001(\0132\027.clarifai.api.Hos"
  "tedURL\022+\n\nvideo_info\030\007 \001(\0132\027.clarifai.ap"
  "i.VideoInfo\"\216\001\n\tVideoInfo\022\r\n\005width\030\001 \001(\005"
  "\022\016\n\006height\030\002 \001(\005\022\013\n\003fps\030\003 \001(\002\022\024\n\014video_f"
  "ormat\030\004 \001(\t\022\020\n\010bit_rate\030\005 \001(\005\022\023\n\013frame_c"
  "ount\030\006 \001(\005\022\030\n\020duration_seconds\030\007 \001(\002\"\261\003\n"
  "\010Workflow\022\n\n\002id\030\001 \001(\t\022\016\n\006app_id\030\002 \001(\t\022.\n"
  "\ncreated_at\030\003 \001(\0132\032.google.protobuf.Time"
  "stamp\022)\n\005nodes\030\004 \003(\0132\032.clarifai.api.Work"
  "flowNode\022)\n\010metadata\030\005 \001(\0132\027.google.prot"
  "obuf.Struct\022,\n\nvisibility\030\006 \001(\0132\030.clarif"
  "ai.api.Visibility\022\017\n\007user_id\030\007 \001(\t\022/\n\013mo"
  "dified_at\030\010 \001(\0132\032.google.protobuf.Timest"
  "amp\022.\n\007version\030\t \001(\0132\035.clarifai.api.Work"
  "flowVersion\022\022\n\nis_starred\030\n \001(\010\022\022\n\nstar_"
  "count\030\013 \001(\005\022\023\n\013description\030\014 \001(\t\022\r\n\005note"
  "s\030\r \001(\t\022\027\n\tuse_cases\030\016 \003(\tB\004\200\265\030\001\"\336\002\n\017Wor"
  "kflowVersion\022\n\n\002id\030\001 \001(\t\022\023\n\013workflow_id\030"
  "\002 \001(\t\022.\n\ncreated_at\030\003 \001(\0132\032.google.proto"
  "buf.Timestamp\022/\n\013modified_at\030\004 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\022,\n\nvisibility\030\005 \001"
  "(\0132\030.clarifai.api.Visibility\022)\n\005nodes\030\006 "
  "\003(\0132\032.clarifai.api.WorkflowNode\022)\n\010metad"
  "ata\030\007 \001(\0132\027.google.protobuf.Struct\022\016\n\006ap"
  "p_id\030\010 \001(\t\022\017\n\007user_id\030\t \001(\t\022\023\n\013descripti"
  "on\030\n \001(\t\022\017\n\007license\030\013 \001(\t\"\205\001\n\014WorkflowNo"
  "de\022\n\n\002id\030\001 \001(\t\022\"\n\005model\030\002 \001(\0132\023.clarifai"
  ".api.Model\022,\n\013node_inputs\030\003 \003(\0132\027.clarif"
  "ai.api.NodeInput\022\027\n\017suppress_output\030\004 \001("
  "\010\"\034\n\tNodeInput\022\017\n\007node_id\030\001 \001(\t\"\201\002\n\016Work"
  "flowResult\022\n\n\002id\030\001 \001(\t\022+\n\006status\030\002 \001(\0132\033"
  ".clarifai.api.status.Status\022.\n\ncreated_a"
  "t\030\003 \001(\0132\032.google.protobuf.Timestamp\022\"\n\005m"
  "odel\030\004 \001(\0132\023.clarifai.api.Model\022\"\n\005input"
  "\030\005 \001(\0132\023.clarifai.api.Input\022%\n\007outputs\030\006"
  " \003(\0132\024.clarifai.api.Output\022\027\n\017suppress_o"
  "utput\030\007 \001(\010\"\033\n\rWorkflowState\022\n\n\002id\030\001 \001(\t"
  "\"\330\002\n\016AppDuplication\022\n\n\002id\030\001 \001(\t\022\022\n\nnew_a"
  "pp_id\030\002 \001(\t\022\024\n\014new_app_name\030\003 \001(\t\022+\n\006sta"
  "tus\030\004 \001(\0132\033.clarifai.api.status.Status\022."
  "\n\ncreated_at\030\005 \001(\0132\032.google.protobuf.Tim"
  "estamp\0224\n\020last_modified_at\030\006 \001(\0132\032.googl"
  "e.protobuf.Timestamp\0223\n\006filter\030\007 \001(\0132#.c"
  "larifai.api.AppDuplicationFilters\022\027\n\017exi"
  "sting_app_id\030\010 \001(\t\022/\n\010progress\030\t \003(\0132\035.c"
  "larifai.api.AppCopyProgress\"/\n\017AppCopyPr"
  "ogress\022\r\n\005field\030\001 \001(\t\022\r\n\005value\030\002 \001(\005\"\212\001\n"
  "\025AppDuplicationFilters\022\023\n\013copy_inputs\030\001 "
  "\001(\010\022\025\n\rcopy_concepts\030\002 \001(\010\022\030\n\020copy_annot"
  "ations\030\003 \001(\010\022\023\n\013copy_models\030\004 \001(\010\022\026\n\016cop"
  "y_workflows\030\005 \001(\010\"\372\002\n\nLabelOrder\022\n\n\002id\030\001"
  " \001(\t\022\014\n\004name\030\002 \001(\t\022+\n\006status\030\003 \001(\0132\033.cla"
  "rifai.api.status.Status\022\024\n\014auto_release\030"
  "\004 \001(\010\022\027\n\017allow_empty_tag\030\005 \001(\010\0228\n\024desire"
  "d_fulfill_time\030\006 \001(\0132\032.google.protobuf.T"
  "imestamp\0229\n\025estimate_fulfill_time\030\007 \001(\0132"
  "\032.google.protobuf.Timestamp\022 \n\004task\030\010 \001("
  "\0132\022.clarifai.api.Task\022.\n\ncreated_at\030\t \001("
  "\0132\032.google.protobuf.Timestamp\022/\n\013modifie"
  "d_at\030\n \001(\0132\032.google.protobuf.Timestamp\"\315"
  "\005\n\004Task\022\n\n\002id\030\001 \001(\t\022.\n\ncreated_at\030\002 \001(\0132"
  "\032.google.protobuf.Timestamp\022/\n\013modified_"
  "at\030\003 \001(\0132\032.google.protobuf.Timestamp\022)\n\004"
  "type\030\004 \001(\0162\033.clarifai.api.Task.TaskType\022"
  "\023\n\013description\030\005 \001(\t\022(\n\006worker\030\006 \001(\0132\030.c"
  "larifai.api.TaskWorker\022\023\n\013concept_ids\030\007 "
  "\003(\t\0223\n\014input_source\030\010 \001(\0132\035.clarifai.api"
  ".TaskInputSource\022\021\n\tsample_ms\030\t \001(\r\0223\n\014a"
  "i_assistant\030\n \001(\0132\035.clarifai.api.TaskAIA"
  "ssistant\022(\n\006review\030\013 \001(\0132\030.clarifai.api."
  "TaskReview\022+\n\006status\030\014 \001(\0132\033.clarifai.ap"
  "i.status.Status\022\014\n\004name\030\r \001(\t\022:\n\020ai_assi"
  "st_params\030\016 \001(\0132 .clarifai.api.AiAssistP"
  "arameters\022,\n\nvisibility\030\017 \001(\0132\030.clarifai"
  ".api.Visibility\022\016\n\006app_id\030\020 \001(\t\022\017\n\007user_"
  "id\030\021 \001(\t\"l\n\010TaskType\022\020\n\014TYPE_NOT_SET\020\000\022\033"
  "\n\027CONCEPTS_CLASSIFICATION\020\001\022\032\n\026BOUNDING_"
  "BOX_DETECTION\020\002\022\025\n\021POLYGON_DETECTION\020\003\"`"
  "\n\022AiAssistParameters\022\025\n\rmin_threshold\030\001 "
  "\001(\002\022\025\n\rmax_threshold\030\002 \001(\002\022\034\n\024concept_re"
  "lation_ids\030\003 \003(\t\"\277\002\n\nTaskWorker\022=\n\010strat"
  "egy\030\001 \001(\0162+.clarifai.api.TaskWorker.Task"
  "WorkerStrategy\022\024\n\010user_ids\030\002 \003(\tB\002\030\001\022!\n\005"
  "users\030\004 \003(\0132\022.clarifai.api.User\022T\n\031parti"
  "tioned_strategy_info\030\003 \001(\0132/.clarifai.ap"
  "i.TaskWorkerPartitionedStrategyInfoH\000\"R\n"
  "\022TaskWorkerStrategy\022\033\n\027WORKER_STRATEGY_N"
  "OT_SET\020\000\022\017\n\013PARTITIONED\020\002\022\010\n\004FULL\020\003\"\004\010\001\020"
  "\001B\017\n\rstrategy_info\"\251\002\n!TaskWorkerPartiti"
  "onedStrategyInfo\022[\n\004type\030\001 \001(\0162M.clarifa"
  "i.api.TaskWorkerPartitionedStrategyInfo."
  "TaskWorkerPartitionedStrategy\022\031\n\021workers"
  "_per_input\030\002 \001(\005\022(\n\007weights\030\003 \001(\0132\027.goog"
  "le.protobuf.Struct\"b\n\035TaskWorkerPartitio"
  "nedStrategy\022\'\n#PARTITIONED_WORKER_STRATE"
  "GY_NOT_SET\020\000\022\n\n\006EVENLY\020\001\022\014\n\010WEIGHTED\020\002\"\303"
  "\001\n\017TaskInputSource\022\?\n\004type\030\001 \001(\01621.clari"
  "fai.api.TaskInputSource.TaskInputSourceT"
  "ype\022\n\n\002id\030\002 \001(\t\"c\n\023TaskInputSourceType\022\035"
  "\n\031INPUT_SOURCE_TYPE_NOT_SET\020\000\022\016\n\nALL_INP"
  "UTS\020\001\022\020\n\014SAVED_SEARCH\020\002\022\013\n\007DATASET\020\003\"\220\003\n"
  "\nTaskReview\022=\n\010strategy\030\001 \001(\0162+.clarifai"
  ".api.TaskReview.TaskReviewStrategy\022\024\n\010us"
  "er_ids\030\002 \003(\tB\002\030\001\022!\n\005users\030\005 \003(\0132\022.clarif"
  "ai.api.User\022J\n\024manual_strategy_info\030\003 \001("
  "\0132*.clarifai.api.TaskReviewManualStrateg"
  "yInfoH\000\022P\n\027consensus_strategy_info\030\004 \001(\013"
  "2-.clarifai.api.TaskReviewConsensusStrat"
  "egyInfoH\000\"[\n\022TaskReviewStrategy\022 \n\034TASK_"
  "REVIEW_STRATEGY_NOT_SET\020\000\022\010\n\004NONE\020\001\022\n\n\006M"
  "ANUAL\020\002\022\r\n\tCONSENSUS\020\003B\017\n\rstrategy_info\""
  "9\n\034TaskReviewManualStrategyInfo\022\031\n\021sampl"
  "e_percentage\030\001 \001(\002\"C\n\037TaskReviewConsensu"
  "sStrategyInfo\022\032\n\022approval_threshold\030\002 \001("
  "\rJ\004\010\001\020\002\"&\n\017TaskAIAssistant\022\023\n\013workflow_i"
  "d\030\001 \001(\t\"\274\001\n\026TaskStatusCountPerUser\022\017\n\007us"
  "er_id\030\001 \001(\t\022\025\n\007pending\030\002 \001(\rB\004\200\265\030\001\022\035\n\017aw"
  "aiting_review\030\003 \001(\rB\004\200\265\030\001\022\025\n\007success\030\004 \001"
  "(\rB\004\200\265\030\001\022\033\n\rreview_denied\030\005 \001(\rB\004\200\265\030\001\022\'\n"
  "\031awaiting_consensus_review\030\006 \001(\rB\004\200\265\030\001\"\201"
  "\002\n\tCollector\022\n\n\002id\030\001 \001(\t\022\023\n\013description\030"
  "\002 \001(\t\022.\n\ncreated_at\030\003 \001(\0132\032.google.proto"
  "buf.Timestamp\022\035\n\025pre_queue_workflow_id\030\004"
  " \001(\t\022\036\n\026post_queue_workflow_id\030\005 \001(\t\0227\n\020"
  "collector_source\030\006 \001(\0132\035.clarifai.api.Co"
  "llectorSource\022+\n\006status\030\007 \001(\0132\033.clarifai"
  ".api.status.Status\"t\n\017CollectorSource\022a\n"
  "\'api_post_model_outputs_collector_source"
  "\030\002 \001(\01320.clarifai.api.APIPostModelOutput"
  "sCollectorSource\"\231\001\n\"APIPostModelOutputs"
  "CollectorSource\022\025\n\rmodel_user_id\030\001 \001(\t\022\024"
  "\n\014model_app_id\030\002 \001(\t\022\020\n\010model_id\030\003 \001(\t\022\030"
  "\n\020model_version_id\030\004 \001(\t\022\032\n\022post_inputs_"
  "key_id\030\005 \001(\t\"R\n\tStatValue\022(\n\004time\030\001 \001(\0132"
  "\032.google.protobuf.Timestamp\022\r\n\005value\030\002 \001"
  "(\002\022\014\n\004tags\030\003 \003(\t\"\246\001\n\030StatValueAggregateR"
  "esult\022\?\n\025stat_value_aggregates\030\001 \003(\0132 .c"
  "larifai.api.StatValueAggregate\022I\n\032stat_v"
  "alue_aggregate_query\030\002 \001(\0132%.clarifai.ap"
  "i.StatValueAggregateQuery\"t\n\022StatValueAg"
  "gregate\022(\n\004time\030\001 \001(\0132\032.google.protobuf."
  "Timestamp\022\027\n\017aggregate_value\030\002 \001(\002\022\r\n\005co"
  "unt\030\003 \001(\004\022\014\n\004tags\030\004 \003(\t\"\221\002\n\027StatValueAgg"
  "regateQuery\022\014\n\004tags\030\001 \003(\t\022\022\n\ntag_groups\030"
  "\002 \003(\t\022;\n\023stat_value_agg_type\030\003 \001(\0162\036.cla"
  "rifai.api.StatValueAggType\0229\n\022stat_time_"
  "agg_type\030\004 \001(\0162\035.clarifai.api.StatTimeAg"
  "gType\022.\n\nstart_time\030\005 \001(\0132\032.google.proto"
  "buf.Timestamp\022,\n\010end_time\030\006 \001(\0132\032.google"
  ".protobuf.Timestamp\"\357\001\n\031DatasetInputsSea"
  "rchAddJob\022\n\n\002id\030\001 \001(\t\022.\n\ncreated_at\030\002 \001("
  "\0132\032.google.protobuf.Timestamp\022/\n\013modifie"
  "d_at\030\003 \001(\0132\032.google.protobuf.Timestamp\022+"
  "\n\006status\030\004 \001(\0132\033.clarifai.api.status.Sta"
  "tus\022\022\n\ndataset_id\030\005 \001(\t\022$\n\006search\030\006 \001(\0132"
  "\024.clarifai.api.Search\"\207\001\n\nVisibility\0223\n\010"
  "gettable\030\001 \001(\0162!.clarifai.api.Visibility"
  ".Gettable\"D\n\010Gettable\022\026\n\022UNKNOWN_VISIBIL"
  "ITY\020\000\022\013\n\007PRIVATE\020\n\022\007\n\003ORG\020\036\022\n\n\006PUBLIC\0202\""
  "X\n\016TrendingMetric\022\017\n\007user_id\030\001 \001(\t\022\016\n\006ap"
  "p_id\030\002 \001(\t\022\021\n\tobject_id\030\003 \001(\t\022\022\n\nview_co"
  "unt\030\004 \001(\004\"f\n\013TimeSegment\022\n\n\002id\030\001 \001(\t\022 \n\004"
  "data\030\002 \001(\0132\022.clarifai.api.Data\022)\n\ttime_i"
  "nfo\030\003 \001(\0132\026.clarifai.api.TimeInfo\"D\n\010Tim"
  "eInfo\022\022\n\nnum_frames\030\001 \001(\r\022\022\n\nbegin_time\030"
  "\002 \001(\r\022\020\n\010end_time\030\003 \001(\r*\371\001\n\036DatasetVersi"
  "onMetricsGroupType\022.\n*DATASET_VERSION_ME"
  "TRICS_GROUP_TYPE_NOT_SET\020\000\022\016\n\nINPUT_TYPE"
  "\020\002\022\016\n\nCONCEPT_ID\020\n\022\022\n\016CONCEPTS_COUNT\020\013\022\030"
  "\n\024BOUNDING_BOXES_COUNT\020\024\022\022\n\016POLYGONS_COU"
  "NT\020\025\022\020\n\014POINTS_COUNT\020\026\022\017\n\013MASKS_COUNT\020\027\022"
  "\020\n\014PIXELS_COUNT\020\036\022\020\n\014ASPECT_RATIO\020\037*H\n\020E"
  "xpirationAction\022\035\n\031EXPIRATION_ACTION_NOT"
  "_SET\020\000\022\t\n\005DELAY\020\001\022\n\n\006EXPIRY\020\002*M\n\014License"
  "Scope\022\031\n\025LICENSE_SCOPE_NOT_SET\020\000\022\013\n\007PRED"
  "ICT\020\001\022\t\n\005TRAIN\020\002\022\n\n\006SEARCH\020\003*P\n\010DataType"
  "\022\r\n\tUNDEFINED\020\000\022\n\n\006STRING\020\001\022\t\n\005UINT8\020\002\022\t"
  "\n\005INT32\020\003\022\t\n\005INT64\020\004\022\010\n\004FP32\020\005*\217\001\n\017Value"
  "Comparator\022\035\n\031CONCEPT_THRESHOLD_NOT_SET\020"
  "\000\022\020\n\014GREATER_THAN\020\001\022\031\n\025GREATER_THAN_OR_E"
  "QUAL\020\002\022\r\n\tLESS_THAN\020\003\022\026\n\022LESS_THAN_OR_EQ"
  "UAL\020\004\022\t\n\005EQUAL\020\005*3\n\016EvaluationType\022\022\n\016Cl"
  "assification\020\000\022\r\n\tDetection\020\001*f\n\014APIEven"
  "tType\022\032\n\026API_EVENT_TYPE_NOT_SET\020\000\022\023\n\017ON_"
  "PREM_PREDICT\020\001\022\021\n\rON_PREM_TRAIN\020\002\022\022\n\016ON_"
  "PREM_SEARCH\020\003*<\n\021UsageIntervalType\022\t\n\005un"
  "def\020\000\022\007\n\003day\020\001\022\t\n\005month\020\002\022\010\n\004year\020\003*\035\n\010R"
  "oleType\022\010\n\004TEAM\020\000\022\007\n\003ORG\020\001*$\n\020StatValueA"
  "ggType\022\007\n\003SUM\020\000\022\007\n\003AVG\020\001*`\n\017StatTimeAggT"
  "ype\022\017\n\013NO_TIME_AGG\020\000\022\010\n\004YEAR\020\001\022\t\n\005MONTH\020"
  "\002\022\010\n\004WEEK\020\003\022\007\n\003DAY\020\004\022\010\n\004HOUR\020\005\022\n\n\006MINUTE"
  "\020\006*b\n\023ValidationErrorType\022!\n\035VALIDATION_"
  "ERROR_TYPE_NOT_SET\020\000\022\016\n\nRESTRICTED\020\001\022\014\n\010"
  "DATABASE\020\002\022\n\n\006FORMAT\020\003BY\n\025com.clarifai.g"
  "rpc.apiP\001Z7github.com/Clarifai/clarifai-"
  "go-grpc/proto/clarifai/api\242\002\004CAIPb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_deps[7] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2futils_2fextensions_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2futils_2fmatrix_2eproto,
  &::descriptor_table_proto_2fclarifai_2fauth_2futil_2fextension_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto = {
  false, false, 28681, descriptor_table_protodef_proto_2fclarifai_2fapi_2fresources_2eproto, "proto/clarifai/api/resources.proto", 
  &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once, descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_deps, 7, 141,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto, file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto, file_level_service_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter() {
  return &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fclarifai_2fapi_2fresources_2eproto(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
namespace clarifai {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelTypeField_ModelTypeFieldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[0];
}
bool ModelTypeField_ModelTypeFieldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::INVALID_MODEL_TYPE_FIELD_TYPE;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::BOOLEAN;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::STRING;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::NUMBER;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ARRAY_OF_CONCEPTS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ARRAY_OF_CONCEPTS_WITH_THRESHOLD;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::RANGE;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ENUM;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::COLLABORATORS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::JSON;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ARRAY_OF_NUMBERS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::WORKFLOW_EMBED_MODELS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ARRAY_OF_STRINGS;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::RECURSIVE_ENUM;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::PYTHON_CODE;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::DATASET_ID;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ModelTypeFieldType_MIN;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField::ModelTypeFieldType_MAX;
constexpr int ModelTypeField::ModelTypeFieldType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Task_TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[1];
}
bool Task_TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Task_TaskType Task::TYPE_NOT_SET;
constexpr Task_TaskType Task::CONCEPTS_CLASSIFICATION;
constexpr Task_TaskType Task::BOUNDING_BOX_DETECTION;
constexpr Task_TaskType Task::POLYGON_DETECTION;
constexpr Task_TaskType Task::TaskType_MIN;
constexpr Task_TaskType Task::TaskType_MAX;
constexpr int Task::TaskType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskWorker_TaskWorkerStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[2];
}
bool TaskWorker_TaskWorkerStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TaskWorker_TaskWorkerStrategy TaskWorker::WORKER_STRATEGY_NOT_SET;
constexpr TaskWorker_TaskWorkerStrategy TaskWorker::PARTITIONED;
constexpr TaskWorker_TaskWorkerStrategy TaskWorker::FULL;
constexpr TaskWorker_TaskWorkerStrategy TaskWorker::TaskWorkerStrategy_MIN;
constexpr TaskWorker_TaskWorkerStrategy TaskWorker::TaskWorkerStrategy_MAX;
constexpr int TaskWorker::TaskWorkerStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[3];
}
bool TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::PARTITIONED_WORKER_STRATEGY_NOT_SET;
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::EVENLY;
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::WEIGHTED;
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategy_MIN;
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategy_MAX;
constexpr int TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskInputSource_TaskInputSourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[4];
}
bool TaskInputSource_TaskInputSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::INPUT_SOURCE_TYPE_NOT_SET;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::ALL_INPUTS;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::SAVED_SEARCH;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::DATASET;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::TaskInputSourceType_MIN;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource::TaskInputSourceType_MAX;
constexpr int TaskInputSource::TaskInputSourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskReview_TaskReviewStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[5];
}
bool TaskReview_TaskReviewStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TaskReview_TaskReviewStrategy TaskReview::TASK_REVIEW_STRATEGY_NOT_SET;
constexpr TaskReview_TaskReviewStrategy TaskReview::NONE;
constexpr TaskReview_TaskReviewStrategy TaskReview::MANUAL;
constexpr TaskReview_TaskReviewStrategy TaskReview::CONSENSUS;
constexpr TaskReview_TaskReviewStrategy TaskReview::TaskReviewStrategy_MIN;
constexpr TaskReview_TaskReviewStrategy TaskReview::TaskReviewStrategy_MAX;
constexpr int TaskReview::TaskReviewStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Visibility_Gettable_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[6];
}
bool Visibility_Gettable_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 30:
    case 50:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Visibility_Gettable Visibility::UNKNOWN_VISIBILITY;
constexpr Visibility_Gettable Visibility::PRIVATE;
constexpr Visibility_Gettable Visibility::ORG;
constexpr Visibility_Gettable Visibility::PUBLIC;
constexpr Visibility_Gettable Visibility::Gettable_MIN;
constexpr Visibility_Gettable Visibility::Gettable_MAX;
constexpr int Visibility::Gettable_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatasetVersionMetricsGroupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[7];
}
bool DatasetVersionMetricsGroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 10:
    case 11:
    case 20:
    case 21:
    case 22:
    case 23:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExpirationAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[8];
}
bool ExpirationAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LicenseScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[9];
}
bool LicenseScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[10];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValueComparator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[11];
}
bool ValueComparator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EvaluationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[12];
}
bool EvaluationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APIEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[13];
}
bool APIEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UsageIntervalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[14];
}
bool UsageIntervalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[15];
}
bool RoleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatValueAggType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[16];
}
bool StatValueAggType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatTimeAggType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[17];
}
bool StatTimeAggType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidationErrorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fresources_2eproto[18];
}
bool ValidationErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Annotation::_Internal {
 public:
  static const ::clarifai::api::Data& data(const Annotation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& annotation_info(const Annotation* msg);
  static const ::clarifai::api::status::Status& status(const Annotation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Annotation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Annotation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& consensus_info(const Annotation* msg);
};

const ::clarifai::api::Data&
Annotation::_Internal::data(const Annotation* msg) {
  return *msg->data_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Annotation::_Internal::annotation_info(const Annotation* msg) {
  return *msg->annotation_info_;
}
const ::clarifai::api::status::Status&
Annotation::_Internal::status(const Annotation* msg) {
  return *msg->status_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Annotation::_Internal::created_at(const Annotation* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Annotation::_Internal::modified_at(const Annotation* msg) {
  return *msg->modified_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Annotation::_Internal::consensus_info(const Annotation* msg) {
  return *msg->consensus_info_;
}
void Annotation::clear_annotation_info() {
  if (GetArenaForAllocation() == nullptr && annotation_info_ != nullptr) {
    delete annotation_info_;
  }
  annotation_info_ = nullptr;
}
void Annotation::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void Annotation::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Annotation::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void Annotation::clear_consensus_info() {
  if (GetArenaForAllocation() == nullptr && consensus_info_ != nullptr) {
    delete consensus_info_;
  }
  consensus_info_ = nullptr;
}
Annotation::Annotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Annotation)
}
Annotation::Annotation(const Annotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_id().empty()) {
    input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_id(), 
      GetArenaForAllocation());
  }
  embed_model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    embed_model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_embed_model_version_id().empty()) {
    embed_model_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_embed_model_version_id(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_version_id(), 
      GetArenaForAllocation());
  }
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_annotation_info()) {
    annotation_info_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.annotation_info_);
  } else {
    annotation_info_ = nullptr;
  }
  if (from._internal_has_consensus_info()) {
    consensus_info_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.consensus_info_);
  } else {
    consensus_info_ = nullptr;
  }
  ::memcpy(&trusted_, &from.trusted_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_level_) -
    reinterpret_cast<char*>(&trusted_)) + sizeof(input_level_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Annotation)
}

inline void Annotation::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
embed_model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  embed_model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_level_) -
    reinterpret_cast<char*>(&data_)) + sizeof(input_level_));
}

Annotation::~Annotation() {
  // @@protoc_insertion_point(destructor:clarifai.api.Annotation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Annotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embed_model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete annotation_info_;
  if (this != internal_default_instance()) delete consensus_info_;
}

void Annotation::ArenaDtor(void* object) {
  Annotation* _this = reinterpret_cast< Annotation* >(object);
  (void)_this;
}
void Annotation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Annotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Annotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  input_id_.ClearToEmpty();
  embed_model_version_id_.ClearToEmpty();
  user_id_.ClearToEmpty();
  model_version_id_.ClearToEmpty();
  task_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && annotation_info_ != nullptr) {
    delete annotation_info_;
  }
  annotation_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && consensus_info_ != nullptr) {
    delete consensus_info_;
  }
  consensus_info_ = nullptr;
  ::memset(&trusted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_level_) -
      reinterpret_cast<char*>(&trusted_)) + sizeof(input_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Annotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Annotation.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string input_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_input_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Annotation.input_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool trusted = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          trusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct annotation_info = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string embed_model_version_id = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_embed_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Annotation.embed_model_version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Annotation.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Annotation.model_version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool input_level = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          input_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct consensus_info = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Annotation.task_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Annotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Annotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.input_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_id(), target);
  }

  // .clarifai.api.Data data = 3;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  // .clarifai.api.status.Status status = 7;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::status(this), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 9;
  if (this->_internal_has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::modified_at(this), target, stream);
  }

  // bool trusted = 10 [deprecated = true];
  if (this->_internal_trusted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_trusted(), target);
  }

  // .google.protobuf.Struct annotation_info = 13;
  if (this->_internal_has_annotation_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::annotation_info(this), target, stream);
  }

  // string embed_model_version_id = 14 [deprecated = true];
  if (!this->_internal_embed_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_embed_model_version_id().data(), static_cast<int>(this->_internal_embed_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.embed_model_version_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_embed_model_version_id(), target);
  }

  // string user_id = 15;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.user_id");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_user_id(), target);
  }

  // string model_version_id = 16;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.model_version_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_model_version_id(), target);
  }

  // bool input_level = 17;
  if (this->_internal_input_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_input_level(), target);
  }

  // .google.protobuf.Struct consensus_info = 18;
  if (this->_internal_has_consensus_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::consensus_info(this), target, stream);
  }

  // string task_id = 19;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Annotation.task_id");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Annotation)
  return target;
}

size_t Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Annotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // string embed_model_version_id = 14 [deprecated = true];
  if (!this->_internal_embed_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_embed_model_version_id());
  }

  // string user_id = 15;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string model_version_id = 16;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // string task_id = 19;
  if (!this->_internal_task_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.Data data = 3;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .clarifai.api.status.Status status = 7;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 9;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .google.protobuf.Struct annotation_info = 13;
  if (this->_internal_has_annotation_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_info_);
  }

  // .google.protobuf.Struct consensus_info = 18;
  if (this->_internal_has_consensus_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consensus_info_);
  }

  // bool trusted = 10 [deprecated = true];
  if (this->_internal_trusted() != 0) {
    total_size += 1 + 1;
  }

  // bool input_level = 17;
  if (this->_internal_input_level() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Annotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Annotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Annotation::GetClassData() const { return &_class_data_; }

void Annotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Annotation *>(to)->MergeFrom(
      static_cast<const Annotation &>(from));
}


void Annotation::MergeFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_input_id().empty()) {
    _internal_set_input_id(from._internal_input_id());
  }
  if (!from._internal_embed_model_version_id().empty()) {
    _internal_set_embed_model_version_id(from._internal_embed_model_version_id());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_model_version_id().empty()) {
    _internal_set_model_version_id(from._internal_model_version_id());
  }
  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from._internal_has_annotation_info()) {
    _internal_mutable_annotation_info()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_annotation_info());
  }
  if (from._internal_has_consensus_info()) {
    _internal_mutable_consensus_info()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_consensus_info());
  }
  if (from._internal_trusted() != 0) {
    _internal_set_trusted(from._internal_trusted());
  }
  if (from._internal_input_level() != 0) {
    _internal_set_input_level(from._internal_input_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Annotation::CopyFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotation::IsInitialized() const {
  return true;
}

void Annotation::InternalSwap(Annotation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &input_id_, lhs_arena,
      &other->input_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &embed_model_version_id_, lhs_arena,
      &other->embed_model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_version_id_, lhs_arena,
      &other->model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, lhs_arena,
      &other->task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Annotation, input_level_)
      + sizeof(Annotation::input_level_)
      - PROTOBUF_FIELD_OFFSET(Annotation, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Annotation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[0]);
}

// ===================================================================

class App::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const App* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const App* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const App* msg);
  static const ::clarifai::api::Visibility& visibility(const App* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
App::_Internal::created_at(const App* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
App::_Internal::modified_at(const App* msg) {
  return *msg->modified_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
App::_Internal::metadata(const App* msg) {
  return *msg->metadata_;
}
const ::clarifai::api::Visibility&
App::_Internal::visibility(const App* msg) {
  return *msg->visibility_;
}
void App::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void App::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void App::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
App::App(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.App)
}
App::App(const App& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  default_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    default_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_default_language().empty()) {
    default_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_default_language(), 
      GetArenaForAllocation());
  }
  default_workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    default_workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_default_workflow_id().empty()) {
    default_workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_default_workflow_id(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  data_tier_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_tier_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_tier_id().empty()) {
    data_tier_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_tier_id(), 
      GetArenaForAllocation());
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notes().empty()) {
    notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notes(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  ::memcpy(&legal_consent_status_, &from.legal_consent_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&star_count_) -
    reinterpret_cast<char*>(&legal_consent_status_)) + sizeof(star_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.App)
}

inline void App::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
default_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  default_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
default_workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  default_workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_tier_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_tier_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&star_count_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(star_count_));
}

App::~App() {
  // @@protoc_insertion_point(destructor:clarifai.api.App)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void App::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_tier_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete visibility_;
  if (this != internal_default_instance()) delete modified_at_;
}

void App::ArenaDtor(void* object) {
  App* _this = reinterpret_cast< App* >(object);
  (void)_this;
}
void App::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void App::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.App)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  default_language_.ClearToEmpty();
  default_workflow_id_.ClearToEmpty();
  user_id_.ClearToEmpty();
  description_.ClearToEmpty();
  data_tier_id_.ClearToEmpty();
  notes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  ::memset(&legal_consent_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_count_) -
      reinterpret_cast<char*>(&legal_consent_status_)) + sizeof(star_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* App::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string default_language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_default_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.default_language"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string default_workflow_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_default_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.default_workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 legal_consent_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          legal_consent_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sample_ms = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          sample_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data_tier_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_data_tier_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.data_tier_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_starred = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 star_count = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          star_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string notes = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.App.notes"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* App::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.App)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string default_language = 3;
  if (!this->_internal_default_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_language().data(), static_cast<int>(this->_internal_default_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.default_language");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_default_language(), target);
  }

  // string default_workflow_id = 4;
  if (!this->_internal_default_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_workflow_id().data(), static_cast<int>(this->_internal_default_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.default_workflow_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_default_workflow_id(), target);
  }

  // string user_id = 5;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::created_at(this), target, stream);
  }

  // uint32 legal_consent_status = 7;
  if (this->_internal_legal_consent_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_legal_consent_status(), target);
  }

  // .google.protobuf.Struct metadata = 13;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::metadata(this), target, stream);
  }

  // string description = 14;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.description");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_description(), target);
  }

  // uint32 sample_ms = 15;
  if (this->_internal_sample_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_sample_ms(), target);
  }

  // .clarifai.api.Visibility visibility = 16;
  if (this->_internal_has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::visibility(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 17;
  if (this->_internal_has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::modified_at(this), target, stream);
  }

  // string data_tier_id = 18;
  if (!this->_internal_data_tier_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_tier_id().data(), static_cast<int>(this->_internal_data_tier_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.data_tier_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_data_tier_id(), target);
  }

  // bool is_starred = 19;
  if (this->_internal_is_starred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_is_starred(), target);
  }

  // int32 star_count = 20;
  if (this->_internal_star_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_star_count(), target);
  }

  // string notes = 21;
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.App.notes");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_notes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.App)
  return target;
}

size_t App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.App)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string default_language = 3;
  if (!this->_internal_default_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_language());
  }

  // string default_workflow_id = 4;
  if (!this->_internal_default_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_workflow_id());
  }

  // string user_id = 5;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string description = 14;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string data_tier_id = 18;
  if (!this->_internal_data_tier_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_tier_id());
  }

  // string notes = 21;
  if (!this->_internal_notes().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Struct metadata = 13;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .clarifai.api.Visibility visibility = 16;
  if (this->_internal_has_visibility()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .google.protobuf.Timestamp modified_at = 17;
  if (this->_internal_has_modified_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // uint32 legal_consent_status = 7;
  if (this->_internal_legal_consent_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_legal_consent_status());
  }

  // uint32 sample_ms = 15;
  if (this->_internal_sample_ms() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_ms());
  }

  // bool is_starred = 19;
  if (this->_internal_is_starred() != 0) {
    total_size += 2 + 1;
  }

  // int32 star_count = 20;
  if (this->_internal_star_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_star_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData App::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    App::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*App::GetClassData() const { return &_class_data_; }

void App::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<App *>(to)->MergeFrom(
      static_cast<const App &>(from));
}


void App::MergeFrom(const App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.App)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_default_language().empty()) {
    _internal_set_default_language(from._internal_default_language());
  }
  if (!from._internal_default_workflow_id().empty()) {
    _internal_set_default_workflow_id(from._internal_default_workflow_id());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_data_tier_id().empty()) {
    _internal_set_data_tier_id(from._internal_data_tier_id());
  }
  if (!from._internal_notes().empty()) {
    _internal_set_notes(from._internal_notes());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from._internal_has_modified_at()) {
    _internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from._internal_legal_consent_status() != 0) {
    _internal_set_legal_consent_status(from._internal_legal_consent_status());
  }
  if (from._internal_sample_ms() != 0) {
    _internal_set_sample_ms(from._internal_sample_ms());
  }
  if (from._internal_is_starred() != 0) {
    _internal_set_is_starred(from._internal_is_starred());
  }
  if (from._internal_star_count() != 0) {
    _internal_set_star_count(from._internal_star_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void App::CopyFrom(const App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool App::IsInitialized() const {
  return true;
}

void App::InternalSwap(App* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &default_language_, lhs_arena,
      &other->default_language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &default_workflow_id_, lhs_arena,
      &other->default_workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_tier_id_, lhs_arena,
      &other->data_tier_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notes_, lhs_arena,
      &other->notes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(App, star_count_)
      + sizeof(App::star_count_)
      - PROTOBUF_FIELD_OFFSET(App, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata App::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[1]);
}

// ===================================================================

class AppQuery::_Internal {
 public:
};

AppQuery::AppQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AppQuery)
}
AppQuery::AppQuery(const AppQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AppQuery)
}

inline void AppQuery::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppQuery::~AppQuery() {
  // @@protoc_insertion_point(destructor:clarifai.api.AppQuery)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppQuery::ArenaDtor(void* object) {
  AppQuery* _this = reinterpret_cast< AppQuery* >(object);
  (void)_this;
}
void AppQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AppQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AppQuery.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AppQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppQuery.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AppQuery)
  return target;
}

size_t AppQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AppQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppQuery::GetClassData() const { return &_class_data_; }

void AppQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppQuery *>(to)->MergeFrom(
      static_cast<const AppQuery &>(from));
}


void AppQuery::MergeFrom(const AppQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AppQuery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppQuery::CopyFrom(const AppQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AppQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppQuery::IsInitialized() const {
  return true;
}

void AppQuery::InternalSwap(AppQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AppQuery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[2]);
}

// ===================================================================

class Collaborator::_Internal {
 public:
  static const ::clarifai::api::App& app(const Collaborator* msg);
  static const ::clarifai::api::User& user(const Collaborator* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Collaborator* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Collaborator* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const Collaborator* msg);
};

const ::clarifai::api::App&
Collaborator::_Internal::app(const Collaborator* msg) {
  return *msg->app_;
}
const ::clarifai::api::User&
Collaborator::_Internal::user(const Collaborator* msg) {
  return *msg->user_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Collaborator::_Internal::created_at(const Collaborator* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Collaborator::_Internal::modified_at(const Collaborator* msg) {
  return *msg->modified_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Collaborator::_Internal::deleted_at(const Collaborator* msg) {
  return *msg->deleted_at_;
}
void Collaborator::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Collaborator::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void Collaborator::clear_deleted_at() {
  if (GetArenaForAllocation() == nullptr && deleted_at_ != nullptr) {
    delete deleted_at_;
  }
  deleted_at_ = nullptr;
}
Collaborator::Collaborator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  scopes_(arena),
  endpoints_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Collaborator)
}
Collaborator::Collaborator(const Collaborator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scopes_(from.scopes_),
      endpoints_(from.endpoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_app()) {
    app_ = new ::clarifai::api::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  if (from._internal_has_user()) {
    user_ = new ::clarifai::api::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_deleted_at()) {
    deleted_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.deleted_at_);
  } else {
    deleted_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Collaborator)
}

inline void Collaborator::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deleted_at_) -
    reinterpret_cast<char*>(&app_)) + sizeof(deleted_at_));
}

Collaborator::~Collaborator() {
  // @@protoc_insertion_point(destructor:clarifai.api.Collaborator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Collaborator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete app_;
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete deleted_at_;
}

void Collaborator::ArenaDtor(void* object) {
  Collaborator* _this = reinterpret_cast< Collaborator* >(object);
  (void)_this;
}
void Collaborator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Collaborator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Collaborator::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Collaborator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  endpoints_.Clear();
  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && deleted_at_ != nullptr) {
    delete deleted_at_;
  }
  deleted_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Collaborator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collaborator.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.App app = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.User user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string scopes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collaborator.scopes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string endpoints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collaborator.endpoints"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp deleted_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Collaborator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Collaborator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collaborator.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.App app = 2;
  if (this->_internal_has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app(this), target, stream);
  }

  // .clarifai.api.User user = 3;
  if (this->_internal_has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user(this), target, stream);
  }

  // repeated string scopes = 4;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collaborator.scopes");
    target = stream->WriteString(4, s, target);
  }

  // repeated string endpoints = 5;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collaborator.endpoints");
    target = stream->WriteString(5, s, target);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 7;
  if (this->_internal_has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::modified_at(this), target, stream);
  }

  // .google.protobuf.Timestamp deleted_at = 8;
  if (this->_internal_has_deleted_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::deleted_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Collaborator)
  return target;
}

size_t Collaborator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Collaborator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(scopes_.size());
  for (int i = 0, n = scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      scopes_.Get(i));
  }

  // repeated string endpoints = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(endpoints_.size());
  for (int i = 0, n = endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      endpoints_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.App app = 2;
  if (this->_internal_has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  // .clarifai.api.User user = 3;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 7;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .google.protobuf.Timestamp deleted_at = 8;
  if (this->_internal_has_deleted_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deleted_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Collaborator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Collaborator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Collaborator::GetClassData() const { return &_class_data_; }

void Collaborator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Collaborator *>(to)->MergeFrom(
      static_cast<const Collaborator &>(from));
}


void Collaborator::MergeFrom(const Collaborator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Collaborator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  endpoints_.MergeFrom(from.endpoints_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_app()) {
    _internal_mutable_app()->::clarifai::api::App::MergeFrom(from._internal_app());
  }
  if (from._internal_has_user()) {
    _internal_mutable_user()->::clarifai::api::User::MergeFrom(from._internal_user());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from._internal_has_deleted_at()) {
    _internal_mutable_deleted_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_deleted_at());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Collaborator::CopyFrom(const Collaborator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Collaborator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collaborator::IsInitialized() const {
  return true;
}

void Collaborator::InternalSwap(Collaborator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  scopes_.InternalSwap(&other->scopes_);
  endpoints_.InternalSwap(&other->endpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Collaborator, deleted_at_)
      + sizeof(Collaborator::deleted_at_)
      - PROTOBUF_FIELD_OFFSET(Collaborator, app_)>(
          reinterpret_cast<char*>(&app_),
          reinterpret_cast<char*>(&other->app_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Collaborator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[3]);
}

// ===================================================================

class Collaboration::_Internal {
 public:
  static const ::clarifai::api::App& app(const Collaboration* msg);
  static const ::clarifai::api::User& app_owner(const Collaboration* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Collaboration* msg);
};

const ::clarifai::api::App&
Collaboration::_Internal::app(const Collaboration* msg) {
  return *msg->app_;
}
const ::clarifai::api::User&
Collaboration::_Internal::app_owner(const Collaboration* msg) {
  return *msg->app_owner_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Collaboration::_Internal::created_at(const Collaboration* msg) {
  return *msg->created_at_;
}
void Collaboration::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
Collaboration::Collaboration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  scopes_(arena),
  endpoints_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Collaboration)
}
Collaboration::Collaboration(const Collaboration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scopes_(from.scopes_),
      endpoints_(from.endpoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_app()) {
    app_ = new ::clarifai::api::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  if (from._internal_has_app_owner()) {
    app_owner_ = new ::clarifai::api::User(*from.app_owner_);
  } else {
    app_owner_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Collaboration)
}

inline void Collaboration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&created_at_) -
    reinterpret_cast<char*>(&app_)) + sizeof(created_at_));
}

Collaboration::~Collaboration() {
  // @@protoc_insertion_point(destructor:clarifai.api.Collaboration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Collaboration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete app_;
  if (this != internal_default_instance()) delete app_owner_;
  if (this != internal_default_instance()) delete created_at_;
}

void Collaboration::ArenaDtor(void* object) {
  Collaboration* _this = reinterpret_cast< Collaboration* >(object);
  (void)_this;
}
void Collaboration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Collaboration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Collaboration::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Collaboration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  endpoints_.Clear();
  if (GetArenaForAllocation() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  if (GetArenaForAllocation() == nullptr && app_owner_ != nullptr) {
    delete app_owner_;
  }
  app_owner_ = nullptr;
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Collaboration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.App app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.User app_owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string scopes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collaboration.scopes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string endpoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collaboration.endpoints"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Collaboration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Collaboration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.App app = 1;
  if (this->_internal_has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::app(this), target, stream);
  }

  // .clarifai.api.User app_owner = 2;
  if (this->_internal_has_app_owner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app_owner(this), target, stream);
  }

  // repeated string scopes = 3;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collaboration.scopes");
    target = stream->WriteString(3, s, target);
  }

  // repeated string endpoints = 4;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collaboration.endpoints");
    target = stream->WriteString(4, s, target);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::created_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Collaboration)
  return target;
}

size_t Collaboration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Collaboration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(scopes_.size());
  for (int i = 0, n = scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      scopes_.Get(i));
  }

  // repeated string endpoints = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(endpoints_.size());
  for (int i = 0, n = endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      endpoints_.Get(i));
  }

  // .clarifai.api.App app = 1;
  if (this->_internal_has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  // .clarifai.api.User app_owner = 2;
  if (this->_internal_has_app_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_owner_);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Collaboration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Collaboration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Collaboration::GetClassData() const { return &_class_data_; }

void Collaboration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Collaboration *>(to)->MergeFrom(
      static_cast<const Collaboration &>(from));
}


void Collaboration::MergeFrom(const Collaboration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Collaboration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  endpoints_.MergeFrom(from.endpoints_);
  if (from._internal_has_app()) {
    _internal_mutable_app()->::clarifai::api::App::MergeFrom(from._internal_app());
  }
  if (from._internal_has_app_owner()) {
    _internal_mutable_app_owner()->::clarifai::api::User::MergeFrom(from._internal_app_owner());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Collaboration::CopyFrom(const Collaboration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Collaboration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collaboration::IsInitialized() const {
  return true;
}

void Collaboration::InternalSwap(Collaboration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  scopes_.InternalSwap(&other->scopes_);
  endpoints_.InternalSwap(&other->endpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Collaboration, created_at_)
      + sizeof(Collaboration::created_at_)
      - PROTOBUF_FIELD_OFFSET(Collaboration, app_)>(
          reinterpret_cast<char*>(&app_),
          reinterpret_cast<char*>(&other->app_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Collaboration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[4]);
}

// ===================================================================

class Audio::_Internal {
 public:
  static const ::clarifai::api::HostedURL& hosted(const Audio* msg);
  static const ::clarifai::api::AudioInfo& audio_info(const Audio* msg);
};

const ::clarifai::api::HostedURL&
Audio::_Internal::hosted(const Audio* msg) {
  return *msg->hosted_;
}
const ::clarifai::api::AudioInfo&
Audio::_Internal::audio_info(const Audio* msg) {
  return *msg->audio_info_;
}
Audio::Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Audio)
}
Audio::Audio(const Audio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  base64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base64().empty()) {
    base64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_base64(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_hosted()) {
    hosted_ = new ::clarifai::api::HostedURL(*from.hosted_);
  } else {
    hosted_ = nullptr;
  }
  if (from._internal_has_audio_info()) {
    audio_info_ = new ::clarifai::api::AudioInfo(*from.audio_info_);
  } else {
    audio_info_ = nullptr;
  }
  allow_duplicate_url_ = from.allow_duplicate_url_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Audio)
}

inline void Audio::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
base64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hosted_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_duplicate_url_) -
    reinterpret_cast<char*>(&hosted_)) + sizeof(allow_duplicate_url_));
}

Audio::~Audio() {
  // @@protoc_insertion_point(destructor:clarifai.api.Audio)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Audio::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base64_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hosted_;
  if (this != internal_default_instance()) delete audio_info_;
}

void Audio::ArenaDtor(void* object) {
  Audio* _this = reinterpret_cast< Audio* >(object);
  (void)_this;
}
void Audio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Audio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Audio::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Audio)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  base64_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && hosted_ != nullptr) {
    delete hosted_;
  }
  hosted_ = nullptr;
  if (GetArenaForAllocation() == nullptr && audio_info_ != nullptr) {
    delete audio_info_;
  }
  audio_info_ = nullptr;
  allow_duplicate_url_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Audio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Audio.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes base64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_base64();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_duplicate_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          allow_duplicate_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.HostedURL hosted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hosted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AudioInfo audio_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Audio::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Audio)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Audio.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // bytes base64 = 2;
  if (!this->_internal_base64().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_base64(), target);
  }

  // bool allow_duplicate_url = 4;
  if (this->_internal_allow_duplicate_url() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_duplicate_url(), target);
  }

  // .clarifai.api.HostedURL hosted = 5;
  if (this->_internal_has_hosted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hosted(this), target, stream);
  }

  // .clarifai.api.AudioInfo audio_info = 6;
  if (this->_internal_has_audio_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::audio_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Audio)
  return target;
}

size_t Audio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Audio)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // bytes base64 = 2;
  if (!this->_internal_base64().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_base64());
  }

  // .clarifai.api.HostedURL hosted = 5;
  if (this->_internal_has_hosted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hosted_);
  }

  // .clarifai.api.AudioInfo audio_info = 6;
  if (this->_internal_has_audio_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_info_);
  }

  // bool allow_duplicate_url = 4;
  if (this->_internal_allow_duplicate_url() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Audio::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Audio::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Audio::GetClassData() const { return &_class_data_; }

void Audio::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Audio *>(to)->MergeFrom(
      static_cast<const Audio &>(from));
}


void Audio::MergeFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_base64().empty()) {
    _internal_set_base64(from._internal_base64());
  }
  if (from._internal_has_hosted()) {
    _internal_mutable_hosted()->::clarifai::api::HostedURL::MergeFrom(from._internal_hosted());
  }
  if (from._internal_has_audio_info()) {
    _internal_mutable_audio_info()->::clarifai::api::AudioInfo::MergeFrom(from._internal_audio_info());
  }
  if (from._internal_allow_duplicate_url() != 0) {
    _internal_set_allow_duplicate_url(from._internal_allow_duplicate_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Audio::CopyFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Audio::IsInitialized() const {
  return true;
}

void Audio::InternalSwap(Audio* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &base64_, lhs_arena,
      &other->base64_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Audio, allow_duplicate_url_)
      + sizeof(Audio::allow_duplicate_url_)
      - PROTOBUF_FIELD_OFFSET(Audio, hosted_)>(
          reinterpret_cast<char*>(&hosted_),
          reinterpret_cast<char*>(&other->hosted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Audio::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[5]);
}

// ===================================================================

class AudioInfo::_Internal {
 public:
};

AudioInfo::AudioInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AudioInfo)
}
AudioInfo::AudioInfo(const AudioInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  audio_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    audio_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audio_format().empty()) {
    audio_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_audio_format(), 
      GetArenaForAllocation());
  }
  ::memcpy(&sample_rate_, &from.sample_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&bit_rate_) -
    reinterpret_cast<char*>(&sample_rate_)) + sizeof(bit_rate_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AudioInfo)
}

inline void AudioInfo::SharedCtor() {
audio_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  audio_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sample_rate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bit_rate_) -
    reinterpret_cast<char*>(&sample_rate_)) + sizeof(bit_rate_));
}

AudioInfo::~AudioInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.AudioInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AudioInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  audio_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioInfo::ArenaDtor(void* object) {
  AudioInfo* _this = reinterpret_cast< AudioInfo* >(object);
  (void)_this;
}
void AudioInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AudioInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_format_.ClearToEmpty();
  ::memset(&sample_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bit_rate_) -
      reinterpret_cast<char*>(&sample_rate_)) + sizeof(bit_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string audio_format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_audio_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AudioInfo.audio_format"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sample_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float duration_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 bit_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          bit_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AudioInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string audio_format = 1;
  if (!this->_internal_audio_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_format().data(), static_cast<int>(this->_internal_audio_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AudioInfo.audio_format");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_audio_format(), target);
  }

  // int32 sample_rate = 2;
  if (this->_internal_sample_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sample_rate(), target);
  }

  // float duration_seconds = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = this->_internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_duration_seconds(), target);
  }

  // int32 bit_rate = 4;
  if (this->_internal_bit_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bit_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AudioInfo)
  return target;
}

size_t AudioInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AudioInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string audio_format = 1;
  if (!this->_internal_audio_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_format());
  }

  // int32 sample_rate = 2;
  if (this->_internal_sample_rate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sample_rate());
  }

  // float duration_seconds = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = this->_internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    total_size += 1 + 4;
  }

  // int32 bit_rate = 4;
  if (this->_internal_bit_rate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bit_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioInfo::GetClassData() const { return &_class_data_; }

void AudioInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioInfo *>(to)->MergeFrom(
      static_cast<const AudioInfo &>(from));
}


void AudioInfo::MergeFrom(const AudioInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AudioInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_audio_format().empty()) {
    _internal_set_audio_format(from._internal_audio_format());
  }
  if (from._internal_sample_rate() != 0) {
    _internal_set_sample_rate(from._internal_sample_rate());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = from._internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    _internal_set_duration_seconds(from._internal_duration_seconds());
  }
  if (from._internal_bit_rate() != 0) {
    _internal_set_bit_rate(from._internal_bit_rate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioInfo::CopyFrom(const AudioInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AudioInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioInfo::IsInitialized() const {
  return true;
}

void AudioInfo::InternalSwap(AudioInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &audio_format_, lhs_arena,
      &other->audio_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioInfo, bit_rate_)
      + sizeof(AudioInfo::bit_rate_)
      - PROTOBUF_FIELD_OFFSET(AudioInfo, sample_rate_)>(
          reinterpret_cast<char*>(&sample_rate_),
          reinterpret_cast<char*>(&other->sample_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[6]);
}

// ===================================================================

class Track::_Internal {
 public:
  static const ::clarifai::api::Data& data(const Track* msg);
  static const ::clarifai::api::TimeInfo& time_info(const Track* msg);
};

const ::clarifai::api::Data&
Track::_Internal::data(const Track* msg) {
  return *msg->data_;
}
const ::clarifai::api::TimeInfo&
Track::_Internal::time_info(const Track* msg) {
  return *msg->time_info_;
}
Track::Track(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Track)
}
Track::Track(const Track& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_time_info()) {
    time_info_ = new ::clarifai::api::TimeInfo(*from.time_info_);
  } else {
    time_info_ = nullptr;
  }
  quality_ = from.quality_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Track)
}

inline void Track::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&data_)) + sizeof(quality_));
}

Track::~Track() {
  // @@protoc_insertion_point(destructor:clarifai.api.Track)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Track::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete time_info_;
}

void Track::ArenaDtor(void* object) {
  Track* _this = reinterpret_cast< Track* >(object);
  (void)_this;
}
void Track::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Track::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Track::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Track)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && time_info_ != nullptr) {
    delete time_info_;
  }
  time_info_ = nullptr;
  quality_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Track::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Track.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TimeInfo time_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float quality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Track::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Track)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Track.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // .clarifai.api.TimeInfo time_info = 4;
  if (this->_internal_has_time_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::time_info(this), target, stream);
  }

  // float quality = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_quality = this->_internal_quality();
  uint32_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Track)
  return target;
}

size_t Track::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Track)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .clarifai.api.TimeInfo time_info = 4;
  if (this->_internal_has_time_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_info_);
  }

  // float quality = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_quality = this->_internal_quality();
  uint32_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Track::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Track::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Track::GetClassData() const { return &_class_data_; }

void Track::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Track *>(to)->MergeFrom(
      static_cast<const Track &>(from));
}


void Track::MergeFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Track)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (from._internal_has_time_info()) {
    _internal_mutable_time_info()->::clarifai::api::TimeInfo::MergeFrom(from._internal_time_info());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_quality = from._internal_quality();
  uint32_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    _internal_set_quality(from._internal_quality());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Track::CopyFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {
  return true;
}

void Track::InternalSwap(Track* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Track, quality_)
      + sizeof(Track::quality_)
      - PROTOBUF_FIELD_OFFSET(Track, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Track::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[7]);
}

// ===================================================================

class Cluster::_Internal {
 public:
};

Cluster::Cluster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hits_(arena),
  projection_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Cluster)
}
Cluster::Cluster(const Cluster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hits_(from.hits_),
      projection_(from.projection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&count_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Cluster)
}

inline void Cluster::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&count_)) + sizeof(score_));
}

Cluster::~Cluster() {
  // @@protoc_insertion_point(destructor:clarifai.api.Cluster)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Cluster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Cluster::ArenaDtor(void* object) {
  Cluster* _this = reinterpret_cast< Cluster* >(object);
  (void)_this;
}
void Cluster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cluster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Cluster::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Cluster)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_.Clear();
  projection_.Clear();
  id_.ClearToEmpty();
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&count_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cluster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Cluster.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit hits = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float projection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_projection(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_projection(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cluster::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Cluster)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Cluster.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // float score = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_score(), target);
  }

  // repeated .clarifai.api.Hit hits = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_hits(i), target, stream);
  }

  // repeated float projection = 5;
  if (this->_internal_projection_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_projection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Cluster)
  return target;
}

size_t Cluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Cluster)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Hit hits = 4;
  total_size += 1UL * this->_internal_hits_size();
  for (const auto& msg : this->hits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float projection = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_projection_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  // float score = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cluster::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Cluster::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cluster::GetClassData() const { return &_class_data_; }

void Cluster::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Cluster *>(to)->MergeFrom(
      static_cast<const Cluster &>(from));
}


void Cluster::MergeFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Cluster)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  hits_.MergeFrom(from.hits_);
  projection_.MergeFrom(from.projection_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _internal_set_score(from._internal_score());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cluster::CopyFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster::IsInitialized() const {
  return true;
}

void Cluster::InternalSwap(Cluster* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  hits_.InternalSwap(&other->hits_);
  projection_.InternalSwap(&other->projection_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cluster, score_)
      + sizeof(Cluster::score_)
      - PROTOBUF_FIELD_OFFSET(Cluster, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cluster::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[8]);
}

// ===================================================================

class Color::_Internal {
 public:
  static const ::clarifai::api::W3C& w3c(const Color* msg);
};

const ::clarifai::api::W3C&
Color::_Internal::w3c(const Color* msg) {
  return *msg->w3c_;
}
Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  raw_hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    raw_hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw_hex().empty()) {
    raw_hex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_raw_hex(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_w3c()) {
    w3c_ = new ::clarifai::api::W3C(*from.w3c_);
  } else {
    w3c_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Color)
}

inline void Color::SharedCtor() {
raw_hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  raw_hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&w3c_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&w3c_)) + sizeof(value_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:clarifai.api.Color)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  raw_hex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete w3c_;
}

void Color::ArenaDtor(void* object) {
  Color* _this = reinterpret_cast< Color* >(object);
  (void)_this;
}
void Color::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Color)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_hex_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && w3c_ != nullptr) {
    delete w3c_;
  }
  w3c_ = nullptr;
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string raw_hex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_raw_hex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Color.raw_hex"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.W3C w3c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_w3c(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Color::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Color)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string raw_hex = 1;
  if (!this->_internal_raw_hex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_hex().data(), static_cast<int>(this->_internal_raw_hex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Color.raw_hex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_raw_hex(), target);
  }

  // .clarifai.api.W3C w3c = 2;
  if (this->_internal_has_w3c()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::w3c(this), target, stream);
  }

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Color)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string raw_hex = 1;
  if (!this->_internal_raw_hex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_hex());
  }

  // .clarifai.api.W3C w3c = 2;
  if (this->_internal_has_w3c()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *w3c_);
  }

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Color::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Color::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Color::GetClassData() const { return &_class_data_; }

void Color::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Color *>(to)->MergeFrom(
      static_cast<const Color &>(from));
}


void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Color)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_raw_hex().empty()) {
    _internal_set_raw_hex(from._internal_raw_hex());
  }
  if (from._internal_has_w3c()) {
    _internal_mutable_w3c()->::clarifai::api::W3C::MergeFrom(from._internal_w3c());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &raw_hex_, lhs_arena,
      &other->raw_hex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, value_)
      + sizeof(Color::value_)
      - PROTOBUF_FIELD_OFFSET(Color, w3c_)>(
          reinterpret_cast<char*>(&w3c_),
          reinterpret_cast<char*>(&other->w3c_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[9]);
}

// ===================================================================

class W3C::_Internal {
 public:
};

W3C::W3C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.W3C)
}
W3C::W3C(const W3C& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hex().empty()) {
    hex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hex(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.W3C)
}

inline void W3C::SharedCtor() {
hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

W3C::~W3C() {
  // @@protoc_insertion_point(destructor:clarifai.api.W3C)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void W3C::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void W3C::ArenaDtor(void* object) {
  W3C* _this = reinterpret_cast< W3C* >(object);
  (void)_this;
}
void W3C::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void W3C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void W3C::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.W3C)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hex_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* W3C::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.W3C.hex"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.W3C.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* W3C::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.W3C)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hex = 1;
  if (!this->_internal_hex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hex().data(), static_cast<int>(this->_internal_hex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.W3C.hex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hex(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.W3C.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.W3C)
  return target;
}

size_t W3C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.W3C)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hex = 1;
  if (!this->_internal_hex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hex());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData W3C::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    W3C::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*W3C::GetClassData() const { return &_class_data_; }

void W3C::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<W3C *>(to)->MergeFrom(
      static_cast<const W3C &>(from));
}


void W3C::MergeFrom(const W3C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.W3C)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hex().empty()) {
    _internal_set_hex(from._internal_hex());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void W3C::CopyFrom(const W3C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.W3C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool W3C::IsInitialized() const {
  return true;
}

void W3C::InternalSwap(W3C* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hex_, lhs_arena,
      &other->hex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata W3C::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[10]);
}

// ===================================================================

class UserAppIDSet::_Internal {
 public:
};

UserAppIDSet::UserAppIDSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.UserAppIDSet)
}
UserAppIDSet::UserAppIDSet(const UserAppIDSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.UserAppIDSet)
}

inline void UserAppIDSet::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserAppIDSet::~UserAppIDSet() {
  // @@protoc_insertion_point(destructor:clarifai.api.UserAppIDSet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserAppIDSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserAppIDSet::ArenaDtor(void* object) {
  UserAppIDSet* _this = reinterpret_cast< UserAppIDSet* >(object);
  (void)_this;
}
void UserAppIDSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserAppIDSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserAppIDSet::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.UserAppIDSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  app_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserAppIDSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.UserAppIDSet.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.UserAppIDSet.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserAppIDSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.UserAppIDSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserAppIDSet.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserAppIDSet.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.UserAppIDSet)
  return target;
}

size_t UserAppIDSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.UserAppIDSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserAppIDSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserAppIDSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserAppIDSet::GetClassData() const { return &_class_data_; }

void UserAppIDSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserAppIDSet *>(to)->MergeFrom(
      static_cast<const UserAppIDSet &>(from));
}


void UserAppIDSet::MergeFrom(const UserAppIDSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.UserAppIDSet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserAppIDSet::CopyFrom(const UserAppIDSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.UserAppIDSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAppIDSet::IsInitialized() const {
  return true;
}

void UserAppIDSet::InternalSwap(UserAppIDSet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAppIDSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[11]);
}

// ===================================================================

class PatchAction::_Internal {
 public:
};

PatchAction::PatchAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAction)
}
PatchAction::PatchAction(const PatchAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_op().empty()) {
    op_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_op(), 
      GetArenaForAllocation());
  }
  merge_conflict_resolution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    merge_conflict_resolution_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_merge_conflict_resolution().empty()) {
    merge_conflict_resolution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_merge_conflict_resolution(), 
      GetArenaForAllocation());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAction)
}

inline void PatchAction::SharedCtor() {
op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
merge_conflict_resolution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  merge_conflict_resolution_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchAction::~PatchAction() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  op_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merge_conflict_resolution_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PatchAction::ArenaDtor(void* object) {
  PatchAction* _this = reinterpret_cast< PatchAction* >(object);
  (void)_this;
}
void PatchAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchAction::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_.ClearToEmpty();
  merge_conflict_resolution_.ClearToEmpty();
  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_op();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAction.op"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string merge_conflict_resolution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_merge_conflict_resolution();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAction.merge_conflict_resolution"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAction.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string op = 1;
  if (!this->_internal_op().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op().data(), static_cast<int>(this->_internal_op().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAction.op");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_op(), target);
  }

  // string merge_conflict_resolution = 2;
  if (!this->_internal_merge_conflict_resolution().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_merge_conflict_resolution().data(), static_cast<int>(this->_internal_merge_conflict_resolution().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAction.merge_conflict_resolution");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_merge_conflict_resolution(), target);
  }

  // string path = 3;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAction.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAction)
  return target;
}

size_t PatchAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string op = 1;
  if (!this->_internal_op().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op());
  }

  // string merge_conflict_resolution = 2;
  if (!this->_internal_merge_conflict_resolution().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_merge_conflict_resolution());
  }

  // string path = 3;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAction::GetClassData() const { return &_class_data_; }

void PatchAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchAction *>(to)->MergeFrom(
      static_cast<const PatchAction &>(from));
}


void PatchAction::MergeFrom(const PatchAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_op().empty()) {
    _internal_set_op(from._internal_op());
  }
  if (!from._internal_merge_conflict_resolution().empty()) {
    _internal_set_merge_conflict_resolution(from._internal_merge_conflict_resolution());
  }
  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAction::CopyFrom(const PatchAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAction::IsInitialized() const {
  return true;
}

void PatchAction::InternalSwap(PatchAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &op_, lhs_arena,
      &other->op_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &merge_conflict_resolution_, lhs_arena,
      &other->merge_conflict_resolution_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[12]);
}

// ===================================================================

class Concept::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Concept* msg);
  static const ::clarifai::api::Visibility& visibility(const Concept* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Concept::_Internal::created_at(const Concept* msg) {
  return *msg->created_at_;
}
const ::clarifai::api::Visibility&
Concept::_Internal::visibility(const Concept* msg) {
  return *msg->visibility_;
}
void Concept::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
Concept::Concept(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Concept)
}
Concept::Concept(const Concept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  definition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    definition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_definition().empty()) {
    definition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_definition(), 
      GetArenaForAllocation());
  }
  vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vocab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vocab_id().empty()) {
    vocab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vocab_id(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Concept)
}

inline void Concept::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
definition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  definition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vocab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(value_));
}

Concept::~Concept() {
  // @@protoc_insertion_point(destructor:clarifai.api.Concept)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Concept::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  definition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vocab_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete visibility_;
}

void Concept::ArenaDtor(void* object) {
  Concept* _this = reinterpret_cast< Concept* >(object);
  (void)_this;
}
void Concept::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Concept::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Concept::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Concept)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  language_.ClearToEmpty();
  app_id_.ClearToEmpty();
  definition_.ClearToEmpty();
  vocab_id_.ClearToEmpty();
  user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Concept::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Concept.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Concept.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_default_float) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string language = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Concept.language"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Concept.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string definition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_definition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Concept.definition"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vocab_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_vocab_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Concept.vocab_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Concept.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Concept::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Concept)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_default_float) = 1];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_value(), target);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::created_at(this), target, stream);
  }

  // string language = 5;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.language");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language(), target);
  }

  // string app_id = 6;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.app_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_app_id(), target);
  }

  // string definition = 7;
  if (!this->_internal_definition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_definition().data(), static_cast<int>(this->_internal_definition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.definition");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_definition(), target);
  }

  // string vocab_id = 8;
  if (!this->_internal_vocab_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vocab_id().data(), static_cast<int>(this->_internal_vocab_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.vocab_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_vocab_id(), target);
  }

  // .clarifai.api.Visibility visibility = 9;
  if (this->_internal_has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::visibility(this), target, stream);
  }

  // string user_id = 10;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Concept.user_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Concept)
  return target;
}

size_t Concept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Concept)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string language = 5;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string app_id = 6;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string definition = 7;
  if (!this->_internal_definition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_definition());
  }

  // string vocab_id = 8;
  if (!this->_internal_vocab_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vocab_id());
  }

  // string user_id = 10;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .clarifai.api.Visibility visibility = 9;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_default_float) = 1];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Concept::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Concept::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Concept::GetClassData() const { return &_class_data_; }

void Concept::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Concept *>(to)->MergeFrom(
      static_cast<const Concept &>(from));
}


void Concept::MergeFrom(const Concept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Concept)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_language().empty()) {
    _internal_set_language(from._internal_language());
  }
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_definition().empty()) {
    _internal_set_definition(from._internal_definition());
  }
  if (!from._internal_vocab_id().empty()) {
    _internal_set_vocab_id(from._internal_vocab_id());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Concept::CopyFrom(const Concept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Concept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Concept::IsInitialized() const {
  return true;
}

void Concept::InternalSwap(Concept* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &definition_, lhs_arena,
      &other->definition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vocab_id_, lhs_arena,
      &other->vocab_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Concept, value_)
      + sizeof(Concept::value_)
      - PROTOBUF_FIELD_OFFSET(Concept, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Concept::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[13]);
}

// ===================================================================

class ConceptCount::_Internal {
 public:
  static const ::clarifai::api::ConceptTypeCount& concept_type_count(const ConceptCount* msg);
  static const ::clarifai::api::DetailConceptCount& detail_concept_count(const ConceptCount* msg);
};

const ::clarifai::api::ConceptTypeCount&
ConceptCount::_Internal::concept_type_count(const ConceptCount* msg) {
  return *msg->concept_type_count_;
}
const ::clarifai::api::DetailConceptCount&
ConceptCount::_Internal::detail_concept_count(const ConceptCount* msg) {
  return *msg->detail_concept_count_;
}
ConceptCount::ConceptCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConceptCount)
}
ConceptCount::ConceptCount(const ConceptCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_concept_type_count()) {
    concept_type_count_ = new ::clarifai::api::ConceptTypeCount(*from.concept_type_count_);
  } else {
    concept_type_count_ = nullptr;
  }
  if (from._internal_has_detail_concept_count()) {
    detail_concept_count_ = new ::clarifai::api::DetailConceptCount(*from.detail_concept_count_);
  } else {
    detail_concept_count_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptCount)
}

inline void ConceptCount::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&concept_type_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&detail_concept_count_) -
    reinterpret_cast<char*>(&concept_type_count_)) + sizeof(detail_concept_count_));
}

ConceptCount::~ConceptCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptCount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConceptCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete concept_type_count_;
  if (this != internal_default_instance()) delete detail_concept_count_;
}

void ConceptCount::ArenaDtor(void* object) {
  ConceptCount* _this = reinterpret_cast< ConceptCount* >(object);
  (void)_this;
}
void ConceptCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConceptCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConceptCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && concept_type_count_ != nullptr) {
    delete concept_type_count_;
  }
  concept_type_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && detail_concept_count_ != nullptr) {
    delete detail_concept_count_;
  }
  detail_concept_count_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptCount.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptCount.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ConceptTypeCount concept_type_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept_type_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DetailConceptCount detail_concept_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail_concept_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConceptCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptCount.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptCount.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .clarifai.api.ConceptTypeCount concept_type_count = 3;
  if (this->_internal_has_concept_type_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::concept_type_count(this), target, stream);
  }

  // .clarifai.api.DetailConceptCount detail_concept_count = 4;
  if (this->_internal_has_detail_concept_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::detail_concept_count(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptCount)
  return target;
}

size_t ConceptCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .clarifai.api.ConceptTypeCount concept_type_count = 3;
  if (this->_internal_has_concept_type_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_type_count_);
  }

  // .clarifai.api.DetailConceptCount detail_concept_count = 4;
  if (this->_internal_has_detail_concept_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_concept_count_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConceptCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConceptCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConceptCount::GetClassData() const { return &_class_data_; }

void ConceptCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConceptCount *>(to)->MergeFrom(
      static_cast<const ConceptCount &>(from));
}


void ConceptCount::MergeFrom(const ConceptCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptCount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_concept_type_count()) {
    _internal_mutable_concept_type_count()->::clarifai::api::ConceptTypeCount::MergeFrom(from._internal_concept_type_count());
  }
  if (from._internal_has_detail_concept_count()) {
    _internal_mutable_detail_concept_count()->::clarifai::api::DetailConceptCount::MergeFrom(from._internal_detail_concept_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConceptCount::CopyFrom(const ConceptCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptCount::IsInitialized() const {
  return true;
}

void ConceptCount::InternalSwap(ConceptCount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConceptCount, detail_concept_count_)
      + sizeof(ConceptCount::detail_concept_count_)
      - PROTOBUF_FIELD_OFFSET(ConceptCount, concept_type_count_)>(
          reinterpret_cast<char*>(&concept_type_count_),
          reinterpret_cast<char*>(&other->concept_type_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptCount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[14]);
}

// ===================================================================

class ConceptTypeCount::_Internal {
 public:
};

ConceptTypeCount::ConceptTypeCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConceptTypeCount)
}
ConceptTypeCount::ConceptTypeCount(const ConceptTypeCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&positive_, &from.positive_,
    static_cast<size_t>(reinterpret_cast<char*>(&negative_) -
    reinterpret_cast<char*>(&positive_)) + sizeof(negative_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptTypeCount)
}

inline void ConceptTypeCount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&positive_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&negative_) -
    reinterpret_cast<char*>(&positive_)) + sizeof(negative_));
}

ConceptTypeCount::~ConceptTypeCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptTypeCount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConceptTypeCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConceptTypeCount::ArenaDtor(void* object) {
  ConceptTypeCount* _this = reinterpret_cast< ConceptTypeCount* >(object);
  (void)_this;
}
void ConceptTypeCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConceptTypeCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConceptTypeCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptTypeCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&positive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&negative_) -
      reinterpret_cast<char*>(&positive_)) + sizeof(negative_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptTypeCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 positive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          positive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 negative = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConceptTypeCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptTypeCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 positive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_positive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_positive(), target);
  }

  // uint32 negative = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_negative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_negative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptTypeCount)
  return target;
}

size_t ConceptTypeCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptTypeCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 positive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_positive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_positive());
  }

  // uint32 negative = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_negative() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_negative());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConceptTypeCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConceptTypeCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConceptTypeCount::GetClassData() const { return &_class_data_; }

void ConceptTypeCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConceptTypeCount *>(to)->MergeFrom(
      static_cast<const ConceptTypeCount &>(from));
}


void ConceptTypeCount::MergeFrom(const ConceptTypeCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptTypeCount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_positive() != 0) {
    _internal_set_positive(from._internal_positive());
  }
  if (from._internal_negative() != 0) {
    _internal_set_negative(from._internal_negative());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConceptTypeCount::CopyFrom(const ConceptTypeCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptTypeCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptTypeCount::IsInitialized() const {
  return true;
}

void ConceptTypeCount::InternalSwap(ConceptTypeCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConceptTypeCount, negative_)
      + sizeof(ConceptTypeCount::negative_)
      - PROTOBUF_FIELD_OFFSET(ConceptTypeCount, positive_)>(
          reinterpret_cast<char*>(&positive_),
          reinterpret_cast<char*>(&other->positive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptTypeCount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[15]);
}

// ===================================================================

class DetailConceptCount::_Internal {
 public:
  static const ::clarifai::api::ConceptTypeCount& processed(const DetailConceptCount* msg);
  static const ::clarifai::api::ConceptTypeCount& to_process(const DetailConceptCount* msg);
  static const ::clarifai::api::ConceptTypeCount& errors(const DetailConceptCount* msg);
  static const ::clarifai::api::ConceptTypeCount& processing(const DetailConceptCount* msg);
};

const ::clarifai::api::ConceptTypeCount&
DetailConceptCount::_Internal::processed(const DetailConceptCount* msg) {
  return *msg->processed_;
}
const ::clarifai::api::ConceptTypeCount&
DetailConceptCount::_Internal::to_process(const DetailConceptCount* msg) {
  return *msg->to_process_;
}
const ::clarifai::api::ConceptTypeCount&
DetailConceptCount::_Internal::errors(const DetailConceptCount* msg) {
  return *msg->errors_;
}
const ::clarifai::api::ConceptTypeCount&
DetailConceptCount::_Internal::processing(const DetailConceptCount* msg) {
  return *msg->processing_;
}
DetailConceptCount::DetailConceptCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DetailConceptCount)
}
DetailConceptCount::DetailConceptCount(const DetailConceptCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_processed()) {
    processed_ = new ::clarifai::api::ConceptTypeCount(*from.processed_);
  } else {
    processed_ = nullptr;
  }
  if (from._internal_has_to_process()) {
    to_process_ = new ::clarifai::api::ConceptTypeCount(*from.to_process_);
  } else {
    to_process_ = nullptr;
  }
  if (from._internal_has_errors()) {
    errors_ = new ::clarifai::api::ConceptTypeCount(*from.errors_);
  } else {
    errors_ = nullptr;
  }
  if (from._internal_has_processing()) {
    processing_ = new ::clarifai::api::ConceptTypeCount(*from.processing_);
  } else {
    processing_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DetailConceptCount)
}

inline void DetailConceptCount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&processed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&processing_) -
    reinterpret_cast<char*>(&processed_)) + sizeof(processing_));
}

DetailConceptCount::~DetailConceptCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.DetailConceptCount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DetailConceptCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete processed_;
  if (this != internal_default_instance()) delete to_process_;
  if (this != internal_default_instance()) delete errors_;
  if (this != internal_default_instance()) delete processing_;
}

void DetailConceptCount::ArenaDtor(void* object) {
  DetailConceptCount* _this = reinterpret_cast< DetailConceptCount* >(object);
  (void)_this;
}
void DetailConceptCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailConceptCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetailConceptCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DetailConceptCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && processed_ != nullptr) {
    delete processed_;
  }
  processed_ = nullptr;
  if (GetArenaForAllocation() == nullptr && to_process_ != nullptr) {
    delete to_process_;
  }
  to_process_ = nullptr;
  if (GetArenaForAllocation() == nullptr && errors_ != nullptr) {
    delete errors_;
  }
  errors_ = nullptr;
  if (GetArenaForAllocation() == nullptr && processing_ != nullptr) {
    delete processing_;
  }
  processing_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailConceptCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.ConceptTypeCount processed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_processed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ConceptTypeCount to_process = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_process(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ConceptTypeCount errors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_errors(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ConceptTypeCount processing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetailConceptCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DetailConceptCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.ConceptTypeCount processed = 1;
  if (this->_internal_has_processed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::processed(this), target, stream);
  }

  // .clarifai.api.ConceptTypeCount to_process = 2;
  if (this->_internal_has_to_process()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::to_process(this), target, stream);
  }

  // .clarifai.api.ConceptTypeCount errors = 3;
  if (this->_internal_has_errors()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::errors(this), target, stream);
  }

  // .clarifai.api.ConceptTypeCount processing = 4;
  if (this->_internal_has_processing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::processing(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DetailConceptCount)
  return target;
}

size_t DetailConceptCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DetailConceptCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.ConceptTypeCount processed = 1;
  if (this->_internal_has_processed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *processed_);
  }

  // .clarifai.api.ConceptTypeCount to_process = 2;
  if (this->_internal_has_to_process()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_process_);
  }

  // .clarifai.api.ConceptTypeCount errors = 3;
  if (this->_internal_has_errors()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errors_);
  }

  // .clarifai.api.ConceptTypeCount processing = 4;
  if (this->_internal_has_processing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *processing_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetailConceptCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetailConceptCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetailConceptCount::GetClassData() const { return &_class_data_; }

void DetailConceptCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetailConceptCount *>(to)->MergeFrom(
      static_cast<const DetailConceptCount &>(from));
}


void DetailConceptCount::MergeFrom(const DetailConceptCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DetailConceptCount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_processed()) {
    _internal_mutable_processed()->::clarifai::api::ConceptTypeCount::MergeFrom(from._internal_processed());
  }
  if (from._internal_has_to_process()) {
    _internal_mutable_to_process()->::clarifai::api::ConceptTypeCount::MergeFrom(from._internal_to_process());
  }
  if (from._internal_has_errors()) {
    _internal_mutable_errors()->::clarifai::api::ConceptTypeCount::MergeFrom(from._internal_errors());
  }
  if (from._internal_has_processing()) {
    _internal_mutable_processing()->::clarifai::api::ConceptTypeCount::MergeFrom(from._internal_processing());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetailConceptCount::CopyFrom(const DetailConceptCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DetailConceptCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailConceptCount::IsInitialized() const {
  return true;
}

void DetailConceptCount::InternalSwap(DetailConceptCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetailConceptCount, processing_)
      + sizeof(DetailConceptCount::processing_)
      - PROTOBUF_FIELD_OFFSET(DetailConceptCount, processed_)>(
          reinterpret_cast<char*>(&processed_),
          reinterpret_cast<char*>(&other->processed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailConceptCount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[16]);
}

// ===================================================================

class ConceptQuery::_Internal {
 public:
};

ConceptQuery::ConceptQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConceptQuery)
}
ConceptQuery::ConceptQuery(const ConceptQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptQuery)
}

inline void ConceptQuery::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConceptQuery::~ConceptQuery() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptQuery)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConceptQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConceptQuery::ArenaDtor(void* object) {
  ConceptQuery* _this = reinterpret_cast< ConceptQuery* >(object);
  (void)_this;
}
void ConceptQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConceptQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConceptQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  language_.ClearToEmpty();
  workflow_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptQuery.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptQuery.language"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptQuery.workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConceptQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptQuery.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptQuery.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  // string workflow_id = 3;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptQuery.workflow_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_workflow_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptQuery)
  return target;
}

size_t ConceptQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string workflow_id = 3;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConceptQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConceptQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConceptQuery::GetClassData() const { return &_class_data_; }

void ConceptQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConceptQuery *>(to)->MergeFrom(
      static_cast<const ConceptQuery &>(from));
}


void ConceptQuery::MergeFrom(const ConceptQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptQuery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_language().empty()) {
    _internal_set_language(from._internal_language());
  }
  if (!from._internal_workflow_id().empty()) {
    _internal_set_workflow_id(from._internal_workflow_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConceptQuery::CopyFrom(const ConceptQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptQuery::IsInitialized() const {
  return true;
}

void ConceptQuery::InternalSwap(ConceptQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workflow_id_, lhs_arena,
      &other->workflow_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptQuery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[17]);
}

// ===================================================================

class ConceptRelation::_Internal {
 public:
  static const ::clarifai::api::Concept& subject_concept(const ConceptRelation* msg);
  static const ::clarifai::api::Concept& object_concept(const ConceptRelation* msg);
  static const ::clarifai::api::Visibility& visibility(const ConceptRelation* msg);
};

const ::clarifai::api::Concept&
ConceptRelation::_Internal::subject_concept(const ConceptRelation* msg) {
  return *msg->subject_concept_;
}
const ::clarifai::api::Concept&
ConceptRelation::_Internal::object_concept(const ConceptRelation* msg) {
  return *msg->object_concept_;
}
const ::clarifai::api::Visibility&
ConceptRelation::_Internal::visibility(const ConceptRelation* msg) {
  return *msg->visibility_;
}
ConceptRelation::ConceptRelation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConceptRelation)
}
ConceptRelation::ConceptRelation(const ConceptRelation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  predicate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    predicate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_predicate().empty()) {
    predicate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_predicate(), 
      GetArenaForAllocation());
  }
  knowledge_graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    knowledge_graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_knowledge_graph_id().empty()) {
    knowledge_graph_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_knowledge_graph_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_subject_concept()) {
    subject_concept_ = new ::clarifai::api::Concept(*from.subject_concept_);
  } else {
    subject_concept_ = nullptr;
  }
  if (from._internal_has_object_concept()) {
    object_concept_ = new ::clarifai::api::Concept(*from.object_concept_);
  } else {
    object_concept_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptRelation)
}

inline void ConceptRelation::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
predicate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  predicate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
knowledge_graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  knowledge_graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&subject_concept_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&subject_concept_)) + sizeof(visibility_));
}

ConceptRelation::~ConceptRelation() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptRelation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConceptRelation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  knowledge_graph_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete subject_concept_;
  if (this != internal_default_instance()) delete object_concept_;
  if (this != internal_default_instance()) delete visibility_;
}

void ConceptRelation::ArenaDtor(void* object) {
  ConceptRelation* _this = reinterpret_cast< ConceptRelation* >(object);
  (void)_this;
}
void ConceptRelation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConceptRelation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConceptRelation::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptRelation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  predicate_.ClearToEmpty();
  knowledge_graph_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && subject_concept_ != nullptr) {
    delete subject_concept_;
  }
  subject_concept_ = nullptr;
  if (GetArenaForAllocation() == nullptr && object_concept_ != nullptr) {
    delete object_concept_;
  }
  object_concept_ = nullptr;
  if (GetArenaForAllocation() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptRelation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptRelation.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Concept subject_concept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject_concept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Concept object_concept = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_concept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string predicate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_predicate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptRelation.predicate"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string knowledge_graph_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_knowledge_graph_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptRelation.knowledge_graph_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConceptRelation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptRelation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptRelation.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.Concept subject_concept = 2;
  if (this->_internal_has_subject_concept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::subject_concept(this), target, stream);
  }

  // .clarifai.api.Concept object_concept = 3;
  if (this->_internal_has_object_concept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::object_concept(this), target, stream);
  }

  // string predicate = 4;
  if (!this->_internal_predicate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_predicate().data(), static_cast<int>(this->_internal_predicate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptRelation.predicate");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_predicate(), target);
  }

  // string knowledge_graph_id = 5;
  if (!this->_internal_knowledge_graph_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_knowledge_graph_id().data(), static_cast<int>(this->_internal_knowledge_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptRelation.knowledge_graph_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_knowledge_graph_id(), target);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->_internal_has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::visibility(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptRelation)
  return target;
}

size_t ConceptRelation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptRelation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string predicate = 4;
  if (!this->_internal_predicate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_predicate());
  }

  // string knowledge_graph_id = 5;
  if (!this->_internal_knowledge_graph_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_knowledge_graph_id());
  }

  // .clarifai.api.Concept subject_concept = 2;
  if (this->_internal_has_subject_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_concept_);
  }

  // .clarifai.api.Concept object_concept = 3;
  if (this->_internal_has_object_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_concept_);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConceptRelation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConceptRelation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConceptRelation::GetClassData() const { return &_class_data_; }

void ConceptRelation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConceptRelation *>(to)->MergeFrom(
      static_cast<const ConceptRelation &>(from));
}


void ConceptRelation::MergeFrom(const ConceptRelation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptRelation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_predicate().empty()) {
    _internal_set_predicate(from._internal_predicate());
  }
  if (!from._internal_knowledge_graph_id().empty()) {
    _internal_set_knowledge_graph_id(from._internal_knowledge_graph_id());
  }
  if (from._internal_has_subject_concept()) {
    _internal_mutable_subject_concept()->::clarifai::api::Concept::MergeFrom(from._internal_subject_concept());
  }
  if (from._internal_has_object_concept()) {
    _internal_mutable_object_concept()->::clarifai::api::Concept::MergeFrom(from._internal_object_concept());
  }
  if (from._internal_has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConceptRelation::CopyFrom(const ConceptRelation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptRelation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptRelation::IsInitialized() const {
  return true;
}

void ConceptRelation::InternalSwap(ConceptRelation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &predicate_, lhs_arena,
      &other->predicate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &knowledge_graph_id_, lhs_arena,
      &other->knowledge_graph_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConceptRelation, visibility_)
      + sizeof(ConceptRelation::visibility_)
      - PROTOBUF_FIELD_OFFSET(ConceptRelation, subject_concept_)>(
          reinterpret_cast<char*>(&subject_concept_),
          reinterpret_cast<char*>(&other->subject_concept_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptRelation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[18]);
}

// ===================================================================

class KnowledgeGraph::_Internal {
 public:
};

KnowledgeGraph::KnowledgeGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.KnowledgeGraph)
}
KnowledgeGraph::KnowledgeGraph(const KnowledgeGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  examples_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    examples_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_examples_app_id().empty()) {
    examples_app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_examples_app_id(), 
      GetArenaForAllocation());
  }
  sampled_examples_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sampled_examples_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sampled_examples_app_id().empty()) {
    sampled_examples_app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sampled_examples_app_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.KnowledgeGraph)
}

inline void KnowledgeGraph::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
examples_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  examples_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sampled_examples_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sampled_examples_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KnowledgeGraph::~KnowledgeGraph() {
  // @@protoc_insertion_point(destructor:clarifai.api.KnowledgeGraph)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KnowledgeGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  examples_app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sampled_examples_app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KnowledgeGraph::ArenaDtor(void* object) {
  KnowledgeGraph* _this = reinterpret_cast< KnowledgeGraph* >(object);
  (void)_this;
}
void KnowledgeGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KnowledgeGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KnowledgeGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.KnowledgeGraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  examples_app_id_.ClearToEmpty();
  sampled_examples_app_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KnowledgeGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.KnowledgeGraph.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.KnowledgeGraph.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.KnowledgeGraph.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string examples_app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_examples_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.KnowledgeGraph.examples_app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sampled_examples_app_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sampled_examples_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.KnowledgeGraph.sampled_examples_app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KnowledgeGraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.KnowledgeGraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KnowledgeGraph.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KnowledgeGraph.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KnowledgeGraph.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string examples_app_id = 4;
  if (!this->_internal_examples_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_examples_app_id().data(), static_cast<int>(this->_internal_examples_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KnowledgeGraph.examples_app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_examples_app_id(), target);
  }

  // string sampled_examples_app_id = 5;
  if (!this->_internal_sampled_examples_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sampled_examples_app_id().data(), static_cast<int>(this->_internal_sampled_examples_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.KnowledgeGraph.sampled_examples_app_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sampled_examples_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.KnowledgeGraph)
  return target;
}

size_t KnowledgeGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.KnowledgeGraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string examples_app_id = 4;
  if (!this->_internal_examples_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_examples_app_id());
  }

  // string sampled_examples_app_id = 5;
  if (!this->_internal_sampled_examples_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sampled_examples_app_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KnowledgeGraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KnowledgeGraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KnowledgeGraph::GetClassData() const { return &_class_data_; }

void KnowledgeGraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KnowledgeGraph *>(to)->MergeFrom(
      static_cast<const KnowledgeGraph &>(from));
}


void KnowledgeGraph::MergeFrom(const KnowledgeGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.KnowledgeGraph)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_examples_app_id().empty()) {
    _internal_set_examples_app_id(from._internal_examples_app_id());
  }
  if (!from._internal_sampled_examples_app_id().empty()) {
    _internal_set_sampled_examples_app_id(from._internal_sampled_examples_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KnowledgeGraph::CopyFrom(const KnowledgeGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.KnowledgeGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KnowledgeGraph::IsInitialized() const {
  return true;
}

void KnowledgeGraph::InternalSwap(KnowledgeGraph* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &examples_app_id_, lhs_arena,
      &other->examples_app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sampled_examples_app_id_, lhs_arena,
      &other->sampled_examples_app_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KnowledgeGraph::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[19]);
}

// ===================================================================

class ConceptMappingJob::_Internal {
 public:
};

ConceptMappingJob::ConceptMappingJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  concept_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConceptMappingJob)
}
ConceptMappingJob::ConceptMappingJob(const ConceptMappingJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      concept_ids_(from.concept_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  knowledge_graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    knowledge_graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_knowledge_graph_id().empty()) {
    knowledge_graph_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_knowledge_graph_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptMappingJob)
}

inline void ConceptMappingJob::SharedCtor() {
knowledge_graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  knowledge_graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConceptMappingJob::~ConceptMappingJob() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptMappingJob)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConceptMappingJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  knowledge_graph_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConceptMappingJob::ArenaDtor(void* object) {
  ConceptMappingJob* _this = reinterpret_cast< ConceptMappingJob* >(object);
  (void)_this;
}
void ConceptMappingJob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConceptMappingJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConceptMappingJob::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptMappingJob)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_ids_.Clear();
  knowledge_graph_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptMappingJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string knowledge_graph_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_knowledge_graph_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptMappingJob.knowledge_graph_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string concept_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptMappingJob.concept_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConceptMappingJob::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptMappingJob)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string knowledge_graph_id = 1;
  if (!this->_internal_knowledge_graph_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_knowledge_graph_id().data(), static_cast<int>(this->_internal_knowledge_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptMappingJob.knowledge_graph_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_knowledge_graph_id(), target);
  }

  // repeated string concept_ids = 2;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptMappingJob.concept_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptMappingJob)
  return target;
}

size_t ConceptMappingJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptMappingJob)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string concept_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(concept_ids_.size());
  for (int i = 0, n = concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      concept_ids_.Get(i));
  }

  // string knowledge_graph_id = 1;
  if (!this->_internal_knowledge_graph_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_knowledge_graph_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConceptMappingJob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConceptMappingJob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConceptMappingJob::GetClassData() const { return &_class_data_; }

void ConceptMappingJob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConceptMappingJob *>(to)->MergeFrom(
      static_cast<const ConceptMappingJob &>(from));
}


void ConceptMappingJob::MergeFrom(const ConceptMappingJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptMappingJob)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  concept_ids_.MergeFrom(from.concept_ids_);
  if (!from._internal_knowledge_graph_id().empty()) {
    _internal_set_knowledge_graph_id(from._internal_knowledge_graph_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConceptMappingJob::CopyFrom(const ConceptMappingJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptMappingJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptMappingJob::IsInitialized() const {
  return true;
}

void ConceptMappingJob::InternalSwap(ConceptMappingJob* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  concept_ids_.InternalSwap(&other->concept_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &knowledge_graph_id_, lhs_arena,
      &other->knowledge_graph_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptMappingJob::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[20]);
}

// ===================================================================

class ConceptLanguage::_Internal {
 public:
};

ConceptLanguage::ConceptLanguage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConceptLanguage)
}
ConceptLanguage::ConceptLanguage(const ConceptLanguage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  definition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    definition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_definition().empty()) {
    definition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_definition(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptLanguage)
}

inline void ConceptLanguage::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
definition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  definition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConceptLanguage::~ConceptLanguage() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptLanguage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConceptLanguage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  definition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConceptLanguage::ArenaDtor(void* object) {
  ConceptLanguage* _this = reinterpret_cast< ConceptLanguage* >(object);
  (void)_this;
}
void ConceptLanguage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConceptLanguage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConceptLanguage::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptLanguage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  definition_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptLanguage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptLanguage.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptLanguage.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string definition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_definition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConceptLanguage.definition"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConceptLanguage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptLanguage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptLanguage.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptLanguage.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string definition = 3;
  if (!this->_internal_definition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_definition().data(), static_cast<int>(this->_internal_definition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptLanguage.definition");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_definition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptLanguage)
  return target;
}

size_t ConceptLanguage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptLanguage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string definition = 3;
  if (!this->_internal_definition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_definition());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConceptLanguage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConceptLanguage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConceptLanguage::GetClassData() const { return &_class_data_; }

void ConceptLanguage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConceptLanguage *>(to)->MergeFrom(
      static_cast<const ConceptLanguage &>(from));
}


void ConceptLanguage::MergeFrom(const ConceptLanguage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptLanguage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_definition().empty()) {
    _internal_set_definition(from._internal_definition());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConceptLanguage::CopyFrom(const ConceptLanguage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptLanguage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptLanguage::IsInitialized() const {
  return true;
}

void ConceptLanguage::InternalSwap(ConceptLanguage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &definition_, lhs_arena,
      &other->definition_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptLanguage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[21]);
}

// ===================================================================

class Data::_Internal {
 public:
  static const ::clarifai::api::Image& image(const Data* msg);
  static const ::clarifai::api::Video& video(const Data* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const Data* msg);
  static const ::clarifai::api::Geo& geo(const Data* msg);
  static const ::clarifai::api::Text& text(const Data* msg);
  static const ::clarifai::api::Audio& audio(const Data* msg);
};

const ::clarifai::api::Image&
Data::_Internal::image(const Data* msg) {
  return *msg->image_;
}
const ::clarifai::api::Video&
Data::_Internal::video(const Data* msg) {
  return *msg->video_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Data::_Internal::metadata(const Data* msg) {
  return *msg->metadata_;
}
const ::clarifai::api::Geo&
Data::_Internal::geo(const Data* msg) {
  return *msg->geo_;
}
const ::clarifai::api::Text&
Data::_Internal::text(const Data* msg) {
  return *msg->text_;
}
const ::clarifai::api::Audio&
Data::_Internal::audio(const Data* msg) {
  return *msg->audio_;
}
void Data::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  concepts_(arena),
  colors_(arena),
  clusters_(arena),
  embeddings_(arena),
  regions_(arena),
  frames_(arena),
  tracks_(arena),
  time_segments_(arena),
  hits_(arena),
  heatmaps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      concepts_(from.concepts_),
      colors_(from.colors_),
      clusters_(from.clusters_),
      embeddings_(from.embeddings_),
      regions_(from.regions_),
      frames_(from.frames_),
      tracks_(from.tracks_),
      time_segments_(from.time_segments_),
      hits_(from.hits_),
      heatmaps_(from.heatmaps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::clarifai::api::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from._internal_has_video()) {
    video_ = new ::clarifai::api::Video(*from.video_);
  } else {
    video_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_geo()) {
    geo_ = new ::clarifai::api::Geo(*from.geo_);
  } else {
    geo_ = nullptr;
  }
  if (from._internal_has_text()) {
    text_ = new ::clarifai::api::Text(*from.text_);
  } else {
    text_ = nullptr;
  }
  if (from._internal_has_audio()) {
    audio_ = new ::clarifai::api::Audio(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Data)
}

inline void Data::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&image_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audio_) -
    reinterpret_cast<char*>(&image_)) + sizeof(audio_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:clarifai.api.Data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete video_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete geo_;
  if (this != internal_default_instance()) delete text_;
  if (this != internal_default_instance()) delete audio_;
}

void Data::ArenaDtor(void* object) {
  Data* _this = reinterpret_cast< Data* >(object);
  (void)_this;
}
void Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concepts_.Clear();
  colors_.Clear();
  clusters_.Clear();
  embeddings_.Clear();
  regions_.Clear();
  frames_.Clear();
  tracks_.Clear();
  time_segments_.Clear();
  hits_.Clear();
  heatmaps_.Clear();
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  if (GetArenaForAllocation() == nullptr && video_ != nullptr) {
    delete video_;
  }
  video_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && geo_ != nullptr) {
    delete geo_;
  }
  geo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  if (GetArenaForAllocation() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Video video = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Geo geo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Color colors = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Cluster clusters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clusters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Embedding embeddings = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_embeddings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Region regions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Frame frames = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Text text = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Audio audio = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Track tracks = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.TimeSegment time_segments = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_time_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit hits = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Image heatmaps = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_heatmaps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Image image = 1;
  if (this->_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  // .clarifai.api.Video video = 2;
  if (this->_internal_has_video()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::video(this), target, stream);
  }

  // repeated .clarifai.api.Concept concepts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_concepts(i), target, stream);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metadata(this), target, stream);
  }

  // .clarifai.api.Geo geo = 6;
  if (this->_internal_has_geo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::geo(this), target, stream);
  }

  // repeated .clarifai.api.Color colors = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_colors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_colors(i), target, stream);
  }

  // repeated .clarifai.api.Cluster clusters = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_clusters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_clusters(i), target, stream);
  }

  // repeated .clarifai.api.Embedding embeddings = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_embeddings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_embeddings(i), target, stream);
  }

  // repeated .clarifai.api.Region regions = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_regions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_regions(i), target, stream);
  }

  // repeated .clarifai.api.Frame frames = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_frames(i), target, stream);
  }

  // .clarifai.api.Text text = 13;
  if (this->_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::text(this), target, stream);
  }

  // .clarifai.api.Audio audio = 14;
  if (this->_internal_has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::audio(this), target, stream);
  }

  // repeated .clarifai.api.Track tracks = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tracks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_tracks(i), target, stream);
  }

  // repeated .clarifai.api.TimeSegment time_segments = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_time_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_time_segments(i), target, stream);
  }

  // repeated .clarifai.api.Hit hits = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_hits(i), target, stream);
  }

  // repeated .clarifai.api.Image heatmaps = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_heatmaps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_heatmaps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 3;
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Color colors = 7;
  total_size += 1UL * this->_internal_colors_size();
  for (const auto& msg : this->colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Cluster clusters = 8;
  total_size += 1UL * this->_internal_clusters_size();
  for (const auto& msg : this->clusters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Embedding embeddings = 9;
  total_size += 1UL * this->_internal_embeddings_size();
  for (const auto& msg : this->embeddings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Region regions = 11;
  total_size += 1UL * this->_internal_regions_size();
  for (const auto& msg : this->regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Frame frames = 12;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Track tracks = 15;
  total_size += 1UL * this->_internal_tracks_size();
  for (const auto& msg : this->tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.TimeSegment time_segments = 16;
  total_size += 2UL * this->_internal_time_segments_size();
  for (const auto& msg : this->time_segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Hit hits = 17;
  total_size += 2UL * this->_internal_hits_size();
  for (const auto& msg : this->hits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Image heatmaps = 18;
  total_size += 2UL * this->_internal_heatmaps_size();
  for (const auto& msg : this->heatmaps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.Image image = 1;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .clarifai.api.Video video = 2;
  if (this->_internal_has_video()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *video_);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .clarifai.api.Geo geo = 6;
  if (this->_internal_has_geo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_);
  }

  // .clarifai.api.Text text = 13;
  if (this->_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  // .clarifai.api.Audio audio = 14;
  if (this->_internal_has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Data::GetClassData() const { return &_class_data_; }

void Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Data *>(to)->MergeFrom(
      static_cast<const Data &>(from));
}


void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  concepts_.MergeFrom(from.concepts_);
  colors_.MergeFrom(from.colors_);
  clusters_.MergeFrom(from.clusters_);
  embeddings_.MergeFrom(from.embeddings_);
  regions_.MergeFrom(from.regions_);
  frames_.MergeFrom(from.frames_);
  tracks_.MergeFrom(from.tracks_);
  time_segments_.MergeFrom(from.time_segments_);
  hits_.MergeFrom(from.hits_);
  heatmaps_.MergeFrom(from.heatmaps_);
  if (from._internal_has_image()) {
    _internal_mutable_image()->::clarifai::api::Image::MergeFrom(from._internal_image());
  }
  if (from._internal_has_video()) {
    _internal_mutable_video()->::clarifai::api::Video::MergeFrom(from._internal_video());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_geo()) {
    _internal_mutable_geo()->::clarifai::api::Geo::MergeFrom(from._internal_geo());
  }
  if (from._internal_has_text()) {
    _internal_mutable_text()->::clarifai::api::Text::MergeFrom(from._internal_text());
  }
  if (from._internal_has_audio()) {
    _internal_mutable_audio()->::clarifai::api::Audio::MergeFrom(from._internal_audio());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  concepts_.InternalSwap(&other->concepts_);
  colors_.InternalSwap(&other->colors_);
  clusters_.InternalSwap(&other->clusters_);
  embeddings_.InternalSwap(&other->embeddings_);
  regions_.InternalSwap(&other->regions_);
  frames_.InternalSwap(&other->frames_);
  tracks_.InternalSwap(&other->tracks_);
  time_segments_.InternalSwap(&other->time_segments_);
  hits_.InternalSwap(&other->hits_);
  heatmaps_.InternalSwap(&other->heatmaps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Data, audio_)
      + sizeof(Data::audio_)
      - PROTOBUF_FIELD_OFFSET(Data, image_)>(
          reinterpret_cast<char*>(&image_),
          reinterpret_cast<char*>(&other->image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[22]);
}

// ===================================================================

class Region::_Internal {
 public:
  static const ::clarifai::api::RegionInfo& region_info(const Region* msg);
  static const ::clarifai::api::Data& data(const Region* msg);
};

const ::clarifai::api::RegionInfo&
Region::_Internal::region_info(const Region* msg) {
  return *msg->region_info_;
}
const ::clarifai::api::Data&
Region::_Internal::data(const Region* msg) {
  return *msg->data_;
}
Region::Region(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Region)
}
Region::Region(const Region& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  track_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    track_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_track_id().empty()) {
    track_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_track_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_region_info()) {
    region_info_ = new ::clarifai::api::RegionInfo(*from.region_info_);
  } else {
    region_info_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Region)
}

inline void Region::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
track_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  track_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&region_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&region_info_)) + sizeof(value_));
}

Region::~Region() {
  // @@protoc_insertion_point(destructor:clarifai.api.Region)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Region::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  track_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_info_;
  if (this != internal_default_instance()) delete data_;
}

void Region::ArenaDtor(void* object) {
  Region* _this = reinterpret_cast< Region* >(object);
  (void)_this;
}
void Region::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Region::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Region::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Region)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  track_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && region_info_ != nullptr) {
    delete region_info_;
  }
  region_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Region::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Region.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.RegionInfo region_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string track_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_track_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Region.track_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Region::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Region)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Region.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.RegionInfo region_info = 2;
  if (this->_internal_has_region_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::region_info(this), target, stream);
  }

  // .clarifai.api.Data data = 3;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  // float value = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_value(), target);
  }

  // string track_id = 5;
  if (!this->_internal_track_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_id().data(), static_cast<int>(this->_internal_track_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Region.track_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_track_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Region)
  return target;
}

size_t Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Region)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string track_id = 5;
  if (!this->_internal_track_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_id());
  }

  // .clarifai.api.RegionInfo region_info = 2;
  if (this->_internal_has_region_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_info_);
  }

  // .clarifai.api.Data data = 3;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // float value = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Region::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Region::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Region::GetClassData() const { return &_class_data_; }

void Region::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Region *>(to)->MergeFrom(
      static_cast<const Region &>(from));
}


void Region::MergeFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Region)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_track_id().empty()) {
    _internal_set_track_id(from._internal_track_id());
  }
  if (from._internal_has_region_info()) {
    _internal_mutable_region_info()->::clarifai::api::RegionInfo::MergeFrom(from._internal_region_info());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Region::CopyFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Region::IsInitialized() const {
  return true;
}

void Region::InternalSwap(Region* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &track_id_, lhs_arena,
      &other->track_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Region, value_)
      + sizeof(Region::value_)
      - PROTOBUF_FIELD_OFFSET(Region, region_info_)>(
          reinterpret_cast<char*>(&region_info_),
          reinterpret_cast<char*>(&other->region_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Region::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[23]);
}

// ===================================================================

class RegionInfo::_Internal {
 public:
  static const ::clarifai::api::BoundingBox& bounding_box(const RegionInfo* msg);
  static const ::clarifai::api::Mask& mask(const RegionInfo* msg);
  static const ::clarifai::api::Polygon& polygon(const RegionInfo* msg);
  static const ::clarifai::api::Point& point(const RegionInfo* msg);
  static const ::clarifai::api::Span& span(const RegionInfo* msg);
  static const ::clarifai::api::Token& token(const RegionInfo* msg);
};

const ::clarifai::api::BoundingBox&
RegionInfo::_Internal::bounding_box(const RegionInfo* msg) {
  return *msg->bounding_box_;
}
const ::clarifai::api::Mask&
RegionInfo::_Internal::mask(const RegionInfo* msg) {
  return *msg->mask_;
}
const ::clarifai::api::Polygon&
RegionInfo::_Internal::polygon(const RegionInfo* msg) {
  return *msg->polygon_;
}
const ::clarifai::api::Point&
RegionInfo::_Internal::point(const RegionInfo* msg) {
  return *msg->point_;
}
const ::clarifai::api::Span&
RegionInfo::_Internal::span(const RegionInfo* msg) {
  return *msg->span_;
}
const ::clarifai::api::Token&
RegionInfo::_Internal::token(const RegionInfo* msg) {
  return *msg->token_;
}
RegionInfo::RegionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.RegionInfo)
}
RegionInfo::RegionInfo(const RegionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bounding_box()) {
    bounding_box_ = new ::clarifai::api::BoundingBox(*from.bounding_box_);
  } else {
    bounding_box_ = nullptr;
  }
  if (from._internal_has_mask()) {
    mask_ = new ::clarifai::api::Mask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  if (from._internal_has_polygon()) {
    polygon_ = new ::clarifai::api::Polygon(*from.polygon_);
  } else {
    polygon_ = nullptr;
  }
  if (from._internal_has_point()) {
    point_ = new ::clarifai::api::Point(*from.point_);
  } else {
    point_ = nullptr;
  }
  if (from._internal_has_span()) {
    span_ = new ::clarifai::api::Span(*from.span_);
  } else {
    span_ = nullptr;
  }
  if (from._internal_has_token()) {
    token_ = new ::clarifai::api::Token(*from.token_);
  } else {
    token_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.RegionInfo)
}

inline void RegionInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bounding_box_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&token_) -
    reinterpret_cast<char*>(&bounding_box_)) + sizeof(token_));
}

RegionInfo::~RegionInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.RegionInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete bounding_box_;
  if (this != internal_default_instance()) delete mask_;
  if (this != internal_default_instance()) delete polygon_;
  if (this != internal_default_instance()) delete point_;
  if (this != internal_default_instance()) delete span_;
  if (this != internal_default_instance()) delete token_;
}

void RegionInfo::ArenaDtor(void* object) {
  RegionInfo* _this = reinterpret_cast< RegionInfo* >(object);
  (void)_this;
}
void RegionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.RegionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && bounding_box_ != nullptr) {
    delete bounding_box_;
  }
  bounding_box_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  if (GetArenaForAllocation() == nullptr && polygon_ != nullptr) {
    delete polygon_;
  }
  polygon_ = nullptr;
  if (GetArenaForAllocation() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  if (GetArenaForAllocation() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
  if (GetArenaForAllocation() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.BoundingBox bounding_box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounding_box(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Mask mask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Polygon polygon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Point point = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Span span = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_span(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Token token = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.RegionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.BoundingBox bounding_box = 1;
  if (this->_internal_has_bounding_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bounding_box(this), target, stream);
  }

  // .clarifai.api.Mask mask = 4;
  if (this->_internal_has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mask(this), target, stream);
  }

  // .clarifai.api.Polygon polygon = 5;
  if (this->_internal_has_polygon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::polygon(this), target, stream);
  }

  // .clarifai.api.Point point = 6;
  if (this->_internal_has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::point(this), target, stream);
  }

  // .clarifai.api.Span span = 7;
  if (this->_internal_has_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::span(this), target, stream);
  }

  // .clarifai.api.Token token = 8;
  if (this->_internal_has_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::token(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.RegionInfo)
  return target;
}

size_t RegionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.RegionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.BoundingBox bounding_box = 1;
  if (this->_internal_has_bounding_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounding_box_);
  }

  // .clarifai.api.Mask mask = 4;
  if (this->_internal_has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  // .clarifai.api.Polygon polygon = 5;
  if (this->_internal_has_polygon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *polygon_);
  }

  // .clarifai.api.Point point = 6;
  if (this->_internal_has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  // .clarifai.api.Span span = 7;
  if (this->_internal_has_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *span_);
  }

  // .clarifai.api.Token token = 8;
  if (this->_internal_has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegionInfo::GetClassData() const { return &_class_data_; }

void RegionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegionInfo *>(to)->MergeFrom(
      static_cast<const RegionInfo &>(from));
}


void RegionInfo::MergeFrom(const RegionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.RegionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bounding_box()) {
    _internal_mutable_bounding_box()->::clarifai::api::BoundingBox::MergeFrom(from._internal_bounding_box());
  }
  if (from._internal_has_mask()) {
    _internal_mutable_mask()->::clarifai::api::Mask::MergeFrom(from._internal_mask());
  }
  if (from._internal_has_polygon()) {
    _internal_mutable_polygon()->::clarifai::api::Polygon::MergeFrom(from._internal_polygon());
  }
  if (from._internal_has_point()) {
    _internal_mutable_point()->::clarifai::api::Point::MergeFrom(from._internal_point());
  }
  if (from._internal_has_span()) {
    _internal_mutable_span()->::clarifai::api::Span::MergeFrom(from._internal_span());
  }
  if (from._internal_has_token()) {
    _internal_mutable_token()->::clarifai::api::Token::MergeFrom(from._internal_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegionInfo::CopyFrom(const RegionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.RegionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionInfo::IsInitialized() const {
  return true;
}

void RegionInfo::InternalSwap(RegionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionInfo, token_)
      + sizeof(RegionInfo::token_)
      - PROTOBUF_FIELD_OFFSET(RegionInfo, bounding_box_)>(
          reinterpret_cast<char*>(&bounding_box_),
          reinterpret_cast<char*>(&other->bounding_box_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[24]);
}

// ===================================================================

class BoundingBox::_Internal {
 public:
};

BoundingBox::BoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.BoundingBox)
}
BoundingBox::BoundingBox(const BoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&top_row_, &from.top_row_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_col_) -
    reinterpret_cast<char*>(&top_row_)) + sizeof(right_col_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.BoundingBox)
}

inline void BoundingBox::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&top_row_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&right_col_) -
    reinterpret_cast<char*>(&top_row_)) + sizeof(right_col_));
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:clarifai.api.BoundingBox)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoundingBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoundingBox::ArenaDtor(void* object) {
  BoundingBox* _this = reinterpret_cast< BoundingBox* >(object);
  (void)_this;
}
void BoundingBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.BoundingBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&top_row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_col_) -
      reinterpret_cast<char*>(&top_row_)) + sizeof(right_col_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float top_row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          top_row_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float left_col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          left_col_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float bottom_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          bottom_row_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float right_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          right_col_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoundingBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.BoundingBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float top_row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top_row = this->_internal_top_row();
  uint32_t raw_top_row;
  memcpy(&raw_top_row, &tmp_top_row, sizeof(tmp_top_row));
  if (raw_top_row != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_top_row(), target);
  }

  // float left_col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_left_col = this->_internal_left_col();
  uint32_t raw_left_col;
  memcpy(&raw_left_col, &tmp_left_col, sizeof(tmp_left_col));
  if (raw_left_col != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_left_col(), target);
  }

  // float bottom_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bottom_row = this->_internal_bottom_row();
  uint32_t raw_bottom_row;
  memcpy(&raw_bottom_row, &tmp_bottom_row, sizeof(tmp_bottom_row));
  if (raw_bottom_row != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_bottom_row(), target);
  }

  // float right_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_right_col = this->_internal_right_col();
  uint32_t raw_right_col;
  memcpy(&raw_right_col, &tmp_right_col, sizeof(tmp_right_col));
  if (raw_right_col != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_right_col(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.BoundingBox)
  return target;
}

size_t BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.BoundingBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float top_row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top_row = this->_internal_top_row();
  uint32_t raw_top_row;
  memcpy(&raw_top_row, &tmp_top_row, sizeof(tmp_top_row));
  if (raw_top_row != 0) {
    total_size += 1 + 4;
  }

  // float left_col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_left_col = this->_internal_left_col();
  uint32_t raw_left_col;
  memcpy(&raw_left_col, &tmp_left_col, sizeof(tmp_left_col));
  if (raw_left_col != 0) {
    total_size += 1 + 4;
  }

  // float bottom_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bottom_row = this->_internal_bottom_row();
  uint32_t raw_bottom_row;
  memcpy(&raw_bottom_row, &tmp_bottom_row, sizeof(tmp_bottom_row));
  if (raw_bottom_row != 0) {
    total_size += 1 + 4;
  }

  // float right_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_right_col = this->_internal_right_col();
  uint32_t raw_right_col;
  memcpy(&raw_right_col, &tmp_right_col, sizeof(tmp_right_col));
  if (raw_right_col != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoundingBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoundingBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoundingBox::GetClassData() const { return &_class_data_; }

void BoundingBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoundingBox *>(to)->MergeFrom(
      static_cast<const BoundingBox &>(from));
}


void BoundingBox::MergeFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top_row = from._internal_top_row();
  uint32_t raw_top_row;
  memcpy(&raw_top_row, &tmp_top_row, sizeof(tmp_top_row));
  if (raw_top_row != 0) {
    _internal_set_top_row(from._internal_top_row());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_left_col = from._internal_left_col();
  uint32_t raw_left_col;
  memcpy(&raw_left_col, &tmp_left_col, sizeof(tmp_left_col));
  if (raw_left_col != 0) {
    _internal_set_left_col(from._internal_left_col());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bottom_row = from._internal_bottom_row();
  uint32_t raw_bottom_row;
  memcpy(&raw_bottom_row, &tmp_bottom_row, sizeof(tmp_bottom_row));
  if (raw_bottom_row != 0) {
    _internal_set_bottom_row(from._internal_bottom_row());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_right_col = from._internal_right_col();
  uint32_t raw_right_col;
  memcpy(&raw_right_col, &tmp_right_col, sizeof(tmp_right_col));
  if (raw_right_col != 0) {
    _internal_set_right_col(from._internal_right_col());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  return true;
}

void BoundingBox::InternalSwap(BoundingBox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox, right_col_)
      + sizeof(BoundingBox::right_col_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox, top_row_)>(
          reinterpret_cast<char*>(&top_row_),
          reinterpret_cast<char*>(&other->top_row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[25]);
}

// ===================================================================

class FrameInfo::_Internal {
 public:
};

FrameInfo::FrameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.FrameInfo)
}
FrameInfo::FrameInfo(const FrameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&index_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.FrameInfo)
}

inline void FrameInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&index_)) + sizeof(time_));
}

FrameInfo::~FrameInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.FrameInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FrameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FrameInfo::ArenaDtor(void* object) {
  FrameInfo* _this = reinterpret_cast< FrameInfo* >(object);
  (void)_this;
}
void FrameInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.FrameInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&index_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.FrameInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // uint32 time = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.FrameInfo)
  return target;
}

size_t FrameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.FrameInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 time = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FrameInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameInfo::GetClassData() const { return &_class_data_; }

void FrameInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FrameInfo *>(to)->MergeFrom(
      static_cast<const FrameInfo &>(from));
}


void FrameInfo::MergeFrom(const FrameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.FrameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameInfo::CopyFrom(const FrameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.FrameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameInfo::IsInitialized() const {
  return true;
}

void FrameInfo::InternalSwap(FrameInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameInfo, time_)
      + sizeof(FrameInfo::time_)
      - PROTOBUF_FIELD_OFFSET(FrameInfo, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[26]);
}

// ===================================================================

class Frame::_Internal {
 public:
  static const ::clarifai::api::FrameInfo& frame_info(const Frame* msg);
  static const ::clarifai::api::Data& data(const Frame* msg);
};

const ::clarifai::api::FrameInfo&
Frame::_Internal::frame_info(const Frame* msg) {
  return *msg->frame_info_;
}
const ::clarifai::api::Data&
Frame::_Internal::data(const Frame* msg) {
  return *msg->data_;
}
Frame::Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_frame_info()) {
    frame_info_ = new ::clarifai::api::FrameInfo(*from.frame_info_);
  } else {
    frame_info_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Frame)
}

inline void Frame::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frame_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&frame_info_)) + sizeof(data_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:clarifai.api.Frame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete frame_info_;
  if (this != internal_default_instance()) delete data_;
}

void Frame::ArenaDtor(void* object) {
  Frame* _this = reinterpret_cast< Frame* >(object);
  (void)_this;
}
void Frame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Frame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && frame_info_ != nullptr) {
    delete frame_info_;
  }
  frame_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.FrameInfo frame_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Frame.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Frame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Frame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.FrameInfo frame_info = 1;
  if (this->_internal_has_frame_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::frame_info(this), target, stream);
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Frame.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Frame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 3;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.FrameInfo frame_info = 1;
  if (this->_internal_has_frame_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_info_);
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Frame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frame::GetClassData() const { return &_class_data_; }

void Frame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Frame *>(to)->MergeFrom(
      static_cast<const Frame &>(from));
}


void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_frame_info()) {
    _internal_mutable_frame_info()->::clarifai::api::FrameInfo::MergeFrom(from._internal_frame_info());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frame, data_)
      + sizeof(Frame::data_)
      - PROTOBUF_FIELD_OFFSET(Frame, frame_info_)>(
          reinterpret_cast<char*>(&frame_info_),
          reinterpret_cast<char*>(&other->frame_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[27]);
}

// ===================================================================

class Mask::_Internal {
 public:
  static const ::clarifai::api::Image& image(const Mask* msg);
};

const ::clarifai::api::Image&
Mask::_Internal::image(const Mask* msg) {
  return *msg->image_;
}
Mask::Mask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Mask)
}
Mask::Mask(const Mask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::clarifai::api::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Mask)
}

inline void Mask::SharedCtor() {
image_ = nullptr;
}

Mask::~Mask() {
  // @@protoc_insertion_point(destructor:clarifai.api.Mask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Mask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void Mask::ArenaDtor(void* object) {
  Mask* _this = reinterpret_cast< Mask* >(object);
  (void)_this;
}
void Mask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mask::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Mask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Image image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Mask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Image image = 2;
  if (this->_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::image(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Mask)
  return target;
}

size_t Mask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Mask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Image image = 2;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Mask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mask::GetClassData() const { return &_class_data_; }

void Mask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Mask *>(to)->MergeFrom(
      static_cast<const Mask &>(from));
}


void Mask::MergeFrom(const Mask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Mask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _internal_mutable_image()->::clarifai::api::Image::MergeFrom(from._internal_image());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mask::CopyFrom(const Mask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Mask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mask::IsInitialized() const {
  return true;
}

void Mask::InternalSwap(Mask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[28]);
}

// ===================================================================

class Polygon::_Internal {
 public:
};

Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Polygon)
}

inline void Polygon::SharedCtor() {
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:clarifai.api.Polygon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Polygon::ArenaDtor(void* object) {
  Polygon* _this = reinterpret_cast< Polygon* >(object);
  (void)_this;
}
void Polygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Polygon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.Point points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Polygon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Polygon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Polygon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Point points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Polygon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Polygon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Polygon::GetClassData() const { return &_class_data_; }

void Polygon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Polygon *>(to)->MergeFrom(
      static_cast<const Polygon &>(from));
}


void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[29]);
}

// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&row_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Point)
}

inline void Point::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&row_)) + sizeof(z_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:clarifai.api.Point)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&row_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_row = this->_internal_row();
  uint32_t raw_row;
  memcpy(&raw_row, &tmp_row, sizeof(tmp_row));
  if (raw_row != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_row(), target);
  }

  // float col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_col = this->_internal_col();
  uint32_t raw_col;
  memcpy(&raw_col, &tmp_col, sizeof(tmp_col));
  if (raw_col != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_col(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_row = this->_internal_row();
  uint32_t raw_row;
  memcpy(&raw_row, &tmp_row, sizeof(tmp_row));
  if (raw_row != 0) {
    total_size += 1 + 4;
  }

  // float col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_col = this->_internal_col();
  uint32_t raw_col;
  memcpy(&raw_col, &tmp_col, sizeof(tmp_col));
  if (raw_col != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }

void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point *>(to)->MergeFrom(
      static_cast<const Point &>(from));
}


void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Point)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_row = from._internal_row();
  uint32_t raw_row;
  memcpy(&raw_row, &tmp_row, sizeof(tmp_row));
  if (raw_row != 0) {
    _internal_set_row(from._internal_row());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_col = from._internal_col();
  uint32_t raw_col;
  memcpy(&raw_col, &tmp_col, sizeof(tmp_col));
  if (raw_col != 0) {
    _internal_set_col(from._internal_col());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, z_)
      + sizeof(Point::z_)
      - PROTOBUF_FIELD_OFFSET(Point, row_)>(
          reinterpret_cast<char*>(&row_),
          reinterpret_cast<char*>(&other->row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[30]);
}

// ===================================================================

class Span::_Internal {
 public:
};

Span::Span(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Span)
}
Span::Span(const Span& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  raw_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    raw_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw_text().empty()) {
    raw_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_raw_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&char_start_, &from.char_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&char_end_) -
    reinterpret_cast<char*>(&char_start_)) + sizeof(char_end_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Span)
}

inline void Span::SharedCtor() {
raw_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  raw_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&char_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&char_end_) -
    reinterpret_cast<char*>(&char_start_)) + sizeof(char_end_));
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:clarifai.api.Span)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Span::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  raw_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Span::ArenaDtor(void* object) {
  Span* _this = reinterpret_cast< Span* >(object);
  (void)_this;
}
void Span::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Span::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Span::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Span)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_text_.ClearToEmpty();
  ::memset(&char_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&char_end_) -
      reinterpret_cast<char*>(&char_start_)) + sizeof(char_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Span::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          char_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          char_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string raw_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_raw_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Span.raw_text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Span::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Span)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_char_start(), target);
  }

  // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_char_end(), target);
  }

  // string raw_text = 3;
  if (!this->_internal_raw_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_text().data(), static_cast<int>(this->_internal_raw_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Span.raw_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_raw_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Span)
  return target;
}

size_t Span::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Span)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string raw_text = 3;
  if (!this->_internal_raw_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_text());
  }

  // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_char_start());
  }

  // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_char_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Span::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Span::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Span::GetClassData() const { return &_class_data_; }

void Span::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Span *>(to)->MergeFrom(
      static_cast<const Span &>(from));
}


void Span::MergeFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Span)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_raw_text().empty()) {
    _internal_set_raw_text(from._internal_raw_text());
  }
  if (from._internal_char_start() != 0) {
    _internal_set_char_start(from._internal_char_start());
  }
  if (from._internal_char_end() != 0) {
    _internal_set_char_end(from._internal_char_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Span::CopyFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {
  return true;
}

void Span::InternalSwap(Span* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &raw_text_, lhs_arena,
      &other->raw_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Span, char_end_)
      + sizeof(Span::char_end_)
      - PROTOBUF_FIELD_OFFSET(Span, char_start_)>(
          reinterpret_cast<char*>(&char_start_),
          reinterpret_cast<char*>(&other->char_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Span::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[31]);
}

// ===================================================================

class Token::_Internal {
 public:
};

Token::Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Token)
}
Token::Token(const Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  raw_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    raw_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw_text().empty()) {
    raw_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_raw_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&char_start_, &from.char_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&char_end_) -
    reinterpret_cast<char*>(&char_start_)) + sizeof(char_end_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Token)
}

inline void Token::SharedCtor() {
raw_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  raw_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&char_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&char_end_) -
    reinterpret_cast<char*>(&char_start_)) + sizeof(char_end_));
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:clarifai.api.Token)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Token::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  raw_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Token::ArenaDtor(void* object) {
  Token* _this = reinterpret_cast< Token* >(object);
  (void)_this;
}
void Token::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Token)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_text_.ClearToEmpty();
  ::memset(&char_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&char_end_) -
      reinterpret_cast<char*>(&char_start_)) + sizeof(char_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Token::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          char_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          char_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string raw_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_raw_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Token.raw_text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Token::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Token)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_char_start(), target);
  }

  // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_char_end(), target);
  }

  // string raw_text = 3;
  if (!this->_internal_raw_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_text().data(), static_cast<int>(this->_internal_raw_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Token.raw_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_raw_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Token)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string raw_text = 3;
  if (!this->_internal_raw_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_text());
  }

  // uint32 char_start = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_char_start());
  }

  // uint32 char_end = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_char_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_char_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Token::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Token::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Token::GetClassData() const { return &_class_data_; }

void Token::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Token *>(to)->MergeFrom(
      static_cast<const Token &>(from));
}


void Token::MergeFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Token)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_raw_text().empty()) {
    _internal_set_raw_text(from._internal_raw_text());
  }
  if (from._internal_char_start() != 0) {
    _internal_set_char_start(from._internal_char_start());
  }
  if (from._internal_char_end() != 0) {
    _internal_set_char_end(from._internal_char_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::InternalSwap(Token* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &raw_text_, lhs_arena,
      &other->raw_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Token, char_end_)
      + sizeof(Token::char_end_)
      - PROTOBUF_FIELD_OFFSET(Token, char_start_)>(
          reinterpret_cast<char*>(&char_start_),
          reinterpret_cast<char*>(&other->char_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Token::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[32]);
}

// ===================================================================

class Embedding::_Internal {
 public:
};

Embedding::Embedding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vector_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Embedding)
}
Embedding::Embedding(const Embedding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vector_(from.vector_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_dimensions_ = from.num_dimensions_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Embedding)
}

inline void Embedding::SharedCtor() {
num_dimensions_ = 0u;
}

Embedding::~Embedding() {
  // @@protoc_insertion_point(destructor:clarifai.api.Embedding)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Embedding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Embedding::ArenaDtor(void* object) {
  Embedding* _this = reinterpret_cast< Embedding* >(object);
  (void)_this;
}
void Embedding::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Embedding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Embedding::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Embedding)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_.Clear();
  num_dimensions_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Embedding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float vector = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_vector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_dimensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          num_dimensions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Embedding::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Embedding)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float vector = 1 [packed = true];
  if (this->_internal_vector_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vector(), target);
  }

  // uint32 num_dimensions = 2;
  if (this->_internal_num_dimensions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_dimensions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Embedding)
  return target;
}

size_t Embedding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Embedding)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vector = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vector_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // uint32 num_dimensions = 2;
  if (this->_internal_num_dimensions() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_dimensions());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Embedding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Embedding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Embedding::GetClassData() const { return &_class_data_; }

void Embedding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Embedding *>(to)->MergeFrom(
      static_cast<const Embedding &>(from));
}


void Embedding::MergeFrom(const Embedding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Embedding)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vector_.MergeFrom(from.vector_);
  if (from._internal_num_dimensions() != 0) {
    _internal_set_num_dimensions(from._internal_num_dimensions());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Embedding::CopyFrom(const Embedding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Embedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Embedding::IsInitialized() const {
  return true;
}

void Embedding::InternalSwap(Embedding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vector_.InternalSwap(&other->vector_);
  swap(num_dimensions_, other->num_dimensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Embedding::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[33]);
}

// ===================================================================

class GeoPoint::_Internal {
 public:
};

GeoPoint::GeoPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GeoPoint)
}
GeoPoint::GeoPoint(const GeoPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GeoPoint)
}

inline void GeoPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&longitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
}

GeoPoint::~GeoPoint() {
  // @@protoc_insertion_point(destructor:clarifai.api.GeoPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GeoPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GeoPoint::ArenaDtor(void* object) {
  GeoPoint* _this = reinterpret_cast< GeoPoint* >(object);
  (void)_this;
}
void GeoPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GeoPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GeoPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float longitude = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float latitude = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GeoPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GeoPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float longitude = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_longitude(), target);
  }

  // float latitude = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_latitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GeoPoint)
  return target;
}

size_t GeoPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GeoPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float longitude = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 4;
  }

  // float latitude = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GeoPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GeoPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GeoPoint::GetClassData() const { return &_class_data_; }

void GeoPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GeoPoint *>(to)->MergeFrom(
      static_cast<const GeoPoint &>(from));
}


void GeoPoint::MergeFrom(const GeoPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GeoPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = from._internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = from._internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GeoPoint::CopyFrom(const GeoPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GeoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPoint::IsInitialized() const {
  return true;
}

void GeoPoint::InternalSwap(GeoPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoPoint, latitude_)
      + sizeof(GeoPoint::latitude_)
      - PROTOBUF_FIELD_OFFSET(GeoPoint, longitude_)>(
          reinterpret_cast<char*>(&longitude_),
          reinterpret_cast<char*>(&other->longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[34]);
}

// ===================================================================

class GeoLimit::_Internal {
 public:
};

GeoLimit::GeoLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GeoLimit)
}
GeoLimit::GeoLimit(const GeoLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GeoLimit)
}

inline void GeoLimit::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = 0;
}

GeoLimit::~GeoLimit() {
  // @@protoc_insertion_point(destructor:clarifai.api.GeoLimit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GeoLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GeoLimit::ArenaDtor(void* object) {
  GeoLimit* _this = reinterpret_cast< GeoLimit* >(object);
  (void)_this;
}
void GeoLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GeoLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GeoLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GeoLimit.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float value = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GeoLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GeoLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GeoLimit.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // float value = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GeoLimit)
  return target;
}

size_t GeoLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GeoLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // float value = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GeoLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GeoLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GeoLimit::GetClassData() const { return &_class_data_; }

void GeoLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GeoLimit *>(to)->MergeFrom(
      static_cast<const GeoLimit &>(from));
}


void GeoLimit::MergeFrom(const GeoLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GeoLimit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GeoLimit::CopyFrom(const GeoLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GeoLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoLimit::IsInitialized() const {
  return true;
}

void GeoLimit::InternalSwap(GeoLimit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoLimit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[35]);
}

// ===================================================================

class GeoBoxedPoint::_Internal {
 public:
  static const ::clarifai::api::GeoPoint& geo_point(const GeoBoxedPoint* msg);
};

const ::clarifai::api::GeoPoint&
GeoBoxedPoint::_Internal::geo_point(const GeoBoxedPoint* msg) {
  return *msg->geo_point_;
}
GeoBoxedPoint::GeoBoxedPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GeoBoxedPoint)
}
GeoBoxedPoint::GeoBoxedPoint(const GeoBoxedPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_geo_point()) {
    geo_point_ = new ::clarifai::api::GeoPoint(*from.geo_point_);
  } else {
    geo_point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GeoBoxedPoint)
}

inline void GeoBoxedPoint::SharedCtor() {
geo_point_ = nullptr;
}

GeoBoxedPoint::~GeoBoxedPoint() {
  // @@protoc_insertion_point(destructor:clarifai.api.GeoBoxedPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GeoBoxedPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete geo_point_;
}

void GeoBoxedPoint::ArenaDtor(void* object) {
  GeoBoxedPoint* _this = reinterpret_cast< GeoBoxedPoint* >(object);
  (void)_this;
}
void GeoBoxedPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoBoxedPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GeoBoxedPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GeoBoxedPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && geo_point_ != nullptr) {
    delete geo_point_;
  }
  geo_point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoBoxedPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.GeoPoint geo_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GeoBoxedPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GeoBoxedPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.GeoPoint geo_point = 1;
  if (this->_internal_has_geo_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::geo_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GeoBoxedPoint)
  return target;
}

size_t GeoBoxedPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GeoBoxedPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.GeoPoint geo_point = 1;
  if (this->_internal_has_geo_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_point_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GeoBoxedPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GeoBoxedPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GeoBoxedPoint::GetClassData() const { return &_class_data_; }

void GeoBoxedPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GeoBoxedPoint *>(to)->MergeFrom(
      static_cast<const GeoBoxedPoint &>(from));
}


void GeoBoxedPoint::MergeFrom(const GeoBoxedPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GeoBoxedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_geo_point()) {
    _internal_mutable_geo_point()->::clarifai::api::GeoPoint::MergeFrom(from._internal_geo_point());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GeoBoxedPoint::CopyFrom(const GeoBoxedPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GeoBoxedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoBoxedPoint::IsInitialized() const {
  return true;
}

void GeoBoxedPoint::InternalSwap(GeoBoxedPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(geo_point_, other->geo_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoBoxedPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[36]);
}

// ===================================================================

class Geo::_Internal {
 public:
  static const ::clarifai::api::GeoPoint& geo_point(const Geo* msg);
  static const ::clarifai::api::GeoLimit& geo_limit(const Geo* msg);
};

const ::clarifai::api::GeoPoint&
Geo::_Internal::geo_point(const Geo* msg) {
  return *msg->geo_point_;
}
const ::clarifai::api::GeoLimit&
Geo::_Internal::geo_limit(const Geo* msg) {
  return *msg->geo_limit_;
}
Geo::Geo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  geo_box_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Geo)
}
Geo::Geo(const Geo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      geo_box_(from.geo_box_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_geo_point()) {
    geo_point_ = new ::clarifai::api::GeoPoint(*from.geo_point_);
  } else {
    geo_point_ = nullptr;
  }
  if (from._internal_has_geo_limit()) {
    geo_limit_ = new ::clarifai::api::GeoLimit(*from.geo_limit_);
  } else {
    geo_limit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Geo)
}

inline void Geo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&geo_point_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&geo_limit_) -
    reinterpret_cast<char*>(&geo_point_)) + sizeof(geo_limit_));
}

Geo::~Geo() {
  // @@protoc_insertion_point(destructor:clarifai.api.Geo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Geo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete geo_point_;
  if (this != internal_default_instance()) delete geo_limit_;
}

void Geo::ArenaDtor(void* object) {
  Geo* _this = reinterpret_cast< Geo* >(object);
  (void)_this;
}
void Geo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Geo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Geo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Geo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geo_box_.Clear();
  if (GetArenaForAllocation() == nullptr && geo_point_ != nullptr) {
    delete geo_point_;
  }
  geo_point_ = nullptr;
  if (GetArenaForAllocation() == nullptr && geo_limit_ != nullptr) {
    delete geo_limit_;
  }
  geo_limit_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Geo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.GeoPoint geo_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.GeoLimit geo_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_limit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.GeoBoxedPoint geo_box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geo_box(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Geo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Geo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.GeoPoint geo_point = 1;
  if (this->_internal_has_geo_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::geo_point(this), target, stream);
  }

  // .clarifai.api.GeoLimit geo_limit = 2;
  if (this->_internal_has_geo_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::geo_limit(this), target, stream);
  }

  // repeated .clarifai.api.GeoBoxedPoint geo_box = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_geo_box_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_geo_box(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Geo)
  return target;
}

size_t Geo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Geo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.GeoBoxedPoint geo_box = 3;
  total_size += 1UL * this->_internal_geo_box_size();
  for (const auto& msg : this->geo_box_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.GeoPoint geo_point = 1;
  if (this->_internal_has_geo_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_point_);
  }

  // .clarifai.api.GeoLimit geo_limit = 2;
  if (this->_internal_has_geo_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_limit_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Geo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Geo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Geo::GetClassData() const { return &_class_data_; }

void Geo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Geo *>(to)->MergeFrom(
      static_cast<const Geo &>(from));
}


void Geo::MergeFrom(const Geo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Geo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  geo_box_.MergeFrom(from.geo_box_);
  if (from._internal_has_geo_point()) {
    _internal_mutable_geo_point()->::clarifai::api::GeoPoint::MergeFrom(from._internal_geo_point());
  }
  if (from._internal_has_geo_limit()) {
    _internal_mutable_geo_limit()->::clarifai::api::GeoLimit::MergeFrom(from._internal_geo_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Geo::CopyFrom(const Geo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geo::IsInitialized() const {
  return true;
}

void Geo::InternalSwap(Geo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  geo_box_.InternalSwap(&other->geo_box_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Geo, geo_limit_)
      + sizeof(Geo::geo_limit_)
      - PROTOBUF_FIELD_OFFSET(Geo, geo_point_)>(
          reinterpret_cast<char*>(&geo_point_),
          reinterpret_cast<char*>(&other->geo_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Geo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[37]);
}

// ===================================================================

class Image::_Internal {
 public:
  static const ::clarifai::api::HostedURL& hosted(const Image* msg);
  static const ::clarifai::api::ImageInfo& image_info(const Image* msg);
};

const ::clarifai::api::HostedURL&
Image::_Internal::hosted(const Image* msg) {
  return *msg->hosted_;
}
const ::clarifai::api::ImageInfo&
Image::_Internal::image_info(const Image* msg) {
  return *msg->image_info_;
}
Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  base64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base64().empty()) {
    base64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_base64(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_hosted()) {
    hosted_ = new ::clarifai::api::HostedURL(*from.hosted_);
  } else {
    hosted_ = nullptr;
  }
  if (from._internal_has_image_info()) {
    image_info_ = new ::clarifai::api::ImageInfo(*from.image_info_);
  } else {
    image_info_ = nullptr;
  }
  allow_duplicate_url_ = from.allow_duplicate_url_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Image)
}

inline void Image::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
base64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hosted_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_duplicate_url_) -
    reinterpret_cast<char*>(&hosted_)) + sizeof(allow_duplicate_url_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:clarifai.api.Image)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base64_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hosted_;
  if (this != internal_default_instance()) delete image_info_;
}

void Image::ArenaDtor(void* object) {
  Image* _this = reinterpret_cast< Image* >(object);
  (void)_this;
}
void Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  base64_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && hosted_ != nullptr) {
    delete hosted_;
  }
  hosted_ = nullptr;
  if (GetArenaForAllocation() == nullptr && image_info_ != nullptr) {
    delete image_info_;
  }
  image_info_ = nullptr;
  allow_duplicate_url_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Image.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes base64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_base64();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_duplicate_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          allow_duplicate_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.HostedURL hosted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hosted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ImageInfo image_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Image.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // bytes base64 = 2;
  if (!this->_internal_base64().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_base64(), target);
  }

  // bool allow_duplicate_url = 4;
  if (this->_internal_allow_duplicate_url() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_duplicate_url(), target);
  }

  // .clarifai.api.HostedURL hosted = 5;
  if (this->_internal_has_hosted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hosted(this), target, stream);
  }

  // .clarifai.api.ImageInfo image_info = 6;
  if (this->_internal_has_image_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::image_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // bytes base64 = 2;
  if (!this->_internal_base64().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_base64());
  }

  // .clarifai.api.HostedURL hosted = 5;
  if (this->_internal_has_hosted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hosted_);
  }

  // .clarifai.api.ImageInfo image_info = 6;
  if (this->_internal_has_image_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_info_);
  }

  // bool allow_duplicate_url = 4;
  if (this->_internal_allow_duplicate_url() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Image::GetClassData() const { return &_class_data_; }

void Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Image *>(to)->MergeFrom(
      static_cast<const Image &>(from));
}


void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Image)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_base64().empty()) {
    _internal_set_base64(from._internal_base64());
  }
  if (from._internal_has_hosted()) {
    _internal_mutable_hosted()->::clarifai::api::HostedURL::MergeFrom(from._internal_hosted());
  }
  if (from._internal_has_image_info()) {
    _internal_mutable_image_info()->::clarifai::api::ImageInfo::MergeFrom(from._internal_image_info());
  }
  if (from._internal_allow_duplicate_url() != 0) {
    _internal_set_allow_duplicate_url(from._internal_allow_duplicate_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &base64_, lhs_arena,
      &other->base64_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Image, allow_duplicate_url_)
      + sizeof(Image::allow_duplicate_url_)
      - PROTOBUF_FIELD_OFFSET(Image, hosted_)>(
          reinterpret_cast<char*>(&hosted_),
          reinterpret_cast<char*>(&other->hosted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[38]);
}

// ===================================================================

class ImageInfo::_Internal {
 public:
};

ImageInfo::ImageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ImageInfo)
}
ImageInfo::ImageInfo(const ImageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format().empty()) {
    format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_format(), 
      GetArenaForAllocation());
  }
  color_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    color_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_color_mode().empty()) {
    color_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color_mode(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ImageInfo)
}

inline void ImageInfo::SharedCtor() {
format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
color_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  color_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

ImageInfo::~ImageInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.ImageInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageInfo::ArenaDtor(void* object) {
  ImageInfo* _this = reinterpret_cast< ImageInfo* >(object);
  (void)_this;
}
void ImageInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ImageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  format_.ClearToEmpty();
  color_mode_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ImageInfo.format"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string color_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_color_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ImageInfo.color_mode"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ImageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // string format = 3;
  if (!this->_internal_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ImageInfo.format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_format(), target);
  }

  // string color_mode = 4;
  if (!this->_internal_color_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color_mode().data(), static_cast<int>(this->_internal_color_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ImageInfo.color_mode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_color_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ImageInfo)
  return target;
}

size_t ImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ImageInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string format = 3;
  if (!this->_internal_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  // string color_mode = 4;
  if (!this->_internal_color_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color_mode());
  }

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageInfo::GetClassData() const { return &_class_data_; }

void ImageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImageInfo *>(to)->MergeFrom(
      static_cast<const ImageInfo &>(from));
}


void ImageInfo::MergeFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_format().empty()) {
    _internal_set_format(from._internal_format());
  }
  if (!from._internal_color_mode().empty()) {
    _internal_set_color_mode(from._internal_color_mode());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageInfo::CopyFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfo::IsInitialized() const {
  return true;
}

void ImageInfo::InternalSwap(ImageInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &format_, lhs_arena,
      &other->format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &color_mode_, lhs_arena,
      &other->color_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageInfo, height_)
      + sizeof(ImageInfo::height_)
      - PROTOBUF_FIELD_OFFSET(ImageInfo, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[39]);
}

// ===================================================================

class HostedURL::_Internal {
 public:
};

HostedURL::HostedURL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sizes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.HostedURL)
}
HostedURL::HostedURL(const HostedURL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sizes_(from.sizes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_suffix().empty()) {
    suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_suffix(), 
      GetArenaForAllocation());
  }
  crossorigin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    crossorigin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_crossorigin().empty()) {
    crossorigin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_crossorigin(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.HostedURL)
}

inline void HostedURL::SharedCtor() {
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
crossorigin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  crossorigin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HostedURL::~HostedURL() {
  // @@protoc_insertion_point(destructor:clarifai.api.HostedURL)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HostedURL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crossorigin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostedURL::ArenaDtor(void* object) {
  HostedURL* _this = reinterpret_cast< HostedURL* >(object);
  (void)_this;
}
void HostedURL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostedURL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostedURL::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.HostedURL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sizes_.Clear();
  prefix_.ClearToEmpty();
  suffix_.ClearToEmpty();
  crossorigin_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostedURL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.HostedURL.prefix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string suffix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_suffix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.HostedURL.suffix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string sizes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sizes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.HostedURL.sizes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string crossorigin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_crossorigin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.HostedURL.crossorigin"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostedURL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.HostedURL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (!this->_internal_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.HostedURL.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // string suffix = 2;
  if (!this->_internal_suffix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_suffix().data(), static_cast<int>(this->_internal_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.HostedURL.suffix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_suffix(), target);
  }

  // repeated string sizes = 3;
  for (int i = 0, n = this->_internal_sizes_size(); i < n; i++) {
    const auto& s = this->_internal_sizes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.HostedURL.sizes");
    target = stream->WriteString(3, s, target);
  }

  // string crossorigin = 4;
  if (!this->_internal_crossorigin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_crossorigin().data(), static_cast<int>(this->_internal_crossorigin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.HostedURL.crossorigin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_crossorigin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.HostedURL)
  return target;
}

size_t HostedURL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.HostedURL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sizes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sizes_.size());
  for (int i = 0, n = sizes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sizes_.Get(i));
  }

  // string prefix = 1;
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string suffix = 2;
  if (!this->_internal_suffix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_suffix());
  }

  // string crossorigin = 4;
  if (!this->_internal_crossorigin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_crossorigin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostedURL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HostedURL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostedURL::GetClassData() const { return &_class_data_; }

void HostedURL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HostedURL *>(to)->MergeFrom(
      static_cast<const HostedURL &>(from));
}


void HostedURL::MergeFrom(const HostedURL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.HostedURL)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sizes_.MergeFrom(from.sizes_);
  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (!from._internal_suffix().empty()) {
    _internal_set_suffix(from._internal_suffix());
  }
  if (!from._internal_crossorigin().empty()) {
    _internal_set_crossorigin(from._internal_crossorigin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostedURL::CopyFrom(const HostedURL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.HostedURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostedURL::IsInitialized() const {
  return true;
}

void HostedURL::InternalSwap(HostedURL* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sizes_.InternalSwap(&other->sizes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &suffix_, lhs_arena,
      &other->suffix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &crossorigin_, lhs_arena,
      &other->crossorigin_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HostedURL::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[40]);
}

// ===================================================================

class Input::_Internal {
 public:
  static const ::clarifai::api::Data& data(const Input* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Input* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Input* msg);
  static const ::clarifai::api::status::Status& status(const Input* msg);
};

const ::clarifai::api::Data&
Input::_Internal::data(const Input* msg) {
  return *msg->data_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Input::_Internal::created_at(const Input* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Input::_Internal::modified_at(const Input* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::status::Status&
Input::_Internal::status(const Input* msg) {
  return *msg->status_;
}
void Input::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Input::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void Input::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
Input::Input(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dataset_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Input)
}
Input::Input(const Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dataset_ids_(from.dataset_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Input)
}

inline void Input::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&data_)) + sizeof(status_));
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:clarifai.api.Input)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Input::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete status_;
}

void Input::ArenaDtor(void* object) {
  Input* _this = reinterpret_cast< Input* >(object);
  (void)_this;
}
void Input::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Input)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_ids_.Clear();
  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Input.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string dataset_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dataset_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Input.dataset_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Input::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Input)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Input.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 5;
  if (this->_internal_has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::modified_at(this), target, stream);
  }

  // .clarifai.api.status.Status status = 6;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::status(this), target, stream);
  }

  // repeated string dataset_ids = 7;
  for (int i = 0, n = this->_internal_dataset_ids_size(); i < n; i++) {
    const auto& s = this->_internal_dataset_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Input.dataset_ids");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Input)
  return target;
}

size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Input)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dataset_ids = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dataset_ids_.size());
  for (int i = 0, n = dataset_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dataset_ids_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 5;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.status.Status status = 6;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Input::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Input::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Input::GetClassData() const { return &_class_data_; }

void Input::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Input *>(to)->MergeFrom(
      static_cast<const Input &>(from));
}


void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Input)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dataset_ids_.MergeFrom(from.dataset_ids_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  return true;
}

void Input::InternalSwap(Input* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dataset_ids_.InternalSwap(&other->dataset_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Input, status_)
      + sizeof(Input::status_)
      - PROTOBUF_FIELD_OFFSET(Input, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Input::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[41]);
}

// ===================================================================

class InputCount::_Internal {
 public:
};

InputCount::InputCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.InputCount)
}
InputCount::InputCount(const InputCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&processed_, &from.processed_,
    static_cast<size_t>(reinterpret_cast<char*>(&reindexing_) -
    reinterpret_cast<char*>(&processed_)) + sizeof(reindexing_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.InputCount)
}

inline void InputCount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&processed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reindexing_) -
    reinterpret_cast<char*>(&processed_)) + sizeof(reindexing_));
}

InputCount::~InputCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.InputCount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InputCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InputCount::ArenaDtor(void* object) {
  InputCount* _this = reinterpret_cast< InputCount* >(object);
  (void)_this;
}
void InputCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InputCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.InputCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&processed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reindexing_) -
      reinterpret_cast<char*>(&processed_)) + sizeof(reindexing_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 processed = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_process = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 errors = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 processing = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          processing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reindexed = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          reindexed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_reindex = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          to_reindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reindex_errors = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          reindex_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reindexing = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          reindexing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.InputCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 processed = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_processed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_processed(), target);
  }

  // uint32 to_process = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_to_process() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to_process(), target);
  }

  // uint32 errors = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_errors(), target);
  }

  // uint32 processing = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_processing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_processing(), target);
  }

  // uint32 reindexed = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_reindexed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reindexed(), target);
  }

  // uint32 to_reindex = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_to_reindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_to_reindex(), target);
  }

  // uint32 reindex_errors = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_reindex_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_reindex_errors(), target);
  }

  // uint32 reindexing = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_reindexing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_reindexing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.InputCount)
  return target;
}

size_t InputCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.InputCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 processed = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_processed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_processed());
  }

  // uint32 to_process = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_to_process() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_to_process());
  }

  // uint32 errors = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_errors() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_errors());
  }

  // uint32 processing = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_processing() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_processing());
  }

  // uint32 reindexed = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_reindexed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_reindexed());
  }

  // uint32 to_reindex = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_to_reindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_to_reindex());
  }

  // uint32 reindex_errors = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_reindex_errors() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_reindex_errors());
  }

  // uint32 reindexing = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_reindexing() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_reindexing());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InputCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputCount::GetClassData() const { return &_class_data_; }

void InputCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InputCount *>(to)->MergeFrom(
      static_cast<const InputCount &>(from));
}


void InputCount::MergeFrom(const InputCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.InputCount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_processed() != 0) {
    _internal_set_processed(from._internal_processed());
  }
  if (from._internal_to_process() != 0) {
    _internal_set_to_process(from._internal_to_process());
  }
  if (from._internal_errors() != 0) {
    _internal_set_errors(from._internal_errors());
  }
  if (from._internal_processing() != 0) {
    _internal_set_processing(from._internal_processing());
  }
  if (from._internal_reindexed() != 0) {
    _internal_set_reindexed(from._internal_reindexed());
  }
  if (from._internal_to_reindex() != 0) {
    _internal_set_to_reindex(from._internal_to_reindex());
  }
  if (from._internal_reindex_errors() != 0) {
    _internal_set_reindex_errors(from._internal_reindex_errors());
  }
  if (from._internal_reindexing() != 0) {
    _internal_set_reindexing(from._internal_reindexing());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputCount::CopyFrom(const InputCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.InputCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputCount::IsInitialized() const {
  return true;
}

void InputCount::InternalSwap(InputCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputCount, reindexing_)
      + sizeof(InputCount::reindexing_)
      - PROTOBUF_FIELD_OFFSET(InputCount, processed_)>(
          reinterpret_cast<char*>(&processed_),
          reinterpret_cast<char*>(&other->processed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputCount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[42]);
}

// ===================================================================

class Dataset::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Dataset* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Dataset* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const Dataset* msg);
  static const ::clarifai::api::Visibility& visibility(const Dataset* msg);
  static const ::clarifai::api::AnnotationFilter& default_annotation_filter(const Dataset* msg);
  static const ::clarifai::api::DatasetVersion& version(const Dataset* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Dataset::_Internal::created_at(const Dataset* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Dataset::_Internal::modified_at(const Dataset* msg) {
  return *msg->modified_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Dataset::_Internal::metadata(const Dataset* msg) {
  return *msg->metadata_;
}
const ::clarifai::api::Visibility&
Dataset::_Internal::visibility(const Dataset* msg) {
  return *msg->visibility_;
}
const ::clarifai::api::AnnotationFilter&
Dataset::_Internal::default_annotation_filter(const Dataset* msg) {
  return *msg->default_annotation_filter_;
}
const ::clarifai::api::DatasetVersion&
Dataset::_Internal::version(const Dataset* msg) {
  return *msg->version_;
}
void Dataset::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Dataset::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void Dataset::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
Dataset::Dataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Dataset)
}
Dataset::Dataset(const Dataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notes().empty()) {
    notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notes(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  if (from._internal_has_default_annotation_filter()) {
    default_annotation_filter_ = new ::clarifai::api::AnnotationFilter(*from.default_annotation_filter_);
  } else {
    default_annotation_filter_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::clarifai::api::DatasetVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Dataset)
}

inline void Dataset::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(version_));
}

Dataset::~Dataset() {
  // @@protoc_insertion_point(destructor:clarifai.api.Dataset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Dataset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete visibility_;
  if (this != internal_default_instance()) delete default_annotation_filter_;
  if (this != internal_default_instance()) delete version_;
}

void Dataset::ArenaDtor(void* object) {
  Dataset* _this = reinterpret_cast< Dataset* >(object);
  (void)_this;
}
void Dataset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dataset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Dataset::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Dataset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  app_id_.ClearToEmpty();
  user_id_.ClearToEmpty();
  description_.ClearToEmpty();
  notes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && default_annotation_filter_ != nullptr) {
    delete default_annotation_filter_;
  }
  default_annotation_filter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dataset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Dataset.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Dataset.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Dataset.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Dataset.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string notes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Dataset.notes"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AnnotationFilter default_annotation_filter = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_annotation_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersion version = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dataset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Dataset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Dataset.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::modified_at(this), target, stream);
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Dataset.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  // string user_id = 5;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Dataset.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  // string description = 7;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Dataset.description");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_description(), target);
  }

  // .google.protobuf.Struct metadata = 8;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::metadata(this), target, stream);
  }

  // .clarifai.api.Visibility visibility = 9;
  if (this->_internal_has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::visibility(this), target, stream);
  }

  // string notes = 11;
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Dataset.notes");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_notes(), target);
  }

  // .clarifai.api.AnnotationFilter default_annotation_filter = 12;
  if (this->_internal_has_default_annotation_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::default_annotation_filter(this), target, stream);
  }

  // .clarifai.api.DatasetVersion version = 13;
  if (this->_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Dataset)
  return target;
}

size_t Dataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Dataset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 5;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string description = 7;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string notes = 11;
  if (!this->_internal_notes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .google.protobuf.Struct metadata = 8;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .clarifai.api.Visibility visibility = 9;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .clarifai.api.AnnotationFilter default_annotation_filter = 12;
  if (this->_internal_has_default_annotation_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_annotation_filter_);
  }

  // .clarifai.api.DatasetVersion version = 13;
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dataset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Dataset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dataset::GetClassData() const { return &_class_data_; }

void Dataset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Dataset *>(to)->MergeFrom(
      static_cast<const Dataset &>(from));
}


void Dataset::MergeFrom(const Dataset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Dataset)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_notes().empty()) {
    _internal_set_notes(from._internal_notes());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from._internal_has_default_annotation_filter()) {
    _internal_mutable_default_annotation_filter()->::clarifai::api::AnnotationFilter::MergeFrom(from._internal_default_annotation_filter());
  }
  if (from._internal_has_version()) {
    _internal_mutable_version()->::clarifai::api::DatasetVersion::MergeFrom(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dataset::CopyFrom(const Dataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dataset::IsInitialized() const {
  return true;
}

void Dataset::InternalSwap(Dataset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notes_, lhs_arena,
      &other->notes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dataset, version_)
      + sizeof(Dataset::version_)
      - PROTOBUF_FIELD_OFFSET(Dataset, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dataset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[43]);
}

// ===================================================================

class AnnotationFilter::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const AnnotationFilter* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const AnnotationFilter* msg);
  static const ::clarifai::api::Search& saved_search(const AnnotationFilter* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AnnotationFilter::_Internal::created_at(const AnnotationFilter* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AnnotationFilter::_Internal::modified_at(const AnnotationFilter* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::Search&
AnnotationFilter::_Internal::saved_search(const AnnotationFilter* msg) {
  return *msg->saved_search_;
}
void AnnotationFilter::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void AnnotationFilter::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
AnnotationFilter::AnnotationFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AnnotationFilter)
}
AnnotationFilter::AnnotationFilter(const AnnotationFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_saved_search()) {
    saved_search_ = new ::clarifai::api::Search(*from.saved_search_);
  } else {
    saved_search_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AnnotationFilter)
}

inline void AnnotationFilter::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&saved_search_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(saved_search_));
}

AnnotationFilter::~AnnotationFilter() {
  // @@protoc_insertion_point(destructor:clarifai.api.AnnotationFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnnotationFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete saved_search_;
}

void AnnotationFilter::ArenaDtor(void* object) {
  AnnotationFilter* _this = reinterpret_cast< AnnotationFilter* >(object);
  (void)_this;
}
void AnnotationFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnnotationFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnnotationFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AnnotationFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  user_id_.ClearToEmpty();
  app_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && saved_search_ != nullptr) {
    delete saved_search_;
  }
  saved_search_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotationFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AnnotationFilter.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AnnotationFilter.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AnnotationFilter.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search saved_search = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_saved_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnotationFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AnnotationFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AnnotationFilter.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::modified_at(this), target, stream);
  }

  // string user_id = 4;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AnnotationFilter.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  // string app_id = 5;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AnnotationFilter.app_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_app_id(), target);
  }

  // .clarifai.api.Search saved_search = 8;
  if (this->_internal_has_saved_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::saved_search(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AnnotationFilter)
  return target;
}

size_t AnnotationFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AnnotationFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string user_id = 4;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string app_id = 5;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.Search saved_search = 8;
  if (this->_internal_has_saved_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *saved_search_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnotationFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnnotationFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnotationFilter::GetClassData() const { return &_class_data_; }

void AnnotationFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnnotationFilter *>(to)->MergeFrom(
      static_cast<const AnnotationFilter &>(from));
}


void AnnotationFilter::MergeFrom(const AnnotationFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AnnotationFilter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from._internal_has_saved_search()) {
    _internal_mutable_saved_search()->::clarifai::api::Search::MergeFrom(from._internal_saved_search());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnotationFilter::CopyFrom(const AnnotationFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AnnotationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationFilter::IsInitialized() const {
  return true;
}

void AnnotationFilter::InternalSwap(AnnotationFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnnotationFilter, saved_search_)
      + sizeof(AnnotationFilter::saved_search_)
      - PROTOBUF_FIELD_OFFSET(AnnotationFilter, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[44]);
}

// ===================================================================

class DatasetInput::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const DatasetInput* msg);
  static const ::clarifai::api::Input& input(const DatasetInput* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DatasetInput::_Internal::created_at(const DatasetInput* msg) {
  return *msg->created_at_;
}
const ::clarifai::api::Input&
DatasetInput::_Internal::input(const DatasetInput* msg) {
  return *msg->input_;
}
void DatasetInput::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
DatasetInput::DatasetInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DatasetInput)
}
DatasetInput::DatasetInput(const DatasetInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetInput)
}

inline void DatasetInput::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(input_));
}

DatasetInput::~DatasetInput() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DatasetInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete input_;
}

void DatasetInput::ArenaDtor(void* object) {
  DatasetInput* _this = reinterpret_cast< DatasetInput* >(object);
  (void)_this;
}
void DatasetInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DatasetInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DatasetInput::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp created_at = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp created_at = 1;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::created_at(this), target, stream);
  }

  // .clarifai.api.Input input = 2;
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetInput)
  return target;
}

size_t DatasetInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp created_at = 1;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .clarifai.api.Input input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DatasetInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetInput::GetClassData() const { return &_class_data_; }

void DatasetInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DatasetInput *>(to)->MergeFrom(
      static_cast<const DatasetInput &>(from));
}


void DatasetInput::MergeFrom(const DatasetInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetInput::CopyFrom(const DatasetInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetInput::IsInitialized() const {
  return true;
}

void DatasetInput::InternalSwap(DatasetInput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetInput, input_)
      + sizeof(DatasetInput::input_)
      - PROTOBUF_FIELD_OFFSET(DatasetInput, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[45]);
}

// ===================================================================

DatasetVersion_MetricsEntry_DoNotUse::DatasetVersion_MetricsEntry_DoNotUse() {}
DatasetVersion_MetricsEntry_DoNotUse::DatasetVersion_MetricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DatasetVersion_MetricsEntry_DoNotUse::MergeFrom(const DatasetVersion_MetricsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DatasetVersion_MetricsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[46]);
}

// ===================================================================

class DatasetVersion::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const DatasetVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const DatasetVersion* msg);
  static const ::clarifai::api::AnnotationFilterConfig& annotation_filter_config(const DatasetVersion* msg);
  static const ::clarifai::api::status::Status& status(const DatasetVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const DatasetVersion* msg);
  static const ::clarifai::api::Visibility& visibility(const DatasetVersion* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DatasetVersion::_Internal::created_at(const DatasetVersion* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DatasetVersion::_Internal::modified_at(const DatasetVersion* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::AnnotationFilterConfig&
DatasetVersion::_Internal::annotation_filter_config(const DatasetVersion* msg) {
  return *msg->data_config_.annotation_filter_config_;
}
const ::clarifai::api::status::Status&
DatasetVersion::_Internal::status(const DatasetVersion* msg) {
  return *msg->status_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
DatasetVersion::_Internal::metadata(const DatasetVersion* msg) {
  return *msg->metadata_;
}
const ::clarifai::api::Visibility&
DatasetVersion::_Internal::visibility(const DatasetVersion* msg) {
  return *msg->visibility_;
}
void DatasetVersion::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void DatasetVersion::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void DatasetVersion::set_allocated_annotation_filter_config(::clarifai::api::AnnotationFilterConfig* annotation_filter_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data_config();
  if (annotation_filter_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::clarifai::api::AnnotationFilterConfig>::GetOwningArena(annotation_filter_config);
    if (message_arena != submessage_arena) {
      annotation_filter_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation_filter_config, submessage_arena);
    }
    set_has_annotation_filter_config();
    data_config_.annotation_filter_config_ = annotation_filter_config;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DatasetVersion.annotation_filter_config)
}
void DatasetVersion::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void DatasetVersion::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
DatasetVersion::DatasetVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  embed_model_version_ids_(arena),
  metrics_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DatasetVersion)
}
DatasetVersion::DatasetVersion(const DatasetVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      embed_model_version_ids_(from.embed_model_version_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metrics_.MergeFrom(from.metrics_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  clear_has_data_config();
  switch (from.data_config_case()) {
    case kAnnotationFilterConfig: {
      _internal_mutable_annotation_filter_config()->::clarifai::api::AnnotationFilterConfig::MergeFrom(from._internal_annotation_filter_config());
      break;
    }
    case DATA_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetVersion)
}

inline void DatasetVersion::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(visibility_));
clear_has_data_config();
}

DatasetVersion::~DatasetVersion() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DatasetVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete visibility_;
  if (has_data_config()) {
    clear_data_config();
  }
}

void DatasetVersion::ArenaDtor(void* object) {
  DatasetVersion* _this = reinterpret_cast< DatasetVersion* >(object);
  (void)_this;
  _this->metrics_. ~MapField();
}
inline void DatasetVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &DatasetVersion::ArenaDtor);
  }
}
void DatasetVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DatasetVersion::clear_data_config() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.DatasetVersion)
  switch (data_config_case()) {
    case kAnnotationFilterConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_config_.annotation_filter_config_;
      }
      break;
    }
    case DATA_CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_CONFIG_NOT_SET;
}


void DatasetVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  embed_model_version_ids_.Clear();
  metrics_.Clear();
  id_.ClearToEmpty();
  app_id_.ClearToEmpty();
  user_id_.ClearToEmpty();
  dataset_id_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  clear_data_config();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DatasetVersion.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DatasetVersion.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DatasetVersion.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DatasetVersion.dataset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DatasetVersion.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string embed_model_version_ids = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_embed_model_version_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DatasetVersion.embed_model_version_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AnnotationFilterConfig annotation_filter_config = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_filter_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .clarifai.api.DatasetVersionMetrics> metrics = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&metrics_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::modified_at(this), target, stream);
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  // string user_id = 5;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  // string dataset_id = 6;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.dataset_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_dataset_id(), target);
  }

  // .clarifai.api.status.Status status = 8;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::status(this), target, stream);
  }

  // string description = 10;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.description");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_description(), target);
  }

  // .google.protobuf.Struct metadata = 12;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::metadata(this), target, stream);
  }

  // .clarifai.api.Visibility visibility = 13;
  if (this->_internal_has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::visibility(this), target, stream);
  }

  // repeated string embed_model_version_ids = 14;
  for (int i = 0, n = this->_internal_embed_model_version_ids_size(); i < n; i++) {
    const auto& s = this->_internal_embed_model_version_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersion.embed_model_version_ids");
    target = stream->WriteString(14, s, target);
  }

  // .clarifai.api.AnnotationFilterConfig annotation_filter_config = 15;
  if (_internal_has_annotation_filter_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::annotation_filter_config(this), target, stream);
  }

  // map<string, .clarifai.api.DatasetVersionMetrics> metrics = 16;
  if (!this->_internal_metrics().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::clarifai::api::DatasetVersionMetrics >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "clarifai.api.DatasetVersion.MetricsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metrics().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metrics().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::clarifai::api::DatasetVersionMetrics >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::clarifai::api::DatasetVersionMetrics >::const_iterator
          it = this->_internal_metrics().begin();
          it != this->_internal_metrics().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DatasetVersion_MetricsEntry_DoNotUse::Funcs::InternalSerialize(16, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::clarifai::api::DatasetVersionMetrics >::const_iterator
          it = this->_internal_metrics().begin();
          it != this->_internal_metrics().end(); ++it) {
        target = DatasetVersion_MetricsEntry_DoNotUse::Funcs::InternalSerialize(16, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetVersion)
  return target;
}

size_t DatasetVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string embed_model_version_ids = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(embed_model_version_ids_.size());
  for (int i = 0, n = embed_model_version_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      embed_model_version_ids_.Get(i));
  }

  // map<string, .clarifai.api.DatasetVersionMetrics> metrics = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metrics_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::clarifai::api::DatasetVersionMetrics >::const_iterator
      it = this->_internal_metrics().begin();
      it != this->_internal_metrics().end(); ++it) {
    total_size += DatasetVersion_MetricsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 5;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string dataset_id = 6;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // string description = 10;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.status.Status status = 8;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Struct metadata = 12;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .clarifai.api.Visibility visibility = 13;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  switch (data_config_case()) {
    // .clarifai.api.AnnotationFilterConfig annotation_filter_config = 15;
    case kAnnotationFilterConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_config_.annotation_filter_config_);
      break;
    }
    case DATA_CONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DatasetVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetVersion::GetClassData() const { return &_class_data_; }

void DatasetVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DatasetVersion *>(to)->MergeFrom(
      static_cast<const DatasetVersion &>(from));
}


void DatasetVersion::MergeFrom(const DatasetVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  embed_model_version_ids_.MergeFrom(from.embed_model_version_ids_);
  metrics_.MergeFrom(from.metrics_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_dataset_id().empty()) {
    _internal_set_dataset_id(from._internal_dataset_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  switch (from.data_config_case()) {
    case kAnnotationFilterConfig: {
      _internal_mutable_annotation_filter_config()->::clarifai::api::AnnotationFilterConfig::MergeFrom(from._internal_annotation_filter_config());
      break;
    }
    case DATA_CONFIG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetVersion::CopyFrom(const DatasetVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetVersion::IsInitialized() const {
  return true;
}

void DatasetVersion::InternalSwap(DatasetVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  embed_model_version_ids_.InternalSwap(&other->embed_model_version_ids_);
  metrics_.InternalSwap(&other->metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_id_, lhs_arena,
      &other->dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetVersion, visibility_)
      + sizeof(DatasetVersion::visibility_)
      - PROTOBUF_FIELD_OFFSET(DatasetVersion, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
  swap(data_config_, other->data_config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[47]);
}

// ===================================================================

class AnnotationFilterConfig::_Internal {
 public:
  static const ::clarifai::api::AnnotationFilter& annotation_filter(const AnnotationFilterConfig* msg);
};

const ::clarifai::api::AnnotationFilter&
AnnotationFilterConfig::_Internal::annotation_filter(const AnnotationFilterConfig* msg) {
  return *msg->annotation_filter_;
}
AnnotationFilterConfig::AnnotationFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AnnotationFilterConfig)
}
AnnotationFilterConfig::AnnotationFilterConfig(const AnnotationFilterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_annotation_filter()) {
    annotation_filter_ = new ::clarifai::api::AnnotationFilter(*from.annotation_filter_);
  } else {
    annotation_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AnnotationFilterConfig)
}

inline void AnnotationFilterConfig::SharedCtor() {
annotation_filter_ = nullptr;
}

AnnotationFilterConfig::~AnnotationFilterConfig() {
  // @@protoc_insertion_point(destructor:clarifai.api.AnnotationFilterConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnnotationFilterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete annotation_filter_;
}

void AnnotationFilterConfig::ArenaDtor(void* object) {
  AnnotationFilterConfig* _this = reinterpret_cast< AnnotationFilterConfig* >(object);
  (void)_this;
}
void AnnotationFilterConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnnotationFilterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnnotationFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AnnotationFilterConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && annotation_filter_ != nullptr) {
    delete annotation_filter_;
  }
  annotation_filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotationFilterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.AnnotationFilter annotation_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnotationFilterConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AnnotationFilterConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.AnnotationFilter annotation_filter = 1;
  if (this->_internal_has_annotation_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::annotation_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AnnotationFilterConfig)
  return target;
}

size_t AnnotationFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AnnotationFilterConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.AnnotationFilter annotation_filter = 1;
  if (this->_internal_has_annotation_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnotationFilterConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnnotationFilterConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnotationFilterConfig::GetClassData() const { return &_class_data_; }

void AnnotationFilterConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnnotationFilterConfig *>(to)->MergeFrom(
      static_cast<const AnnotationFilterConfig &>(from));
}


void AnnotationFilterConfig::MergeFrom(const AnnotationFilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AnnotationFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_annotation_filter()) {
    _internal_mutable_annotation_filter()->::clarifai::api::AnnotationFilter::MergeFrom(from._internal_annotation_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnotationFilterConfig::CopyFrom(const AnnotationFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AnnotationFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationFilterConfig::IsInitialized() const {
  return true;
}

void AnnotationFilterConfig::InternalSwap(AnnotationFilterConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(annotation_filter_, other->annotation_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationFilterConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[48]);
}

// ===================================================================

class DatasetVersionMetrics::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& inputs_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& unlabeled_inputs_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& inputs_with_metadata_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& inputs_with_geo_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& regions_count(const DatasetVersionMetrics* msg);
  static const ::MatrixUint64& region_location_matrix(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& bounding_boxes_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& polygons_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& points_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& masks_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& region_inputs_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& region_frames_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& frames_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& frame_inputs_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& embeddings_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& positive_input_tags_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& positive_region_tags_count(const DatasetVersionMetrics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& positive_frame_tags_count(const DatasetVersionMetrics* msg);
};

const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::inputs_count(const DatasetVersionMetrics* msg) {
  return *msg->inputs_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::unlabeled_inputs_count(const DatasetVersionMetrics* msg) {
  return *msg->unlabeled_inputs_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::inputs_with_metadata_count(const DatasetVersionMetrics* msg) {
  return *msg->inputs_with_metadata_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::inputs_with_geo_count(const DatasetVersionMetrics* msg) {
  return *msg->inputs_with_geo_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::regions_count(const DatasetVersionMetrics* msg) {
  return *msg->regions_count_;
}
const ::MatrixUint64&
DatasetVersionMetrics::_Internal::region_location_matrix(const DatasetVersionMetrics* msg) {
  return *msg->region_location_matrix_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::bounding_boxes_count(const DatasetVersionMetrics* msg) {
  return *msg->bounding_boxes_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::polygons_count(const DatasetVersionMetrics* msg) {
  return *msg->polygons_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::points_count(const DatasetVersionMetrics* msg) {
  return *msg->points_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::masks_count(const DatasetVersionMetrics* msg) {
  return *msg->masks_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::region_inputs_count(const DatasetVersionMetrics* msg) {
  return *msg->region_inputs_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::region_frames_count(const DatasetVersionMetrics* msg) {
  return *msg->region_frames_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::frames_count(const DatasetVersionMetrics* msg) {
  return *msg->frames_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::frame_inputs_count(const DatasetVersionMetrics* msg) {
  return *msg->frame_inputs_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::embeddings_count(const DatasetVersionMetrics* msg) {
  return *msg->embeddings_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::positive_input_tags_count(const DatasetVersionMetrics* msg) {
  return *msg->positive_input_tags_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::positive_region_tags_count(const DatasetVersionMetrics* msg) {
  return *msg->positive_region_tags_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
DatasetVersionMetrics::_Internal::positive_frame_tags_count(const DatasetVersionMetrics* msg) {
  return *msg->positive_frame_tags_count_;
}
void DatasetVersionMetrics::clear_inputs_count() {
  if (GetArenaForAllocation() == nullptr && inputs_count_ != nullptr) {
    delete inputs_count_;
  }
  inputs_count_ = nullptr;
}
void DatasetVersionMetrics::clear_unlabeled_inputs_count() {
  if (GetArenaForAllocation() == nullptr && unlabeled_inputs_count_ != nullptr) {
    delete unlabeled_inputs_count_;
  }
  unlabeled_inputs_count_ = nullptr;
}
void DatasetVersionMetrics::clear_inputs_with_metadata_count() {
  if (GetArenaForAllocation() == nullptr && inputs_with_metadata_count_ != nullptr) {
    delete inputs_with_metadata_count_;
  }
  inputs_with_metadata_count_ = nullptr;
}
void DatasetVersionMetrics::clear_inputs_with_geo_count() {
  if (GetArenaForAllocation() == nullptr && inputs_with_geo_count_ != nullptr) {
    delete inputs_with_geo_count_;
  }
  inputs_with_geo_count_ = nullptr;
}
void DatasetVersionMetrics::clear_regions_count() {
  if (GetArenaForAllocation() == nullptr && regions_count_ != nullptr) {
    delete regions_count_;
  }
  regions_count_ = nullptr;
}
void DatasetVersionMetrics::clear_region_location_matrix() {
  if (GetArenaForAllocation() == nullptr && region_location_matrix_ != nullptr) {
    delete region_location_matrix_;
  }
  region_location_matrix_ = nullptr;
}
void DatasetVersionMetrics::clear_bounding_boxes_count() {
  if (GetArenaForAllocation() == nullptr && bounding_boxes_count_ != nullptr) {
    delete bounding_boxes_count_;
  }
  bounding_boxes_count_ = nullptr;
}
void DatasetVersionMetrics::clear_polygons_count() {
  if (GetArenaForAllocation() == nullptr && polygons_count_ != nullptr) {
    delete polygons_count_;
  }
  polygons_count_ = nullptr;
}
void DatasetVersionMetrics::clear_points_count() {
  if (GetArenaForAllocation() == nullptr && points_count_ != nullptr) {
    delete points_count_;
  }
  points_count_ = nullptr;
}
void DatasetVersionMetrics::clear_masks_count() {
  if (GetArenaForAllocation() == nullptr && masks_count_ != nullptr) {
    delete masks_count_;
  }
  masks_count_ = nullptr;
}
void DatasetVersionMetrics::clear_region_inputs_count() {
  if (GetArenaForAllocation() == nullptr && region_inputs_count_ != nullptr) {
    delete region_inputs_count_;
  }
  region_inputs_count_ = nullptr;
}
void DatasetVersionMetrics::clear_region_frames_count() {
  if (GetArenaForAllocation() == nullptr && region_frames_count_ != nullptr) {
    delete region_frames_count_;
  }
  region_frames_count_ = nullptr;
}
void DatasetVersionMetrics::clear_frames_count() {
  if (GetArenaForAllocation() == nullptr && frames_count_ != nullptr) {
    delete frames_count_;
  }
  frames_count_ = nullptr;
}
void DatasetVersionMetrics::clear_frame_inputs_count() {
  if (GetArenaForAllocation() == nullptr && frame_inputs_count_ != nullptr) {
    delete frame_inputs_count_;
  }
  frame_inputs_count_ = nullptr;
}
void DatasetVersionMetrics::clear_embeddings_count() {
  if (GetArenaForAllocation() == nullptr && embeddings_count_ != nullptr) {
    delete embeddings_count_;
  }
  embeddings_count_ = nullptr;
}
void DatasetVersionMetrics::clear_positive_input_tags_count() {
  if (GetArenaForAllocation() == nullptr && positive_input_tags_count_ != nullptr) {
    delete positive_input_tags_count_;
  }
  positive_input_tags_count_ = nullptr;
}
void DatasetVersionMetrics::clear_positive_region_tags_count() {
  if (GetArenaForAllocation() == nullptr && positive_region_tags_count_ != nullptr) {
    delete positive_region_tags_count_;
  }
  positive_region_tags_count_ = nullptr;
}
void DatasetVersionMetrics::clear_positive_frame_tags_count() {
  if (GetArenaForAllocation() == nullptr && positive_frame_tags_count_ != nullptr) {
    delete positive_frame_tags_count_;
  }
  positive_frame_tags_count_ = nullptr;
}
DatasetVersionMetrics::DatasetVersionMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DatasetVersionMetrics)
}
DatasetVersionMetrics::DatasetVersionMetrics(const DatasetVersionMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inputs_count()) {
    inputs_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.inputs_count_);
  } else {
    inputs_count_ = nullptr;
  }
  if (from._internal_has_unlabeled_inputs_count()) {
    unlabeled_inputs_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.unlabeled_inputs_count_);
  } else {
    unlabeled_inputs_count_ = nullptr;
  }
  if (from._internal_has_inputs_with_metadata_count()) {
    inputs_with_metadata_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.inputs_with_metadata_count_);
  } else {
    inputs_with_metadata_count_ = nullptr;
  }
  if (from._internal_has_inputs_with_geo_count()) {
    inputs_with_geo_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.inputs_with_geo_count_);
  } else {
    inputs_with_geo_count_ = nullptr;
  }
  if (from._internal_has_regions_count()) {
    regions_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.regions_count_);
  } else {
    regions_count_ = nullptr;
  }
  if (from._internal_has_region_location_matrix()) {
    region_location_matrix_ = new ::MatrixUint64(*from.region_location_matrix_);
  } else {
    region_location_matrix_ = nullptr;
  }
  if (from._internal_has_bounding_boxes_count()) {
    bounding_boxes_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.bounding_boxes_count_);
  } else {
    bounding_boxes_count_ = nullptr;
  }
  if (from._internal_has_polygons_count()) {
    polygons_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.polygons_count_);
  } else {
    polygons_count_ = nullptr;
  }
  if (from._internal_has_points_count()) {
    points_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.points_count_);
  } else {
    points_count_ = nullptr;
  }
  if (from._internal_has_masks_count()) {
    masks_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.masks_count_);
  } else {
    masks_count_ = nullptr;
  }
  if (from._internal_has_frames_count()) {
    frames_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.frames_count_);
  } else {
    frames_count_ = nullptr;
  }
  if (from._internal_has_embeddings_count()) {
    embeddings_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.embeddings_count_);
  } else {
    embeddings_count_ = nullptr;
  }
  if (from._internal_has_positive_input_tags_count()) {
    positive_input_tags_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.positive_input_tags_count_);
  } else {
    positive_input_tags_count_ = nullptr;
  }
  if (from._internal_has_positive_region_tags_count()) {
    positive_region_tags_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.positive_region_tags_count_);
  } else {
    positive_region_tags_count_ = nullptr;
  }
  if (from._internal_has_positive_frame_tags_count()) {
    positive_frame_tags_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.positive_frame_tags_count_);
  } else {
    positive_frame_tags_count_ = nullptr;
  }
  if (from._internal_has_region_inputs_count()) {
    region_inputs_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.region_inputs_count_);
  } else {
    region_inputs_count_ = nullptr;
  }
  if (from._internal_has_region_frames_count()) {
    region_frames_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.region_frames_count_);
  } else {
    region_frames_count_ = nullptr;
  }
  if (from._internal_has_frame_inputs_count()) {
    frame_inputs_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.frame_inputs_count_);
  } else {
    frame_inputs_count_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetVersionMetrics)
}

inline void DatasetVersionMetrics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inputs_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_inputs_count_) -
    reinterpret_cast<char*>(&inputs_count_)) + sizeof(frame_inputs_count_));
}

DatasetVersionMetrics::~DatasetVersionMetrics() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetVersionMetrics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DatasetVersionMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete inputs_count_;
  if (this != internal_default_instance()) delete unlabeled_inputs_count_;
  if (this != internal_default_instance()) delete inputs_with_metadata_count_;
  if (this != internal_default_instance()) delete inputs_with_geo_count_;
  if (this != internal_default_instance()) delete regions_count_;
  if (this != internal_default_instance()) delete region_location_matrix_;
  if (this != internal_default_instance()) delete bounding_boxes_count_;
  if (this != internal_default_instance()) delete polygons_count_;
  if (this != internal_default_instance()) delete points_count_;
  if (this != internal_default_instance()) delete masks_count_;
  if (this != internal_default_instance()) delete frames_count_;
  if (this != internal_default_instance()) delete embeddings_count_;
  if (this != internal_default_instance()) delete positive_input_tags_count_;
  if (this != internal_default_instance()) delete positive_region_tags_count_;
  if (this != internal_default_instance()) delete positive_frame_tags_count_;
  if (this != internal_default_instance()) delete region_inputs_count_;
  if (this != internal_default_instance()) delete region_frames_count_;
  if (this != internal_default_instance()) delete frame_inputs_count_;
}

void DatasetVersionMetrics::ArenaDtor(void* object) {
  DatasetVersionMetrics* _this = reinterpret_cast< DatasetVersionMetrics* >(object);
  (void)_this;
}
void DatasetVersionMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DatasetVersionMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DatasetVersionMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetVersionMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && inputs_count_ != nullptr) {
    delete inputs_count_;
  }
  inputs_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unlabeled_inputs_count_ != nullptr) {
    delete unlabeled_inputs_count_;
  }
  unlabeled_inputs_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && inputs_with_metadata_count_ != nullptr) {
    delete inputs_with_metadata_count_;
  }
  inputs_with_metadata_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && inputs_with_geo_count_ != nullptr) {
    delete inputs_with_geo_count_;
  }
  inputs_with_geo_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && regions_count_ != nullptr) {
    delete regions_count_;
  }
  regions_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && region_location_matrix_ != nullptr) {
    delete region_location_matrix_;
  }
  region_location_matrix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bounding_boxes_count_ != nullptr) {
    delete bounding_boxes_count_;
  }
  bounding_boxes_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && polygons_count_ != nullptr) {
    delete polygons_count_;
  }
  polygons_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && points_count_ != nullptr) {
    delete points_count_;
  }
  points_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && masks_count_ != nullptr) {
    delete masks_count_;
  }
  masks_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && frames_count_ != nullptr) {
    delete frames_count_;
  }
  frames_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && embeddings_count_ != nullptr) {
    delete embeddings_count_;
  }
  embeddings_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && positive_input_tags_count_ != nullptr) {
    delete positive_input_tags_count_;
  }
  positive_input_tags_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && positive_region_tags_count_ != nullptr) {
    delete positive_region_tags_count_;
  }
  positive_region_tags_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && positive_frame_tags_count_ != nullptr) {
    delete positive_frame_tags_count_;
  }
  positive_frame_tags_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && region_inputs_count_ != nullptr) {
    delete region_inputs_count_;
  }
  region_inputs_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && region_frames_count_ != nullptr) {
    delete region_frames_count_;
  }
  region_frames_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && frame_inputs_count_ != nullptr) {
    delete frame_inputs_count_;
  }
  frame_inputs_count_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetVersionMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.UInt64Value inputs_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputs_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value unlabeled_inputs_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_unlabeled_inputs_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value inputs_with_metadata_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputs_with_metadata_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value inputs_with_geo_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputs_with_geo_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value regions_count = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_regions_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MatrixUint64 region_location_matrix = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_location_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value bounding_boxes_count = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounding_boxes_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value polygons_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygons_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value points_count = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_points_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value masks_count = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_masks_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value frames_count = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_frames_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value embeddings_count = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_embeddings_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value positive_input_tags_count = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_positive_input_tags_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value positive_region_tags_count = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_positive_region_tags_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value positive_frame_tags_count = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_positive_frame_tags_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value region_inputs_count = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_inputs_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value region_frames_count = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_frames_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value frame_inputs_count = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_inputs_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetVersionMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetVersionMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt64Value inputs_count = 1;
  if (this->_internal_has_inputs_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::inputs_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value unlabeled_inputs_count = 6;
  if (this->_internal_has_unlabeled_inputs_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::unlabeled_inputs_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value inputs_with_metadata_count = 8;
  if (this->_internal_has_inputs_with_metadata_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::inputs_with_metadata_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value inputs_with_geo_count = 9;
  if (this->_internal_has_inputs_with_geo_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::inputs_with_geo_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value regions_count = 20;
  if (this->_internal_has_regions_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::regions_count(this), target, stream);
  }

  // .MatrixUint64 region_location_matrix = 21;
  if (this->_internal_has_region_location_matrix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::region_location_matrix(this), target, stream);
  }

  // .google.protobuf.UInt64Value bounding_boxes_count = 22;
  if (this->_internal_has_bounding_boxes_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::bounding_boxes_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value polygons_count = 23;
  if (this->_internal_has_polygons_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::polygons_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value points_count = 24;
  if (this->_internal_has_points_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::points_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value masks_count = 25;
  if (this->_internal_has_masks_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::masks_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value frames_count = 30;
  if (this->_internal_has_frames_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::frames_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value embeddings_count = 40;
  if (this->_internal_has_embeddings_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::embeddings_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value positive_input_tags_count = 50;
  if (this->_internal_has_positive_input_tags_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::positive_input_tags_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value positive_region_tags_count = 51;
  if (this->_internal_has_positive_region_tags_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::positive_region_tags_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value positive_frame_tags_count = 52;
  if (this->_internal_has_positive_frame_tags_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::positive_frame_tags_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value region_inputs_count = 60;
  if (this->_internal_has_region_inputs_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        60, _Internal::region_inputs_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value region_frames_count = 61;
  if (this->_internal_has_region_frames_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        61, _Internal::region_frames_count(this), target, stream);
  }

  // .google.protobuf.UInt64Value frame_inputs_count = 70;
  if (this->_internal_has_frame_inputs_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        70, _Internal::frame_inputs_count(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetVersionMetrics)
  return target;
}

size_t DatasetVersionMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetVersionMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.UInt64Value inputs_count = 1;
  if (this->_internal_has_inputs_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inputs_count_);
  }

  // .google.protobuf.UInt64Value unlabeled_inputs_count = 6;
  if (this->_internal_has_unlabeled_inputs_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unlabeled_inputs_count_);
  }

  // .google.protobuf.UInt64Value inputs_with_metadata_count = 8;
  if (this->_internal_has_inputs_with_metadata_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inputs_with_metadata_count_);
  }

  // .google.protobuf.UInt64Value inputs_with_geo_count = 9;
  if (this->_internal_has_inputs_with_geo_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inputs_with_geo_count_);
  }

  // .google.protobuf.UInt64Value regions_count = 20;
  if (this->_internal_has_regions_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *regions_count_);
  }

  // .MatrixUint64 region_location_matrix = 21;
  if (this->_internal_has_region_location_matrix()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_location_matrix_);
  }

  // .google.protobuf.UInt64Value bounding_boxes_count = 22;
  if (this->_internal_has_bounding_boxes_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounding_boxes_count_);
  }

  // .google.protobuf.UInt64Value polygons_count = 23;
  if (this->_internal_has_polygons_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *polygons_count_);
  }

  // .google.protobuf.UInt64Value points_count = 24;
  if (this->_internal_has_points_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *points_count_);
  }

  // .google.protobuf.UInt64Value masks_count = 25;
  if (this->_internal_has_masks_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *masks_count_);
  }

  // .google.protobuf.UInt64Value frames_count = 30;
  if (this->_internal_has_frames_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frames_count_);
  }

  // .google.protobuf.UInt64Value embeddings_count = 40;
  if (this->_internal_has_embeddings_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *embeddings_count_);
  }

  // .google.protobuf.UInt64Value positive_input_tags_count = 50;
  if (this->_internal_has_positive_input_tags_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positive_input_tags_count_);
  }

  // .google.protobuf.UInt64Value positive_region_tags_count = 51;
  if (this->_internal_has_positive_region_tags_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positive_region_tags_count_);
  }

  // .google.protobuf.UInt64Value positive_frame_tags_count = 52;
  if (this->_internal_has_positive_frame_tags_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positive_frame_tags_count_);
  }

  // .google.protobuf.UInt64Value region_inputs_count = 60;
  if (this->_internal_has_region_inputs_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_inputs_count_);
  }

  // .google.protobuf.UInt64Value region_frames_count = 61;
  if (this->_internal_has_region_frames_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_frames_count_);
  }

  // .google.protobuf.UInt64Value frame_inputs_count = 70;
  if (this->_internal_has_frame_inputs_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_inputs_count_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetVersionMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DatasetVersionMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetVersionMetrics::GetClassData() const { return &_class_data_; }

void DatasetVersionMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DatasetVersionMetrics *>(to)->MergeFrom(
      static_cast<const DatasetVersionMetrics &>(from));
}


void DatasetVersionMetrics::MergeFrom(const DatasetVersionMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetVersionMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_inputs_count()) {
    _internal_mutable_inputs_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_inputs_count());
  }
  if (from._internal_has_unlabeled_inputs_count()) {
    _internal_mutable_unlabeled_inputs_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_unlabeled_inputs_count());
  }
  if (from._internal_has_inputs_with_metadata_count()) {
    _internal_mutable_inputs_with_metadata_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_inputs_with_metadata_count());
  }
  if (from._internal_has_inputs_with_geo_count()) {
    _internal_mutable_inputs_with_geo_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_inputs_with_geo_count());
  }
  if (from._internal_has_regions_count()) {
    _internal_mutable_regions_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_regions_count());
  }
  if (from._internal_has_region_location_matrix()) {
    _internal_mutable_region_location_matrix()->::MatrixUint64::MergeFrom(from._internal_region_location_matrix());
  }
  if (from._internal_has_bounding_boxes_count()) {
    _internal_mutable_bounding_boxes_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_bounding_boxes_count());
  }
  if (from._internal_has_polygons_count()) {
    _internal_mutable_polygons_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_polygons_count());
  }
  if (from._internal_has_points_count()) {
    _internal_mutable_points_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_points_count());
  }
  if (from._internal_has_masks_count()) {
    _internal_mutable_masks_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_masks_count());
  }
  if (from._internal_has_frames_count()) {
    _internal_mutable_frames_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_frames_count());
  }
  if (from._internal_has_embeddings_count()) {
    _internal_mutable_embeddings_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_embeddings_count());
  }
  if (from._internal_has_positive_input_tags_count()) {
    _internal_mutable_positive_input_tags_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_positive_input_tags_count());
  }
  if (from._internal_has_positive_region_tags_count()) {
    _internal_mutable_positive_region_tags_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_positive_region_tags_count());
  }
  if (from._internal_has_positive_frame_tags_count()) {
    _internal_mutable_positive_frame_tags_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_positive_frame_tags_count());
  }
  if (from._internal_has_region_inputs_count()) {
    _internal_mutable_region_inputs_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_region_inputs_count());
  }
  if (from._internal_has_region_frames_count()) {
    _internal_mutable_region_frames_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_region_frames_count());
  }
  if (from._internal_has_frame_inputs_count()) {
    _internal_mutable_frame_inputs_count()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_frame_inputs_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetVersionMetrics::CopyFrom(const DatasetVersionMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetVersionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetVersionMetrics::IsInitialized() const {
  return true;
}

void DatasetVersionMetrics::InternalSwap(DatasetVersionMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetVersionMetrics, frame_inputs_count_)
      + sizeof(DatasetVersionMetrics::frame_inputs_count_)
      - PROTOBUF_FIELD_OFFSET(DatasetVersionMetrics, inputs_count_)>(
          reinterpret_cast<char*>(&inputs_count_),
          reinterpret_cast<char*>(&other->inputs_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetVersionMetrics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[49]);
}

// ===================================================================

class DatasetVersionMetricsGroup::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Value& value(const DatasetVersionMetricsGroup* msg);
  static const ::clarifai::api::DatasetVersionMetrics& metrics(const DatasetVersionMetricsGroup* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Value&
DatasetVersionMetricsGroup::_Internal::value(const DatasetVersionMetricsGroup* msg) {
  return *msg->value_;
}
const ::clarifai::api::DatasetVersionMetrics&
DatasetVersionMetricsGroup::_Internal::metrics(const DatasetVersionMetricsGroup* msg) {
  return *msg->metrics_;
}
void DatasetVersionMetricsGroup::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
DatasetVersionMetricsGroup::DatasetVersionMetricsGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DatasetVersionMetricsGroup)
}
DatasetVersionMetricsGroup::DatasetVersionMetricsGroup(const DatasetVersionMetricsGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_path().empty()) {
    parent_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::PROTOBUF_NAMESPACE_ID::Value(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_metrics()) {
    metrics_ = new ::clarifai::api::DatasetVersionMetrics(*from.metrics_);
  } else {
    metrics_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetVersionMetricsGroup)
}

inline void DatasetVersionMetricsGroup::SharedCtor() {
parent_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(type_));
}

DatasetVersionMetricsGroup::~DatasetVersionMetricsGroup() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetVersionMetricsGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DatasetVersionMetricsGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  parent_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete metrics_;
}

void DatasetVersionMetricsGroup::ArenaDtor(void* object) {
  DatasetVersionMetricsGroup* _this = reinterpret_cast< DatasetVersionMetricsGroup* >(object);
  (void)_this;
}
void DatasetVersionMetricsGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DatasetVersionMetricsGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DatasetVersionMetricsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetVersionMetricsGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetVersionMetricsGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DatasetVersionMetricsGroup.parent_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersionMetricsGroupType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::clarifai::api::DatasetVersionMetricsGroupType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Value value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersionMetrics metrics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetVersionMetricsGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetVersionMetricsGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent_path = 1;
  if (!this->_internal_parent_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_path().data(), static_cast<int>(this->_internal_parent_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetVersionMetricsGroup.parent_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent_path(), target);
  }

  // .clarifai.api.DatasetVersionMetricsGroupType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .google.protobuf.Value value = 3;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value(this), target, stream);
  }

  // .clarifai.api.DatasetVersionMetrics metrics = 4;
  if (this->_internal_has_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::metrics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetVersionMetricsGroup)
  return target;
}

size_t DatasetVersionMetricsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetVersionMetricsGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent_path = 1;
  if (!this->_internal_parent_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_path());
  }

  // .google.protobuf.Value value = 3;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .clarifai.api.DatasetVersionMetrics metrics = 4;
  if (this->_internal_has_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metrics_);
  }

  // .clarifai.api.DatasetVersionMetricsGroupType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetVersionMetricsGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DatasetVersionMetricsGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetVersionMetricsGroup::GetClassData() const { return &_class_data_; }

void DatasetVersionMetricsGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DatasetVersionMetricsGroup *>(to)->MergeFrom(
      static_cast<const DatasetVersionMetricsGroup &>(from));
}


void DatasetVersionMetricsGroup::MergeFrom(const DatasetVersionMetricsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetVersionMetricsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent_path().empty()) {
    _internal_set_parent_path(from._internal_parent_path());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_value());
  }
  if (from._internal_has_metrics()) {
    _internal_mutable_metrics()->::clarifai::api::DatasetVersionMetrics::MergeFrom(from._internal_metrics());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetVersionMetricsGroup::CopyFrom(const DatasetVersionMetricsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetVersionMetricsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetVersionMetricsGroup::IsInitialized() const {
  return true;
}

void DatasetVersionMetricsGroup::InternalSwap(DatasetVersionMetricsGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parent_path_, lhs_arena,
      &other->parent_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetVersionMetricsGroup, type_)
      + sizeof(DatasetVersionMetricsGroup::type_)
      - PROTOBUF_FIELD_OFFSET(DatasetVersionMetricsGroup, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetVersionMetricsGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[50]);
}

// ===================================================================

class WorkflowResultsSimilarity::_Internal {
 public:
  static const ::clarifai::api::Input& probe_input(const WorkflowResultsSimilarity* msg);
};

const ::clarifai::api::Input&
WorkflowResultsSimilarity::_Internal::probe_input(const WorkflowResultsSimilarity* msg) {
  return *msg->probe_input_;
}
WorkflowResultsSimilarity::WorkflowResultsSimilarity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pool_results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.WorkflowResultsSimilarity)
}
WorkflowResultsSimilarity::WorkflowResultsSimilarity(const WorkflowResultsSimilarity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pool_results_(from.pool_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_probe_input()) {
    probe_input_ = new ::clarifai::api::Input(*from.probe_input_);
  } else {
    probe_input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowResultsSimilarity)
}

inline void WorkflowResultsSimilarity::SharedCtor() {
probe_input_ = nullptr;
}

WorkflowResultsSimilarity::~WorkflowResultsSimilarity() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowResultsSimilarity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowResultsSimilarity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete probe_input_;
}

void WorkflowResultsSimilarity::ArenaDtor(void* object) {
  WorkflowResultsSimilarity* _this = reinterpret_cast< WorkflowResultsSimilarity* >(object);
  (void)_this;
}
void WorkflowResultsSimilarity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowResultsSimilarity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowResultsSimilarity::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowResultsSimilarity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pool_results_.Clear();
  if (GetArenaForAllocation() == nullptr && probe_input_ != nullptr) {
    delete probe_input_;
  }
  probe_input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowResultsSimilarity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Input probe_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_probe_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit pool_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pool_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowResultsSimilarity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowResultsSimilarity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Input probe_input = 1;
  if (this->_internal_has_probe_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::probe_input(this), target, stream);
  }

  // repeated .clarifai.api.Hit pool_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pool_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pool_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowResultsSimilarity)
  return target;
}

size_t WorkflowResultsSimilarity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowResultsSimilarity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Hit pool_results = 2;
  total_size += 1UL * this->_internal_pool_results_size();
  for (const auto& msg : this->pool_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.Input probe_input = 1;
  if (this->_internal_has_probe_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *probe_input_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowResultsSimilarity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkflowResultsSimilarity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowResultsSimilarity::GetClassData() const { return &_class_data_; }

void WorkflowResultsSimilarity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WorkflowResultsSimilarity *>(to)->MergeFrom(
      static_cast<const WorkflowResultsSimilarity &>(from));
}


void WorkflowResultsSimilarity::MergeFrom(const WorkflowResultsSimilarity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowResultsSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pool_results_.MergeFrom(from.pool_results_);
  if (from._internal_has_probe_input()) {
    _internal_mutable_probe_input()->::clarifai::api::Input::MergeFrom(from._internal_probe_input());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowResultsSimilarity::CopyFrom(const WorkflowResultsSimilarity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowResultsSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowResultsSimilarity::IsInitialized() const {
  return true;
}

void WorkflowResultsSimilarity::InternalSwap(WorkflowResultsSimilarity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pool_results_.InternalSwap(&other->pool_results_);
  swap(probe_input_, other->probe_input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowResultsSimilarity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[51]);
}

// ===================================================================

class Key::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Key* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expires_at(const Key* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Key::_Internal::created_at(const Key* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Key::_Internal::expires_at(const Key* msg) {
  return *msg->expires_at_;
}
void Key::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Key::clear_expires_at() {
  if (GetArenaForAllocation() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
}
Key::Key(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  scopes_(arena),
  apps_(arena),
  endpoints_(arena),
  authorized_idp_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Key)
}
Key::Key(const Key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scopes_(from.scopes_),
      apps_(from.apps_),
      endpoints_(from.endpoints_),
      authorized_idp_ids_(from.authorized_idp_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_expires_at()) {
    expires_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.expires_at_);
  } else {
    expires_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Key)
}

inline void Key::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expires_at_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(expires_at_));
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:clarifai.api.Key)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Key::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete expires_at_;
}

void Key::ArenaDtor(void* object) {
  Key* _this = reinterpret_cast< Key* >(object);
  (void)_this;
}
void Key::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Key::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Key::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Key)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  apps_.Clear();
  endpoints_.Clear();
  authorized_idp_ids_.Clear();
  id_.ClearToEmpty();
  description_.ClearToEmpty();
  type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Key::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Key.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Key.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string scopes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Key.scopes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.App apps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expires_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string endpoints = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Key.endpoints"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Key.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string authorized_idp_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_authorized_idp_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Key.authorized_idp_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Key::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Key)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // repeated string scopes = 3;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.scopes");
    target = stream->WriteString(3, s, target);
  }

  // repeated .clarifai.api.App apps = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_apps(i), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp expires_at = 6;
  if (this->_internal_has_expires_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::expires_at(this), target, stream);
  }

  // repeated string endpoints = 7;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.endpoints");
    target = stream->WriteString(7, s, target);
  }

  // string type = 8;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_type(), target);
  }

  // repeated string authorized_idp_ids = 9;
  for (int i = 0, n = this->_internal_authorized_idp_ids_size(); i < n; i++) {
    const auto& s = this->_internal_authorized_idp_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Key.authorized_idp_ids");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Key)
  return target;
}

size_t Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Key)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(scopes_.size());
  for (int i = 0, n = scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      scopes_.Get(i));
  }

  // repeated .clarifai.api.App apps = 4;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string endpoints = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(endpoints_.size());
  for (int i = 0, n = endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      endpoints_.Get(i));
  }

  // repeated string authorized_idp_ids = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(authorized_idp_ids_.size());
  for (int i = 0, n = authorized_idp_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      authorized_idp_ids_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string type = 8;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp expires_at = 6;
  if (this->_internal_has_expires_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expires_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Key::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Key::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Key::GetClassData() const { return &_class_data_; }

void Key::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Key *>(to)->MergeFrom(
      static_cast<const Key &>(from));
}


void Key::MergeFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Key)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  apps_.MergeFrom(from.apps_);
  endpoints_.MergeFrom(from.endpoints_);
  authorized_idp_ids_.MergeFrom(from.authorized_idp_ids_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_expires_at()) {
    _internal_mutable_expires_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expires_at());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Key::CopyFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {
  return true;
}

void Key::InternalSwap(Key* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  scopes_.InternalSwap(&other->scopes_);
  apps_.InternalSwap(&other->apps_);
  endpoints_.InternalSwap(&other->endpoints_);
  authorized_idp_ids_.InternalSwap(&other->authorized_idp_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Key, expires_at_)
      + sizeof(Key::expires_at_)
      - PROTOBUF_FIELD_OFFSET(Key, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Key::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[52]);
}

// ===================================================================

class Model::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Model* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Model* msg);
  static const ::clarifai::api::OutputInfo& output_info(const Model* msg);
  static const ::clarifai::api::ModelVersion& model_version(const Model* msg);
  static const ::clarifai::api::InputInfo& input_info(const Model* msg);
  static const ::clarifai::api::TrainInfo& train_info(const Model* msg);
  static const ::clarifai::api::EvalInfo& default_eval_info(const Model* msg);
  static const ::clarifai::api::Visibility& visibility(const Model* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const Model* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& presets(const Model* msg);
  static const ::clarifai::api::ImportInfo& import_info(const Model* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& workflow_recommended(const Model* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Model::_Internal::created_at(const Model* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Model::_Internal::modified_at(const Model* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::OutputInfo&
Model::_Internal::output_info(const Model* msg) {
  return *msg->output_info_;
}
const ::clarifai::api::ModelVersion&
Model::_Internal::model_version(const Model* msg) {
  return *msg->model_version_;
}
const ::clarifai::api::InputInfo&
Model::_Internal::input_info(const Model* msg) {
  return *msg->input_info_;
}
const ::clarifai::api::TrainInfo&
Model::_Internal::train_info(const Model* msg) {
  return *msg->train_info_;
}
const ::clarifai::api::EvalInfo&
Model::_Internal::default_eval_info(const Model* msg) {
  return *msg->default_eval_info_;
}
const ::clarifai::api::Visibility&
Model::_Internal::visibility(const Model* msg) {
  return *msg->visibility_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Model::_Internal::metadata(const Model* msg) {
  return *msg->metadata_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Model::_Internal::presets(const Model* msg) {
  return *msg->presets_;
}
const ::clarifai::api::ImportInfo&
Model::_Internal::import_info(const Model* msg) {
  return *msg->import_info_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Model::_Internal::workflow_recommended(const Model* msg) {
  return *msg->workflow_recommended_;
}
void Model::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Model::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void Model::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
void Model::clear_presets() {
  if (GetArenaForAllocation() == nullptr && presets_ != nullptr) {
    delete presets_;
  }
  presets_ = nullptr;
}
void Model::clear_workflow_recommended() {
  if (GetArenaForAllocation() == nullptr && workflow_recommended_ != nullptr) {
    delete workflow_recommended_;
  }
  workflow_recommended_ = nullptr;
}
Model::Model(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  toolkits_(arena),
  use_cases_(arena),
  languages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Model)
}
Model::Model(const Model& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      toolkits_(from.toolkits_),
      use_cases_(from.use_cases_),
      languages_(from.languages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  model_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_type_id().empty()) {
    model_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_type_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notes().empty()) {
    notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notes(), 
      GetArenaForAllocation());
  }
  task_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task().empty()) {
    task_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_output_info()) {
    output_info_ = new ::clarifai::api::OutputInfo(*from.output_info_);
  } else {
    output_info_ = nullptr;
  }
  if (from._internal_has_model_version()) {
    model_version_ = new ::clarifai::api::ModelVersion(*from.model_version_);
  } else {
    model_version_ = nullptr;
  }
  if (from._internal_has_input_info()) {
    input_info_ = new ::clarifai::api::InputInfo(*from.input_info_);
  } else {
    input_info_ = nullptr;
  }
  if (from._internal_has_train_info()) {
    train_info_ = new ::clarifai::api::TrainInfo(*from.train_info_);
  } else {
    train_info_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_import_info()) {
    import_info_ = new ::clarifai::api::ImportInfo(*from.import_info_);
  } else {
    import_info_ = nullptr;
  }
  if (from._internal_has_presets()) {
    presets_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.presets_);
  } else {
    presets_ = nullptr;
  }
  if (from._internal_has_workflow_recommended()) {
    workflow_recommended_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.workflow_recommended_);
  } else {
    workflow_recommended_ = nullptr;
  }
  if (from._internal_has_default_eval_info()) {
    default_eval_info_ = new ::clarifai::api::EvalInfo(*from.default_eval_info_);
  } else {
    default_eval_info_ = nullptr;
  }
  ::memcpy(&is_starred_, &from.is_starred_,
    static_cast<size_t>(reinterpret_cast<char*>(&star_count_) -
    reinterpret_cast<char*>(&is_starred_)) + sizeof(star_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Model)
}

inline void Model::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
task_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&star_count_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(star_count_));
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:clarifai.api.Model)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Model::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete output_info_;
  if (this != internal_default_instance()) delete model_version_;
  if (this != internal_default_instance()) delete input_info_;
  if (this != internal_default_instance()) delete train_info_;
  if (this != internal_default_instance()) delete visibility_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete import_info_;
  if (this != internal_default_instance()) delete presets_;
  if (this != internal_default_instance()) delete workflow_recommended_;
  if (this != internal_default_instance()) delete default_eval_info_;
}

void Model::ArenaDtor(void* object) {
  Model* _this = reinterpret_cast< Model* >(object);
  (void)_this;
}
void Model::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Model::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Model)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  toolkits_.Clear();
  use_cases_.Clear();
  languages_.Clear();
  id_.ClearToEmpty();
  name_.ClearToEmpty();
  app_id_.ClearToEmpty();
  display_name_.ClearToEmpty();
  user_id_.ClearToEmpty();
  model_type_id_.ClearToEmpty();
  description_.ClearToEmpty();
  notes_.ClearToEmpty();
  task_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && output_info_ != nullptr) {
    delete output_info_;
  }
  output_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && model_version_ != nullptr) {
    delete model_version_;
  }
  model_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && input_info_ != nullptr) {
    delete input_info_;
  }
  input_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && train_info_ != nullptr) {
    delete train_info_;
  }
  train_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && import_info_ != nullptr) {
    delete import_info_;
  }
  import_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && presets_ != nullptr) {
    delete presets_;
  }
  presets_ = nullptr;
  if (GetArenaForAllocation() == nullptr && workflow_recommended_ != nullptr) {
    delete workflow_recommended_;
  }
  workflow_recommended_ = nullptr;
  if (GetArenaForAllocation() == nullptr && default_eval_info_ != nullptr) {
    delete default_eval_info_;
  }
  default_eval_info_ = nullptr;
  ::memset(&is_starred_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_count_) -
      reinterpret_cast<char*>(&is_starred_)) + sizeof(star_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Model::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.OutputInfo output_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelVersion model_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string display_name = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.display_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.InputInfo input_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TrainInfo train_info = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_train_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_type_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_model_type_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.model_type_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string notes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.notes"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string toolkits = 20 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_toolkits();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.toolkits"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string use_cases = 21 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_use_cases();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.use_cases"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_starred = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 star_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          star_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ImportInfo import_info = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_import_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string languages = 25 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_languages();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.languages"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string task = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_task();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Model.task"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct presets = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_presets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue workflow_recommended = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow_recommended(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvalInfo default_eval_info = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_eval_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Model::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Model)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [deprecated = true];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::created_at(this), target, stream);
  }

  // string app_id = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  // .clarifai.api.OutputInfo output_info = 5;
  if (this->_internal_has_output_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::output_info(this), target, stream);
  }

  // .clarifai.api.ModelVersion model_version = 6;
  if (this->_internal_has_model_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::model_version(this), target, stream);
  }

  // string display_name = 7 [deprecated = true];
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.display_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_display_name(), target);
  }

  // string user_id = 9;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.user_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_user_id(), target);
  }

  // .clarifai.api.InputInfo input_info = 12;
  if (this->_internal_has_input_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::input_info(this), target, stream);
  }

  // .clarifai.api.TrainInfo train_info = 13;
  if (this->_internal_has_train_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::train_info(this), target, stream);
  }

  // string model_type_id = 14;
  if (!this->_internal_model_type_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type_id().data(), static_cast<int>(this->_internal_model_type_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.model_type_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_model_type_id(), target);
  }

  // .clarifai.api.Visibility visibility = 15;
  if (this->_internal_has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::visibility(this), target, stream);
  }

  // string description = 16;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.description");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_description(), target);
  }

  // .google.protobuf.Struct metadata = 17;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::metadata(this), target, stream);
  }

  // string notes = 18;
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.notes");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_notes(), target);
  }

  // .google.protobuf.Timestamp modified_at = 19;
  if (this->_internal_has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::modified_at(this), target, stream);
  }

  // repeated string toolkits = 20 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (int i = 0, n = this->_internal_toolkits_size(); i < n; i++) {
    const auto& s = this->_internal_toolkits(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.toolkits");
    target = stream->WriteString(20, s, target);
  }

  // repeated string use_cases = 21 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (int i = 0, n = this->_internal_use_cases_size(); i < n; i++) {
    const auto& s = this->_internal_use_cases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.use_cases");
    target = stream->WriteString(21, s, target);
  }

  // bool is_starred = 22;
  if (this->_internal_is_starred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_is_starred(), target);
  }

  // int32 star_count = 23;
  if (this->_internal_star_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_star_count(), target);
  }

  // .clarifai.api.ImportInfo import_info = 24;
  if (this->_internal_has_import_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::import_info(this), target, stream);
  }

  // repeated string languages = 25 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (int i = 0, n = this->_internal_languages_size(); i < n; i++) {
    const auto& s = this->_internal_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.languages");
    target = stream->WriteString(25, s, target);
  }

  // string task = 26;
  if (!this->_internal_task().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task().data(), static_cast<int>(this->_internal_task().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Model.task");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_task(), target);
  }

  // .google.protobuf.Struct presets = 27;
  if (this->_internal_has_presets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::presets(this), target, stream);
  }

  // .google.protobuf.BoolValue workflow_recommended = 29;
  if (this->_internal_has_workflow_recommended()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::workflow_recommended(this), target, stream);
  }

  // .clarifai.api.EvalInfo default_eval_info = 30;
  if (this->_internal_has_default_eval_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::default_eval_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Model)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string toolkits = 20 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(toolkits_.size());
  for (int i = 0, n = toolkits_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      toolkits_.Get(i));
  }

  // repeated string use_cases = 21 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(use_cases_.size());
  for (int i = 0, n = use_cases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      use_cases_.Get(i));
  }

  // repeated string languages = 25 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(languages_.size());
  for (int i = 0, n = languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      languages_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [deprecated = true];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string app_id = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string display_name = 7 [deprecated = true];
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string user_id = 9;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string model_type_id = 14;
  if (!this->_internal_model_type_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type_id());
  }

  // string description = 16;
  if (!this->_internal_description().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string notes = 18;
  if (!this->_internal_notes().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // string task = 26;
  if (!this->_internal_task().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task());
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .clarifai.api.OutputInfo output_info = 5;
  if (this->_internal_has_output_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_info_);
  }

  // .clarifai.api.ModelVersion model_version = 6;
  if (this->_internal_has_model_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_version_);
  }

  // .clarifai.api.InputInfo input_info = 12;
  if (this->_internal_has_input_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_info_);
  }

  // .clarifai.api.TrainInfo train_info = 13;
  if (this->_internal_has_train_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *train_info_);
  }

  // .clarifai.api.Visibility visibility = 15;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .google.protobuf.Struct metadata = 17;
  if (this->_internal_has_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .google.protobuf.Timestamp modified_at = 19;
  if (this->_internal_has_modified_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.ImportInfo import_info = 24;
  if (this->_internal_has_import_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *import_info_);
  }

  // .google.protobuf.Struct presets = 27;
  if (this->_internal_has_presets()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *presets_);
  }

  // .google.protobuf.BoolValue workflow_recommended = 29;
  if (this->_internal_has_workflow_recommended()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *workflow_recommended_);
  }

  // .clarifai.api.EvalInfo default_eval_info = 30;
  if (this->_internal_has_default_eval_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_eval_info_);
  }

  // bool is_starred = 22;
  if (this->_internal_is_starred() != 0) {
    total_size += 2 + 1;
  }

  // int32 star_count = 23;
  if (this->_internal_star_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_star_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Model::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Model::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Model::GetClassData() const { return &_class_data_; }

void Model::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Model *>(to)->MergeFrom(
      static_cast<const Model &>(from));
}


void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Model)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  toolkits_.MergeFrom(from.toolkits_);
  use_cases_.MergeFrom(from.use_cases_);
  languages_.MergeFrom(from.languages_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_display_name().empty()) {
    _internal_set_display_name(from._internal_display_name());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_model_type_id().empty()) {
    _internal_set_model_type_id(from._internal_model_type_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_notes().empty()) {
    _internal_set_notes(from._internal_notes());
  }
  if (!from._internal_task().empty()) {
    _internal_set_task(from._internal_task());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_output_info()) {
    _internal_mutable_output_info()->::clarifai::api::OutputInfo::MergeFrom(from._internal_output_info());
  }
  if (from._internal_has_model_version()) {
    _internal_mutable_model_version()->::clarifai::api::ModelVersion::MergeFrom(from._internal_model_version());
  }
  if (from._internal_has_input_info()) {
    _internal_mutable_input_info()->::clarifai::api::InputInfo::MergeFrom(from._internal_input_info());
  }
  if (from._internal_has_train_info()) {
    _internal_mutable_train_info()->::clarifai::api::TrainInfo::MergeFrom(from._internal_train_info());
  }
  if (from._internal_has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_modified_at()) {
    _internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from._internal_has_import_info()) {
    _internal_mutable_import_info()->::clarifai::api::ImportInfo::MergeFrom(from._internal_import_info());
  }
  if (from._internal_has_presets()) {
    _internal_mutable_presets()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_presets());
  }
  if (from._internal_has_workflow_recommended()) {
    _internal_mutable_workflow_recommended()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_workflow_recommended());
  }
  if (from._internal_has_default_eval_info()) {
    _internal_mutable_default_eval_info()->::clarifai::api::EvalInfo::MergeFrom(from._internal_default_eval_info());
  }
  if (from._internal_is_starred() != 0) {
    _internal_set_is_starred(from._internal_is_starred());
  }
  if (from._internal_star_count() != 0) {
    _internal_set_star_count(from._internal_star_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::InternalSwap(Model* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  toolkits_.InternalSwap(&other->toolkits_);
  use_cases_.InternalSwap(&other->use_cases_);
  languages_.InternalSwap(&other->languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &display_name_, lhs_arena,
      &other->display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_type_id_, lhs_arena,
      &other->model_type_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notes_, lhs_arena,
      &other->notes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_, lhs_arena,
      &other->task_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Model, star_count_)
      + sizeof(Model::star_count_)
      - PROTOBUF_FIELD_OFFSET(Model, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Model::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[53]);
}

// ===================================================================

class ModelReference::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const ModelReference* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
ModelReference::_Internal::metadata(const ModelReference* msg) {
  return *msg->metadata_;
}
void ModelReference::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
ModelReference::ModelReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelReference)
}
ModelReference::ModelReference(const ModelReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelReference)
}

inline void ModelReference::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadata_ = nullptr;
}

ModelReference::~ModelReference() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void ModelReference::ArenaDtor(void* object) {
  ModelReference* _this = reinterpret_cast< ModelReference* >(object);
  (void)_this;
}
void ModelReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelReference::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  model_id_.ClearToEmpty();
  url_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelReference.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelReference.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelReference.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelReference.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelReference.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelReference.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelReference.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelReference.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelReference)
  return target;
}

size_t ModelReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelReference::GetClassData() const { return &_class_data_; }

void ModelReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelReference *>(to)->MergeFrom(
      static_cast<const ModelReference &>(from));
}


void ModelReference::MergeFrom(const ModelReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelReference)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelReference::CopyFrom(const ModelReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelReference::IsInitialized() const {
  return true;
}

void ModelReference::InternalSwap(ModelReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[54]);
}

// ===================================================================

class ModelVersionInputExample::_Internal {
 public:
  static const ::clarifai::api::Data& data(const ModelVersionInputExample* msg);
};

const ::clarifai::api::Data&
ModelVersionInputExample::_Internal::data(const ModelVersionInputExample* msg) {
  return *msg->data_;
}
ModelVersionInputExample::ModelVersionInputExample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelVersionInputExample)
}
ModelVersionInputExample::ModelVersionInputExample(const ModelVersionInputExample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_version_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelVersionInputExample)
}

inline void ModelVersionInputExample::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_ = nullptr;
}

ModelVersionInputExample::~ModelVersionInputExample() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelVersionInputExample)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelVersionInputExample::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void ModelVersionInputExample::ArenaDtor(void* object) {
  ModelVersionInputExample* _this = reinterpret_cast< ModelVersionInputExample* >(object);
  (void)_this;
}
void ModelVersionInputExample::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelVersionInputExample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelVersionInputExample::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelVersionInputExample)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  model_id_.ClearToEmpty();
  model_version_id_.ClearToEmpty();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelVersionInputExample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersionInputExample.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersionInputExample.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersionInputExample.model_version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersionInputExample.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersionInputExample.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelVersionInputExample::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelVersionInputExample)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionInputExample.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionInputExample.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionInputExample.model_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_version_id(), target);
  }

  // .clarifai.api.Data data = 4;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::data(this), target, stream);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionInputExample.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // string description = 6;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionInputExample.description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelVersionInputExample)
  return target;
}

size_t ModelVersionInputExample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelVersionInputExample)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 6;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .clarifai.api.Data data = 4;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelVersionInputExample::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelVersionInputExample::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelVersionInputExample::GetClassData() const { return &_class_data_; }

void ModelVersionInputExample::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelVersionInputExample *>(to)->MergeFrom(
      static_cast<const ModelVersionInputExample &>(from));
}


void ModelVersionInputExample::MergeFrom(const ModelVersionInputExample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelVersionInputExample)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_model_version_id().empty()) {
    _internal_set_model_version_id(from._internal_model_version_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelVersionInputExample::CopyFrom(const ModelVersionInputExample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelVersionInputExample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVersionInputExample::IsInitialized() const {
  return true;
}

void ModelVersionInputExample::InternalSwap(ModelVersionInputExample* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_version_id_, lhs_arena,
      &other->model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelVersionInputExample::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[55]);
}

// ===================================================================

class OutputInfo::_Internal {
 public:
  static const ::clarifai::api::Data& data(const OutputInfo* msg);
  static const ::clarifai::api::OutputConfig& output_config(const OutputInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& fields_map(const OutputInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& params(const OutputInfo* msg);
};

const ::clarifai::api::Data&
OutputInfo::_Internal::data(const OutputInfo* msg) {
  return *msg->data_;
}
const ::clarifai::api::OutputConfig&
OutputInfo::_Internal::output_config(const OutputInfo* msg) {
  return *msg->output_config_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
OutputInfo::_Internal::fields_map(const OutputInfo* msg) {
  return *msg->fields_map_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
OutputInfo::_Internal::params(const OutputInfo* msg) {
  return *msg->params_;
}
void OutputInfo::clear_fields_map() {
  if (GetArenaForAllocation() == nullptr && fields_map_ != nullptr) {
    delete fields_map_;
  }
  fields_map_ = nullptr;
}
void OutputInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
OutputInfo::OutputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.OutputInfo)
}
OutputInfo::OutputInfo(const OutputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_output_config()) {
    output_config_ = new ::clarifai::api::OutputConfig(*from.output_config_);
  } else {
    output_config_ = nullptr;
  }
  if (from._internal_has_fields_map()) {
    fields_map_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.fields_map_);
  } else {
    fields_map_ = nullptr;
  }
  if (from._internal_has_params()) {
    params_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.OutputInfo)
}

inline void OutputInfo::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&params_) -
    reinterpret_cast<char*>(&data_)) + sizeof(params_));
}

OutputInfo::~OutputInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.OutputInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutputInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete output_config_;
  if (this != internal_default_instance()) delete fields_map_;
  if (this != internal_default_instance()) delete params_;
}

void OutputInfo::ArenaDtor(void* object) {
  OutputInfo* _this = reinterpret_cast< OutputInfo* >(object);
  (void)_this;
}
void OutputInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.OutputInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && output_config_ != nullptr) {
    delete output_config_;
  }
  output_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fields_map_ != nullptr) {
    delete fields_map_;
  }
  fields_map_ = nullptr;
  if (GetArenaForAllocation() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.OutputConfig output_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.OutputInfo.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct fields_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fields_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct params = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutputInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.OutputInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Data data = 1;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // .clarifai.api.OutputConfig output_config = 2;
  if (this->_internal_has_output_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::output_config(this), target, stream);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.OutputInfo.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // .google.protobuf.Struct fields_map = 6;
  if (this->_internal_has_fields_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::fields_map(this), target, stream);
  }

  // .google.protobuf.Struct params = 7;
  if (this->_internal_has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.OutputInfo)
  return target;
}

size_t OutputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.OutputInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .clarifai.api.Data data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .clarifai.api.OutputConfig output_config = 2;
  if (this->_internal_has_output_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_config_);
  }

  // .google.protobuf.Struct fields_map = 6;
  if (this->_internal_has_fields_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fields_map_);
  }

  // .google.protobuf.Struct params = 7;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutputInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputInfo::GetClassData() const { return &_class_data_; }

void OutputInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OutputInfo *>(to)->MergeFrom(
      static_cast<const OutputInfo &>(from));
}


void OutputInfo::MergeFrom(const OutputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (from._internal_has_output_config()) {
    _internal_mutable_output_config()->::clarifai::api::OutputConfig::MergeFrom(from._internal_output_config());
  }
  if (from._internal_has_fields_map()) {
    _internal_mutable_fields_map()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_fields_map());
  }
  if (from._internal_has_params()) {
    _internal_mutable_params()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_params());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputInfo::CopyFrom(const OutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputInfo::IsInitialized() const {
  return true;
}

void OutputInfo::InternalSwap(OutputInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutputInfo, params_)
      + sizeof(OutputInfo::params_)
      - PROTOBUF_FIELD_OFFSET(OutputInfo, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[56]);
}

// ===================================================================

class InputInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& fields_map(const InputInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& params(const InputInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
InputInfo::_Internal::fields_map(const InputInfo* msg) {
  return *msg->fields_map_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
InputInfo::_Internal::params(const InputInfo* msg) {
  return *msg->params_;
}
void InputInfo::clear_fields_map() {
  if (GetArenaForAllocation() == nullptr && fields_map_ != nullptr) {
    delete fields_map_;
  }
  fields_map_ = nullptr;
}
void InputInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
InputInfo::InputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.InputInfo)
}
InputInfo::InputInfo(const InputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fields_map()) {
    fields_map_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.fields_map_);
  } else {
    fields_map_ = nullptr;
  }
  if (from._internal_has_params()) {
    params_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.InputInfo)
}

inline void InputInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fields_map_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&params_) -
    reinterpret_cast<char*>(&fields_map_)) + sizeof(params_));
}

InputInfo::~InputInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.InputInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InputInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete fields_map_;
  if (this != internal_default_instance()) delete params_;
}

void InputInfo::ArenaDtor(void* object) {
  InputInfo* _this = reinterpret_cast< InputInfo* >(object);
  (void)_this;
}
void InputInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.InputInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && fields_map_ != nullptr) {
    delete fields_map_;
  }
  fields_map_ = nullptr;
  if (GetArenaForAllocation() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct fields_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fields_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.InputInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct fields_map = 1;
  if (this->_internal_has_fields_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fields_map(this), target, stream);
  }

  // .google.protobuf.Struct params = 2;
  if (this->_internal_has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.InputInfo)
  return target;
}

size_t InputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.InputInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct fields_map = 1;
  if (this->_internal_has_fields_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fields_map_);
  }

  // .google.protobuf.Struct params = 2;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InputInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputInfo::GetClassData() const { return &_class_data_; }

void InputInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InputInfo *>(to)->MergeFrom(
      static_cast<const InputInfo &>(from));
}


void InputInfo::MergeFrom(const InputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.InputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fields_map()) {
    _internal_mutable_fields_map()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_fields_map());
  }
  if (from._internal_has_params()) {
    _internal_mutable_params()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_params());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputInfo::CopyFrom(const InputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.InputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputInfo::IsInitialized() const {
  return true;
}

void InputInfo::InternalSwap(InputInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputInfo, params_)
      + sizeof(InputInfo::params_)
      - PROTOBUF_FIELD_OFFSET(InputInfo, fields_map_)>(
          reinterpret_cast<char*>(&fields_map_),
          reinterpret_cast<char*>(&other->fields_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[57]);
}

// ===================================================================

class TrainInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& params(const TrainInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
TrainInfo::_Internal::params(const TrainInfo* msg) {
  return *msg->params_;
}
void TrainInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
TrainInfo::TrainInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TrainInfo)
}
TrainInfo::TrainInfo(const TrainInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_params()) {
    params_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TrainInfo)
}

inline void TrainInfo::SharedCtor() {
params_ = nullptr;
}

TrainInfo::~TrainInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TrainInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrainInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete params_;
}

void TrainInfo::ArenaDtor(void* object) {
  TrainInfo* _this = reinterpret_cast< TrainInfo* >(object);
  (void)_this;
}
void TrainInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrainInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TrainInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrainInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TrainInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->_internal_has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TrainInfo)
  return target;
}

size_t TrainInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TrainInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrainInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrainInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrainInfo::GetClassData() const { return &_class_data_; }

void TrainInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrainInfo *>(to)->MergeFrom(
      static_cast<const TrainInfo &>(from));
}


void TrainInfo::MergeFrom(const TrainInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TrainInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_params()) {
    _internal_mutable_params()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_params());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrainInfo::CopyFrom(const TrainInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TrainInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainInfo::IsInitialized() const {
  return true;
}

void TrainInfo::InternalSwap(TrainInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(params_, other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[58]);
}

// ===================================================================

class EvalInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& params(const EvalInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
EvalInfo::_Internal::params(const EvalInfo* msg) {
  return *msg->params_;
}
void EvalInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
EvalInfo::EvalInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.EvalInfo)
}
EvalInfo::EvalInfo(const EvalInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_params()) {
    params_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.EvalInfo)
}

inline void EvalInfo::SharedCtor() {
params_ = nullptr;
}

EvalInfo::~EvalInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.EvalInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EvalInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete params_;
}

void EvalInfo::ArenaDtor(void* object) {
  EvalInfo* _this = reinterpret_cast< EvalInfo* >(object);
  (void)_this;
}
void EvalInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvalInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EvalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.EvalInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvalInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EvalInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.EvalInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->_internal_has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.EvalInfo)
  return target;
}

size_t EvalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.EvalInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvalInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EvalInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvalInfo::GetClassData() const { return &_class_data_; }

void EvalInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EvalInfo *>(to)->MergeFrom(
      static_cast<const EvalInfo &>(from));
}


void EvalInfo::MergeFrom(const EvalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.EvalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_params()) {
    _internal_mutable_params()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_params());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvalInfo::CopyFrom(const EvalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.EvalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalInfo::IsInitialized() const {
  return true;
}

void EvalInfo::InternalSwap(EvalInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(params_, other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[59]);
}

// ===================================================================

class ImportInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& params(const ImportInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
ImportInfo::_Internal::params(const ImportInfo* msg) {
  return *msg->params_;
}
void ImportInfo::clear_params() {
  if (GetArenaForAllocation() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
ImportInfo::ImportInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ImportInfo)
}
ImportInfo::ImportInfo(const ImportInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_params()) {
    params_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ImportInfo)
}

inline void ImportInfo::SharedCtor() {
params_ = nullptr;
}

ImportInfo::~ImportInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.ImportInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImportInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete params_;
}

void ImportInfo::ArenaDtor(void* object) {
  ImportInfo* _this = reinterpret_cast< ImportInfo* >(object);
  (void)_this;
}
void ImportInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImportInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImportInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ImportInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ImportInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->_internal_has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ImportInfo)
  return target;
}

size_t ImportInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ImportInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct params = 1;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImportInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportInfo::GetClassData() const { return &_class_data_; }

void ImportInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImportInfo *>(to)->MergeFrom(
      static_cast<const ImportInfo &>(from));
}


void ImportInfo::MergeFrom(const ImportInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ImportInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_params()) {
    _internal_mutable_params()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_params());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportInfo::CopyFrom(const ImportInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ImportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportInfo::IsInitialized() const {
  return true;
}

void ImportInfo::InternalSwap(ImportInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(params_, other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[60]);
}

// ===================================================================

class OutputConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& hyper_params(const OutputConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& model_metadata(const OutputConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
OutputConfig::_Internal::hyper_params(const OutputConfig* msg) {
  return *msg->hyper_params_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
OutputConfig::_Internal::model_metadata(const OutputConfig* msg) {
  return *msg->model_metadata_;
}
void OutputConfig::clear_hyper_params() {
  if (GetArenaForAllocation() == nullptr && hyper_params_ != nullptr) {
    delete hyper_params_;
  }
  hyper_params_ = nullptr;
}
void OutputConfig::clear_model_metadata() {
  if (GetArenaForAllocation() == nullptr && model_metadata_ != nullptr) {
    delete model_metadata_;
  }
  model_metadata_ = nullptr;
}
OutputConfig::OutputConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  select_concepts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.OutputConfig)
}
OutputConfig::OutputConfig(const OutputConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      select_concepts_(from.select_concepts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  existing_model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    existing_model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_existing_model_id().empty()) {
    existing_model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_existing_model_id(), 
      GetArenaForAllocation());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  hyper_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hyper_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hyper_parameters().empty()) {
    hyper_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hyper_parameters(), 
      GetArenaForAllocation());
  }
  embed_model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    embed_model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_embed_model_version_id().empty()) {
    embed_model_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_embed_model_version_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_hyper_params()) {
    hyper_params_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.hyper_params_);
  } else {
    hyper_params_ = nullptr;
  }
  if (from._internal_has_model_metadata()) {
    model_metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.model_metadata_);
  } else {
    model_metadata_ = nullptr;
  }
  ::memcpy(&max_concepts_, &from.max_concepts_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_ms_) -
    reinterpret_cast<char*>(&max_concepts_)) + sizeof(sample_ms_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.OutputConfig)
}

inline void OutputConfig::SharedCtor() {
existing_model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  existing_model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hyper_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hyper_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
embed_model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  embed_model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hyper_params_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sample_ms_) -
    reinterpret_cast<char*>(&hyper_params_)) + sizeof(sample_ms_));
}

OutputConfig::~OutputConfig() {
  // @@protoc_insertion_point(destructor:clarifai.api.OutputConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutputConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  existing_model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hyper_parameters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embed_model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hyper_params_;
  if (this != internal_default_instance()) delete model_metadata_;
}

void OutputConfig::ArenaDtor(void* object) {
  OutputConfig* _this = reinterpret_cast< OutputConfig* >(object);
  (void)_this;
}
void OutputConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutputConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutputConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.OutputConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  select_concepts_.Clear();
  existing_model_id_.ClearToEmpty();
  language_.ClearToEmpty();
  hyper_parameters_.ClearToEmpty();
  embed_model_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && hyper_params_ != nullptr) {
    delete hyper_params_;
  }
  hyper_params_ = nullptr;
  if (GetArenaForAllocation() == nullptr && model_metadata_ != nullptr) {
    delete model_metadata_;
  }
  model_metadata_ = nullptr;
  ::memset(&max_concepts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_ms_) -
      reinterpret_cast<char*>(&max_concepts_)) + sizeof(sample_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool concepts_mutually_exclusive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          concepts_mutually_exclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool closed_environment = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          closed_environment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string existing_model_id = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_existing_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.OutputConfig.existing_model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string language = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.OutputConfig.language"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hyper_parameters = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_hyper_parameters();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.OutputConfig.hyper_parameters"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_concepts = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          max_concepts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float min_value = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept select_concepts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_select_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 training_timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          training_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sample_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          sample_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct hyper_params = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_hyper_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string embed_model_version_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_embed_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.OutputConfig.embed_model_version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool fail_on_missing_positive_examples = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          fail_on_missing_positive_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct model_metadata = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutputConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.OutputConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool concepts_mutually_exclusive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_concepts_mutually_exclusive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_concepts_mutually_exclusive(), target);
  }

  // bool closed_environment = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_closed_environment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_closed_environment(), target);
  }

  // string existing_model_id = 3 [deprecated = true];
  if (!this->_internal_existing_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_existing_model_id().data(), static_cast<int>(this->_internal_existing_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.OutputConfig.existing_model_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_existing_model_id(), target);
  }

  // string language = 4;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.OutputConfig.language");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language(), target);
  }

  // string hyper_parameters = 5 [deprecated = true];
  if (!this->_internal_hyper_parameters().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hyper_parameters().data(), static_cast<int>(this->_internal_hyper_parameters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.OutputConfig.hyper_parameters");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hyper_parameters(), target);
  }

  // uint32 max_concepts = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_max_concepts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_max_concepts(), target);
  }

  // float min_value = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_value = this->_internal_min_value();
  uint32_t raw_min_value;
  memcpy(&raw_min_value, &tmp_min_value, sizeof(tmp_min_value));
  if (raw_min_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_min_value(), target);
  }

  // repeated .clarifai.api.Concept select_concepts = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_select_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_select_concepts(i), target, stream);
  }

  // uint32 training_timeout = 9;
  if (this->_internal_training_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_training_timeout(), target);
  }

  // uint32 sample_ms = 10;
  if (this->_internal_sample_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_sample_ms(), target);
  }

  // .google.protobuf.Struct hyper_params = 13;
  if (this->_internal_has_hyper_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::hyper_params(this), target, stream);
  }

  // string embed_model_version_id = 14;
  if (!this->_internal_embed_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_embed_model_version_id().data(), static_cast<int>(this->_internal_embed_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.OutputConfig.embed_model_version_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_embed_model_version_id(), target);
  }

  // bool fail_on_missing_positive_examples = 15;
  if (this->_internal_fail_on_missing_positive_examples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_fail_on_missing_positive_examples(), target);
  }

  // .google.protobuf.Struct model_metadata = 17 [deprecated = true];
  if (this->_internal_has_model_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::model_metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.OutputConfig)
  return target;
}

size_t OutputConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.OutputConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept select_concepts = 8;
  total_size += 1UL * this->_internal_select_concepts_size();
  for (const auto& msg : this->select_concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string existing_model_id = 3 [deprecated = true];
  if (!this->_internal_existing_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_existing_model_id());
  }

  // string language = 4;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string hyper_parameters = 5 [deprecated = true];
  if (!this->_internal_hyper_parameters().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hyper_parameters());
  }

  // string embed_model_version_id = 14;
  if (!this->_internal_embed_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_embed_model_version_id());
  }

  // .google.protobuf.Struct hyper_params = 13;
  if (this->_internal_has_hyper_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hyper_params_);
  }

  // .google.protobuf.Struct model_metadata = 17 [deprecated = true];
  if (this->_internal_has_model_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_metadata_);
  }

  // uint32 max_concepts = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_max_concepts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_concepts());
  }

  // bool concepts_mutually_exclusive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_concepts_mutually_exclusive() != 0) {
    total_size += 1 + 1;
  }

  // bool closed_environment = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_closed_environment() != 0) {
    total_size += 1 + 1;
  }

  // bool fail_on_missing_positive_examples = 15;
  if (this->_internal_fail_on_missing_positive_examples() != 0) {
    total_size += 1 + 1;
  }

  // float min_value = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_value = this->_internal_min_value();
  uint32_t raw_min_value;
  memcpy(&raw_min_value, &tmp_min_value, sizeof(tmp_min_value));
  if (raw_min_value != 0) {
    total_size += 1 + 4;
  }

  // uint32 training_timeout = 9;
  if (this->_internal_training_timeout() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_training_timeout());
  }

  // uint32 sample_ms = 10;
  if (this->_internal_sample_ms() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutputConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputConfig::GetClassData() const { return &_class_data_; }

void OutputConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OutputConfig *>(to)->MergeFrom(
      static_cast<const OutputConfig &>(from));
}


void OutputConfig::MergeFrom(const OutputConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.OutputConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  select_concepts_.MergeFrom(from.select_concepts_);
  if (!from._internal_existing_model_id().empty()) {
    _internal_set_existing_model_id(from._internal_existing_model_id());
  }
  if (!from._internal_language().empty()) {
    _internal_set_language(from._internal_language());
  }
  if (!from._internal_hyper_parameters().empty()) {
    _internal_set_hyper_parameters(from._internal_hyper_parameters());
  }
  if (!from._internal_embed_model_version_id().empty()) {
    _internal_set_embed_model_version_id(from._internal_embed_model_version_id());
  }
  if (from._internal_has_hyper_params()) {
    _internal_mutable_hyper_params()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_hyper_params());
  }
  if (from._internal_has_model_metadata()) {
    _internal_mutable_model_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_model_metadata());
  }
  if (from._internal_max_concepts() != 0) {
    _internal_set_max_concepts(from._internal_max_concepts());
  }
  if (from._internal_concepts_mutually_exclusive() != 0) {
    _internal_set_concepts_mutually_exclusive(from._internal_concepts_mutually_exclusive());
  }
  if (from._internal_closed_environment() != 0) {
    _internal_set_closed_environment(from._internal_closed_environment());
  }
  if (from._internal_fail_on_missing_positive_examples() != 0) {
    _internal_set_fail_on_missing_positive_examples(from._internal_fail_on_missing_positive_examples());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_value = from._internal_min_value();
  uint32_t raw_min_value;
  memcpy(&raw_min_value, &tmp_min_value, sizeof(tmp_min_value));
  if (raw_min_value != 0) {
    _internal_set_min_value(from._internal_min_value());
  }
  if (from._internal_training_timeout() != 0) {
    _internal_set_training_timeout(from._internal_training_timeout());
  }
  if (from._internal_sample_ms() != 0) {
    _internal_set_sample_ms(from._internal_sample_ms());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputConfig::CopyFrom(const OutputConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.OutputConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputConfig::IsInitialized() const {
  return true;
}

void OutputConfig::InternalSwap(OutputConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  select_concepts_.InternalSwap(&other->select_concepts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &existing_model_id_, lhs_arena,
      &other->existing_model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hyper_parameters_, lhs_arena,
      &other->hyper_parameters_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &embed_model_version_id_, lhs_arena,
      &other->embed_model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutputConfig, sample_ms_)
      + sizeof(OutputConfig::sample_ms_)
      - PROTOBUF_FIELD_OFFSET(OutputConfig, hyper_params_)>(
          reinterpret_cast<char*>(&hyper_params_),
          reinterpret_cast<char*>(&other->hyper_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[61]);
}

// ===================================================================

class ModelType::_Internal {
 public:
};

ModelType::ModelType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  input_fields_(arena),
  output_fields_(arena),
  model_type_fields_(arena),
  expected_input_layers_(arena),
  expected_output_layers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelType)
}
ModelType::ModelType(const ModelType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_fields_(from.input_fields_),
      output_fields_(from.output_fields_),
      model_type_fields_(from.model_type_fields_),
      expected_input_layers_(from.expected_input_layers_),
      expected_output_layers_(from.expected_output_layers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&trainable_, &from.trainable_,
    static_cast<size_t>(reinterpret_cast<char*>(&evaluable_) -
    reinterpret_cast<char*>(&trainable_)) + sizeof(evaluable_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelType)
}

inline void ModelType::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trainable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&evaluable_) -
    reinterpret_cast<char*>(&trainable_)) + sizeof(evaluable_));
}

ModelType::~ModelType() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelType::ArenaDtor(void* object) {
  ModelType* _this = reinterpret_cast< ModelType* >(object);
  (void)_this;
}
void ModelType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelType::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_fields_.Clear();
  output_fields_.Clear();
  model_type_fields_.Clear();
  expected_input_layers_.Clear();
  expected_output_layers_.Clear();
  id_.ClearToEmpty();
  title_.ClearToEmpty();
  description_.ClearToEmpty();
  ::memset(&trainable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&evaluable_) -
      reinterpret_cast<char*>(&trainable_)) + sizeof(evaluable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelType.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelType.title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelType.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string input_fields = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelType.input_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string output_fields = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelType.output_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool trainable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          trainable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool creatable = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          creatable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool internal_only = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          internal_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelTypeField model_type_fields = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_type_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool requires_sequential_frames = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          requires_sequential_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool evaluable = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          evaluable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelLayerInfo expected_input_layers = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_expected_input_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelLayerInfo expected_output_layers = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_expected_output_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelType.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelType.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelType.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // repeated string input_fields = 5;
  for (int i = 0, n = this->_internal_input_fields_size(); i < n; i++) {
    const auto& s = this->_internal_input_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelType.input_fields");
    target = stream->WriteString(5, s, target);
  }

  // repeated string output_fields = 6;
  for (int i = 0, n = this->_internal_output_fields_size(); i < n; i++) {
    const auto& s = this->_internal_output_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelType.output_fields");
    target = stream->WriteString(6, s, target);
  }

  // bool trainable = 8;
  if (this->_internal_trainable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_trainable(), target);
  }

  // bool creatable = 9;
  if (this->_internal_creatable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_creatable(), target);
  }

  // bool internal_only = 10;
  if (this->_internal_internal_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_internal_only(), target);
  }

  // repeated .clarifai.api.ModelTypeField model_type_fields = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_type_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_model_type_fields(i), target, stream);
  }

  // bool requires_sequential_frames = 12;
  if (this->_internal_requires_sequential_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_requires_sequential_frames(), target);
  }

  // bool evaluable = 13;
  if (this->_internal_evaluable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_evaluable(), target);
  }

  // repeated .clarifai.api.ModelLayerInfo expected_input_layers = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expected_input_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_expected_input_layers(i), target, stream);
  }

  // repeated .clarifai.api.ModelLayerInfo expected_output_layers = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expected_output_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_expected_output_layers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelType)
  return target;
}

size_t ModelType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_fields = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_fields_.size());
  for (int i = 0, n = input_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_fields_.Get(i));
  }

  // repeated string output_fields = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_fields_.size());
  for (int i = 0, n = output_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_fields_.Get(i));
  }

  // repeated .clarifai.api.ModelTypeField model_type_fields = 11;
  total_size += 1UL * this->_internal_model_type_fields_size();
  for (const auto& msg : this->model_type_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.ModelLayerInfo expected_input_layers = 16;
  total_size += 2UL * this->_internal_expected_input_layers_size();
  for (const auto& msg : this->expected_input_layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.ModelLayerInfo expected_output_layers = 17;
  total_size += 2UL * this->_internal_expected_output_layers_size();
  for (const auto& msg : this->expected_output_layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool trainable = 8;
  if (this->_internal_trainable() != 0) {
    total_size += 1 + 1;
  }

  // bool creatable = 9;
  if (this->_internal_creatable() != 0) {
    total_size += 1 + 1;
  }

  // bool internal_only = 10;
  if (this->_internal_internal_only() != 0) {
    total_size += 1 + 1;
  }

  // bool requires_sequential_frames = 12;
  if (this->_internal_requires_sequential_frames() != 0) {
    total_size += 1 + 1;
  }

  // bool evaluable = 13;
  if (this->_internal_evaluable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelType::GetClassData() const { return &_class_data_; }

void ModelType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelType *>(to)->MergeFrom(
      static_cast<const ModelType &>(from));
}


void ModelType::MergeFrom(const ModelType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  input_fields_.MergeFrom(from.input_fields_);
  output_fields_.MergeFrom(from.output_fields_);
  model_type_fields_.MergeFrom(from.model_type_fields_);
  expected_input_layers_.MergeFrom(from.expected_input_layers_);
  expected_output_layers_.MergeFrom(from.expected_output_layers_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_trainable() != 0) {
    _internal_set_trainable(from._internal_trainable());
  }
  if (from._internal_creatable() != 0) {
    _internal_set_creatable(from._internal_creatable());
  }
  if (from._internal_internal_only() != 0) {
    _internal_set_internal_only(from._internal_internal_only());
  }
  if (from._internal_requires_sequential_frames() != 0) {
    _internal_set_requires_sequential_frames(from._internal_requires_sequential_frames());
  }
  if (from._internal_evaluable() != 0) {
    _internal_set_evaluable(from._internal_evaluable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelType::CopyFrom(const ModelType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelType::IsInitialized() const {
  return true;
}

void ModelType::InternalSwap(ModelType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  input_fields_.InternalSwap(&other->input_fields_);
  output_fields_.InternalSwap(&other->output_fields_);
  model_type_fields_.InternalSwap(&other->model_type_fields_);
  expected_input_layers_.InternalSwap(&other->expected_input_layers_);
  expected_output_layers_.InternalSwap(&other->expected_output_layers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelType, evaluable_)
      + sizeof(ModelType::evaluable_)
      - PROTOBUF_FIELD_OFFSET(ModelType, trainable_)>(
          reinterpret_cast<char*>(&trainable_),
          reinterpret_cast<char*>(&other->trainable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[62]);
}

// ===================================================================

class ModelLayerInfo::_Internal {
 public:
};

ModelLayerInfo::ModelLayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shapes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelLayerInfo)
}
ModelLayerInfo::ModelLayerInfo(const ModelLayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shapes_(from.shapes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_field_name().empty()) {
    data_field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_field_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  requires_label_filename_ = from.requires_label_filename_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelLayerInfo)
}

inline void ModelLayerInfo::SharedCtor() {
data_field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
requires_label_filename_ = false;
}

ModelLayerInfo::~ModelLayerInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelLayerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelLayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelLayerInfo::ArenaDtor(void* object) {
  ModelLayerInfo* _this = reinterpret_cast< ModelLayerInfo* >(object);
  (void)_this;
}
void ModelLayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelLayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelLayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelLayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shapes_.Clear();
  data_field_name_.ClearToEmpty();
  description_.ClearToEmpty();
  requires_label_filename_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelLayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data_field_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelLayerInfo.data_field_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.LayerShape shapes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelLayerInfo.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool requires_label_filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          requires_label_filename_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelLayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelLayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data_field_name = 1;
  if (!this->_internal_data_field_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_field_name().data(), static_cast<int>(this->_internal_data_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelLayerInfo.data_field_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data_field_name(), target);
  }

  // repeated .clarifai.api.LayerShape shapes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shapes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_shapes(i), target, stream);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelLayerInfo.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // bool requires_label_filename = 4;
  if (this->_internal_requires_label_filename() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_requires_label_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelLayerInfo)
  return target;
}

size_t ModelLayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelLayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LayerShape shapes = 2;
  total_size += 1UL * this->_internal_shapes_size();
  for (const auto& msg : this->shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string data_field_name = 1;
  if (!this->_internal_data_field_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_field_name());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool requires_label_filename = 4;
  if (this->_internal_requires_label_filename() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelLayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelLayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelLayerInfo::GetClassData() const { return &_class_data_; }

void ModelLayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelLayerInfo *>(to)->MergeFrom(
      static_cast<const ModelLayerInfo &>(from));
}


void ModelLayerInfo::MergeFrom(const ModelLayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelLayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shapes_.MergeFrom(from.shapes_);
  if (!from._internal_data_field_name().empty()) {
    _internal_set_data_field_name(from._internal_data_field_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_requires_label_filename() != 0) {
    _internal_set_requires_label_filename(from._internal_requires_label_filename());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelLayerInfo::CopyFrom(const ModelLayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelLayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelLayerInfo::IsInitialized() const {
  return true;
}

void ModelLayerInfo::InternalSwap(ModelLayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shapes_.InternalSwap(&other->shapes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_field_name_, lhs_arena,
      &other->data_field_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  swap(requires_label_filename_, other->requires_label_filename_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelLayerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[63]);
}

// ===================================================================

class LayerShape::_Internal {
 public:
};

LayerShape::LayerShape(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dims_(arena),
  max_dims_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.LayerShape)
}
LayerShape::LayerShape(const LayerShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dims_(from.dims_),
      max_dims_(from.max_dims_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  data_type_ = from.data_type_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LayerShape)
}

inline void LayerShape::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_type_ = 0;
}

LayerShape::~LayerShape() {
  // @@protoc_insertion_point(destructor:clarifai.api.LayerShape)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LayerShape::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LayerShape::ArenaDtor(void* object) {
  LayerShape* _this = reinterpret_cast< LayerShape* >(object);
  (void)_this;
}
void LayerShape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LayerShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LayerShape::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LayerShape)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  max_dims_.Clear();
  description_.ClearToEmpty();
  data_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayerShape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 dims = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 max_dims = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_max_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_max_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DataType data_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::clarifai::api::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.LayerShape.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerShape::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LayerShape)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 dims = 1;
  {
    int byte_size = _dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_dims(), byte_size, target);
    }
  }

  // repeated int32 max_dims = 2;
  {
    int byte_size = _max_dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_max_dims(), byte_size, target);
    }
  }

  // .clarifai.api.DataType data_type = 3;
  if (this->_internal_data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_data_type(), target);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.LayerShape.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LayerShape)
  return target;
}

size_t LayerShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LayerShape)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 dims = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 max_dims = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->max_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _max_dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .clarifai.api.DataType data_type = 3;
  if (this->_internal_data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayerShape::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LayerShape::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayerShape::GetClassData() const { return &_class_data_; }

void LayerShape::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LayerShape *>(to)->MergeFrom(
      static_cast<const LayerShape &>(from));
}


void LayerShape::MergeFrom(const LayerShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LayerShape)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  max_dims_.MergeFrom(from.max_dims_);
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayerShape::CopyFrom(const LayerShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LayerShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerShape::IsInitialized() const {
  return true;
}

void LayerShape::InternalSwap(LayerShape* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dims_.InternalSwap(&other->dims_);
  max_dims_.InternalSwap(&other->max_dims_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  swap(data_type_, other->data_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayerShape::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[64]);
}

// ===================================================================

class ModelTypeField::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Value& default_value(const ModelTypeField* msg);
  static const ::clarifai::api::ModelTypeRangeInfo& model_type_range_info(const ModelTypeField* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Value&
ModelTypeField::_Internal::default_value(const ModelTypeField* msg) {
  return *msg->default_value_;
}
const ::clarifai::api::ModelTypeRangeInfo&
ModelTypeField::_Internal::model_type_range_info(const ModelTypeField* msg) {
  return *msg->model_type_range_info_;
}
void ModelTypeField::clear_default_value() {
  if (GetArenaForAllocation() == nullptr && default_value_ != nullptr) {
    delete default_value_;
  }
  default_value_ = nullptr;
}
ModelTypeField::ModelTypeField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  model_type_enum_options_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelTypeField)
}
ModelTypeField::ModelTypeField(const ModelTypeField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      model_type_enum_options_(from.model_type_enum_options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  placeholder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    placeholder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_placeholder().empty()) {
    placeholder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_placeholder(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_default_value()) {
    default_value_ = new ::PROTOBUF_NAMESPACE_ID::Value(*from.default_value_);
  } else {
    default_value_ = nullptr;
  }
  if (from._internal_has_model_type_range_info()) {
    model_type_range_info_ = new ::clarifai::api::ModelTypeRangeInfo(*from.model_type_range_info_);
  } else {
    model_type_range_info_ = nullptr;
  }
  ::memcpy(&field_type_, &from.field_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&required_) -
    reinterpret_cast<char*>(&field_type_)) + sizeof(required_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelTypeField)
}

inline void ModelTypeField::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
placeholder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  placeholder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&default_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&required_) -
    reinterpret_cast<char*>(&default_value_)) + sizeof(required_));
}

ModelTypeField::~ModelTypeField() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelTypeField)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelTypeField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placeholder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete default_value_;
  if (this != internal_default_instance()) delete model_type_range_info_;
}

void ModelTypeField::ArenaDtor(void* object) {
  ModelTypeField* _this = reinterpret_cast< ModelTypeField* >(object);
  (void)_this;
}
void ModelTypeField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelTypeField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelTypeField::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelTypeField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_type_enum_options_.Clear();
  path_.ClearToEmpty();
  description_.ClearToEmpty();
  placeholder_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && default_value_ != nullptr) {
    delete default_value_;
  }
  default_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && model_type_range_info_ != nullptr) {
    delete model_type_range_info_;
  }
  model_type_range_info_ = nullptr;
  ::memset(&field_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_) -
      reinterpret_cast<char*>(&field_type_)) + sizeof(required_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelTypeField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelTypeField.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelTypeField.ModelTypeFieldType field_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_field_type(static_cast<::clarifai::api::ModelTypeField_ModelTypeFieldType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Value default_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelTypeField.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string placeholder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_placeholder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelTypeField.placeholder"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelTypeEnumOption model_type_enum_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_type_enum_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool internal_only = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          internal_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool required = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelTypeRangeInfo model_type_range_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_type_range_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelTypeField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelTypeField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeField.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .clarifai.api.ModelTypeField.ModelTypeFieldType field_type = 2;
  if (this->_internal_field_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_field_type(), target);
  }

  // .google.protobuf.Value default_value = 3;
  if (this->_internal_has_default_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::default_value(this), target, stream);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeField.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // string placeholder = 5;
  if (!this->_internal_placeholder().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_placeholder().data(), static_cast<int>(this->_internal_placeholder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeField.placeholder");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_placeholder(), target);
  }

  // repeated .clarifai.api.ModelTypeEnumOption model_type_enum_options = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_type_enum_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_model_type_enum_options(i), target, stream);
  }

  // bool internal_only = 7;
  if (this->_internal_internal_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_internal_only(), target);
  }

  // bool required = 8;
  if (this->_internal_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_required(), target);
  }

  // .clarifai.api.ModelTypeRangeInfo model_type_range_info = 9;
  if (this->_internal_has_model_type_range_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::model_type_range_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelTypeField)
  return target;
}

size_t ModelTypeField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelTypeField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelTypeEnumOption model_type_enum_options = 6;
  total_size += 1UL * this->_internal_model_type_enum_options_size();
  for (const auto& msg : this->model_type_enum_options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string placeholder = 5;
  if (!this->_internal_placeholder().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_placeholder());
  }

  // .google.protobuf.Value default_value = 3;
  if (this->_internal_has_default_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_value_);
  }

  // .clarifai.api.ModelTypeRangeInfo model_type_range_info = 9;
  if (this->_internal_has_model_type_range_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_type_range_info_);
  }

  // .clarifai.api.ModelTypeField.ModelTypeFieldType field_type = 2;
  if (this->_internal_field_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_field_type());
  }

  // bool internal_only = 7;
  if (this->_internal_internal_only() != 0) {
    total_size += 1 + 1;
  }

  // bool required = 8;
  if (this->_internal_required() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelTypeField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelTypeField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelTypeField::GetClassData() const { return &_class_data_; }

void ModelTypeField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelTypeField *>(to)->MergeFrom(
      static_cast<const ModelTypeField &>(from));
}


void ModelTypeField::MergeFrom(const ModelTypeField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelTypeField)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  model_type_enum_options_.MergeFrom(from.model_type_enum_options_);
  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_placeholder().empty()) {
    _internal_set_placeholder(from._internal_placeholder());
  }
  if (from._internal_has_default_value()) {
    _internal_mutable_default_value()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_default_value());
  }
  if (from._internal_has_model_type_range_info()) {
    _internal_mutable_model_type_range_info()->::clarifai::api::ModelTypeRangeInfo::MergeFrom(from._internal_model_type_range_info());
  }
  if (from._internal_field_type() != 0) {
    _internal_set_field_type(from._internal_field_type());
  }
  if (from._internal_internal_only() != 0) {
    _internal_set_internal_only(from._internal_internal_only());
  }
  if (from._internal_required() != 0) {
    _internal_set_required(from._internal_required());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelTypeField::CopyFrom(const ModelTypeField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelTypeField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTypeField::IsInitialized() const {
  return true;
}

void ModelTypeField::InternalSwap(ModelTypeField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  model_type_enum_options_.InternalSwap(&other->model_type_enum_options_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &placeholder_, lhs_arena,
      &other->placeholder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelTypeField, required_)
      + sizeof(ModelTypeField::required_)
      - PROTOBUF_FIELD_OFFSET(ModelTypeField, default_value_)>(
          reinterpret_cast<char*>(&default_value_),
          reinterpret_cast<char*>(&other->default_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelTypeField::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[65]);
}

// ===================================================================

class ModelTypeRangeInfo::_Internal {
 public:
};

ModelTypeRangeInfo::ModelTypeRangeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelTypeRangeInfo)
}
ModelTypeRangeInfo::ModelTypeRangeInfo(const ModelTypeRangeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&min_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelTypeRangeInfo)
}

inline void ModelTypeRangeInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&min_)) + sizeof(step_));
}

ModelTypeRangeInfo::~ModelTypeRangeInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelTypeRangeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelTypeRangeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModelTypeRangeInfo::ArenaDtor(void* object) {
  ModelTypeRangeInfo* _this = reinterpret_cast< ModelTypeRangeInfo* >(object);
  (void)_this;
}
void ModelTypeRangeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelTypeRangeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelTypeRangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelTypeRangeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&min_)) + sizeof(step_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelTypeRangeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float step = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelTypeRangeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelTypeRangeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float min = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min = this->_internal_min();
  uint32_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min(), target);
  }

  // float max = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max = this->_internal_max();
  uint32_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max(), target);
  }

  // float step = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_step = this->_internal_step();
  uint32_t raw_step;
  memcpy(&raw_step, &tmp_step, sizeof(tmp_step));
  if (raw_step != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_step(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelTypeRangeInfo)
  return target;
}

size_t ModelTypeRangeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelTypeRangeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float min = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min = this->_internal_min();
  uint32_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    total_size += 1 + 4;
  }

  // float max = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max = this->_internal_max();
  uint32_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    total_size += 1 + 4;
  }

  // float step = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_step = this->_internal_step();
  uint32_t raw_step;
  memcpy(&raw_step, &tmp_step, sizeof(tmp_step));
  if (raw_step != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelTypeRangeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelTypeRangeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelTypeRangeInfo::GetClassData() const { return &_class_data_; }

void ModelTypeRangeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelTypeRangeInfo *>(to)->MergeFrom(
      static_cast<const ModelTypeRangeInfo &>(from));
}


void ModelTypeRangeInfo::MergeFrom(const ModelTypeRangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelTypeRangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min = from._internal_min();
  uint32_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    _internal_set_min(from._internal_min());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max = from._internal_max();
  uint32_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    _internal_set_max(from._internal_max());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_step = from._internal_step();
  uint32_t raw_step;
  memcpy(&raw_step, &tmp_step, sizeof(tmp_step));
  if (raw_step != 0) {
    _internal_set_step(from._internal_step());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelTypeRangeInfo::CopyFrom(const ModelTypeRangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelTypeRangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTypeRangeInfo::IsInitialized() const {
  return true;
}

void ModelTypeRangeInfo::InternalSwap(ModelTypeRangeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelTypeRangeInfo, step_)
      + sizeof(ModelTypeRangeInfo::step_)
      - PROTOBUF_FIELD_OFFSET(ModelTypeRangeInfo, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelTypeRangeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[66]);
}

// ===================================================================

class ModelTypeEnumOption::_Internal {
 public:
};

ModelTypeEnumOption::ModelTypeEnumOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  model_type_fields_(arena),
  aliases_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelTypeEnumOption)
}
ModelTypeEnumOption::ModelTypeEnumOption(const ModelTypeEnumOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      model_type_fields_(from.model_type_fields_),
      aliases_(from.aliases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  internal_only_ = from.internal_only_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelTypeEnumOption)
}

inline void ModelTypeEnumOption::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
internal_only_ = false;
}

ModelTypeEnumOption::~ModelTypeEnumOption() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelTypeEnumOption)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelTypeEnumOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelTypeEnumOption::ArenaDtor(void* object) {
  ModelTypeEnumOption* _this = reinterpret_cast< ModelTypeEnumOption* >(object);
  (void)_this;
}
void ModelTypeEnumOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelTypeEnumOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelTypeEnumOption::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelTypeEnumOption)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_type_fields_.Clear();
  aliases_.Clear();
  id_.ClearToEmpty();
  description_.ClearToEmpty();
  internal_only_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelTypeEnumOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelTypeEnumOption.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelTypeEnumOption.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelTypeField model_type_fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_type_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool internal_only = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          internal_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelTypeEnumOptionAlias aliases = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aliases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelTypeEnumOption::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelTypeEnumOption)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeEnumOption.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelTypeEnumOption.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // repeated .clarifai.api.ModelTypeField model_type_fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_type_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_model_type_fields(i), target, stream);
  }

  // bool internal_only = 4;
  if (this->_internal_internal_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_internal_only(), target);
  }

  // repeated .clarifai.api.ModelTypeEnumOptionAlias aliases = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_aliases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_aliases(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelTypeEnumOption)
  return target;
}

size_t ModelTypeEnumOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelTypeEnumOption)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelTypeField model_type_fields = 3;
  total_size += 1UL * this->_internal_model_type_fields_size();
  for (const auto& msg : this->model_type_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.ModelTypeEnumOptionAlias aliases = 5;
  total_size += 1UL * this->_internal_aliases_size();
  for (const auto& msg : this->aliases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool internal_only = 4;
  if (this->_internal_internal_only() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelTypeEnumOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelTypeEnumOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelTypeEnumOption::GetClassData() const { return &_class_data_; }

void ModelTypeEnumOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelTypeEnumOption *>(to)->MergeFrom(
      static_cast<const ModelTypeEnumOption &>(from));
}


void ModelTypeEnumOption::MergeFrom(const ModelTypeEnumOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelTypeEnumOption)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  model_type_fields_.MergeFrom(from.model_type_fields_);
  aliases_.MergeFrom(from.aliases_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_internal_only() != 0) {
    _internal_set_internal_only(from._internal_internal_only());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelTypeEnumOption::CopyFrom(const ModelTypeEnumOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelTypeEnumOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTypeEnumOption::IsInitialized() const {
  return true;
}

void ModelTypeEnumOption::InternalSwap(ModelTypeEnumOption* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  model_type_fields_.InternalSwap(&other->model_type_fields_);
  aliases_.InternalSwap(&other->aliases_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  swap(internal_only_, other->internal_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelTypeEnumOption::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[67]);
}

// ===================================================================

class ModelTypeEnumOptionAlias::_Internal {
 public:
};

ModelTypeEnumOptionAlias::ModelTypeEnumOptionAlias(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelTypeEnumOptionAlias)
}
ModelTypeEnumOptionAlias::ModelTypeEnumOptionAlias(const ModelTypeEnumOptionAlias& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_int_ = from.id_int_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelTypeEnumOptionAlias)
}

inline void ModelTypeEnumOptionAlias::SharedCtor() {
id_int_ = int64_t{0};
}

ModelTypeEnumOptionAlias::~ModelTypeEnumOptionAlias() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelTypeEnumOptionAlias)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelTypeEnumOptionAlias::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModelTypeEnumOptionAlias::ArenaDtor(void* object) {
  ModelTypeEnumOptionAlias* _this = reinterpret_cast< ModelTypeEnumOptionAlias* >(object);
  (void)_this;
}
void ModelTypeEnumOptionAlias::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelTypeEnumOptionAlias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelTypeEnumOptionAlias::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelTypeEnumOptionAlias)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_int_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelTypeEnumOptionAlias::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelTypeEnumOptionAlias::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelTypeEnumOptionAlias)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id_int = 1;
  if (this->_internal_id_int() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id_int(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelTypeEnumOptionAlias)
  return target;
}

size_t ModelTypeEnumOptionAlias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelTypeEnumOptionAlias)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id_int = 1;
  if (this->_internal_id_int() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id_int());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelTypeEnumOptionAlias::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelTypeEnumOptionAlias::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelTypeEnumOptionAlias::GetClassData() const { return &_class_data_; }

void ModelTypeEnumOptionAlias::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelTypeEnumOptionAlias *>(to)->MergeFrom(
      static_cast<const ModelTypeEnumOptionAlias &>(from));
}


void ModelTypeEnumOptionAlias::MergeFrom(const ModelTypeEnumOptionAlias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelTypeEnumOptionAlias)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id_int() != 0) {
    _internal_set_id_int(from._internal_id_int());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelTypeEnumOptionAlias::CopyFrom(const ModelTypeEnumOptionAlias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelTypeEnumOptionAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTypeEnumOptionAlias::IsInitialized() const {
  return true;
}

void ModelTypeEnumOptionAlias::InternalSwap(ModelTypeEnumOptionAlias* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_int_, other->id_int_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelTypeEnumOptionAlias::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[68]);
}

// ===================================================================

class ModelQuery::_Internal {
 public:
};

ModelQuery::ModelQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelQuery)
}
ModelQuery::ModelQuery(const ModelQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  model_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_type_id().empty()) {
    model_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_type_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelQuery)
}

inline void ModelQuery::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelQuery::~ModelQuery() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelQuery)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelQuery::ArenaDtor(void* object) {
  ModelQuery* _this = reinterpret_cast< ModelQuery* >(object);
  (void)_this;
}
void ModelQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  model_type_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelQuery.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_type_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_type_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelQuery.model_type_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelQuery.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string model_type_id = 3;
  if (!this->_internal_model_type_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type_id().data(), static_cast<int>(this->_internal_model_type_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelQuery.model_type_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_type_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelQuery)
  return target;
}

size_t ModelQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string model_type_id = 3;
  if (!this->_internal_model_type_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelQuery::GetClassData() const { return &_class_data_; }

void ModelQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelQuery *>(to)->MergeFrom(
      static_cast<const ModelQuery &>(from));
}


void ModelQuery::MergeFrom(const ModelQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelQuery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_model_type_id().empty()) {
    _internal_set_model_type_id(from._internal_model_type_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelQuery::CopyFrom(const ModelQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelQuery::IsInitialized() const {
  return true;
}

void ModelQuery::InternalSwap(ModelQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_type_id_, lhs_arena,
      &other->model_type_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelQuery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[69]);
}

// ===================================================================

class ModelVersion::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const ModelVersion* msg);
  static const ::clarifai::api::status::Status& status(const ModelVersion* msg);
  static const ::clarifai::api::EvalMetrics& metrics(const ModelVersion* msg);
  static const ::clarifai::api::PretrainedModelConfig& pretrained_model_config(const ModelVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& completed_at(const ModelVersion* msg);
  static const ::clarifai::api::Visibility& visibility(const ModelVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const ModelVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const ModelVersion* msg);
  static const ::clarifai::api::DatasetVersion& dataset_version(const ModelVersion* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ModelVersion::_Internal::created_at(const ModelVersion* msg) {
  return *msg->created_at_;
}
const ::clarifai::api::status::Status&
ModelVersion::_Internal::status(const ModelVersion* msg) {
  return *msg->status_;
}
const ::clarifai::api::EvalMetrics&
ModelVersion::_Internal::metrics(const ModelVersion* msg) {
  return *msg->metrics_;
}
const ::clarifai::api::PretrainedModelConfig&
ModelVersion::_Internal::pretrained_model_config(const ModelVersion* msg) {
  return *msg->pretrained_model_config_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ModelVersion::_Internal::completed_at(const ModelVersion* msg) {
  return *msg->completed_at_;
}
const ::clarifai::api::Visibility&
ModelVersion::_Internal::visibility(const ModelVersion* msg) {
  return *msg->visibility_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ModelVersion::_Internal::modified_at(const ModelVersion* msg) {
  return *msg->modified_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
ModelVersion::_Internal::metadata(const ModelVersion* msg) {
  return *msg->metadata_;
}
const ::clarifai::api::DatasetVersion&
ModelVersion::_Internal::dataset_version(const ModelVersion* msg) {
  return *msg->dataset_version_;
}
void ModelVersion::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void ModelVersion::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void ModelVersion::clear_completed_at() {
  if (GetArenaForAllocation() == nullptr && completed_at_ != nullptr) {
    delete completed_at_;
  }
  completed_at_ = nullptr;
}
void ModelVersion::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void ModelVersion::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
ModelVersion::ModelVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelVersion)
}
ModelVersion::ModelVersion(const ModelVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  license_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    license_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_license().empty()) {
    license_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_license(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_metrics()) {
    metrics_ = new ::clarifai::api::EvalMetrics(*from.metrics_);
  } else {
    metrics_ = nullptr;
  }
  if (from._internal_has_pretrained_model_config()) {
    pretrained_model_config_ = new ::clarifai::api::PretrainedModelConfig(*from.pretrained_model_config_);
  } else {
    pretrained_model_config_ = nullptr;
  }
  if (from._internal_has_completed_at()) {
    completed_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.completed_at_);
  } else {
    completed_at_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_dataset_version()) {
    dataset_version_ = new ::clarifai::api::DatasetVersion(*from.dataset_version_);
  } else {
    dataset_version_ = nullptr;
  }
  ::memcpy(&active_concept_count_, &from.active_concept_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_input_count_) -
    reinterpret_cast<char*>(&active_concept_count_)) + sizeof(total_input_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelVersion)
}

inline void ModelVersion::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
license_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  license_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_input_count_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(total_input_count_));
}

ModelVersion::~ModelVersion() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  license_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete metrics_;
  if (this != internal_default_instance()) delete pretrained_model_config_;
  if (this != internal_default_instance()) delete completed_at_;
  if (this != internal_default_instance()) delete visibility_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete dataset_version_;
}

void ModelVersion::ArenaDtor(void* object) {
  ModelVersion* _this = reinterpret_cast< ModelVersion* >(object);
  (void)_this;
}
void ModelVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  description_.ClearToEmpty();
  app_id_.ClearToEmpty();
  user_id_.ClearToEmpty();
  license_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pretrained_model_config_ != nullptr) {
    delete pretrained_model_config_;
  }
  pretrained_model_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && completed_at_ != nullptr) {
    delete completed_at_;
  }
  completed_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dataset_version_ != nullptr) {
    delete dataset_version_;
  }
  dataset_version_ = nullptr;
  ::memset(&active_concept_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_input_count_) -
      reinterpret_cast<char*>(&active_concept_count_)) + sizeof(total_input_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersion.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 active_concept_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          active_concept_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvalMetrics metrics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 total_input_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          total_input_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.PretrainedModelConfig pretrained_model_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pretrained_model_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp completed_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_completed_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersion.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersion.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersion.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string license = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_license();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersion.license"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersion dataset_version = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // .clarifai.api.status.Status status = 3;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  // uint32 active_concept_count = 4;
  if (this->_internal_active_concept_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_active_concept_count(), target);
  }

  // .clarifai.api.EvalMetrics metrics = 5;
  if (this->_internal_has_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metrics(this), target, stream);
  }

  // uint32 total_input_count = 6;
  if (this->_internal_total_input_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_total_input_count(), target);
  }

  // .clarifai.api.PretrainedModelConfig pretrained_model_config = 7;
  if (this->_internal_has_pretrained_model_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::pretrained_model_config(this), target, stream);
  }

  // .google.protobuf.Timestamp completed_at = 10;
  if (this->_internal_has_completed_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::completed_at(this), target, stream);
  }

  // string description = 11;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.description");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_description(), target);
  }

  // .clarifai.api.Visibility visibility = 12;
  if (this->_internal_has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::visibility(this), target, stream);
  }

  // string app_id = 13;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.app_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_app_id(), target);
  }

  // string user_id = 14;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.user_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_user_id(), target);
  }

  // .google.protobuf.Timestamp modified_at = 15;
  if (this->_internal_has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::modified_at(this), target, stream);
  }

  // .google.protobuf.Struct metadata = 16;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::metadata(this), target, stream);
  }

  // string license = 17;
  if (!this->_internal_license().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersion.license");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_license(), target);
  }

  // .clarifai.api.DatasetVersion dataset_version = 18;
  if (this->_internal_has_dataset_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::dataset_version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelVersion)
  return target;
}

size_t ModelVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 11;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string app_id = 13;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 14;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string license = 17;
  if (!this->_internal_license().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .clarifai.api.status.Status status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.EvalMetrics metrics = 5;
  if (this->_internal_has_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metrics_);
  }

  // .clarifai.api.PretrainedModelConfig pretrained_model_config = 7;
  if (this->_internal_has_pretrained_model_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pretrained_model_config_);
  }

  // .google.protobuf.Timestamp completed_at = 10;
  if (this->_internal_has_completed_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *completed_at_);
  }

  // .clarifai.api.Visibility visibility = 12;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .google.protobuf.Timestamp modified_at = 15;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .google.protobuf.Struct metadata = 16;
  if (this->_internal_has_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .clarifai.api.DatasetVersion dataset_version = 18;
  if (this->_internal_has_dataset_version()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dataset_version_);
  }

  // uint32 active_concept_count = 4;
  if (this->_internal_active_concept_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_active_concept_count());
  }

  // uint32 total_input_count = 6;
  if (this->_internal_total_input_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total_input_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelVersion::GetClassData() const { return &_class_data_; }

void ModelVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelVersion *>(to)->MergeFrom(
      static_cast<const ModelVersion &>(from));
}


void ModelVersion::MergeFrom(const ModelVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_license().empty()) {
    _internal_set_license(from._internal_license());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_metrics()) {
    _internal_mutable_metrics()->::clarifai::api::EvalMetrics::MergeFrom(from._internal_metrics());
  }
  if (from._internal_has_pretrained_model_config()) {
    _internal_mutable_pretrained_model_config()->::clarifai::api::PretrainedModelConfig::MergeFrom(from._internal_pretrained_model_config());
  }
  if (from._internal_has_completed_at()) {
    _internal_mutable_completed_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_completed_at());
  }
  if (from._internal_has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from._internal_has_modified_at()) {
    _internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_dataset_version()) {
    _internal_mutable_dataset_version()->::clarifai::api::DatasetVersion::MergeFrom(from._internal_dataset_version());
  }
  if (from._internal_active_concept_count() != 0) {
    _internal_set_active_concept_count(from._internal_active_concept_count());
  }
  if (from._internal_total_input_count() != 0) {
    _internal_set_total_input_count(from._internal_total_input_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelVersion::CopyFrom(const ModelVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVersion::IsInitialized() const {
  return true;
}

void ModelVersion::InternalSwap(ModelVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &license_, lhs_arena,
      &other->license_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelVersion, total_input_count_)
      + sizeof(ModelVersion::total_input_count_)
      - PROTOBUF_FIELD_OFFSET(ModelVersion, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[70]);
}

// ===================================================================

class PretrainedModelConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& input_fields_map(const PretrainedModelConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& output_fields_map(const PretrainedModelConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
PretrainedModelConfig::_Internal::input_fields_map(const PretrainedModelConfig* msg) {
  return *msg->input_fields_map_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
PretrainedModelConfig::_Internal::output_fields_map(const PretrainedModelConfig* msg) {
  return *msg->output_fields_map_;
}
void PretrainedModelConfig::clear_input_fields_map() {
  if (GetArenaForAllocation() == nullptr && input_fields_map_ != nullptr) {
    delete input_fields_map_;
  }
  input_fields_map_ = nullptr;
}
void PretrainedModelConfig::clear_output_fields_map() {
  if (GetArenaForAllocation() == nullptr && output_fields_map_ != nullptr) {
    delete output_fields_map_;
  }
  output_fields_map_ = nullptr;
}
PretrainedModelConfig::PretrainedModelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PretrainedModelConfig)
}
PretrainedModelConfig::PretrainedModelConfig(const PretrainedModelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_zip_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_zip_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_zip_url().empty()) {
    model_zip_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_zip_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_input_fields_map()) {
    input_fields_map_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.input_fields_map_);
  } else {
    input_fields_map_ = nullptr;
  }
  if (from._internal_has_output_fields_map()) {
    output_fields_map_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.output_fields_map_);
  } else {
    output_fields_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PretrainedModelConfig)
}

inline void PretrainedModelConfig::SharedCtor() {
model_zip_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_zip_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&input_fields_map_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&output_fields_map_) -
    reinterpret_cast<char*>(&input_fields_map_)) + sizeof(output_fields_map_));
}

PretrainedModelConfig::~PretrainedModelConfig() {
  // @@protoc_insertion_point(destructor:clarifai.api.PretrainedModelConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PretrainedModelConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_zip_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete input_fields_map_;
  if (this != internal_default_instance()) delete output_fields_map_;
}

void PretrainedModelConfig::ArenaDtor(void* object) {
  PretrainedModelConfig* _this = reinterpret_cast< PretrainedModelConfig* >(object);
  (void)_this;
}
void PretrainedModelConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PretrainedModelConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PretrainedModelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PretrainedModelConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_zip_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && input_fields_map_ != nullptr) {
    delete input_fields_map_;
  }
  input_fields_map_ = nullptr;
  if (GetArenaForAllocation() == nullptr && output_fields_map_ != nullptr) {
    delete output_fields_map_;
  }
  output_fields_map_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PretrainedModelConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct input_fields_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_fields_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct output_fields_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_fields_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_zip_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_model_zip_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PretrainedModelConfig.model_zip_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PretrainedModelConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PretrainedModelConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct input_fields_map = 3;
  if (this->_internal_has_input_fields_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::input_fields_map(this), target, stream);
  }

  // .google.protobuf.Struct output_fields_map = 4;
  if (this->_internal_has_output_fields_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::output_fields_map(this), target, stream);
  }

  // string model_zip_url = 6;
  if (!this->_internal_model_zip_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_zip_url().data(), static_cast<int>(this->_internal_model_zip_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PretrainedModelConfig.model_zip_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_model_zip_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PretrainedModelConfig)
  return target;
}

size_t PretrainedModelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PretrainedModelConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_zip_url = 6;
  if (!this->_internal_model_zip_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_zip_url());
  }

  // .google.protobuf.Struct input_fields_map = 3;
  if (this->_internal_has_input_fields_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_fields_map_);
  }

  // .google.protobuf.Struct output_fields_map = 4;
  if (this->_internal_has_output_fields_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_fields_map_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PretrainedModelConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PretrainedModelConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PretrainedModelConfig::GetClassData() const { return &_class_data_; }

void PretrainedModelConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PretrainedModelConfig *>(to)->MergeFrom(
      static_cast<const PretrainedModelConfig &>(from));
}


void PretrainedModelConfig::MergeFrom(const PretrainedModelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PretrainedModelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_zip_url().empty()) {
    _internal_set_model_zip_url(from._internal_model_zip_url());
  }
  if (from._internal_has_input_fields_map()) {
    _internal_mutable_input_fields_map()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_input_fields_map());
  }
  if (from._internal_has_output_fields_map()) {
    _internal_mutable_output_fields_map()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_output_fields_map());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PretrainedModelConfig::CopyFrom(const PretrainedModelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PretrainedModelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PretrainedModelConfig::IsInitialized() const {
  return true;
}

void PretrainedModelConfig::InternalSwap(PretrainedModelConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_zip_url_, lhs_arena,
      &other->model_zip_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PretrainedModelConfig, output_fields_map_)
      + sizeof(PretrainedModelConfig::output_fields_map_)
      - PROTOBUF_FIELD_OFFSET(PretrainedModelConfig, input_fields_map_)>(
          reinterpret_cast<char*>(&input_fields_map_),
          reinterpret_cast<char*>(&other->input_fields_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PretrainedModelConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[71]);
}

// ===================================================================

class TrainStats::_Internal {
 public:
};

TrainStats::TrainStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  loss_curve_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TrainStats)
}
TrainStats::TrainStats(const TrainStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      loss_curve_(from.loss_curve_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TrainStats)
}

inline void TrainStats::SharedCtor() {
}

TrainStats::~TrainStats() {
  // @@protoc_insertion_point(destructor:clarifai.api.TrainStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrainStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrainStats::ArenaDtor(void* object) {
  TrainStats* _this = reinterpret_cast< TrainStats* >(object);
  (void)_this;
}
void TrainStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrainStats::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TrainStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loss_curve_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.LossCurveEntry loss_curve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loss_curve(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrainStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TrainStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.LossCurveEntry loss_curve = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_loss_curve_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_loss_curve(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TrainStats)
  return target;
}

size_t TrainStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TrainStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LossCurveEntry loss_curve = 1;
  total_size += 1UL * this->_internal_loss_curve_size();
  for (const auto& msg : this->loss_curve_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrainStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrainStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrainStats::GetClassData() const { return &_class_data_; }

void TrainStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrainStats *>(to)->MergeFrom(
      static_cast<const TrainStats &>(from));
}


void TrainStats::MergeFrom(const TrainStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TrainStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  loss_curve_.MergeFrom(from.loss_curve_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrainStats::CopyFrom(const TrainStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TrainStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainStats::IsInitialized() const {
  return true;
}

void TrainStats::InternalSwap(TrainStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  loss_curve_.InternalSwap(&other->loss_curve_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[72]);
}

// ===================================================================

class LossCurveEntry::_Internal {
 public:
};

LossCurveEntry::LossCurveEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.LossCurveEntry)
}
LossCurveEntry::LossCurveEntry(const LossCurveEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LossCurveEntry)
}

inline void LossCurveEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&epoch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(cost_));
}

LossCurveEntry::~LossCurveEntry() {
  // @@protoc_insertion_point(destructor:clarifai.api.LossCurveEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LossCurveEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LossCurveEntry::ArenaDtor(void* object) {
  LossCurveEntry* _this = reinterpret_cast< LossCurveEntry* >(object);
  (void)_this;
}
void LossCurveEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LossCurveEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LossCurveEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LossCurveEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LossCurveEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 global_step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          global_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LossCurveEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LossCurveEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_epoch(), target);
  }

  // uint32 global_step = 2;
  if (this->_internal_global_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_global_step(), target);
  }

  // float cost = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost = this->_internal_cost();
  uint32_t raw_cost;
  memcpy(&raw_cost, &tmp_cost, sizeof(tmp_cost));
  if (raw_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LossCurveEntry)
  return target;
}

size_t LossCurveEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LossCurveEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_epoch());
  }

  // uint32 global_step = 2;
  if (this->_internal_global_step() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_global_step());
  }

  // float cost = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost = this->_internal_cost();
  uint32_t raw_cost;
  memcpy(&raw_cost, &tmp_cost, sizeof(tmp_cost));
  if (raw_cost != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LossCurveEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LossCurveEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LossCurveEntry::GetClassData() const { return &_class_data_; }

void LossCurveEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LossCurveEntry *>(to)->MergeFrom(
      static_cast<const LossCurveEntry &>(from));
}


void LossCurveEntry::MergeFrom(const LossCurveEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LossCurveEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_global_step() != 0) {
    _internal_set_global_step(from._internal_global_step());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost = from._internal_cost();
  uint32_t raw_cost;
  memcpy(&raw_cost, &tmp_cost, sizeof(tmp_cost));
  if (raw_cost != 0) {
    _internal_set_cost(from._internal_cost());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LossCurveEntry::CopyFrom(const LossCurveEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LossCurveEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossCurveEntry::IsInitialized() const {
  return true;
}

void LossCurveEntry::InternalSwap(LossCurveEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LossCurveEntry, cost_)
      + sizeof(LossCurveEntry::cost_)
      - PROTOBUF_FIELD_OFFSET(LossCurveEntry, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LossCurveEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[73]);
}

// ===================================================================

class LabelCount::_Internal {
 public:
};

LabelCount::LabelCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.LabelCount)
}
LabelCount::LabelCount(const LabelCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  concept_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    concept_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_name().empty()) {
    concept_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_concept_name(), 
      GetArenaForAllocation());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LabelCount)
}

inline void LabelCount::SharedCtor() {
concept_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  concept_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
count_ = 0u;
}

LabelCount::~LabelCount() {
  // @@protoc_insertion_point(destructor:clarifai.api.LabelCount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LabelCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  concept_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabelCount::ArenaDtor(void* object) {
  LabelCount* _this = reinterpret_cast< LabelCount* >(object);
  (void)_this;
}
void LabelCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LabelCount::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LabelCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_name_.ClearToEmpty();
  count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string concept_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_concept_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.LabelCount.concept_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LabelCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LabelCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string concept_name = 1;
  if (!this->_internal_concept_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_name().data(), static_cast<int>(this->_internal_concept_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.LabelCount.concept_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_concept_name(), target);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LabelCount)
  return target;
}

size_t LabelCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LabelCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_name = 1;
  if (!this->_internal_concept_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_name());
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabelCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LabelCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabelCount::GetClassData() const { return &_class_data_; }

void LabelCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LabelCount *>(to)->MergeFrom(
      static_cast<const LabelCount &>(from));
}


void LabelCount::MergeFrom(const LabelCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LabelCount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_concept_name().empty()) {
    _internal_set_concept_name(from._internal_concept_name());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabelCount::CopyFrom(const LabelCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LabelCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelCount::IsInitialized() const {
  return true;
}

void LabelCount::InternalSwap(LabelCount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &concept_name_, lhs_arena,
      &other->concept_name_, rhs_arena
  );
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelCount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[74]);
}

// ===================================================================

class LabelDistribution::_Internal {
 public:
};

LabelDistribution::LabelDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  positive_label_counts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.LabelDistribution)
}
LabelDistribution::LabelDistribution(const LabelDistribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      positive_label_counts_(from.positive_label_counts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LabelDistribution)
}

inline void LabelDistribution::SharedCtor() {
}

LabelDistribution::~LabelDistribution() {
  // @@protoc_insertion_point(destructor:clarifai.api.LabelDistribution)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LabelDistribution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LabelDistribution::ArenaDtor(void* object) {
  LabelDistribution* _this = reinterpret_cast< LabelDistribution* >(object);
  (void)_this;
}
void LabelDistribution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelDistribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LabelDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LabelDistribution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positive_label_counts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelDistribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.LabelCount positive_label_counts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positive_label_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LabelDistribution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LabelDistribution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.LabelCount positive_label_counts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_positive_label_counts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_positive_label_counts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LabelDistribution)
  return target;
}

size_t LabelDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LabelDistribution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LabelCount positive_label_counts = 1;
  total_size += 1UL * this->_internal_positive_label_counts_size();
  for (const auto& msg : this->positive_label_counts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabelDistribution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LabelDistribution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabelDistribution::GetClassData() const { return &_class_data_; }

void LabelDistribution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LabelDistribution *>(to)->MergeFrom(
      static_cast<const LabelDistribution &>(from));
}


void LabelDistribution::MergeFrom(const LabelDistribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LabelDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  positive_label_counts_.MergeFrom(from.positive_label_counts_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabelDistribution::CopyFrom(const LabelDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LabelDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelDistribution::IsInitialized() const {
  return true;
}

void LabelDistribution::InternalSwap(LabelDistribution* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  positive_label_counts_.InternalSwap(&other->positive_label_counts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelDistribution::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[75]);
}

// ===================================================================

class CooccurrenceMatrixEntry::_Internal {
 public:
};

CooccurrenceMatrixEntry::CooccurrenceMatrixEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.CooccurrenceMatrixEntry)
}
CooccurrenceMatrixEntry::CooccurrenceMatrixEntry(const CooccurrenceMatrixEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    row_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_row().empty()) {
    row_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_row(), 
      GetArenaForAllocation());
  }
  col_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    col_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_col().empty()) {
    col_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_col(), 
      GetArenaForAllocation());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.CooccurrenceMatrixEntry)
}

inline void CooccurrenceMatrixEntry::SharedCtor() {
row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  row_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
col_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  col_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
count_ = 0u;
}

CooccurrenceMatrixEntry::~CooccurrenceMatrixEntry() {
  // @@protoc_insertion_point(destructor:clarifai.api.CooccurrenceMatrixEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CooccurrenceMatrixEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  row_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  col_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CooccurrenceMatrixEntry::ArenaDtor(void* object) {
  CooccurrenceMatrixEntry* _this = reinterpret_cast< CooccurrenceMatrixEntry* >(object);
  (void)_this;
}
void CooccurrenceMatrixEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CooccurrenceMatrixEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CooccurrenceMatrixEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.CooccurrenceMatrixEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_.ClearToEmpty();
  col_.ClearToEmpty();
  count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CooccurrenceMatrixEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_row();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.CooccurrenceMatrixEntry.row"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.CooccurrenceMatrixEntry.col"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CooccurrenceMatrixEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.CooccurrenceMatrixEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string row = 1;
  if (!this->_internal_row().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_row().data(), static_cast<int>(this->_internal_row().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.CooccurrenceMatrixEntry.row");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_row(), target);
  }

  // string col = 2;
  if (!this->_internal_col().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col().data(), static_cast<int>(this->_internal_col().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.CooccurrenceMatrixEntry.col");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col(), target);
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.CooccurrenceMatrixEntry)
  return target;
}

size_t CooccurrenceMatrixEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.CooccurrenceMatrixEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string row = 1;
  if (!this->_internal_row().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_row());
  }

  // string col = 2;
  if (!this->_internal_col().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_col());
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CooccurrenceMatrixEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CooccurrenceMatrixEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CooccurrenceMatrixEntry::GetClassData() const { return &_class_data_; }

void CooccurrenceMatrixEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CooccurrenceMatrixEntry *>(to)->MergeFrom(
      static_cast<const CooccurrenceMatrixEntry &>(from));
}


void CooccurrenceMatrixEntry::MergeFrom(const CooccurrenceMatrixEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.CooccurrenceMatrixEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_row().empty()) {
    _internal_set_row(from._internal_row());
  }
  if (!from._internal_col().empty()) {
    _internal_set_col(from._internal_col());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CooccurrenceMatrixEntry::CopyFrom(const CooccurrenceMatrixEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.CooccurrenceMatrixEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CooccurrenceMatrixEntry::IsInitialized() const {
  return true;
}

void CooccurrenceMatrixEntry::InternalSwap(CooccurrenceMatrixEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &row_, lhs_arena,
      &other->row_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &col_, lhs_arena,
      &other->col_, rhs_arena
  );
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CooccurrenceMatrixEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[76]);
}

// ===================================================================

class CooccurrenceMatrix::_Internal {
 public:
};

CooccurrenceMatrix::CooccurrenceMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  matrix_(arena),
  concept_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.CooccurrenceMatrix)
}
CooccurrenceMatrix::CooccurrenceMatrix(const CooccurrenceMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matrix_(from.matrix_),
      concept_ids_(from.concept_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.CooccurrenceMatrix)
}

inline void CooccurrenceMatrix::SharedCtor() {
}

CooccurrenceMatrix::~CooccurrenceMatrix() {
  // @@protoc_insertion_point(destructor:clarifai.api.CooccurrenceMatrix)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CooccurrenceMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CooccurrenceMatrix::ArenaDtor(void* object) {
  CooccurrenceMatrix* _this = reinterpret_cast< CooccurrenceMatrix* >(object);
  (void)_this;
}
void CooccurrenceMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CooccurrenceMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CooccurrenceMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.CooccurrenceMatrix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_.Clear();
  concept_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CooccurrenceMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.CooccurrenceMatrixEntry matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matrix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string concept_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.CooccurrenceMatrix.concept_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CooccurrenceMatrix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.CooccurrenceMatrix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.CooccurrenceMatrixEntry matrix = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matrix_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_matrix(i), target, stream);
  }

  // repeated string concept_ids = 2;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.CooccurrenceMatrix.concept_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.CooccurrenceMatrix)
  return target;
}

size_t CooccurrenceMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.CooccurrenceMatrix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.CooccurrenceMatrixEntry matrix = 1;
  total_size += 1UL * this->_internal_matrix_size();
  for (const auto& msg : this->matrix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string concept_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(concept_ids_.size());
  for (int i = 0, n = concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      concept_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CooccurrenceMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CooccurrenceMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CooccurrenceMatrix::GetClassData() const { return &_class_data_; }

void CooccurrenceMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CooccurrenceMatrix *>(to)->MergeFrom(
      static_cast<const CooccurrenceMatrix &>(from));
}


void CooccurrenceMatrix::MergeFrom(const CooccurrenceMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.CooccurrenceMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_.MergeFrom(from.matrix_);
  concept_ids_.MergeFrom(from.concept_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CooccurrenceMatrix::CopyFrom(const CooccurrenceMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.CooccurrenceMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CooccurrenceMatrix::IsInitialized() const {
  return true;
}

void CooccurrenceMatrix::InternalSwap(CooccurrenceMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  matrix_.InternalSwap(&other->matrix_);
  concept_ids_.InternalSwap(&other->concept_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CooccurrenceMatrix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[77]);
}

// ===================================================================

class ConfusionMatrixEntry::_Internal {
 public:
};

ConfusionMatrixEntry::ConfusionMatrixEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConfusionMatrixEntry)
}
ConfusionMatrixEntry::ConfusionMatrixEntry(const ConfusionMatrixEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  predicted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    predicted_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_predicted().empty()) {
    predicted_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_predicted(), 
      GetArenaForAllocation());
  }
  actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_actual().empty()) {
    actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actual(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConfusionMatrixEntry)
}

inline void ConfusionMatrixEntry::SharedCtor() {
predicted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  predicted_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = 0;
}

ConfusionMatrixEntry::~ConfusionMatrixEntry() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConfusionMatrixEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfusionMatrixEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  predicted_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfusionMatrixEntry::ArenaDtor(void* object) {
  ConfusionMatrixEntry* _this = reinterpret_cast< ConfusionMatrixEntry* >(object);
  (void)_this;
}
void ConfusionMatrixEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfusionMatrixEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfusionMatrixEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConfusionMatrixEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predicted_.ClearToEmpty();
  actual_.ClearToEmpty();
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfusionMatrixEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string predicted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_predicted();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConfusionMatrixEntry.predicted"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string actual = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_actual();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConfusionMatrixEntry.actual"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float value = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfusionMatrixEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConfusionMatrixEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string predicted = 1;
  if (!this->_internal_predicted().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_predicted().data(), static_cast<int>(this->_internal_predicted().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConfusionMatrixEntry.predicted");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_predicted(), target);
  }

  // string actual = 2;
  if (!this->_internal_actual().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actual().data(), static_cast<int>(this->_internal_actual().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConfusionMatrixEntry.actual");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_actual(), target);
  }

  // float value = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConfusionMatrixEntry)
  return target;
}

size_t ConfusionMatrixEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConfusionMatrixEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string predicted = 1;
  if (!this->_internal_predicted().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_predicted());
  }

  // string actual = 2;
  if (!this->_internal_actual().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actual());
  }

  // float value = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfusionMatrixEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfusionMatrixEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfusionMatrixEntry::GetClassData() const { return &_class_data_; }

void ConfusionMatrixEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfusionMatrixEntry *>(to)->MergeFrom(
      static_cast<const ConfusionMatrixEntry &>(from));
}


void ConfusionMatrixEntry::MergeFrom(const ConfusionMatrixEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConfusionMatrixEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_predicted().empty()) {
    _internal_set_predicted(from._internal_predicted());
  }
  if (!from._internal_actual().empty()) {
    _internal_set_actual(from._internal_actual());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfusionMatrixEntry::CopyFrom(const ConfusionMatrixEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConfusionMatrixEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfusionMatrixEntry::IsInitialized() const {
  return true;
}

void ConfusionMatrixEntry::InternalSwap(ConfusionMatrixEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &predicted_, lhs_arena,
      &other->predicted_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actual_, lhs_arena,
      &other->actual_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfusionMatrixEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[78]);
}

// ===================================================================

class ConfusionMatrix::_Internal {
 public:
};

ConfusionMatrix::ConfusionMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  matrix_(arena),
  concept_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ConfusionMatrix)
}
ConfusionMatrix::ConfusionMatrix(const ConfusionMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matrix_(from.matrix_),
      concept_ids_(from.concept_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConfusionMatrix)
}

inline void ConfusionMatrix::SharedCtor() {
}

ConfusionMatrix::~ConfusionMatrix() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConfusionMatrix)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfusionMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfusionMatrix::ArenaDtor(void* object) {
  ConfusionMatrix* _this = reinterpret_cast< ConfusionMatrix* >(object);
  (void)_this;
}
void ConfusionMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfusionMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfusionMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConfusionMatrix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_.Clear();
  concept_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfusionMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.ConfusionMatrixEntry matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matrix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string concept_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ConfusionMatrix.concept_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfusionMatrix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConfusionMatrix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.ConfusionMatrixEntry matrix = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matrix_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_matrix(i), target, stream);
  }

  // repeated string concept_ids = 2;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConfusionMatrix.concept_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConfusionMatrix)
  return target;
}

size_t ConfusionMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConfusionMatrix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConfusionMatrixEntry matrix = 1;
  total_size += 1UL * this->_internal_matrix_size();
  for (const auto& msg : this->matrix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string concept_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(concept_ids_.size());
  for (int i = 0, n = concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      concept_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfusionMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfusionMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfusionMatrix::GetClassData() const { return &_class_data_; }

void ConfusionMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfusionMatrix *>(to)->MergeFrom(
      static_cast<const ConfusionMatrix &>(from));
}


void ConfusionMatrix::MergeFrom(const ConfusionMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConfusionMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_.MergeFrom(from.matrix_);
  concept_ids_.MergeFrom(from.concept_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfusionMatrix::CopyFrom(const ConfusionMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConfusionMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfusionMatrix::IsInitialized() const {
  return true;
}

void ConfusionMatrix::InternalSwap(ConfusionMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  matrix_.InternalSwap(&other->matrix_);
  concept_ids_.InternalSwap(&other->concept_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfusionMatrix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[79]);
}

// ===================================================================

class ROC::_Internal {
 public:
};

ROC::ROC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fpr_(arena),
  tpr_(arena),
  thresholds_(arena),
  fpr_per_image_(arena),
  fpr_per_object_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ROC)
}
ROC::ROC(const ROC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fpr_(from.fpr_),
      tpr_(from.tpr_),
      thresholds_(from.thresholds_),
      fpr_per_image_(from.fpr_per_image_),
      fpr_per_object_(from.fpr_per_object_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ROC)
}

inline void ROC::SharedCtor() {
}

ROC::~ROC() {
  // @@protoc_insertion_point(destructor:clarifai.api.ROC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ROC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ROC::ArenaDtor(void* object) {
  ROC* _this = reinterpret_cast< ROC* >(object);
  (void)_this;
}
void ROC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ROC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ROC::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ROC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fpr_.Clear();
  tpr_.Clear();
  thresholds_.Clear();
  fpr_per_image_.Clear();
  fpr_per_object_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float fpr = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_fpr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_fpr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float tpr = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_tpr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_tpr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_thresholds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float fpr_per_image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_fpr_per_image(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_fpr_per_image(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float fpr_per_object = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_fpr_per_object(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_fpr_per_object(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ROC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ROC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float fpr = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_fpr_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_fpr(), target);
  }

  // repeated float tpr = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_tpr_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_tpr(), target);
  }

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_thresholds_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_thresholds(), target);
  }

  // repeated float fpr_per_image = 4;
  if (this->_internal_fpr_per_image_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_fpr_per_image(), target);
  }

  // repeated float fpr_per_object = 5;
  if (this->_internal_fpr_per_object_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_fpr_per_object(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ROC)
  return target;
}

size_t ROC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ROC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float fpr = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fpr_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float tpr = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_tpr_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_thresholds_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float fpr_per_image = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fpr_per_image_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float fpr_per_object = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fpr_per_object_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ROC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ROC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ROC::GetClassData() const { return &_class_data_; }

void ROC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ROC *>(to)->MergeFrom(
      static_cast<const ROC &>(from));
}


void ROC::MergeFrom(const ROC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ROC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fpr_.MergeFrom(from.fpr_);
  tpr_.MergeFrom(from.tpr_);
  thresholds_.MergeFrom(from.thresholds_);
  fpr_per_image_.MergeFrom(from.fpr_per_image_);
  fpr_per_object_.MergeFrom(from.fpr_per_object_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ROC::CopyFrom(const ROC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ROC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROC::IsInitialized() const {
  return true;
}

void ROC::InternalSwap(ROC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fpr_.InternalSwap(&other->fpr_);
  tpr_.InternalSwap(&other->tpr_);
  thresholds_.InternalSwap(&other->thresholds_);
  fpr_per_image_.InternalSwap(&other->fpr_per_image_);
  fpr_per_object_.InternalSwap(&other->fpr_per_object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[80]);
}

// ===================================================================

class PrecisionRecallCurve::_Internal {
 public:
};

PrecisionRecallCurve::PrecisionRecallCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  recall_(arena),
  precision_(arena),
  thresholds_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PrecisionRecallCurve)
}
PrecisionRecallCurve::PrecisionRecallCurve(const PrecisionRecallCurve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      recall_(from.recall_),
      precision_(from.precision_),
      thresholds_(from.thresholds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PrecisionRecallCurve)
}

inline void PrecisionRecallCurve::SharedCtor() {
}

PrecisionRecallCurve::~PrecisionRecallCurve() {
  // @@protoc_insertion_point(destructor:clarifai.api.PrecisionRecallCurve)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PrecisionRecallCurve::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrecisionRecallCurve::ArenaDtor(void* object) {
  PrecisionRecallCurve* _this = reinterpret_cast< PrecisionRecallCurve* >(object);
  (void)_this;
}
void PrecisionRecallCurve::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrecisionRecallCurve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrecisionRecallCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PrecisionRecallCurve)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recall_.Clear();
  precision_.Clear();
  thresholds_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrecisionRecallCurve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float recall = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_recall(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_recall(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float precision = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_precision(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_precision(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_thresholds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrecisionRecallCurve::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PrecisionRecallCurve)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float recall = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_recall_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_recall(), target);
  }

  // repeated float precision = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_precision_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_precision(), target);
  }

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_thresholds_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_thresholds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PrecisionRecallCurve)
  return target;
}

size_t PrecisionRecallCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PrecisionRecallCurve)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float recall = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_recall_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float precision = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_precision_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_thresholds_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrecisionRecallCurve::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrecisionRecallCurve::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrecisionRecallCurve::GetClassData() const { return &_class_data_; }

void PrecisionRecallCurve::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PrecisionRecallCurve *>(to)->MergeFrom(
      static_cast<const PrecisionRecallCurve &>(from));
}


void PrecisionRecallCurve::MergeFrom(const PrecisionRecallCurve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PrecisionRecallCurve)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  recall_.MergeFrom(from.recall_);
  precision_.MergeFrom(from.precision_);
  thresholds_.MergeFrom(from.thresholds_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrecisionRecallCurve::CopyFrom(const PrecisionRecallCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PrecisionRecallCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrecisionRecallCurve::IsInitialized() const {
  return true;
}

void PrecisionRecallCurve::InternalSwap(PrecisionRecallCurve* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  recall_.InternalSwap(&other->recall_);
  precision_.InternalSwap(&other->precision_);
  thresholds_.InternalSwap(&other->thresholds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrecisionRecallCurve::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[81]);
}

// ===================================================================

class BinaryMetrics::_Internal {
 public:
  static const ::clarifai::api::Concept& concept(const BinaryMetrics* msg);
  static const ::clarifai::api::ROC& roc_curve(const BinaryMetrics* msg);
  static const ::clarifai::api::PrecisionRecallCurve& precision_recall_curve(const BinaryMetrics* msg);
};

const ::clarifai::api::Concept&
BinaryMetrics::_Internal::concept(const BinaryMetrics* msg) {
  return *msg->concept_;
}
const ::clarifai::api::ROC&
BinaryMetrics::_Internal::roc_curve(const BinaryMetrics* msg) {
  return *msg->roc_curve_;
}
const ::clarifai::api::PrecisionRecallCurve&
BinaryMetrics::_Internal::precision_recall_curve(const BinaryMetrics* msg) {
  return *msg->precision_recall_curve_;
}
BinaryMetrics::BinaryMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.BinaryMetrics)
}
BinaryMetrics::BinaryMetrics(const BinaryMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  area_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_area_name().empty()) {
    area_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_area_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_concept()) {
    concept_ = new ::clarifai::api::Concept(*from.concept_);
  } else {
    concept_ = nullptr;
  }
  if (from._internal_has_roc_curve()) {
    roc_curve_ = new ::clarifai::api::ROC(*from.roc_curve_);
  } else {
    roc_curve_ = nullptr;
  }
  if (from._internal_has_precision_recall_curve()) {
    precision_recall_curve_ = new ::clarifai::api::PrecisionRecallCurve(*from.precision_recall_curve_);
  } else {
    precision_recall_curve_ = nullptr;
  }
  ::memcpy(&num_pos_, &from.num_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&iou_) -
    reinterpret_cast<char*>(&num_pos_)) + sizeof(iou_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.BinaryMetrics)
}

inline void BinaryMetrics::SharedCtor() {
area_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&concept_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iou_) -
    reinterpret_cast<char*>(&concept_)) + sizeof(iou_));
}

BinaryMetrics::~BinaryMetrics() {
  // @@protoc_insertion_point(destructor:clarifai.api.BinaryMetrics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BinaryMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  area_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete concept_;
  if (this != internal_default_instance()) delete roc_curve_;
  if (this != internal_default_instance()) delete precision_recall_curve_;
}

void BinaryMetrics::ArenaDtor(void* object) {
  BinaryMetrics* _this = reinterpret_cast< BinaryMetrics* >(object);
  (void)_this;
}
void BinaryMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BinaryMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BinaryMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.BinaryMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  area_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && concept_ != nullptr) {
    delete concept_;
  }
  concept_ = nullptr;
  if (GetArenaForAllocation() == nullptr && roc_curve_ != nullptr) {
    delete roc_curve_;
  }
  roc_curve_ = nullptr;
  if (GetArenaForAllocation() == nullptr && precision_recall_curve_ != nullptr) {
    delete precision_recall_curve_;
  }
  precision_recall_curve_ = nullptr;
  ::memset(&num_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iou_) -
      reinterpret_cast<char*>(&num_pos_)) + sizeof(iou_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 num_pos = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          num_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_neg = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          num_neg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_tot = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          num_tot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          roc_auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float f1 = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Concept concept = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ROC roc_curve = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_roc_curve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.PrecisionRecallCurve precision_recall_curve = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_precision_recall_curve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float avg_precision = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          avg_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string area_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_area_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.BinaryMetrics.area_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double area_min = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          area_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double area_max = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          area_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float iou = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          iou_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.BinaryMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_pos = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_num_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_pos(), target);
  }

  // uint32 num_neg = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_num_neg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_neg(), target);
  }

  // uint32 num_tot = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_num_tot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_tot(), target);
  }

  // float roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roc_auc = this->_internal_roc_auc();
  uint32_t raw_roc_auc;
  memcpy(&raw_roc_auc, &tmp_roc_auc, sizeof(tmp_roc_auc));
  if (raw_roc_auc != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_roc_auc(), target);
  }

  // float f1 = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_f1 = this->_internal_f1();
  uint32_t raw_f1;
  memcpy(&raw_f1, &tmp_f1, sizeof(tmp_f1));
  if (raw_f1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_f1(), target);
  }

  // .clarifai.api.Concept concept = 6;
  if (this->_internal_has_concept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::concept(this), target, stream);
  }

  // .clarifai.api.ROC roc_curve = 7;
  if (this->_internal_has_roc_curve()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::roc_curve(this), target, stream);
  }

  // .clarifai.api.PrecisionRecallCurve precision_recall_curve = 8;
  if (this->_internal_has_precision_recall_curve()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::precision_recall_curve(this), target, stream);
  }

  // float avg_precision = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avg_precision = this->_internal_avg_precision();
  uint32_t raw_avg_precision;
  memcpy(&raw_avg_precision, &tmp_avg_precision, sizeof(tmp_avg_precision));
  if (raw_avg_precision != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_avg_precision(), target);
  }

  // string area_name = 10;
  if (!this->_internal_area_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_area_name().data(), static_cast<int>(this->_internal_area_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.BinaryMetrics.area_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_area_name(), target);
  }

  // double area_min = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area_min = this->_internal_area_min();
  uint64_t raw_area_min;
  memcpy(&raw_area_min, &tmp_area_min, sizeof(tmp_area_min));
  if (raw_area_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_area_min(), target);
  }

  // double area_max = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area_max = this->_internal_area_max();
  uint64_t raw_area_max;
  memcpy(&raw_area_max, &tmp_area_max, sizeof(tmp_area_max));
  if (raw_area_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_area_max(), target);
  }

  // float iou = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_iou = this->_internal_iou();
  uint32_t raw_iou;
  memcpy(&raw_iou, &tmp_iou, sizeof(tmp_iou));
  if (raw_iou != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_iou(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.BinaryMetrics)
  return target;
}

size_t BinaryMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.BinaryMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string area_name = 10;
  if (!this->_internal_area_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_area_name());
  }

  // .clarifai.api.Concept concept = 6;
  if (this->_internal_has_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_);
  }

  // .clarifai.api.ROC roc_curve = 7;
  if (this->_internal_has_roc_curve()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roc_curve_);
  }

  // .clarifai.api.PrecisionRecallCurve precision_recall_curve = 8;
  if (this->_internal_has_precision_recall_curve()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *precision_recall_curve_);
  }

  // uint32 num_pos = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_num_pos() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_pos());
  }

  // uint32 num_neg = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_num_neg() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_neg());
  }

  // uint32 num_tot = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_num_tot() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_tot());
  }

  // float roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roc_auc = this->_internal_roc_auc();
  uint32_t raw_roc_auc;
  memcpy(&raw_roc_auc, &tmp_roc_auc, sizeof(tmp_roc_auc));
  if (raw_roc_auc != 0) {
    total_size += 1 + 4;
  }

  // float f1 = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_f1 = this->_internal_f1();
  uint32_t raw_f1;
  memcpy(&raw_f1, &tmp_f1, sizeof(tmp_f1));
  if (raw_f1 != 0) {
    total_size += 1 + 4;
  }

  // float avg_precision = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avg_precision = this->_internal_avg_precision();
  uint32_t raw_avg_precision;
  memcpy(&raw_avg_precision, &tmp_avg_precision, sizeof(tmp_avg_precision));
  if (raw_avg_precision != 0) {
    total_size += 1 + 4;
  }

  // double area_min = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area_min = this->_internal_area_min();
  uint64_t raw_area_min;
  memcpy(&raw_area_min, &tmp_area_min, sizeof(tmp_area_min));
  if (raw_area_min != 0) {
    total_size += 1 + 8;
  }

  // double area_max = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area_max = this->_internal_area_max();
  uint64_t raw_area_max;
  memcpy(&raw_area_max, &tmp_area_max, sizeof(tmp_area_max));
  if (raw_area_max != 0) {
    total_size += 1 + 8;
  }

  // float iou = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_iou = this->_internal_iou();
  uint32_t raw_iou;
  memcpy(&raw_iou, &tmp_iou, sizeof(tmp_iou));
  if (raw_iou != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BinaryMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryMetrics::GetClassData() const { return &_class_data_; }

void BinaryMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BinaryMetrics *>(to)->MergeFrom(
      static_cast<const BinaryMetrics &>(from));
}


void BinaryMetrics::MergeFrom(const BinaryMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.BinaryMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_area_name().empty()) {
    _internal_set_area_name(from._internal_area_name());
  }
  if (from._internal_has_concept()) {
    _internal_mutable_concept()->::clarifai::api::Concept::MergeFrom(from._internal_concept());
  }
  if (from._internal_has_roc_curve()) {
    _internal_mutable_roc_curve()->::clarifai::api::ROC::MergeFrom(from._internal_roc_curve());
  }
  if (from._internal_has_precision_recall_curve()) {
    _internal_mutable_precision_recall_curve()->::clarifai::api::PrecisionRecallCurve::MergeFrom(from._internal_precision_recall_curve());
  }
  if (from._internal_num_pos() != 0) {
    _internal_set_num_pos(from._internal_num_pos());
  }
  if (from._internal_num_neg() != 0) {
    _internal_set_num_neg(from._internal_num_neg());
  }
  if (from._internal_num_tot() != 0) {
    _internal_set_num_tot(from._internal_num_tot());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roc_auc = from._internal_roc_auc();
  uint32_t raw_roc_auc;
  memcpy(&raw_roc_auc, &tmp_roc_auc, sizeof(tmp_roc_auc));
  if (raw_roc_auc != 0) {
    _internal_set_roc_auc(from._internal_roc_auc());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_f1 = from._internal_f1();
  uint32_t raw_f1;
  memcpy(&raw_f1, &tmp_f1, sizeof(tmp_f1));
  if (raw_f1 != 0) {
    _internal_set_f1(from._internal_f1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avg_precision = from._internal_avg_precision();
  uint32_t raw_avg_precision;
  memcpy(&raw_avg_precision, &tmp_avg_precision, sizeof(tmp_avg_precision));
  if (raw_avg_precision != 0) {
    _internal_set_avg_precision(from._internal_avg_precision());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area_min = from._internal_area_min();
  uint64_t raw_area_min;
  memcpy(&raw_area_min, &tmp_area_min, sizeof(tmp_area_min));
  if (raw_area_min != 0) {
    _internal_set_area_min(from._internal_area_min());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area_max = from._internal_area_max();
  uint64_t raw_area_max;
  memcpy(&raw_area_max, &tmp_area_max, sizeof(tmp_area_max));
  if (raw_area_max != 0) {
    _internal_set_area_max(from._internal_area_max());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_iou = from._internal_iou();
  uint32_t raw_iou;
  memcpy(&raw_iou, &tmp_iou, sizeof(tmp_iou));
  if (raw_iou != 0) {
    _internal_set_iou(from._internal_iou());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryMetrics::CopyFrom(const BinaryMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.BinaryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryMetrics::IsInitialized() const {
  return true;
}

void BinaryMetrics::InternalSwap(BinaryMetrics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &area_name_, lhs_arena,
      &other->area_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryMetrics, iou_)
      + sizeof(BinaryMetrics::iou_)
      - PROTOBUF_FIELD_OFFSET(BinaryMetrics, concept_)>(
          reinterpret_cast<char*>(&concept_),
          reinterpret_cast<char*>(&other->concept_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryMetrics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[82]);
}

// ===================================================================

class TrackerMetrics::_Internal {
 public:
};

TrackerMetrics::TrackerMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TrackerMetrics)
}
TrackerMetrics::TrackerMetrics(const TrackerMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aiid().empty()) {
    aiid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_aiid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mot_mota_, &from.mot_mota_,
    static_cast<size_t>(reinterpret_cast<char*>(&unique_switch_rate_) -
    reinterpret_cast<char*>(&mot_mota_)) + sizeof(unique_switch_rate_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TrackerMetrics)
}

inline void TrackerMetrics::SharedCtor() {
aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mot_mota_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unique_switch_rate_) -
    reinterpret_cast<char*>(&mot_mota_)) + sizeof(unique_switch_rate_));
}

TrackerMetrics::~TrackerMetrics() {
  // @@protoc_insertion_point(destructor:clarifai.api.TrackerMetrics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrackerMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  aiid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrackerMetrics::ArenaDtor(void* object) {
  TrackerMetrics* _this = reinterpret_cast< TrackerMetrics* >(object);
  (void)_this;
}
void TrackerMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackerMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackerMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TrackerMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aiid_.ClearToEmpty();
  ::memset(&mot_mota_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_switch_rate_) -
      reinterpret_cast<char*>(&mot_mota_)) + sizeof(unique_switch_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackerMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float mot_mota = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          mot_mota_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 mot_num_switches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          mot_num_switches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float morse_frag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          morse_frag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float avg_precision = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          avg_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string aiid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_aiid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TrackerMetrics.aiid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float unique_switch_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          unique_switch_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackerMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TrackerMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float mot_mota = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mot_mota = this->_internal_mot_mota();
  uint32_t raw_mot_mota;
  memcpy(&raw_mot_mota, &tmp_mot_mota, sizeof(tmp_mot_mota));
  if (raw_mot_mota != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_mot_mota(), target);
  }

  // int32 mot_num_switches = 2;
  if (this->_internal_mot_num_switches() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mot_num_switches(), target);
  }

  // float morse_frag = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_morse_frag = this->_internal_morse_frag();
  uint32_t raw_morse_frag;
  memcpy(&raw_morse_frag, &tmp_morse_frag, sizeof(tmp_morse_frag));
  if (raw_morse_frag != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_morse_frag(), target);
  }

  // float avg_precision = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avg_precision = this->_internal_avg_precision();
  uint32_t raw_avg_precision;
  memcpy(&raw_avg_precision, &tmp_avg_precision, sizeof(tmp_avg_precision));
  if (raw_avg_precision != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_avg_precision(), target);
  }

  // string aiid = 5;
  if (!this->_internal_aiid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aiid().data(), static_cast<int>(this->_internal_aiid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TrackerMetrics.aiid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_aiid(), target);
  }

  // float unique_switch_rate = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_unique_switch_rate = this->_internal_unique_switch_rate();
  uint32_t raw_unique_switch_rate;
  memcpy(&raw_unique_switch_rate, &tmp_unique_switch_rate, sizeof(tmp_unique_switch_rate));
  if (raw_unique_switch_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_unique_switch_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TrackerMetrics)
  return target;
}

size_t TrackerMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TrackerMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string aiid = 5;
  if (!this->_internal_aiid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aiid());
  }

  // float mot_mota = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mot_mota = this->_internal_mot_mota();
  uint32_t raw_mot_mota;
  memcpy(&raw_mot_mota, &tmp_mot_mota, sizeof(tmp_mot_mota));
  if (raw_mot_mota != 0) {
    total_size += 1 + 4;
  }

  // int32 mot_num_switches = 2;
  if (this->_internal_mot_num_switches() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mot_num_switches());
  }

  // float morse_frag = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_morse_frag = this->_internal_morse_frag();
  uint32_t raw_morse_frag;
  memcpy(&raw_morse_frag, &tmp_morse_frag, sizeof(tmp_morse_frag));
  if (raw_morse_frag != 0) {
    total_size += 1 + 4;
  }

  // float avg_precision = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avg_precision = this->_internal_avg_precision();
  uint32_t raw_avg_precision;
  memcpy(&raw_avg_precision, &tmp_avg_precision, sizeof(tmp_avg_precision));
  if (raw_avg_precision != 0) {
    total_size += 1 + 4;
  }

  // float unique_switch_rate = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_unique_switch_rate = this->_internal_unique_switch_rate();
  uint32_t raw_unique_switch_rate;
  memcpy(&raw_unique_switch_rate, &tmp_unique_switch_rate, sizeof(tmp_unique_switch_rate));
  if (raw_unique_switch_rate != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackerMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrackerMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackerMetrics::GetClassData() const { return &_class_data_; }

void TrackerMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrackerMetrics *>(to)->MergeFrom(
      static_cast<const TrackerMetrics &>(from));
}


void TrackerMetrics::MergeFrom(const TrackerMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TrackerMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_aiid().empty()) {
    _internal_set_aiid(from._internal_aiid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mot_mota = from._internal_mot_mota();
  uint32_t raw_mot_mota;
  memcpy(&raw_mot_mota, &tmp_mot_mota, sizeof(tmp_mot_mota));
  if (raw_mot_mota != 0) {
    _internal_set_mot_mota(from._internal_mot_mota());
  }
  if (from._internal_mot_num_switches() != 0) {
    _internal_set_mot_num_switches(from._internal_mot_num_switches());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_morse_frag = from._internal_morse_frag();
  uint32_t raw_morse_frag;
  memcpy(&raw_morse_frag, &tmp_morse_frag, sizeof(tmp_morse_frag));
  if (raw_morse_frag != 0) {
    _internal_set_morse_frag(from._internal_morse_frag());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avg_precision = from._internal_avg_precision();
  uint32_t raw_avg_precision;
  memcpy(&raw_avg_precision, &tmp_avg_precision, sizeof(tmp_avg_precision));
  if (raw_avg_precision != 0) {
    _internal_set_avg_precision(from._internal_avg_precision());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_unique_switch_rate = from._internal_unique_switch_rate();
  uint32_t raw_unique_switch_rate;
  memcpy(&raw_unique_switch_rate, &tmp_unique_switch_rate, sizeof(tmp_unique_switch_rate));
  if (raw_unique_switch_rate != 0) {
    _internal_set_unique_switch_rate(from._internal_unique_switch_rate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackerMetrics::CopyFrom(const TrackerMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TrackerMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerMetrics::IsInitialized() const {
  return true;
}

void TrackerMetrics::InternalSwap(TrackerMetrics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &aiid_, lhs_arena,
      &other->aiid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackerMetrics, unique_switch_rate_)
      + sizeof(TrackerMetrics::unique_switch_rate_)
      - PROTOBUF_FIELD_OFFSET(TrackerMetrics, mot_mota_)>(
          reinterpret_cast<char*>(&mot_mota_),
          reinterpret_cast<char*>(&other->mot_mota_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackerMetrics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[83]);
}

// ===================================================================

class EvalTestSetEntry::_Internal {
 public:
  static const ::clarifai::api::Input& input(const EvalTestSetEntry* msg);
  static const ::clarifai::api::Annotation& annotation(const EvalTestSetEntry* msg);
};

const ::clarifai::api::Input&
EvalTestSetEntry::_Internal::input(const EvalTestSetEntry* msg) {
  return *msg->input_;
}
const ::clarifai::api::Annotation&
EvalTestSetEntry::_Internal::annotation(const EvalTestSetEntry* msg) {
  return *msg->annotation_;
}
EvalTestSetEntry::EvalTestSetEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  predicted_concepts_(arena),
  ground_truth_concepts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.EvalTestSetEntry)
}
EvalTestSetEntry::EvalTestSetEntry(const EvalTestSetEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      predicted_concepts_(from.predicted_concepts_),
      ground_truth_concepts_(from.ground_truth_concepts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_annotation()) {
    annotation_ = new ::clarifai::api::Annotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.EvalTestSetEntry)
}

inline void EvalTestSetEntry::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&annotation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_) -
    reinterpret_cast<char*>(&annotation_)) + sizeof(input_));
}

EvalTestSetEntry::~EvalTestSetEntry() {
  // @@protoc_insertion_point(destructor:clarifai.api.EvalTestSetEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EvalTestSetEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete annotation_;
  if (this != internal_default_instance()) delete input_;
}

void EvalTestSetEntry::ArenaDtor(void* object) {
  EvalTestSetEntry* _this = reinterpret_cast< EvalTestSetEntry* >(object);
  (void)_this;
}
void EvalTestSetEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvalTestSetEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EvalTestSetEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.EvalTestSetEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predicted_concepts_.Clear();
  ground_truth_concepts_.Clear();
  id_.ClearToEmpty();
  url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvalTestSetEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.EvalTestSetEntry.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.EvalTestSetEntry.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept predicted_concepts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predicted_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept ground_truth_concepts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ground_truth_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EvalTestSetEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.EvalTestSetEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [deprecated = true];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EvalTestSetEntry.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string url = 2 [deprecated = true];
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EvalTestSetEntry.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // repeated .clarifai.api.Concept predicted_concepts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_predicted_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_predicted_concepts(i), target, stream);
  }

  // repeated .clarifai.api.Concept ground_truth_concepts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ground_truth_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ground_truth_concepts(i), target, stream);
  }

  // .clarifai.api.Annotation annotation = 5;
  if (this->_internal_has_annotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::annotation(this), target, stream);
  }

  // .clarifai.api.Input input = 6;
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::input(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.EvalTestSetEntry)
  return target;
}

size_t EvalTestSetEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.EvalTestSetEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept predicted_concepts = 3;
  total_size += 1UL * this->_internal_predicted_concepts_size();
  for (const auto& msg : this->predicted_concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Concept ground_truth_concepts = 4;
  total_size += 1UL * this->_internal_ground_truth_concepts_size();
  for (const auto& msg : this->ground_truth_concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [deprecated = true];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string url = 2 [deprecated = true];
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .clarifai.api.Annotation annotation = 5;
  if (this->_internal_has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  // .clarifai.api.Input input = 6;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvalTestSetEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EvalTestSetEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvalTestSetEntry::GetClassData() const { return &_class_data_; }

void EvalTestSetEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EvalTestSetEntry *>(to)->MergeFrom(
      static_cast<const EvalTestSetEntry &>(from));
}


void EvalTestSetEntry::MergeFrom(const EvalTestSetEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.EvalTestSetEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  predicted_concepts_.MergeFrom(from.predicted_concepts_);
  ground_truth_concepts_.MergeFrom(from.ground_truth_concepts_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (from._internal_has_annotation()) {
    _internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(from._internal_annotation());
  }
  if (from._internal_has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvalTestSetEntry::CopyFrom(const EvalTestSetEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.EvalTestSetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalTestSetEntry::IsInitialized() const {
  return true;
}

void EvalTestSetEntry::InternalSwap(EvalTestSetEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  predicted_concepts_.InternalSwap(&other->predicted_concepts_);
  ground_truth_concepts_.InternalSwap(&other->ground_truth_concepts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvalTestSetEntry, input_)
      + sizeof(EvalTestSetEntry::input_)
      - PROTOBUF_FIELD_OFFSET(EvalTestSetEntry, annotation_)>(
          reinterpret_cast<char*>(&annotation_),
          reinterpret_cast<char*>(&other->annotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalTestSetEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[84]);
}

// ===================================================================

class LOPQEvalResult::_Internal {
 public:
};

LOPQEvalResult::LOPQEvalResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.LOPQEvalResult)
}
LOPQEvalResult::LOPQEvalResult(const LOPQEvalResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&brute_force_ndcg_) -
    reinterpret_cast<char*>(&k_)) + sizeof(brute_force_ndcg_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LOPQEvalResult)
}

inline void LOPQEvalResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&k_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&brute_force_ndcg_) -
    reinterpret_cast<char*>(&k_)) + sizeof(brute_force_ndcg_));
}

LOPQEvalResult::~LOPQEvalResult() {
  // @@protoc_insertion_point(destructor:clarifai.api.LOPQEvalResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LOPQEvalResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LOPQEvalResult::ArenaDtor(void* object) {
  LOPQEvalResult* _this = reinterpret_cast< LOPQEvalResult* >(object);
  (void)_this;
}
void LOPQEvalResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQEvalResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LOPQEvalResult::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LOPQEvalResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brute_force_ndcg_) -
      reinterpret_cast<char*>(&k_)) + sizeof(brute_force_ndcg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQEvalResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          recall_vs_brute_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          kendall_tau_vs_brute_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          most_frequent_code_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          lopq_ndcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          brute_force_ndcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LOPQEvalResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LOPQEvalResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 k = 1;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_k(), target);
  }

  // float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_recall_vs_brute_force = this->_internal_recall_vs_brute_force();
  uint32_t raw_recall_vs_brute_force;
  memcpy(&raw_recall_vs_brute_force, &tmp_recall_vs_brute_force, sizeof(tmp_recall_vs_brute_force));
  if (raw_recall_vs_brute_force != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_recall_vs_brute_force(), target);
  }

  // float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_kendall_tau_vs_brute_force = this->_internal_kendall_tau_vs_brute_force();
  uint32_t raw_kendall_tau_vs_brute_force;
  memcpy(&raw_kendall_tau_vs_brute_force, &tmp_kendall_tau_vs_brute_force, sizeof(tmp_kendall_tau_vs_brute_force));
  if (raw_kendall_tau_vs_brute_force != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_kendall_tau_vs_brute_force(), target);
  }

  // float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_most_frequent_code_percent = this->_internal_most_frequent_code_percent();
  uint32_t raw_most_frequent_code_percent;
  memcpy(&raw_most_frequent_code_percent, &tmp_most_frequent_code_percent, sizeof(tmp_most_frequent_code_percent));
  if (raw_most_frequent_code_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_most_frequent_code_percent(), target);
  }

  // float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lopq_ndcg = this->_internal_lopq_ndcg();
  uint32_t raw_lopq_ndcg;
  memcpy(&raw_lopq_ndcg, &tmp_lopq_ndcg, sizeof(tmp_lopq_ndcg));
  if (raw_lopq_ndcg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_lopq_ndcg(), target);
  }

  // float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brute_force_ndcg = this->_internal_brute_force_ndcg();
  uint32_t raw_brute_force_ndcg;
  memcpy(&raw_brute_force_ndcg, &tmp_brute_force_ndcg, sizeof(tmp_brute_force_ndcg));
  if (raw_brute_force_ndcg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_brute_force_ndcg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LOPQEvalResult)
  return target;
}

size_t LOPQEvalResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LOPQEvalResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 k = 1;
  if (this->_internal_k() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_k());
  }

  // float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_recall_vs_brute_force = this->_internal_recall_vs_brute_force();
  uint32_t raw_recall_vs_brute_force;
  memcpy(&raw_recall_vs_brute_force, &tmp_recall_vs_brute_force, sizeof(tmp_recall_vs_brute_force));
  if (raw_recall_vs_brute_force != 0) {
    total_size += 1 + 4;
  }

  // float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_kendall_tau_vs_brute_force = this->_internal_kendall_tau_vs_brute_force();
  uint32_t raw_kendall_tau_vs_brute_force;
  memcpy(&raw_kendall_tau_vs_brute_force, &tmp_kendall_tau_vs_brute_force, sizeof(tmp_kendall_tau_vs_brute_force));
  if (raw_kendall_tau_vs_brute_force != 0) {
    total_size += 1 + 4;
  }

  // float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_most_frequent_code_percent = this->_internal_most_frequent_code_percent();
  uint32_t raw_most_frequent_code_percent;
  memcpy(&raw_most_frequent_code_percent, &tmp_most_frequent_code_percent, sizeof(tmp_most_frequent_code_percent));
  if (raw_most_frequent_code_percent != 0) {
    total_size += 1 + 4;
  }

  // float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lopq_ndcg = this->_internal_lopq_ndcg();
  uint32_t raw_lopq_ndcg;
  memcpy(&raw_lopq_ndcg, &tmp_lopq_ndcg, sizeof(tmp_lopq_ndcg));
  if (raw_lopq_ndcg != 0) {
    total_size += 1 + 4;
  }

  // float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brute_force_ndcg = this->_internal_brute_force_ndcg();
  uint32_t raw_brute_force_ndcg;
  memcpy(&raw_brute_force_ndcg, &tmp_brute_force_ndcg, sizeof(tmp_brute_force_ndcg));
  if (raw_brute_force_ndcg != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LOPQEvalResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LOPQEvalResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LOPQEvalResult::GetClassData() const { return &_class_data_; }

void LOPQEvalResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LOPQEvalResult *>(to)->MergeFrom(
      static_cast<const LOPQEvalResult &>(from));
}


void LOPQEvalResult::MergeFrom(const LOPQEvalResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LOPQEvalResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_k() != 0) {
    _internal_set_k(from._internal_k());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_recall_vs_brute_force = from._internal_recall_vs_brute_force();
  uint32_t raw_recall_vs_brute_force;
  memcpy(&raw_recall_vs_brute_force, &tmp_recall_vs_brute_force, sizeof(tmp_recall_vs_brute_force));
  if (raw_recall_vs_brute_force != 0) {
    _internal_set_recall_vs_brute_force(from._internal_recall_vs_brute_force());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_kendall_tau_vs_brute_force = from._internal_kendall_tau_vs_brute_force();
  uint32_t raw_kendall_tau_vs_brute_force;
  memcpy(&raw_kendall_tau_vs_brute_force, &tmp_kendall_tau_vs_brute_force, sizeof(tmp_kendall_tau_vs_brute_force));
  if (raw_kendall_tau_vs_brute_force != 0) {
    _internal_set_kendall_tau_vs_brute_force(from._internal_kendall_tau_vs_brute_force());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_most_frequent_code_percent = from._internal_most_frequent_code_percent();
  uint32_t raw_most_frequent_code_percent;
  memcpy(&raw_most_frequent_code_percent, &tmp_most_frequent_code_percent, sizeof(tmp_most_frequent_code_percent));
  if (raw_most_frequent_code_percent != 0) {
    _internal_set_most_frequent_code_percent(from._internal_most_frequent_code_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lopq_ndcg = from._internal_lopq_ndcg();
  uint32_t raw_lopq_ndcg;
  memcpy(&raw_lopq_ndcg, &tmp_lopq_ndcg, sizeof(tmp_lopq_ndcg));
  if (raw_lopq_ndcg != 0) {
    _internal_set_lopq_ndcg(from._internal_lopq_ndcg());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brute_force_ndcg = from._internal_brute_force_ndcg();
  uint32_t raw_brute_force_ndcg;
  memcpy(&raw_brute_force_ndcg, &tmp_brute_force_ndcg, sizeof(tmp_brute_force_ndcg));
  if (raw_brute_force_ndcg != 0) {
    _internal_set_brute_force_ndcg(from._internal_brute_force_ndcg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LOPQEvalResult::CopyFrom(const LOPQEvalResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LOPQEvalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQEvalResult::IsInitialized() const {
  return true;
}

void LOPQEvalResult::InternalSwap(LOPQEvalResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LOPQEvalResult, brute_force_ndcg_)
      + sizeof(LOPQEvalResult::brute_force_ndcg_)
      - PROTOBUF_FIELD_OFFSET(LOPQEvalResult, k_)>(
          reinterpret_cast<char*>(&k_),
          reinterpret_cast<char*>(&other->k_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQEvalResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[85]);
}

// ===================================================================

class MetricsSummary::_Internal {
 public:
};

MetricsSummary::MetricsSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lopq_metrics_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MetricsSummary)
}
MetricsSummary::MetricsSummary(const MetricsSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lopq_metrics_(from.lopq_metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&top1_accuracy_, &from.top1_accuracy_,
    static_cast<size_t>(reinterpret_cast<char*>(&mean_avg_precision_iou_range_) -
    reinterpret_cast<char*>(&top1_accuracy_)) + sizeof(mean_avg_precision_iou_range_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MetricsSummary)
}

inline void MetricsSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&top1_accuracy_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mean_avg_precision_iou_range_) -
    reinterpret_cast<char*>(&top1_accuracy_)) + sizeof(mean_avg_precision_iou_range_));
}

MetricsSummary::~MetricsSummary() {
  // @@protoc_insertion_point(destructor:clarifai.api.MetricsSummary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricsSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MetricsSummary::ArenaDtor(void* object) {
  MetricsSummary* _this = reinterpret_cast< MetricsSummary* >(object);
  (void)_this;
}
void MetricsSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricsSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MetricsSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lopq_metrics_.Clear();
  ::memset(&top1_accuracy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_avg_precision_iou_range_) -
      reinterpret_cast<char*>(&top1_accuracy_)) + sizeof(mean_avg_precision_iou_range_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float top1_accuracy = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          top1_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float top5_accuracy = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          top5_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float macro_avg_roc_auc = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          macro_avg_roc_auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float macro_std_roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          macro_std_roc_auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float macro_avg_f1_score = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          macro_avg_f1_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float macro_std_f1_score = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          macro_std_f1_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float macro_avg_precision = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          macro_avg_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float macro_avg_recall = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          macro_avg_recall_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.LOPQEvalResult lopq_metrics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lopq_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // float mean_avg_precision_iou_50 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          mean_avg_precision_iou_50_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mean_avg_precision_iou_range = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          mean_avg_precision_iou_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricsSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MetricsSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float top1_accuracy = 1 [deprecated = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top1_accuracy = this->_internal_top1_accuracy();
  uint32_t raw_top1_accuracy;
  memcpy(&raw_top1_accuracy, &tmp_top1_accuracy, sizeof(tmp_top1_accuracy));
  if (raw_top1_accuracy != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_top1_accuracy(), target);
  }

  // float top5_accuracy = 2 [deprecated = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top5_accuracy = this->_internal_top5_accuracy();
  uint32_t raw_top5_accuracy;
  memcpy(&raw_top5_accuracy, &tmp_top5_accuracy, sizeof(tmp_top5_accuracy));
  if (raw_top5_accuracy != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_top5_accuracy(), target);
  }

  // float macro_avg_roc_auc = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_roc_auc = this->_internal_macro_avg_roc_auc();
  uint32_t raw_macro_avg_roc_auc;
  memcpy(&raw_macro_avg_roc_auc, &tmp_macro_avg_roc_auc, sizeof(tmp_macro_avg_roc_auc));
  if (raw_macro_avg_roc_auc != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_macro_avg_roc_auc(), target);
  }

  // float macro_std_roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_std_roc_auc = this->_internal_macro_std_roc_auc();
  uint32_t raw_macro_std_roc_auc;
  memcpy(&raw_macro_std_roc_auc, &tmp_macro_std_roc_auc, sizeof(tmp_macro_std_roc_auc));
  if (raw_macro_std_roc_auc != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_macro_std_roc_auc(), target);
  }

  // float macro_avg_f1_score = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_f1_score = this->_internal_macro_avg_f1_score();
  uint32_t raw_macro_avg_f1_score;
  memcpy(&raw_macro_avg_f1_score, &tmp_macro_avg_f1_score, sizeof(tmp_macro_avg_f1_score));
  if (raw_macro_avg_f1_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_macro_avg_f1_score(), target);
  }

  // float macro_std_f1_score = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_std_f1_score = this->_internal_macro_std_f1_score();
  uint32_t raw_macro_std_f1_score;
  memcpy(&raw_macro_std_f1_score, &tmp_macro_std_f1_score, sizeof(tmp_macro_std_f1_score));
  if (raw_macro_std_f1_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_macro_std_f1_score(), target);
  }

  // float macro_avg_precision = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_precision = this->_internal_macro_avg_precision();
  uint32_t raw_macro_avg_precision;
  memcpy(&raw_macro_avg_precision, &tmp_macro_avg_precision, sizeof(tmp_macro_avg_precision));
  if (raw_macro_avg_precision != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_macro_avg_precision(), target);
  }

  // float macro_avg_recall = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_recall = this->_internal_macro_avg_recall();
  uint32_t raw_macro_avg_recall;
  memcpy(&raw_macro_avg_recall, &tmp_macro_avg_recall, sizeof(tmp_macro_avg_recall));
  if (raw_macro_avg_recall != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_macro_avg_recall(), target);
  }

  // repeated .clarifai.api.LOPQEvalResult lopq_metrics = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lopq_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_lopq_metrics(i), target, stream);
  }

  // float mean_avg_precision_iou_50 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mean_avg_precision_iou_50 = this->_internal_mean_avg_precision_iou_50();
  uint32_t raw_mean_avg_precision_iou_50;
  memcpy(&raw_mean_avg_precision_iou_50, &tmp_mean_avg_precision_iou_50, sizeof(tmp_mean_avg_precision_iou_50));
  if (raw_mean_avg_precision_iou_50 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_mean_avg_precision_iou_50(), target);
  }

  // float mean_avg_precision_iou_range = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mean_avg_precision_iou_range = this->_internal_mean_avg_precision_iou_range();
  uint32_t raw_mean_avg_precision_iou_range;
  memcpy(&raw_mean_avg_precision_iou_range, &tmp_mean_avg_precision_iou_range, sizeof(tmp_mean_avg_precision_iou_range));
  if (raw_mean_avg_precision_iou_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_mean_avg_precision_iou_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MetricsSummary)
  return target;
}

size_t MetricsSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MetricsSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LOPQEvalResult lopq_metrics = 9;
  total_size += 1UL * this->_internal_lopq_metrics_size();
  for (const auto& msg : this->lopq_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float top1_accuracy = 1 [deprecated = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top1_accuracy = this->_internal_top1_accuracy();
  uint32_t raw_top1_accuracy;
  memcpy(&raw_top1_accuracy, &tmp_top1_accuracy, sizeof(tmp_top1_accuracy));
  if (raw_top1_accuracy != 0) {
    total_size += 1 + 4;
  }

  // float top5_accuracy = 2 [deprecated = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top5_accuracy = this->_internal_top5_accuracy();
  uint32_t raw_top5_accuracy;
  memcpy(&raw_top5_accuracy, &tmp_top5_accuracy, sizeof(tmp_top5_accuracy));
  if (raw_top5_accuracy != 0) {
    total_size += 1 + 4;
  }

  // float macro_avg_roc_auc = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_roc_auc = this->_internal_macro_avg_roc_auc();
  uint32_t raw_macro_avg_roc_auc;
  memcpy(&raw_macro_avg_roc_auc, &tmp_macro_avg_roc_auc, sizeof(tmp_macro_avg_roc_auc));
  if (raw_macro_avg_roc_auc != 0) {
    total_size += 1 + 4;
  }

  // float macro_std_roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_std_roc_auc = this->_internal_macro_std_roc_auc();
  uint32_t raw_macro_std_roc_auc;
  memcpy(&raw_macro_std_roc_auc, &tmp_macro_std_roc_auc, sizeof(tmp_macro_std_roc_auc));
  if (raw_macro_std_roc_auc != 0) {
    total_size += 1 + 4;
  }

  // float macro_avg_f1_score = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_f1_score = this->_internal_macro_avg_f1_score();
  uint32_t raw_macro_avg_f1_score;
  memcpy(&raw_macro_avg_f1_score, &tmp_macro_avg_f1_score, sizeof(tmp_macro_avg_f1_score));
  if (raw_macro_avg_f1_score != 0) {
    total_size += 1 + 4;
  }

  // float macro_std_f1_score = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_std_f1_score = this->_internal_macro_std_f1_score();
  uint32_t raw_macro_std_f1_score;
  memcpy(&raw_macro_std_f1_score, &tmp_macro_std_f1_score, sizeof(tmp_macro_std_f1_score));
  if (raw_macro_std_f1_score != 0) {
    total_size += 1 + 4;
  }

  // float macro_avg_precision = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_precision = this->_internal_macro_avg_precision();
  uint32_t raw_macro_avg_precision;
  memcpy(&raw_macro_avg_precision, &tmp_macro_avg_precision, sizeof(tmp_macro_avg_precision));
  if (raw_macro_avg_precision != 0) {
    total_size += 1 + 4;
  }

  // float macro_avg_recall = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_recall = this->_internal_macro_avg_recall();
  uint32_t raw_macro_avg_recall;
  memcpy(&raw_macro_avg_recall, &tmp_macro_avg_recall, sizeof(tmp_macro_avg_recall));
  if (raw_macro_avg_recall != 0) {
    total_size += 1 + 4;
  }

  // float mean_avg_precision_iou_50 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mean_avg_precision_iou_50 = this->_internal_mean_avg_precision_iou_50();
  uint32_t raw_mean_avg_precision_iou_50;
  memcpy(&raw_mean_avg_precision_iou_50, &tmp_mean_avg_precision_iou_50, sizeof(tmp_mean_avg_precision_iou_50));
  if (raw_mean_avg_precision_iou_50 != 0) {
    total_size += 1 + 4;
  }

  // float mean_avg_precision_iou_range = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mean_avg_precision_iou_range = this->_internal_mean_avg_precision_iou_range();
  uint32_t raw_mean_avg_precision_iou_range;
  memcpy(&raw_mean_avg_precision_iou_range, &tmp_mean_avg_precision_iou_range, sizeof(tmp_mean_avg_precision_iou_range));
  if (raw_mean_avg_precision_iou_range != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricsSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsSummary::GetClassData() const { return &_class_data_; }

void MetricsSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MetricsSummary *>(to)->MergeFrom(
      static_cast<const MetricsSummary &>(from));
}


void MetricsSummary::MergeFrom(const MetricsSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MetricsSummary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  lopq_metrics_.MergeFrom(from.lopq_metrics_);
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top1_accuracy = from._internal_top1_accuracy();
  uint32_t raw_top1_accuracy;
  memcpy(&raw_top1_accuracy, &tmp_top1_accuracy, sizeof(tmp_top1_accuracy));
  if (raw_top1_accuracy != 0) {
    _internal_set_top1_accuracy(from._internal_top1_accuracy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top5_accuracy = from._internal_top5_accuracy();
  uint32_t raw_top5_accuracy;
  memcpy(&raw_top5_accuracy, &tmp_top5_accuracy, sizeof(tmp_top5_accuracy));
  if (raw_top5_accuracy != 0) {
    _internal_set_top5_accuracy(from._internal_top5_accuracy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_roc_auc = from._internal_macro_avg_roc_auc();
  uint32_t raw_macro_avg_roc_auc;
  memcpy(&raw_macro_avg_roc_auc, &tmp_macro_avg_roc_auc, sizeof(tmp_macro_avg_roc_auc));
  if (raw_macro_avg_roc_auc != 0) {
    _internal_set_macro_avg_roc_auc(from._internal_macro_avg_roc_auc());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_std_roc_auc = from._internal_macro_std_roc_auc();
  uint32_t raw_macro_std_roc_auc;
  memcpy(&raw_macro_std_roc_auc, &tmp_macro_std_roc_auc, sizeof(tmp_macro_std_roc_auc));
  if (raw_macro_std_roc_auc != 0) {
    _internal_set_macro_std_roc_auc(from._internal_macro_std_roc_auc());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_f1_score = from._internal_macro_avg_f1_score();
  uint32_t raw_macro_avg_f1_score;
  memcpy(&raw_macro_avg_f1_score, &tmp_macro_avg_f1_score, sizeof(tmp_macro_avg_f1_score));
  if (raw_macro_avg_f1_score != 0) {
    _internal_set_macro_avg_f1_score(from._internal_macro_avg_f1_score());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_std_f1_score = from._internal_macro_std_f1_score();
  uint32_t raw_macro_std_f1_score;
  memcpy(&raw_macro_std_f1_score, &tmp_macro_std_f1_score, sizeof(tmp_macro_std_f1_score));
  if (raw_macro_std_f1_score != 0) {
    _internal_set_macro_std_f1_score(from._internal_macro_std_f1_score());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_precision = from._internal_macro_avg_precision();
  uint32_t raw_macro_avg_precision;
  memcpy(&raw_macro_avg_precision, &tmp_macro_avg_precision, sizeof(tmp_macro_avg_precision));
  if (raw_macro_avg_precision != 0) {
    _internal_set_macro_avg_precision(from._internal_macro_avg_precision());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_macro_avg_recall = from._internal_macro_avg_recall();
  uint32_t raw_macro_avg_recall;
  memcpy(&raw_macro_avg_recall, &tmp_macro_avg_recall, sizeof(tmp_macro_avg_recall));
  if (raw_macro_avg_recall != 0) {
    _internal_set_macro_avg_recall(from._internal_macro_avg_recall());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mean_avg_precision_iou_50 = from._internal_mean_avg_precision_iou_50();
  uint32_t raw_mean_avg_precision_iou_50;
  memcpy(&raw_mean_avg_precision_iou_50, &tmp_mean_avg_precision_iou_50, sizeof(tmp_mean_avg_precision_iou_50));
  if (raw_mean_avg_precision_iou_50 != 0) {
    _internal_set_mean_avg_precision_iou_50(from._internal_mean_avg_precision_iou_50());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mean_avg_precision_iou_range = from._internal_mean_avg_precision_iou_range();
  uint32_t raw_mean_avg_precision_iou_range;
  memcpy(&raw_mean_avg_precision_iou_range, &tmp_mean_avg_precision_iou_range, sizeof(tmp_mean_avg_precision_iou_range));
  if (raw_mean_avg_precision_iou_range != 0) {
    _internal_set_mean_avg_precision_iou_range(from._internal_mean_avg_precision_iou_range());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsSummary::CopyFrom(const MetricsSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MetricsSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsSummary::IsInitialized() const {
  return true;
}

void MetricsSummary::InternalSwap(MetricsSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  lopq_metrics_.InternalSwap(&other->lopq_metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricsSummary, mean_avg_precision_iou_range_)
      + sizeof(MetricsSummary::mean_avg_precision_iou_range_)
      - PROTOBUF_FIELD_OFFSET(MetricsSummary, top1_accuracy_)>(
          reinterpret_cast<char*>(&top1_accuracy_),
          reinterpret_cast<char*>(&other->top1_accuracy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsSummary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[86]);
}

// ===================================================================

class EvalMetrics::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const EvalMetrics* msg);
  static const ::clarifai::api::MetricsSummary& summary(const EvalMetrics* msg);
  static const ::clarifai::api::ConfusionMatrix& confusion_matrix(const EvalMetrics* msg);
  static const ::clarifai::api::CooccurrenceMatrix& cooccurrence_matrix(const EvalMetrics* msg);
  static const ::clarifai::api::LabelDistribution& label_counts(const EvalMetrics* msg);
  static const ::clarifai::api::EvalInfo& eval_info(const EvalMetrics* msg);
};

const ::clarifai::api::status::Status&
EvalMetrics::_Internal::status(const EvalMetrics* msg) {
  return *msg->status_;
}
const ::clarifai::api::MetricsSummary&
EvalMetrics::_Internal::summary(const EvalMetrics* msg) {
  return *msg->summary_;
}
const ::clarifai::api::ConfusionMatrix&
EvalMetrics::_Internal::confusion_matrix(const EvalMetrics* msg) {
  return *msg->confusion_matrix_;
}
const ::clarifai::api::CooccurrenceMatrix&
EvalMetrics::_Internal::cooccurrence_matrix(const EvalMetrics* msg) {
  return *msg->cooccurrence_matrix_;
}
const ::clarifai::api::LabelDistribution&
EvalMetrics::_Internal::label_counts(const EvalMetrics* msg) {
  return *msg->label_counts_;
}
const ::clarifai::api::EvalInfo&
EvalMetrics::_Internal::eval_info(const EvalMetrics* msg) {
  return *msg->eval_info_;
}
void EvalMetrics::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
EvalMetrics::EvalMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  binary_metrics_(arena),
  test_set_(arena),
  metrics_by_area_(arena),
  metrics_by_class_(arena),
  tracker_metrics_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.EvalMetrics)
}
EvalMetrics::EvalMetrics(const EvalMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      binary_metrics_(from.binary_metrics_),
      test_set_(from.test_set_),
      metrics_by_area_(from.metrics_by_area_),
      metrics_by_class_(from.metrics_by_class_),
      tracker_metrics_(from.tracker_metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_summary()) {
    summary_ = new ::clarifai::api::MetricsSummary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  if (from._internal_has_confusion_matrix()) {
    confusion_matrix_ = new ::clarifai::api::ConfusionMatrix(*from.confusion_matrix_);
  } else {
    confusion_matrix_ = nullptr;
  }
  if (from._internal_has_cooccurrence_matrix()) {
    cooccurrence_matrix_ = new ::clarifai::api::CooccurrenceMatrix(*from.cooccurrence_matrix_);
  } else {
    cooccurrence_matrix_ = nullptr;
  }
  if (from._internal_has_label_counts()) {
    label_counts_ = new ::clarifai::api::LabelDistribution(*from.label_counts_);
  } else {
    label_counts_ = nullptr;
  }
  if (from._internal_has_eval_info()) {
    eval_info_ = new ::clarifai::api::EvalInfo(*from.eval_info_);
  } else {
    eval_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.EvalMetrics)
}

inline void EvalMetrics::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eval_info_) -
    reinterpret_cast<char*>(&status_)) + sizeof(eval_info_));
}

EvalMetrics::~EvalMetrics() {
  // @@protoc_insertion_point(destructor:clarifai.api.EvalMetrics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EvalMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete summary_;
  if (this != internal_default_instance()) delete confusion_matrix_;
  if (this != internal_default_instance()) delete cooccurrence_matrix_;
  if (this != internal_default_instance()) delete label_counts_;
  if (this != internal_default_instance()) delete eval_info_;
}

void EvalMetrics::ArenaDtor(void* object) {
  EvalMetrics* _this = reinterpret_cast< EvalMetrics* >(object);
  (void)_this;
}
void EvalMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvalMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EvalMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.EvalMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  binary_metrics_.Clear();
  test_set_.Clear();
  metrics_by_area_.Clear();
  metrics_by_class_.Clear();
  tracker_metrics_.Clear();
  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && summary_ != nullptr) {
    delete summary_;
  }
  summary_ = nullptr;
  if (GetArenaForAllocation() == nullptr && confusion_matrix_ != nullptr) {
    delete confusion_matrix_;
  }
  confusion_matrix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cooccurrence_matrix_ != nullptr) {
    delete cooccurrence_matrix_;
  }
  cooccurrence_matrix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && label_counts_ != nullptr) {
    delete label_counts_;
  }
  label_counts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && eval_info_ != nullptr) {
    delete eval_info_;
  }
  eval_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvalMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.MetricsSummary summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ConfusionMatrix confusion_matrix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_confusion_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.CooccurrenceMatrix cooccurrence_matrix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cooccurrence_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.LabelDistribution label_counts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_counts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.BinaryMetrics binary_metrics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_binary_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.EvalTestSetEntry test_set = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_test_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.BinaryMetrics metrics_by_area = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics_by_area(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.BinaryMetrics metrics_by_class = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics_by_class(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.EvalMetrics.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.TrackerMetrics tracker_metrics = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracker_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvalInfo eval_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EvalMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.EvalMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.MetricsSummary summary = 2;
  if (this->_internal_has_summary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::summary(this), target, stream);
  }

  // .clarifai.api.ConfusionMatrix confusion_matrix = 3;
  if (this->_internal_has_confusion_matrix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::confusion_matrix(this), target, stream);
  }

  // .clarifai.api.CooccurrenceMatrix cooccurrence_matrix = 4;
  if (this->_internal_has_cooccurrence_matrix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cooccurrence_matrix(this), target, stream);
  }

  // .clarifai.api.LabelDistribution label_counts = 5;
  if (this->_internal_has_label_counts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::label_counts(this), target, stream);
  }

  // repeated .clarifai.api.BinaryMetrics binary_metrics = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_binary_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_binary_metrics(i), target, stream);
  }

  // repeated .clarifai.api.EvalTestSetEntry test_set = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_test_set_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_test_set(i), target, stream);
  }

  // repeated .clarifai.api.BinaryMetrics metrics_by_area = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_by_area_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_metrics_by_area(i), target, stream);
  }

  // repeated .clarifai.api.BinaryMetrics metrics_by_class = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_by_class_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_metrics_by_class(i), target, stream);
  }

  // string id = 10;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EvalMetrics.id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_id(), target);
  }

  // repeated .clarifai.api.TrackerMetrics tracker_metrics = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tracker_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_tracker_metrics(i), target, stream);
  }

  // .clarifai.api.EvalInfo eval_info = 12;
  if (this->_internal_has_eval_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::eval_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.EvalMetrics)
  return target;
}

size_t EvalMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.EvalMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.BinaryMetrics binary_metrics = 6;
  total_size += 1UL * this->_internal_binary_metrics_size();
  for (const auto& msg : this->binary_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.EvalTestSetEntry test_set = 7;
  total_size += 1UL * this->_internal_test_set_size();
  for (const auto& msg : this->test_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.BinaryMetrics metrics_by_area = 8;
  total_size += 1UL * this->_internal_metrics_by_area_size();
  for (const auto& msg : this->metrics_by_area_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.BinaryMetrics metrics_by_class = 9;
  total_size += 1UL * this->_internal_metrics_by_class_size();
  for (const auto& msg : this->metrics_by_class_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.TrackerMetrics tracker_metrics = 11;
  total_size += 1UL * this->_internal_tracker_metrics_size();
  for (const auto& msg : this->tracker_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 10;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.MetricsSummary summary = 2;
  if (this->_internal_has_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_);
  }

  // .clarifai.api.ConfusionMatrix confusion_matrix = 3;
  if (this->_internal_has_confusion_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *confusion_matrix_);
  }

  // .clarifai.api.CooccurrenceMatrix cooccurrence_matrix = 4;
  if (this->_internal_has_cooccurrence_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cooccurrence_matrix_);
  }

  // .clarifai.api.LabelDistribution label_counts = 5;
  if (this->_internal_has_label_counts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_counts_);
  }

  // .clarifai.api.EvalInfo eval_info = 12;
  if (this->_internal_has_eval_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvalMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EvalMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvalMetrics::GetClassData() const { return &_class_data_; }

void EvalMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EvalMetrics *>(to)->MergeFrom(
      static_cast<const EvalMetrics &>(from));
}


void EvalMetrics::MergeFrom(const EvalMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.EvalMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  binary_metrics_.MergeFrom(from.binary_metrics_);
  test_set_.MergeFrom(from.test_set_);
  metrics_by_area_.MergeFrom(from.metrics_by_area_);
  metrics_by_class_.MergeFrom(from.metrics_by_class_);
  tracker_metrics_.MergeFrom(from.tracker_metrics_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_summary()) {
    _internal_mutable_summary()->::clarifai::api::MetricsSummary::MergeFrom(from._internal_summary());
  }
  if (from._internal_has_confusion_matrix()) {
    _internal_mutable_confusion_matrix()->::clarifai::api::ConfusionMatrix::MergeFrom(from._internal_confusion_matrix());
  }
  if (from._internal_has_cooccurrence_matrix()) {
    _internal_mutable_cooccurrence_matrix()->::clarifai::api::CooccurrenceMatrix::MergeFrom(from._internal_cooccurrence_matrix());
  }
  if (from._internal_has_label_counts()) {
    _internal_mutable_label_counts()->::clarifai::api::LabelDistribution::MergeFrom(from._internal_label_counts());
  }
  if (from._internal_has_eval_info()) {
    _internal_mutable_eval_info()->::clarifai::api::EvalInfo::MergeFrom(from._internal_eval_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvalMetrics::CopyFrom(const EvalMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.EvalMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalMetrics::IsInitialized() const {
  return true;
}

void EvalMetrics::InternalSwap(EvalMetrics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  binary_metrics_.InternalSwap(&other->binary_metrics_);
  test_set_.InternalSwap(&other->test_set_);
  metrics_by_area_.InternalSwap(&other->metrics_by_area_);
  metrics_by_class_.InternalSwap(&other->metrics_by_class_);
  tracker_metrics_.InternalSwap(&other->tracker_metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvalMetrics, eval_info_)
      + sizeof(EvalMetrics::eval_info_)
      - PROTOBUF_FIELD_OFFSET(EvalMetrics, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalMetrics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[87]);
}

// ===================================================================

class FieldsValue::_Internal {
 public:
};

FieldsValue::FieldsValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.FieldsValue)
}
FieldsValue::FieldsValue(const FieldsValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&confusion_matrix_, &from.confusion_matrix_,
    static_cast<size_t>(reinterpret_cast<char*>(&metrics_by_class_) -
    reinterpret_cast<char*>(&confusion_matrix_)) + sizeof(metrics_by_class_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.FieldsValue)
}

inline void FieldsValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&confusion_matrix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metrics_by_class_) -
    reinterpret_cast<char*>(&confusion_matrix_)) + sizeof(metrics_by_class_));
}

FieldsValue::~FieldsValue() {
  // @@protoc_insertion_point(destructor:clarifai.api.FieldsValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FieldsValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FieldsValue::ArenaDtor(void* object) {
  FieldsValue* _this = reinterpret_cast< FieldsValue* >(object);
  (void)_this;
}
void FieldsValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldsValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldsValue::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.FieldsValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confusion_matrix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metrics_by_class_) -
      reinterpret_cast<char*>(&confusion_matrix_)) + sizeof(metrics_by_class_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldsValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool confusion_matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          confusion_matrix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool cooccurrence_matrix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cooccurrence_matrix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool label_counts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          label_counts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool binary_metrics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          binary_metrics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool test_set = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          test_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool metrics_by_area = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          metrics_by_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool metrics_by_class = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          metrics_by_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldsValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.FieldsValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool confusion_matrix = 1;
  if (this->_internal_confusion_matrix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_confusion_matrix(), target);
  }

  // bool cooccurrence_matrix = 2;
  if (this->_internal_cooccurrence_matrix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_cooccurrence_matrix(), target);
  }

  // bool label_counts = 3;
  if (this->_internal_label_counts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_label_counts(), target);
  }

  // bool binary_metrics = 4;
  if (this->_internal_binary_metrics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_binary_metrics(), target);
  }

  // bool test_set = 5;
  if (this->_internal_test_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_test_set(), target);
  }

  // bool metrics_by_area = 6;
  if (this->_internal_metrics_by_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_metrics_by_area(), target);
  }

  // bool metrics_by_class = 7;
  if (this->_internal_metrics_by_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_metrics_by_class(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.FieldsValue)
  return target;
}

size_t FieldsValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.FieldsValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool confusion_matrix = 1;
  if (this->_internal_confusion_matrix() != 0) {
    total_size += 1 + 1;
  }

  // bool cooccurrence_matrix = 2;
  if (this->_internal_cooccurrence_matrix() != 0) {
    total_size += 1 + 1;
  }

  // bool label_counts = 3;
  if (this->_internal_label_counts() != 0) {
    total_size += 1 + 1;
  }

  // bool binary_metrics = 4;
  if (this->_internal_binary_metrics() != 0) {
    total_size += 1 + 1;
  }

  // bool test_set = 5;
  if (this->_internal_test_set() != 0) {
    total_size += 1 + 1;
  }

  // bool metrics_by_area = 6;
  if (this->_internal_metrics_by_area() != 0) {
    total_size += 1 + 1;
  }

  // bool metrics_by_class = 7;
  if (this->_internal_metrics_by_class() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldsValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FieldsValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldsValue::GetClassData() const { return &_class_data_; }

void FieldsValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FieldsValue *>(to)->MergeFrom(
      static_cast<const FieldsValue &>(from));
}


void FieldsValue::MergeFrom(const FieldsValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.FieldsValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_confusion_matrix() != 0) {
    _internal_set_confusion_matrix(from._internal_confusion_matrix());
  }
  if (from._internal_cooccurrence_matrix() != 0) {
    _internal_set_cooccurrence_matrix(from._internal_cooccurrence_matrix());
  }
  if (from._internal_label_counts() != 0) {
    _internal_set_label_counts(from._internal_label_counts());
  }
  if (from._internal_binary_metrics() != 0) {
    _internal_set_binary_metrics(from._internal_binary_metrics());
  }
  if (from._internal_test_set() != 0) {
    _internal_set_test_set(from._internal_test_set());
  }
  if (from._internal_metrics_by_area() != 0) {
    _internal_set_metrics_by_area(from._internal_metrics_by_area());
  }
  if (from._internal_metrics_by_class() != 0) {
    _internal_set_metrics_by_class(from._internal_metrics_by_class());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldsValue::CopyFrom(const FieldsValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.FieldsValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldsValue::IsInitialized() const {
  return true;
}

void FieldsValue::InternalSwap(FieldsValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldsValue, metrics_by_class_)
      + sizeof(FieldsValue::metrics_by_class_)
      - PROTOBUF_FIELD_OFFSET(FieldsValue, confusion_matrix_)>(
          reinterpret_cast<char*>(&confusion_matrix_),
          reinterpret_cast<char*>(&other->confusion_matrix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldsValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[88]);
}

// ===================================================================

class Output::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const Output* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Output* msg);
  static const ::clarifai::api::Model& model(const Output* msg);
  static const ::clarifai::api::Input& input(const Output* msg);
  static const ::clarifai::api::Data& data(const Output* msg);
};

const ::clarifai::api::status::Status&
Output::_Internal::status(const Output* msg) {
  return *msg->status_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Output::_Internal::created_at(const Output* msg) {
  return *msg->created_at_;
}
const ::clarifai::api::Model&
Output::_Internal::model(const Output* msg) {
  return *msg->model_;
}
const ::clarifai::api::Input&
Output::_Internal::input(const Output* msg) {
  return *msg->input_;
}
const ::clarifai::api::Data&
Output::_Internal::data(const Output* msg) {
  return *msg->data_;
}
void Output::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void Output::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
Output::Output(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Output)
}
Output::Output(const Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::api::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Output)
}

inline void Output::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&status_)) + sizeof(data_));
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:clarifai.api.Output)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Output::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete model_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete data_;
}

void Output::ArenaDtor(void* object) {
  Output* _this = reinterpret_cast< Output* >(object);
  (void)_this;
}
void Output::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Output)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Output::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Output.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Output::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Output)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Output.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.status.Status status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::created_at(this), target, stream);
  }

  // .clarifai.api.Model model = 4;
  if (this->_internal_has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::model(this), target, stream);
  }

  // .clarifai.api.Input input = 5;
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::input(this), target, stream);
  }

  // .clarifai.api.Data data = 6;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Output)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.status.Status status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .clarifai.api.Model model = 4;
  if (this->_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  // .clarifai.api.Input input = 5;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .clarifai.api.Data data = 6;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Output::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Output::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Output::GetClassData() const { return &_class_data_; }

void Output::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Output *>(to)->MergeFrom(
      static_cast<const Output &>(from));
}


void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Output)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_model()) {
    _internal_mutable_model()->::clarifai::api::Model::MergeFrom(from._internal_model());
  }
  if (from._internal_has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  return true;
}

void Output::InternalSwap(Output* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Output, data_)
      + sizeof(Output::data_)
      - PROTOBUF_FIELD_OFFSET(Output, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Output::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[89]);
}

// ===================================================================

class ScopeDeps::_Internal {
 public:
};

ScopeDeps::ScopeDeps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  depending_scopes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ScopeDeps)
}
ScopeDeps::ScopeDeps(const ScopeDeps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      depending_scopes_(from.depending_scopes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_scope().empty()) {
    scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scope(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ScopeDeps)
}

inline void ScopeDeps::SharedCtor() {
scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScopeDeps::~ScopeDeps() {
  // @@protoc_insertion_point(destructor:clarifai.api.ScopeDeps)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ScopeDeps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScopeDeps::ArenaDtor(void* object) {
  ScopeDeps* _this = reinterpret_cast< ScopeDeps* >(object);
  (void)_this;
}
void ScopeDeps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScopeDeps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScopeDeps::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ScopeDeps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  depending_scopes_.Clear();
  scope_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScopeDeps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string scope = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_scope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ScopeDeps.scope"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string depending_scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_depending_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ScopeDeps.depending_scopes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScopeDeps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ScopeDeps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string scope = 1;
  if (!this->_internal_scope().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scope().data(), static_cast<int>(this->_internal_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ScopeDeps.scope");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scope(), target);
  }

  // repeated string depending_scopes = 2;
  for (int i = 0, n = this->_internal_depending_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_depending_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ScopeDeps.depending_scopes");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ScopeDeps)
  return target;
}

size_t ScopeDeps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ScopeDeps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string depending_scopes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(depending_scopes_.size());
  for (int i = 0, n = depending_scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      depending_scopes_.Get(i));
  }

  // string scope = 1;
  if (!this->_internal_scope().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scope());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScopeDeps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScopeDeps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScopeDeps::GetClassData() const { return &_class_data_; }

void ScopeDeps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScopeDeps *>(to)->MergeFrom(
      static_cast<const ScopeDeps &>(from));
}


void ScopeDeps::MergeFrom(const ScopeDeps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ScopeDeps)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  depending_scopes_.MergeFrom(from.depending_scopes_);
  if (!from._internal_scope().empty()) {
    _internal_set_scope(from._internal_scope());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScopeDeps::CopyFrom(const ScopeDeps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ScopeDeps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScopeDeps::IsInitialized() const {
  return true;
}

void ScopeDeps::InternalSwap(ScopeDeps* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  depending_scopes_.InternalSwap(&other->depending_scopes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &scope_, lhs_arena,
      &other->scope_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ScopeDeps::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[90]);
}

// ===================================================================

class EndpointDeps::_Internal {
 public:
};

EndpointDeps::EndpointDeps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  depending_scopes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.EndpointDeps)
}
EndpointDeps::EndpointDeps(const EndpointDeps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      depending_scopes_(from.depending_scopes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_endpoint().empty()) {
    endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_endpoint(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.EndpointDeps)
}

inline void EndpointDeps::SharedCtor() {
endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EndpointDeps::~EndpointDeps() {
  // @@protoc_insertion_point(destructor:clarifai.api.EndpointDeps)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EndpointDeps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EndpointDeps::ArenaDtor(void* object) {
  EndpointDeps* _this = reinterpret_cast< EndpointDeps* >(object);
  (void)_this;
}
void EndpointDeps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndpointDeps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EndpointDeps::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.EndpointDeps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  depending_scopes_.Clear();
  endpoint_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndpointDeps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string endpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_endpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.EndpointDeps.endpoint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string depending_scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_depending_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.EndpointDeps.depending_scopes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndpointDeps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.EndpointDeps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string endpoint = 1;
  if (!this->_internal_endpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint().data(), static_cast<int>(this->_internal_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EndpointDeps.endpoint");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_endpoint(), target);
  }

  // repeated string depending_scopes = 2;
  for (int i = 0, n = this->_internal_depending_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_depending_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EndpointDeps.depending_scopes");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.EndpointDeps)
  return target;
}

size_t EndpointDeps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.EndpointDeps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string depending_scopes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(depending_scopes_.size());
  for (int i = 0, n = depending_scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      depending_scopes_.Get(i));
  }

  // string endpoint = 1;
  if (!this->_internal_endpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndpointDeps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EndpointDeps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndpointDeps::GetClassData() const { return &_class_data_; }

void EndpointDeps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EndpointDeps *>(to)->MergeFrom(
      static_cast<const EndpointDeps &>(from));
}


void EndpointDeps::MergeFrom(const EndpointDeps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.EndpointDeps)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  depending_scopes_.MergeFrom(from.depending_scopes_);
  if (!from._internal_endpoint().empty()) {
    _internal_set_endpoint(from._internal_endpoint());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndpointDeps::CopyFrom(const EndpointDeps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.EndpointDeps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndpointDeps::IsInitialized() const {
  return true;
}

void EndpointDeps::InternalSwap(EndpointDeps* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  depending_scopes_.InternalSwap(&other->depending_scopes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &endpoint_, lhs_arena,
      &other->endpoint_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EndpointDeps::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[91]);
}

// ===================================================================

class Hit::_Internal {
 public:
  static const ::clarifai::api::Input& input(const Hit* msg);
  static const ::clarifai::api::Annotation& annotation(const Hit* msg);
};

const ::clarifai::api::Input&
Hit::_Internal::input(const Hit* msg) {
  return *msg->input_;
}
const ::clarifai::api::Annotation&
Hit::_Internal::annotation(const Hit* msg) {
  return *msg->annotation_;
}
Hit::Hit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Hit)
}
Hit::Hit(const Hit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_annotation()) {
    annotation_ = new ::clarifai::api::Annotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Hit)
}

inline void Hit::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&input_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&input_)) + sizeof(score_));
}

Hit::~Hit() {
  // @@protoc_insertion_point(destructor:clarifai.api.Hit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Hit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete annotation_;
}

void Hit::ArenaDtor(void* object) {
  Hit* _this = reinterpret_cast< Hit* >(object);
  (void)_this;
}
void Hit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Hit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Hit::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Hit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  app_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
  score_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float score = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Hit.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Hit.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Hit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Hit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float score = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_score(), target);
  }

  // .clarifai.api.Input input = 2;
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // .clarifai.api.Annotation annotation = 3;
  if (this->_internal_has_annotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::annotation(this), target, stream);
  }

  // string user_id = 4;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Hit.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  // string app_id = 5;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Hit.app_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Hit)
  return target;
}

size_t Hit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Hit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 4;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string app_id = 5;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // .clarifai.api.Input input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .clarifai.api.Annotation annotation = 3;
  if (this->_internal_has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  // float score = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Hit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Hit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Hit::GetClassData() const { return &_class_data_; }

void Hit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Hit *>(to)->MergeFrom(
      static_cast<const Hit &>(from));
}


void Hit::MergeFrom(const Hit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Hit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (from._internal_has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
  if (from._internal_has_annotation()) {
    _internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(from._internal_annotation());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _internal_set_score(from._internal_score());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Hit::CopyFrom(const Hit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Hit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hit::IsInitialized() const {
  return true;
}

void Hit::InternalSwap(Hit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hit, score_)
      + sizeof(Hit::score_)
      - PROTOBUF_FIELD_OFFSET(Hit, input_)>(
          reinterpret_cast<char*>(&input_),
          reinterpret_cast<char*>(&other->input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Hit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[92]);
}

// ===================================================================

class And::_Internal {
 public:
  static const ::clarifai::api::Input& input(const And* msg);
  static const ::clarifai::api::Output& output(const And* msg);
  static const ::clarifai::api::Annotation& annotation(const And* msg);
};

const ::clarifai::api::Input&
And::_Internal::input(const And* msg) {
  return *msg->input_;
}
const ::clarifai::api::Output&
And::_Internal::output(const And* msg) {
  return *msg->output_;
}
const ::clarifai::api::Annotation&
And::_Internal::annotation(const And* msg) {
  return *msg->annotation_;
}
And::And(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.And)
}
And::And(const And& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_output()) {
    output_ = new ::clarifai::api::Output(*from.output_);
  } else {
    output_ = nullptr;
  }
  if (from._internal_has_annotation()) {
    annotation_ = new ::clarifai::api::Annotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  negate_ = from.negate_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.And)
}

inline void And::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&input_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&negate_) -
    reinterpret_cast<char*>(&input_)) + sizeof(negate_));
}

And::~And() {
  // @@protoc_insertion_point(destructor:clarifai.api.And)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void And::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete output_;
  if (this != internal_default_instance()) delete annotation_;
}

void And::ArenaDtor(void* object) {
  And* _this = reinterpret_cast< And* >(object);
  (void)_this;
}
void And::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void And::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void And::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.And)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
  if (GetArenaForAllocation() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
  negate_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* And::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Input input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Output output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool negate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          negate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* And::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.And)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Input input = 1;
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  // .clarifai.api.Output output = 2;
  if (this->_internal_has_output()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::output(this), target, stream);
  }

  // bool negate = 3;
  if (this->_internal_negate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_negate(), target);
  }

  // .clarifai.api.Annotation annotation = 4;
  if (this->_internal_has_annotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::annotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.And)
  return target;
}

size_t And::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.And)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Input input = 1;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .clarifai.api.Output output = 2;
  if (this->_internal_has_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_);
  }

  // .clarifai.api.Annotation annotation = 4;
  if (this->_internal_has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  // bool negate = 3;
  if (this->_internal_negate() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData And::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    And::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*And::GetClassData() const { return &_class_data_; }

void And::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<And *>(to)->MergeFrom(
      static_cast<const And &>(from));
}


void And::MergeFrom(const And& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.And)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
  if (from._internal_has_output()) {
    _internal_mutable_output()->::clarifai::api::Output::MergeFrom(from._internal_output());
  }
  if (from._internal_has_annotation()) {
    _internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(from._internal_annotation());
  }
  if (from._internal_negate() != 0) {
    _internal_set_negate(from._internal_negate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void And::CopyFrom(const And& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.And)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool And::IsInitialized() const {
  return true;
}

void And::InternalSwap(And* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(And, negate_)
      + sizeof(And::negate_)
      - PROTOBUF_FIELD_OFFSET(And, input_)>(
          reinterpret_cast<char*>(&input_),
          reinterpret_cast<char*>(&other->input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata And::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[93]);
}

// ===================================================================

class Query::_Internal {
 public:
};

Query::Query(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ands_(arena),
  filters_(arena),
  ranks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Query)
}
Query::Query(const Query& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ands_(from.ands_),
      filters_(from.filters_),
      ranks_(from.ranks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Query)
}

inline void Query::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:clarifai.api.Query)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Query::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Query::ArenaDtor(void* object) {
  Query* _this = reinterpret_cast< Query* >(object);
  (void)_this;
}
void Query::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Query)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ands_.Clear();
  filters_.Clear();
  ranks_.Clear();
  language_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.And ands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Query.language"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Filter filters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Rank ranks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Query::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Query)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.And ands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ands(i), target, stream);
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Query.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  // repeated .clarifai.api.Filter filters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_filters(i), target, stream);
  }

  // repeated .clarifai.api.Rank ranks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ranks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Query)
  return target;
}

size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Query)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.And ands = 1;
  total_size += 1UL * this->_internal_ands_size();
  for (const auto& msg : this->ands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Filter filters = 3;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Rank ranks = 4;
  total_size += 1UL * this->_internal_ranks_size();
  for (const auto& msg : this->ranks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Query::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query::GetClassData() const { return &_class_data_; }

void Query::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Query *>(to)->MergeFrom(
      static_cast<const Query &>(from));
}


void Query::MergeFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Query)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ands_.MergeFrom(from.ands_);
  filters_.MergeFrom(from.filters_);
  ranks_.MergeFrom(from.ranks_);
  if (!from._internal_language().empty()) {
    _internal_set_language(from._internal_language());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::InternalSwap(Query* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ands_.InternalSwap(&other->ands_);
  filters_.InternalSwap(&other->filters_);
  ranks_.InternalSwap(&other->ranks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Query::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[94]);
}

// ===================================================================

class Search::_Internal {
 public:
  static const ::clarifai::api::Query& query(const Search* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& as_of(const Search* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Search* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Search* msg);
  static const ::clarifai::api::Visibility& visibility(const Search* msg);
};

const ::clarifai::api::Query&
Search::_Internal::query(const Search* msg) {
  return *msg->query_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Search::_Internal::as_of(const Search* msg) {
  return *msg->as_of_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Search::_Internal::created_at(const Search* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Search::_Internal::modified_at(const Search* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::Visibility&
Search::_Internal::visibility(const Search* msg) {
  return *msg->visibility_;
}
void Search::clear_as_of() {
  if (GetArenaForAllocation() == nullptr && as_of_ != nullptr) {
    delete as_of_;
  }
  as_of_ = nullptr;
}
void Search::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Search::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
Search::Search(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Search)
}
Search::Search(const Search& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    application_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_application_id().empty()) {
    application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_application_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  git_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    git_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_git_hash().empty()) {
    git_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_git_hash(), 
      GetArenaForAllocation());
  }
  algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_algorithm().empty()) {
    algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_algorithm(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_query()) {
    query_ = new ::clarifai::api::Query(*from.query_);
  } else {
    query_ = nullptr;
  }
  if (from._internal_has_as_of()) {
    as_of_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.as_of_);
  } else {
    as_of_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  ::memcpy(&save_, &from.save_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_value_) -
    reinterpret_cast<char*>(&save_)) + sizeof(min_value_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Search)
}

inline void Search::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  application_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
git_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  git_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&query_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_value_) -
    reinterpret_cast<char*>(&query_)) + sizeof(min_value_));
}

Search::~Search() {
  // @@protoc_insertion_point(destructor:clarifai.api.Search)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Search::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  git_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_;
  if (this != internal_default_instance()) delete as_of_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete visibility_;
}

void Search::ArenaDtor(void* object) {
  Search* _this = reinterpret_cast< Search* >(object);
  (void)_this;
}
void Search::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Search::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Search::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Search)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  application_id_.ClearToEmpty();
  name_.ClearToEmpty();
  git_hash_.ClearToEmpty();
  algorithm_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  if (GetArenaForAllocation() == nullptr && as_of_ != nullptr) {
    delete as_of_;
  }
  as_of_ = nullptr;
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  ::memset(&save_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_value_) -
      reinterpret_cast<char*>(&save_)) + sizeof(min_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Search::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Query query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Search.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string application_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_application_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Search.application_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Search.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp as_of = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_as_of(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string git_hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_git_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Search.git_hash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string algorithm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_algorithm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Search.algorithm"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool save = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          save_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float min_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Search::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Search)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Query query = 1;
  if (this->_internal_has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::query(this), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Search.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string application_id = 3;
  if (!this->_internal_application_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_id().data(), static_cast<int>(this->_internal_application_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Search.application_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_application_id(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Search.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp as_of = 5;
  if (this->_internal_has_as_of()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::as_of(this), target, stream);
  }

  // string git_hash = 6;
  if (!this->_internal_git_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_git_hash().data(), static_cast<int>(this->_internal_git_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Search.git_hash");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_git_hash(), target);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 8;
  if (this->_internal_has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::modified_at(this), target, stream);
  }

  // string algorithm = 9;
  if (!this->_internal_algorithm().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_algorithm().data(), static_cast<int>(this->_internal_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Search.algorithm");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_algorithm(), target);
  }

  // bool save = 10;
  if (this->_internal_save() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_save(), target);
  }

  // float min_value = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_value = this->_internal_min_value();
  uint32_t raw_min_value;
  memcpy(&raw_min_value, &tmp_min_value, sizeof(tmp_min_value));
  if (raw_min_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_min_value(), target);
  }

  // .clarifai.api.Visibility visibility = 12;
  if (this->_internal_has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::visibility(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Search)
  return target;
}

size_t Search::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Search)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string application_id = 3;
  if (!this->_internal_application_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_id());
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string git_hash = 6;
  if (!this->_internal_git_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_git_hash());
  }

  // string algorithm = 9;
  if (!this->_internal_algorithm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_algorithm());
  }

  // .clarifai.api.Query query = 1;
  if (this->_internal_has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_);
  }

  // .google.protobuf.Timestamp as_of = 5;
  if (this->_internal_has_as_of()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *as_of_);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 8;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.Visibility visibility = 12;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // bool save = 10;
  if (this->_internal_save() != 0) {
    total_size += 1 + 1;
  }

  // float min_value = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_value = this->_internal_min_value();
  uint32_t raw_min_value;
  memcpy(&raw_min_value, &tmp_min_value, sizeof(tmp_min_value));
  if (raw_min_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Search::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Search::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Search::GetClassData() const { return &_class_data_; }

void Search::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Search *>(to)->MergeFrom(
      static_cast<const Search &>(from));
}


void Search::MergeFrom(const Search& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Search)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_application_id().empty()) {
    _internal_set_application_id(from._internal_application_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_git_hash().empty()) {
    _internal_set_git_hash(from._internal_git_hash());
  }
  if (!from._internal_algorithm().empty()) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_has_query()) {
    _internal_mutable_query()->::clarifai::api::Query::MergeFrom(from._internal_query());
  }
  if (from._internal_has_as_of()) {
    _internal_mutable_as_of()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_as_of());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from._internal_has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from._internal_save() != 0) {
    _internal_set_save(from._internal_save());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_value = from._internal_min_value();
  uint32_t raw_min_value;
  memcpy(&raw_min_value, &tmp_min_value, sizeof(tmp_min_value));
  if (raw_min_value != 0) {
    _internal_set_min_value(from._internal_min_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Search::CopyFrom(const Search& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Search)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Search::IsInitialized() const {
  return true;
}

void Search::InternalSwap(Search* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &application_id_, lhs_arena,
      &other->application_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &git_hash_, lhs_arena,
      &other->git_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &algorithm_, lhs_arena,
      &other->algorithm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Search, min_value_)
      + sizeof(Search::min_value_)
      - PROTOBUF_FIELD_OFFSET(Search, query_)>(
          reinterpret_cast<char*>(&query_),
          reinterpret_cast<char*>(&other->query_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Search::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[95]);
}

// ===================================================================

class Filter::_Internal {
 public:
  static const ::clarifai::api::Annotation& annotation(const Filter* msg);
  static const ::clarifai::api::Input& input(const Filter* msg);
  static const ::clarifai::api::TimeRange& last_updated_time_range(const Filter* msg);
};

const ::clarifai::api::Annotation&
Filter::_Internal::annotation(const Filter* msg) {
  return *msg->annotation_;
}
const ::clarifai::api::Input&
Filter::_Internal::input(const Filter* msg) {
  return *msg->input_;
}
const ::clarifai::api::TimeRange&
Filter::_Internal::last_updated_time_range(const Filter* msg) {
  return *msg->last_updated_time_range_;
}
Filter::Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Filter)
}
Filter::Filter(const Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_annotation()) {
    annotation_ = new ::clarifai::api::Annotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_last_updated_time_range()) {
    last_updated_time_range_ = new ::clarifai::api::TimeRange(*from.last_updated_time_range_);
  } else {
    last_updated_time_range_ = nullptr;
  }
  negate_ = from.negate_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Filter)
}

inline void Filter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&annotation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&negate_) -
    reinterpret_cast<char*>(&annotation_)) + sizeof(negate_));
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:clarifai.api.Filter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete annotation_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete last_updated_time_range_;
}

void Filter::ArenaDtor(void* object) {
  Filter* _this = reinterpret_cast< Filter* >(object);
  (void)_this;
}
void Filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Filter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_updated_time_range_ != nullptr) {
    delete last_updated_time_range_;
  }
  last_updated_time_range_ = nullptr;
  negate_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool negate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          negate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TimeRange last_updated_time_range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated_time_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Filter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Filter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool negate = 3;
  if (this->_internal_negate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_negate(), target);
  }

  // .clarifai.api.Annotation annotation = 4;
  if (this->_internal_has_annotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::annotation(this), target, stream);
  }

  // .clarifai.api.Input input = 5;
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::input(this), target, stream);
  }

  // .clarifai.api.TimeRange last_updated_time_range = 6;
  if (this->_internal_has_last_updated_time_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::last_updated_time_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Filter)
  return target;
}

size_t Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Filter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Annotation annotation = 4;
  if (this->_internal_has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  // .clarifai.api.Input input = 5;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .clarifai.api.TimeRange last_updated_time_range = 6;
  if (this->_internal_has_last_updated_time_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_updated_time_range_);
  }

  // bool negate = 3;
  if (this->_internal_negate() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Filter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Filter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Filter::GetClassData() const { return &_class_data_; }

void Filter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Filter *>(to)->MergeFrom(
      static_cast<const Filter &>(from));
}


void Filter::MergeFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_annotation()) {
    _internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(from._internal_annotation());
  }
  if (from._internal_has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
  if (from._internal_has_last_updated_time_range()) {
    _internal_mutable_last_updated_time_range()->::clarifai::api::TimeRange::MergeFrom(from._internal_last_updated_time_range());
  }
  if (from._internal_negate() != 0) {
    _internal_set_negate(from._internal_negate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Filter::CopyFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {
  return true;
}

void Filter::InternalSwap(Filter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Filter, negate_)
      + sizeof(Filter::negate_)
      - PROTOBUF_FIELD_OFFSET(Filter, annotation_)>(
          reinterpret_cast<char*>(&annotation_),
          reinterpret_cast<char*>(&other->annotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Filter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[96]);
}

// ===================================================================

class TimeRange::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const TimeRange* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const TimeRange* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TimeRange::_Internal::start_time(const TimeRange* msg) {
  return *msg->start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TimeRange::_Internal::end_time(const TimeRange* msg) {
  return *msg->end_time_;
}
void TimeRange::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void TimeRange::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
TimeRange::TimeRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TimeRange)
}
TimeRange::TimeRange(const TimeRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TimeRange)
}

inline void TimeRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

TimeRange::~TimeRange() {
  // @@protoc_insertion_point(destructor:clarifai.api.TimeRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TimeRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void TimeRange::ArenaDtor(void* object) {
  TimeRange* _this = reinterpret_cast< TimeRange* >(object);
  (void)_this;
}
void TimeRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TimeRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TimeRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->_internal_has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TimeRange)
  return target;
}

size_t TimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TimeRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimeRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeRange::GetClassData() const { return &_class_data_; }

void TimeRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TimeRange *>(to)->MergeFrom(
      static_cast<const TimeRange &>(from));
}


void TimeRange::MergeFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start_time()) {
    _internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeRange::CopyFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {
  return true;
}

void TimeRange::InternalSwap(TimeRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeRange, end_time_)
      + sizeof(TimeRange::end_time_)
      - PROTOBUF_FIELD_OFFSET(TimeRange, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[97]);
}

// ===================================================================

class Rank::_Internal {
 public:
  static const ::clarifai::api::Annotation& annotation(const Rank* msg);
};

const ::clarifai::api::Annotation&
Rank::_Internal::annotation(const Rank* msg) {
  return *msg->annotation_;
}
Rank::Rank(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Rank)
}
Rank::Rank(const Rank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_annotation()) {
    annotation_ = new ::clarifai::api::Annotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  negate_ = from.negate_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Rank)
}

inline void Rank::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&annotation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&negate_) -
    reinterpret_cast<char*>(&annotation_)) + sizeof(negate_));
}

Rank::~Rank() {
  // @@protoc_insertion_point(destructor:clarifai.api.Rank)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Rank::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete annotation_;
}

void Rank::ArenaDtor(void* object) {
  Rank* _this = reinterpret_cast< Rank* >(object);
  (void)_this;
}
void Rank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Rank::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Rank)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
  negate_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool negate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          negate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rank::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Rank)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool negate = 3;
  if (this->_internal_negate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_negate(), target);
  }

  // .clarifai.api.Annotation annotation = 4;
  if (this->_internal_has_annotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::annotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Rank)
  return target;
}

size_t Rank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Rank)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Annotation annotation = 4;
  if (this->_internal_has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  // bool negate = 3;
  if (this->_internal_negate() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rank::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Rank::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rank::GetClassData() const { return &_class_data_; }

void Rank::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Rank *>(to)->MergeFrom(
      static_cast<const Rank &>(from));
}


void Rank::MergeFrom(const Rank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Rank)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_annotation()) {
    _internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(from._internal_annotation());
  }
  if (from._internal_negate() != 0) {
    _internal_set_negate(from._internal_negate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rank::CopyFrom(const Rank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rank::IsInitialized() const {
  return true;
}

void Rank::InternalSwap(Rank* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rank, negate_)
      + sizeof(Rank::negate_)
      - PROTOBUF_FIELD_OFFSET(Rank, annotation_)>(
          reinterpret_cast<char*>(&annotation_),
          reinterpret_cast<char*>(&other->annotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rank::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[98]);
}

// ===================================================================

class AnnotationSearchMetrics::_Internal {
 public:
  static const ::clarifai::api::Search& ground_truth(const AnnotationSearchMetrics* msg);
  static const ::clarifai::api::Search& search_to_eval(const AnnotationSearchMetrics* msg);
  static const ::clarifai::api::EvalMetrics& metrics(const AnnotationSearchMetrics* msg);
  static const ::clarifai::api::Data& data(const AnnotationSearchMetrics* msg);
  static const ::clarifai::api::Visibility& visibility(const AnnotationSearchMetrics* msg);
};

const ::clarifai::api::Search&
AnnotationSearchMetrics::_Internal::ground_truth(const AnnotationSearchMetrics* msg) {
  return *msg->ground_truth_;
}
const ::clarifai::api::Search&
AnnotationSearchMetrics::_Internal::search_to_eval(const AnnotationSearchMetrics* msg) {
  return *msg->search_to_eval_;
}
const ::clarifai::api::EvalMetrics&
AnnotationSearchMetrics::_Internal::metrics(const AnnotationSearchMetrics* msg) {
  return *msg->metrics_;
}
const ::clarifai::api::Data&
AnnotationSearchMetrics::_Internal::data(const AnnotationSearchMetrics* msg) {
  return *msg->data_;
}
const ::clarifai::api::Visibility&
AnnotationSearchMetrics::_Internal::visibility(const AnnotationSearchMetrics* msg) {
  return *msg->visibility_;
}
AnnotationSearchMetrics::AnnotationSearchMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AnnotationSearchMetrics)
}
AnnotationSearchMetrics::AnnotationSearchMetrics(const AnnotationSearchMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ground_truth()) {
    ground_truth_ = new ::clarifai::api::Search(*from.ground_truth_);
  } else {
    ground_truth_ = nullptr;
  }
  if (from._internal_has_search_to_eval()) {
    search_to_eval_ = new ::clarifai::api::Search(*from.search_to_eval_);
  } else {
    search_to_eval_ = nullptr;
  }
  if (from._internal_has_metrics()) {
    metrics_ = new ::clarifai::api::EvalMetrics(*from.metrics_);
  } else {
    metrics_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  active_concept_count_ = from.active_concept_count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AnnotationSearchMetrics)
}

inline void AnnotationSearchMetrics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ground_truth_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&active_concept_count_) -
    reinterpret_cast<char*>(&ground_truth_)) + sizeof(active_concept_count_));
}

AnnotationSearchMetrics::~AnnotationSearchMetrics() {
  // @@protoc_insertion_point(destructor:clarifai.api.AnnotationSearchMetrics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnnotationSearchMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ground_truth_;
  if (this != internal_default_instance()) delete search_to_eval_;
  if (this != internal_default_instance()) delete metrics_;
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete visibility_;
}

void AnnotationSearchMetrics::ArenaDtor(void* object) {
  AnnotationSearchMetrics* _this = reinterpret_cast< AnnotationSearchMetrics* >(object);
  (void)_this;
}
void AnnotationSearchMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnnotationSearchMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnnotationSearchMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AnnotationSearchMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ground_truth_ != nullptr) {
    delete ground_truth_;
  }
  ground_truth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && search_to_eval_ != nullptr) {
    delete search_to_eval_;
  }
  search_to_eval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  active_concept_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotationSearchMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Search ground_truth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_truth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search search_to_eval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_to_eval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvalMetrics metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 active_concept_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          active_concept_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnotationSearchMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AnnotationSearchMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Search ground_truth = 1;
  if (this->_internal_has_ground_truth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ground_truth(this), target, stream);
  }

  // .clarifai.api.Search search_to_eval = 2;
  if (this->_internal_has_search_to_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::search_to_eval(this), target, stream);
  }

  // .clarifai.api.EvalMetrics metrics = 3;
  if (this->_internal_has_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::metrics(this), target, stream);
  }

  // .clarifai.api.Data data = 4;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::data(this), target, stream);
  }

  // uint32 active_concept_count = 5;
  if (this->_internal_active_concept_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_active_concept_count(), target);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->_internal_has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::visibility(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AnnotationSearchMetrics)
  return target;
}

size_t AnnotationSearchMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AnnotationSearchMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Search ground_truth = 1;
  if (this->_internal_has_ground_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ground_truth_);
  }

  // .clarifai.api.Search search_to_eval = 2;
  if (this->_internal_has_search_to_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_to_eval_);
  }

  // .clarifai.api.EvalMetrics metrics = 3;
  if (this->_internal_has_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metrics_);
  }

  // .clarifai.api.Data data = 4;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // uint32 active_concept_count = 5;
  if (this->_internal_active_concept_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_active_concept_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnotationSearchMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnnotationSearchMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnotationSearchMetrics::GetClassData() const { return &_class_data_; }

void AnnotationSearchMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnnotationSearchMetrics *>(to)->MergeFrom(
      static_cast<const AnnotationSearchMetrics &>(from));
}


void AnnotationSearchMetrics::MergeFrom(const AnnotationSearchMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AnnotationSearchMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ground_truth()) {
    _internal_mutable_ground_truth()->::clarifai::api::Search::MergeFrom(from._internal_ground_truth());
  }
  if (from._internal_has_search_to_eval()) {
    _internal_mutable_search_to_eval()->::clarifai::api::Search::MergeFrom(from._internal_search_to_eval());
  }
  if (from._internal_has_metrics()) {
    _internal_mutable_metrics()->::clarifai::api::EvalMetrics::MergeFrom(from._internal_metrics());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (from._internal_has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from._internal_active_concept_count() != 0) {
    _internal_set_active_concept_count(from._internal_active_concept_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnotationSearchMetrics::CopyFrom(const AnnotationSearchMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AnnotationSearchMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationSearchMetrics::IsInitialized() const {
  return true;
}

void AnnotationSearchMetrics::InternalSwap(AnnotationSearchMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnnotationSearchMetrics, active_concept_count_)
      + sizeof(AnnotationSearchMetrics::active_concept_count_)
      - PROTOBUF_FIELD_OFFSET(AnnotationSearchMetrics, ground_truth_)>(
          reinterpret_cast<char*>(&ground_truth_),
          reinterpret_cast<char*>(&other->ground_truth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationSearchMetrics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[99]);
}

// ===================================================================

class Text::_Internal {
 public:
  static const ::clarifai::api::HostedURL& hosted(const Text* msg);
  static const ::clarifai::api::TextInfo& text_info(const Text* msg);
};

const ::clarifai::api::HostedURL&
Text::_Internal::hosted(const Text* msg) {
  return *msg->hosted_;
}
const ::clarifai::api::TextInfo&
Text::_Internal::text_info(const Text* msg) {
  return *msg->text_info_;
}
Text::Text(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Text)
}
Text::Text(const Text& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    raw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw().empty()) {
    raw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_raw(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_hosted()) {
    hosted_ = new ::clarifai::api::HostedURL(*from.hosted_);
  } else {
    hosted_ = nullptr;
  }
  if (from._internal_has_text_info()) {
    text_info_ = new ::clarifai::api::TextInfo(*from.text_info_);
  } else {
    text_info_ = nullptr;
  }
  allow_duplicate_url_ = from.allow_duplicate_url_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Text)
}

inline void Text::SharedCtor() {
raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  raw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hosted_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_duplicate_url_) -
    reinterpret_cast<char*>(&hosted_)) + sizeof(allow_duplicate_url_));
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:clarifai.api.Text)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Text::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  raw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hosted_;
  if (this != internal_default_instance()) delete text_info_;
}

void Text::ArenaDtor(void* object) {
  Text* _this = reinterpret_cast< Text* >(object);
  (void)_this;
}
void Text::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Text)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_.ClearToEmpty();
  url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && hosted_ != nullptr) {
    delete hosted_;
  }
  hosted_ = nullptr;
  if (GetArenaForAllocation() == nullptr && text_info_ != nullptr) {
    delete text_info_;
  }
  text_info_ = nullptr;
  allow_duplicate_url_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Text::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string raw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_raw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Text.raw"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Text.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_duplicate_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          allow_duplicate_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.HostedURL hosted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hosted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TextInfo text_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Text::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Text)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string raw = 1;
  if (!this->_internal_raw().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw().data(), static_cast<int>(this->_internal_raw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Text.raw");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_raw(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Text.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // bool allow_duplicate_url = 3;
  if (this->_internal_allow_duplicate_url() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_allow_duplicate_url(), target);
  }

  // .clarifai.api.HostedURL hosted = 4;
  if (this->_internal_has_hosted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hosted(this), target, stream);
  }

  // .clarifai.api.TextInfo text_info = 5;
  if (this->_internal_has_text_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::text_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Text)
  return target;
}

size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Text)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string raw = 1;
  if (!this->_internal_raw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw());
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .clarifai.api.HostedURL hosted = 4;
  if (this->_internal_has_hosted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hosted_);
  }

  // .clarifai.api.TextInfo text_info = 5;
  if (this->_internal_has_text_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_info_);
  }

  // bool allow_duplicate_url = 3;
  if (this->_internal_allow_duplicate_url() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Text::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Text::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Text::GetClassData() const { return &_class_data_; }

void Text::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Text *>(to)->MergeFrom(
      static_cast<const Text &>(from));
}


void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Text)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_raw().empty()) {
    _internal_set_raw(from._internal_raw());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (from._internal_has_hosted()) {
    _internal_mutable_hosted()->::clarifai::api::HostedURL::MergeFrom(from._internal_hosted());
  }
  if (from._internal_has_text_info()) {
    _internal_mutable_text_info()->::clarifai::api::TextInfo::MergeFrom(from._internal_text_info());
  }
  if (from._internal_allow_duplicate_url() != 0) {
    _internal_set_allow_duplicate_url(from._internal_allow_duplicate_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  return true;
}

void Text::InternalSwap(Text* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &raw_, lhs_arena,
      &other->raw_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Text, allow_duplicate_url_)
      + sizeof(Text::allow_duplicate_url_)
      - PROTOBUF_FIELD_OFFSET(Text, hosted_)>(
          reinterpret_cast<char*>(&hosted_),
          reinterpret_cast<char*>(&other->hosted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Text::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[100]);
}

// ===================================================================

class TextInfo::_Internal {
 public:
};

TextInfo::TextInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TextInfo)
}
TextInfo::TextInfo(const TextInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoding().empty()) {
    encoding_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoding(), 
      GetArenaForAllocation());
  }
  char_count_ = from.char_count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TextInfo)
}

inline void TextInfo::SharedCtor() {
encoding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
char_count_ = 0;
}

TextInfo::~TextInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TextInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encoding_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextInfo::ArenaDtor(void* object) {
  TextInfo* _this = reinterpret_cast< TextInfo* >(object);
  (void)_this;
}
void TextInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TextInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoding_.ClearToEmpty();
  char_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 char_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          char_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string encoding = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_encoding();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TextInfo.encoding"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TextInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 char_count = 1;
  if (this->_internal_char_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_char_count(), target);
  }

  // string encoding = 2;
  if (!this->_internal_encoding().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoding().data(), static_cast<int>(this->_internal_encoding().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TextInfo.encoding");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_encoding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TextInfo)
  return target;
}

size_t TextInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TextInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string encoding = 2;
  if (!this->_internal_encoding().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoding());
  }

  // int32 char_count = 1;
  if (this->_internal_char_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_char_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextInfo::GetClassData() const { return &_class_data_; }

void TextInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TextInfo *>(to)->MergeFrom(
      static_cast<const TextInfo &>(from));
}


void TextInfo::MergeFrom(const TextInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TextInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoding().empty()) {
    _internal_set_encoding(from._internal_encoding());
  }
  if (from._internal_char_count() != 0) {
    _internal_set_char_count(from._internal_char_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextInfo::CopyFrom(const TextInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TextInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextInfo::IsInitialized() const {
  return true;
}

void TextInfo::InternalSwap(TextInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoding_, lhs_arena,
      &other->encoding_, rhs_arena
  );
  swap(char_count_, other->char_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[101]);
}

// ===================================================================

class User::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const User* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_gdpr_consent(const User* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_tos_consent(const User* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_marketing_consent(const User* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const User* msg);
  static const ::clarifai::api::Visibility& visibility(const User* msg);
  static const ::clarifai::api::UserDetail& user_detail(const User* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::created_at(const User* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::date_gdpr_consent(const User* msg) {
  return *msg->date_gdpr_consent_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::date_tos_consent(const User* msg) {
  return *msg->date_tos_consent_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::date_marketing_consent(const User* msg) {
  return *msg->date_marketing_consent_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
User::_Internal::metadata(const User* msg) {
  return *msg->metadata_;
}
const ::clarifai::api::Visibility&
User::_Internal::visibility(const User* msg) {
  return *msg->visibility_;
}
const ::clarifai::api::UserDetail&
User::_Internal::user_detail(const User* msg) {
  return *msg->user_detail_;
}
void User::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void User::clear_date_gdpr_consent() {
  if (GetArenaForAllocation() == nullptr && date_gdpr_consent_ != nullptr) {
    delete date_gdpr_consent_;
  }
  date_gdpr_consent_ = nullptr;
}
void User::clear_date_tos_consent() {
  if (GetArenaForAllocation() == nullptr && date_tos_consent_ != nullptr) {
    delete date_tos_consent_;
  }
  date_tos_consent_ = nullptr;
}
void User::clear_date_marketing_consent() {
  if (GetArenaForAllocation() == nullptr && date_marketing_consent_ != nullptr) {
    delete date_marketing_consent_;
  }
  date_marketing_consent_ = nullptr;
}
void User::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  email_addresses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      email_addresses_(from.email_addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  primary_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    primary_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_primary_email().empty()) {
    primary_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_primary_email(), 
      GetArenaForAllocation());
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_first_name().empty()) {
    first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_name(), 
      GetArenaForAllocation());
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_name().empty()) {
    last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_name(), 
      GetArenaForAllocation());
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_company_name().empty()) {
    company_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_company_name(), 
      GetArenaForAllocation());
  }
  bill_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bill_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bill_type().empty()) {
    bill_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bill_type(), 
      GetArenaForAllocation());
  }
  job_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    job_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job_title().empty()) {
    job_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job_title(), 
      GetArenaForAllocation());
  }
  job_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    job_role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job_role().empty()) {
    job_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job_role(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_date_gdpr_consent()) {
    date_gdpr_consent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.date_gdpr_consent_);
  } else {
    date_gdpr_consent_ = nullptr;
  }
  if (from._internal_has_date_tos_consent()) {
    date_tos_consent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.date_tos_consent_);
  } else {
    date_tos_consent_ = nullptr;
  }
  if (from._internal_has_date_marketing_consent()) {
    date_marketing_consent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.date_marketing_consent_);
  } else {
    date_marketing_consent_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  if (from._internal_has_user_detail()) {
    user_detail_ = new ::clarifai::api::UserDetail(*from.user_detail_);
  } else {
    user_detail_ = nullptr;
  }
  ::memcpy(&teams_count_, &from.teams_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&star_count_) -
    reinterpret_cast<char*>(&teams_count_)) + sizeof(star_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.User)
}

inline void User::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
primary_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  primary_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bill_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bill_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
job_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  job_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
job_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  job_role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&star_count_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(star_count_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:clarifai.api.User)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bill_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete date_gdpr_consent_;
  if (this != internal_default_instance()) delete date_tos_consent_;
  if (this != internal_default_instance()) delete date_marketing_consent_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete visibility_;
  if (this != internal_default_instance()) delete user_detail_;
}

void User::ArenaDtor(void* object) {
  User* _this = reinterpret_cast< User* >(object);
  (void)_this;
}
void User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_addresses_.Clear();
  id_.ClearToEmpty();
  primary_email_.ClearToEmpty();
  first_name_.ClearToEmpty();
  last_name_.ClearToEmpty();
  company_name_.ClearToEmpty();
  bill_type_.ClearToEmpty();
  job_title_.ClearToEmpty();
  job_role_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && date_gdpr_consent_ != nullptr) {
    delete date_gdpr_consent_;
  }
  date_gdpr_consent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && date_tos_consent_ != nullptr) {
    delete date_tos_consent_;
  }
  date_tos_consent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && date_marketing_consent_ != nullptr) {
    delete date_marketing_consent_;
  }
  date_marketing_consent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && user_detail_ != nullptr) {
    delete user_detail_;
  }
  user_detail_ = nullptr;
  ::memset(&teams_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_count_) -
      reinterpret_cast<char*>(&teams_count_)) + sizeof(star_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string primary_email = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_primary_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.primary_email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string first_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.first_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string last_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.last_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string company_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.company_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bill_type = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_bill_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.bill_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_gdpr_consent = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_gdpr_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_tos_consent = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_tos_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_marketing_consent = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_marketing_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.EmailAddress email_addresses = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_email_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_org_admin = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          is_org_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool two_factor_auth_enabled = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          two_factor_auth_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 teams_count = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          teams_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.UserDetail user_detail = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string job_title = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_job_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.job_title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string job_role = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_job_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.User.job_role"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_starred = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 star_count = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          star_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string primary_email = 2 [deprecated = true];
  if (!this->_internal_primary_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_primary_email().data(), static_cast<int>(this->_internal_primary_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.primary_email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_primary_email(), target);
  }

  // string first_name = 3;
  if (!this->_internal_first_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.first_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_first_name(), target);
  }

  // string last_name = 4;
  if (!this->_internal_last_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.last_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_last_name(), target);
  }

  // string company_name = 5;
  if (!this->_internal_company_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.company_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_company_name(), target);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::created_at(this), target, stream);
  }

  // string bill_type = 7 [deprecated = true];
  if (!this->_internal_bill_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bill_type().data(), static_cast<int>(this->_internal_bill_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.bill_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_bill_type(), target);
  }

  // .google.protobuf.Timestamp date_gdpr_consent = 8 [deprecated = true];
  if (this->_internal_has_date_gdpr_consent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::date_gdpr_consent(this), target, stream);
  }

  // .google.protobuf.Timestamp date_tos_consent = 9 [deprecated = true];
  if (this->_internal_has_date_tos_consent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::date_tos_consent(this), target, stream);
  }

  // .google.protobuf.Timestamp date_marketing_consent = 10 [deprecated = true];
  if (this->_internal_has_date_marketing_consent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::date_marketing_consent(this), target, stream);
  }

  // .google.protobuf.Struct metadata = 11 [deprecated = true];
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::metadata(this), target, stream);
  }

  // repeated .clarifai.api.EmailAddress email_addresses = 12 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_email_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_email_addresses(i), target, stream);
  }

  // bool is_org_admin = 14 [deprecated = true];
  if (this->_internal_is_org_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_org_admin(), target);
  }

  // bool two_factor_auth_enabled = 15 [deprecated = true];
  if (this->_internal_two_factor_auth_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_two_factor_auth_enabled(), target);
  }

  // uint32 teams_count = 16 [deprecated = true];
  if (this->_internal_teams_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_teams_count(), target);
  }

  // .clarifai.api.Visibility visibility = 17;
  if (this->_internal_has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::visibility(this), target, stream);
  }

  // .clarifai.api.UserDetail user_detail = 18;
  if (this->_internal_has_user_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::user_detail(this), target, stream);
  }

  // string job_title = 19;
  if (!this->_internal_job_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_title().data(), static_cast<int>(this->_internal_job_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.job_title");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_job_title(), target);
  }

  // string job_role = 20;
  if (!this->_internal_job_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_role().data(), static_cast<int>(this->_internal_job_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.User.job_role");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_job_role(), target);
  }

  // bool is_starred = 21;
  if (this->_internal_is_starred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_is_starred(), target);
  }

  // int32 star_count = 22;
  if (this->_internal_star_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_star_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.User)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.EmailAddress email_addresses = 12 [deprecated = true];
  total_size += 1UL * this->_internal_email_addresses_size();
  for (const auto& msg : this->email_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string primary_email = 2 [deprecated = true];
  if (!this->_internal_primary_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primary_email());
  }

  // string first_name = 3;
  if (!this->_internal_first_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 4;
  if (!this->_internal_last_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string company_name = 5;
  if (!this->_internal_company_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  // string bill_type = 7 [deprecated = true];
  if (!this->_internal_bill_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bill_type());
  }

  // string job_title = 19;
  if (!this->_internal_job_title().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_title());
  }

  // string job_role = 20;
  if (!this->_internal_job_role().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_role());
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp date_gdpr_consent = 8 [deprecated = true];
  if (this->_internal_has_date_gdpr_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_gdpr_consent_);
  }

  // .google.protobuf.Timestamp date_tos_consent = 9 [deprecated = true];
  if (this->_internal_has_date_tos_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_tos_consent_);
  }

  // .google.protobuf.Timestamp date_marketing_consent = 10 [deprecated = true];
  if (this->_internal_has_date_marketing_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_marketing_consent_);
  }

  // .google.protobuf.Struct metadata = 11 [deprecated = true];
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .clarifai.api.Visibility visibility = 17;
  if (this->_internal_has_visibility()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .clarifai.api.UserDetail user_detail = 18;
  if (this->_internal_has_user_detail()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_detail_);
  }

  // uint32 teams_count = 16 [deprecated = true];
  if (this->_internal_teams_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_teams_count());
  }

  // bool is_org_admin = 14 [deprecated = true];
  if (this->_internal_is_org_admin() != 0) {
    total_size += 1 + 1;
  }

  // bool two_factor_auth_enabled = 15 [deprecated = true];
  if (this->_internal_two_factor_auth_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_starred = 21;
  if (this->_internal_is_starred() != 0) {
    total_size += 2 + 1;
  }

  // int32 star_count = 22;
  if (this->_internal_star_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_star_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User::GetClassData() const { return &_class_data_; }

void User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User *>(to)->MergeFrom(
      static_cast<const User &>(from));
}


void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.User)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  email_addresses_.MergeFrom(from.email_addresses_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_primary_email().empty()) {
    _internal_set_primary_email(from._internal_primary_email());
  }
  if (!from._internal_first_name().empty()) {
    _internal_set_first_name(from._internal_first_name());
  }
  if (!from._internal_last_name().empty()) {
    _internal_set_last_name(from._internal_last_name());
  }
  if (!from._internal_company_name().empty()) {
    _internal_set_company_name(from._internal_company_name());
  }
  if (!from._internal_bill_type().empty()) {
    _internal_set_bill_type(from._internal_bill_type());
  }
  if (!from._internal_job_title().empty()) {
    _internal_set_job_title(from._internal_job_title());
  }
  if (!from._internal_job_role().empty()) {
    _internal_set_job_role(from._internal_job_role());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_date_gdpr_consent()) {
    _internal_mutable_date_gdpr_consent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_date_gdpr_consent());
  }
  if (from._internal_has_date_tos_consent()) {
    _internal_mutable_date_tos_consent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_date_tos_consent());
  }
  if (from._internal_has_date_marketing_consent()) {
    _internal_mutable_date_marketing_consent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_date_marketing_consent());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from._internal_has_user_detail()) {
    _internal_mutable_user_detail()->::clarifai::api::UserDetail::MergeFrom(from._internal_user_detail());
  }
  if (from._internal_teams_count() != 0) {
    _internal_set_teams_count(from._internal_teams_count());
  }
  if (from._internal_is_org_admin() != 0) {
    _internal_set_is_org_admin(from._internal_is_org_admin());
  }
  if (from._internal_two_factor_auth_enabled() != 0) {
    _internal_set_two_factor_auth_enabled(from._internal_two_factor_auth_enabled());
  }
  if (from._internal_is_starred() != 0) {
    _internal_set_is_starred(from._internal_is_starred());
  }
  if (from._internal_star_count() != 0) {
    _internal_set_star_count(from._internal_star_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  email_addresses_.InternalSwap(&other->email_addresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &primary_email_, lhs_arena,
      &other->primary_email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &first_name_, lhs_arena,
      &other->first_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_name_, lhs_arena,
      &other->last_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &company_name_, lhs_arena,
      &other->company_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bill_type_, lhs_arena,
      &other->bill_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &job_title_, lhs_arena,
      &other->job_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &job_role_, lhs_arena,
      &other->job_role_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User, star_count_)
      + sizeof(User::star_count_)
      - PROTOBUF_FIELD_OFFSET(User, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[102]);
}

// ===================================================================

class UserDetail::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_gdpr_consent(const UserDetail* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_tos_consent(const UserDetail* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& date_marketing_consent(const UserDetail* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const UserDetail* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserDetail::_Internal::date_gdpr_consent(const UserDetail* msg) {
  return *msg->date_gdpr_consent_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserDetail::_Internal::date_tos_consent(const UserDetail* msg) {
  return *msg->date_tos_consent_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserDetail::_Internal::date_marketing_consent(const UserDetail* msg) {
  return *msg->date_marketing_consent_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
UserDetail::_Internal::metadata(const UserDetail* msg) {
  return *msg->metadata_;
}
void UserDetail::clear_date_gdpr_consent() {
  if (GetArenaForAllocation() == nullptr && date_gdpr_consent_ != nullptr) {
    delete date_gdpr_consent_;
  }
  date_gdpr_consent_ = nullptr;
}
void UserDetail::clear_date_tos_consent() {
  if (GetArenaForAllocation() == nullptr && date_tos_consent_ != nullptr) {
    delete date_tos_consent_;
  }
  date_tos_consent_ = nullptr;
}
void UserDetail::clear_date_marketing_consent() {
  if (GetArenaForAllocation() == nullptr && date_marketing_consent_ != nullptr) {
    delete date_marketing_consent_;
  }
  date_marketing_consent_ = nullptr;
}
void UserDetail::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
UserDetail::UserDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  email_addresses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.UserDetail)
}
UserDetail::UserDetail(const UserDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      email_addresses_(from.email_addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  primary_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    primary_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_primary_email().empty()) {
    primary_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_primary_email(), 
      GetArenaForAllocation());
  }
  bill_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bill_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bill_type().empty()) {
    bill_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bill_type(), 
      GetArenaForAllocation());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArenaForAllocation());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_date_gdpr_consent()) {
    date_gdpr_consent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.date_gdpr_consent_);
  } else {
    date_gdpr_consent_ = nullptr;
  }
  if (from._internal_has_date_tos_consent()) {
    date_tos_consent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.date_tos_consent_);
  } else {
    date_tos_consent_ = nullptr;
  }
  if (from._internal_has_date_marketing_consent()) {
    date_marketing_consent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.date_marketing_consent_);
  } else {
    date_marketing_consent_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&is_org_admin_, &from.is_org_admin_,
    static_cast<size_t>(reinterpret_cast<char*>(&teams_count_) -
    reinterpret_cast<char*>(&is_org_admin_)) + sizeof(teams_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.UserDetail)
}

inline void UserDetail::SharedCtor() {
primary_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  primary_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bill_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bill_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&date_gdpr_consent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&teams_count_) -
    reinterpret_cast<char*>(&date_gdpr_consent_)) + sizeof(teams_count_));
}

UserDetail::~UserDetail() {
  // @@protoc_insertion_point(destructor:clarifai.api.UserDetail)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  primary_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bill_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete date_gdpr_consent_;
  if (this != internal_default_instance()) delete date_tos_consent_;
  if (this != internal_default_instance()) delete date_marketing_consent_;
  if (this != internal_default_instance()) delete metadata_;
}

void UserDetail::ArenaDtor(void* object) {
  UserDetail* _this = reinterpret_cast< UserDetail* >(object);
  (void)_this;
}
void UserDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.UserDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_addresses_.Clear();
  primary_email_.ClearToEmpty();
  bill_type_.ClearToEmpty();
  country_.ClearToEmpty();
  state_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && date_gdpr_consent_ != nullptr) {
    delete date_gdpr_consent_;
  }
  date_gdpr_consent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && date_tos_consent_ != nullptr) {
    delete date_tos_consent_;
  }
  date_tos_consent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && date_marketing_consent_ != nullptr) {
    delete date_marketing_consent_;
  }
  date_marketing_consent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&is_org_admin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teams_count_) -
      reinterpret_cast<char*>(&is_org_admin_)) + sizeof(teams_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string primary_email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_primary_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.UserDetail.primary_email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bill_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bill_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.UserDetail.bill_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_gdpr_consent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_gdpr_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_tos_consent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_tos_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp date_marketing_consent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_marketing_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.EmailAddress email_addresses = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_email_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_org_admin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          is_org_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool two_factor_auth_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          two_factor_auth_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 teams_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          teams_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string country = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.UserDetail.country"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.UserDetail.state"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.UserDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string primary_email = 1;
  if (!this->_internal_primary_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_primary_email().data(), static_cast<int>(this->_internal_primary_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserDetail.primary_email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_primary_email(), target);
  }

  // string bill_type = 2;
  if (!this->_internal_bill_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bill_type().data(), static_cast<int>(this->_internal_bill_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserDetail.bill_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bill_type(), target);
  }

  // .google.protobuf.Timestamp date_gdpr_consent = 3;
  if (this->_internal_has_date_gdpr_consent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::date_gdpr_consent(this), target, stream);
  }

  // .google.protobuf.Timestamp date_tos_consent = 4;
  if (this->_internal_has_date_tos_consent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::date_tos_consent(this), target, stream);
  }

  // .google.protobuf.Timestamp date_marketing_consent = 5;
  if (this->_internal_has_date_marketing_consent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::date_marketing_consent(this), target, stream);
  }

  // .google.protobuf.Struct metadata = 6;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::metadata(this), target, stream);
  }

  // repeated .clarifai.api.EmailAddress email_addresses = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_email_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_email_addresses(i), target, stream);
  }

  // bool is_org_admin = 8;
  if (this->_internal_is_org_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_org_admin(), target);
  }

  // bool two_factor_auth_enabled = 9;
  if (this->_internal_two_factor_auth_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_two_factor_auth_enabled(), target);
  }

  // uint32 teams_count = 10;
  if (this->_internal_teams_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_teams_count(), target);
  }

  // string country = 11;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserDetail.country");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_country(), target);
  }

  // string state = 12;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.UserDetail.state");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.UserDetail)
  return target;
}

size_t UserDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.UserDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.EmailAddress email_addresses = 7;
  total_size += 1UL * this->_internal_email_addresses_size();
  for (const auto& msg : this->email_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string primary_email = 1;
  if (!this->_internal_primary_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primary_email());
  }

  // string bill_type = 2;
  if (!this->_internal_bill_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bill_type());
  }

  // string country = 11;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string state = 12;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // .google.protobuf.Timestamp date_gdpr_consent = 3;
  if (this->_internal_has_date_gdpr_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_gdpr_consent_);
  }

  // .google.protobuf.Timestamp date_tos_consent = 4;
  if (this->_internal_has_date_tos_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_tos_consent_);
  }

  // .google.protobuf.Timestamp date_marketing_consent = 5;
  if (this->_internal_has_date_marketing_consent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_marketing_consent_);
  }

  // .google.protobuf.Struct metadata = 6;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // bool is_org_admin = 8;
  if (this->_internal_is_org_admin() != 0) {
    total_size += 1 + 1;
  }

  // bool two_factor_auth_enabled = 9;
  if (this->_internal_two_factor_auth_enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 teams_count = 10;
  if (this->_internal_teams_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_teams_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserDetail::GetClassData() const { return &_class_data_; }

void UserDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserDetail *>(to)->MergeFrom(
      static_cast<const UserDetail &>(from));
}


void UserDetail::MergeFrom(const UserDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.UserDetail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  email_addresses_.MergeFrom(from.email_addresses_);
  if (!from._internal_primary_email().empty()) {
    _internal_set_primary_email(from._internal_primary_email());
  }
  if (!from._internal_bill_type().empty()) {
    _internal_set_bill_type(from._internal_bill_type());
  }
  if (!from._internal_country().empty()) {
    _internal_set_country(from._internal_country());
  }
  if (!from._internal_state().empty()) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_has_date_gdpr_consent()) {
    _internal_mutable_date_gdpr_consent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_date_gdpr_consent());
  }
  if (from._internal_has_date_tos_consent()) {
    _internal_mutable_date_tos_consent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_date_tos_consent());
  }
  if (from._internal_has_date_marketing_consent()) {
    _internal_mutable_date_marketing_consent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_date_marketing_consent());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from._internal_is_org_admin() != 0) {
    _internal_set_is_org_admin(from._internal_is_org_admin());
  }
  if (from._internal_two_factor_auth_enabled() != 0) {
    _internal_set_two_factor_auth_enabled(from._internal_two_factor_auth_enabled());
  }
  if (from._internal_teams_count() != 0) {
    _internal_set_teams_count(from._internal_teams_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserDetail::CopyFrom(const UserDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.UserDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDetail::IsInitialized() const {
  return true;
}

void UserDetail::InternalSwap(UserDetail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  email_addresses_.InternalSwap(&other->email_addresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &primary_email_, lhs_arena,
      &other->primary_email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bill_type_, lhs_arena,
      &other->bill_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_, lhs_arena,
      &other->country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &state_, lhs_arena,
      &other->state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserDetail, teams_count_)
      + sizeof(UserDetail::teams_count_)
      - PROTOBUF_FIELD_OFFSET(UserDetail, date_gdpr_consent_)>(
          reinterpret_cast<char*>(&date_gdpr_consent_),
          reinterpret_cast<char*>(&other->date_gdpr_consent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDetail::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[103]);
}

// ===================================================================

class EmailAddress::_Internal {
 public:
};

EmailAddress::EmailAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.EmailAddress)
}
EmailAddress::EmailAddress(const EmailAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  ::memcpy(&primary_, &from.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&verified_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(verified_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.EmailAddress)
}

inline void EmailAddress::SharedCtor() {
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&primary_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&verified_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(verified_));
}

EmailAddress::~EmailAddress() {
  // @@protoc_insertion_point(destructor:clarifai.api.EmailAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EmailAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EmailAddress::ArenaDtor(void* object) {
  EmailAddress* _this = reinterpret_cast< EmailAddress* >(object);
  (void)_this;
}
void EmailAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmailAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmailAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.EmailAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmpty();
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verified_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(verified_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.EmailAddress.email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool primary = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool verified = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.EmailAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.EmailAddress.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // bool primary = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_primary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_primary(), target);
  }

  // bool verified = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_verified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_verified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.EmailAddress)
  return target;
}

size_t EmailAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.EmailAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // bool primary = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_primary() != 0) {
    total_size += 1 + 1;
  }

  // bool verified = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_verified() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EmailAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailAddress::GetClassData() const { return &_class_data_; }

void EmailAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EmailAddress *>(to)->MergeFrom(
      static_cast<const EmailAddress &>(from));
}


void EmailAddress::MergeFrom(const EmailAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.EmailAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (from._internal_primary() != 0) {
    _internal_set_primary(from._internal_primary());
  }
  if (from._internal_verified() != 0) {
    _internal_set_verified(from._internal_verified());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailAddress::CopyFrom(const EmailAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.EmailAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailAddress::IsInitialized() const {
  return true;
}

void EmailAddress::InternalSwap(EmailAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmailAddress, verified_)
      + sizeof(EmailAddress::verified_)
      - PROTOBUF_FIELD_OFFSET(EmailAddress, primary_)>(
          reinterpret_cast<char*>(&primary_),
          reinterpret_cast<char*>(&other->primary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[104]);
}

// ===================================================================

class Password::_Internal {
 public:
};

Password::Password(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Password)
}
Password::Password(const Password& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  plaintext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    plaintext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plaintext().empty()) {
    plaintext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_plaintext(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Password)
}

inline void Password::SharedCtor() {
plaintext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  plaintext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Password::~Password() {
  // @@protoc_insertion_point(destructor:clarifai.api.Password)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Password::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  plaintext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Password::ArenaDtor(void* object) {
  Password* _this = reinterpret_cast< Password* >(object);
  (void)_this;
}
void Password::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Password::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Password::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Password)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plaintext_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Password::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string plaintext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_plaintext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Password.plaintext"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Password::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Password)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string plaintext = 1;
  if (!this->_internal_plaintext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plaintext().data(), static_cast<int>(this->_internal_plaintext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Password.plaintext");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_plaintext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Password)
  return target;
}

size_t Password::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Password)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string plaintext = 1;
  if (!this->_internal_plaintext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plaintext());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Password::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Password::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Password::GetClassData() const { return &_class_data_; }

void Password::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Password *>(to)->MergeFrom(
      static_cast<const Password &>(from));
}


void Password::MergeFrom(const Password& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Password)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_plaintext().empty()) {
    _internal_set_plaintext(from._internal_plaintext());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Password::CopyFrom(const Password& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Password)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Password::IsInitialized() const {
  return true;
}

void Password::InternalSwap(Password* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &plaintext_, lhs_arena,
      &other->plaintext_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Password::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[105]);
}

// ===================================================================

class PasswordViolations::_Internal {
 public:
};

PasswordViolations::PasswordViolations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PasswordViolations)
}
PasswordViolations::PasswordViolations(const PasswordViolations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&minimum_length_, &from.minimum_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&password_lifespan_) -
    reinterpret_cast<char*>(&minimum_length_)) + sizeof(password_lifespan_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PasswordViolations)
}

inline void PasswordViolations::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&minimum_length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&password_lifespan_) -
    reinterpret_cast<char*>(&minimum_length_)) + sizeof(password_lifespan_));
}

PasswordViolations::~PasswordViolations() {
  // @@protoc_insertion_point(destructor:clarifai.api.PasswordViolations)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PasswordViolations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PasswordViolations::ArenaDtor(void* object) {
  PasswordViolations* _this = reinterpret_cast< PasswordViolations* >(object);
  (void)_this;
}
void PasswordViolations::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PasswordViolations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PasswordViolations::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PasswordViolations)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&minimum_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&password_lifespan_) -
      reinterpret_cast<char*>(&minimum_length_)) + sizeof(password_lifespan_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PasswordViolations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool minimum_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          minimum_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool maximum_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          maximum_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool upper_case_needed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          upper_case_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool lower_case_needed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          lower_case_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool numeric_needed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          numeric_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool non_alphanumeric_needed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          non_alphanumeric_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool password_reuse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          password_reuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool exclude_names = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          exclude_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool exclude_email = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          exclude_email_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool no_confusing_letters = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          no_confusing_letters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool no_simple_passwords = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          no_simple_passwords_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool no_common_vocabs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          no_common_vocabs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool no_overlap_with_old = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          no_overlap_with_old_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool password_lifespan = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          password_lifespan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PasswordViolations::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PasswordViolations)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool minimum_length = 1;
  if (this->_internal_minimum_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_minimum_length(), target);
  }

  // bool maximum_length = 2;
  if (this->_internal_maximum_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_maximum_length(), target);
  }

  // bool upper_case_needed = 3;
  if (this->_internal_upper_case_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_upper_case_needed(), target);
  }

  // bool lower_case_needed = 4;
  if (this->_internal_lower_case_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_lower_case_needed(), target);
  }

  // bool numeric_needed = 5;
  if (this->_internal_numeric_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_numeric_needed(), target);
  }

  // bool non_alphanumeric_needed = 6;
  if (this->_internal_non_alphanumeric_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_non_alphanumeric_needed(), target);
  }

  // bool password_reuse = 7;
  if (this->_internal_password_reuse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_password_reuse(), target);
  }

  // bool exclude_names = 8;
  if (this->_internal_exclude_names() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_exclude_names(), target);
  }

  // bool exclude_email = 9;
  if (this->_internal_exclude_email() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_exclude_email(), target);
  }

  // bool no_confusing_letters = 10;
  if (this->_internal_no_confusing_letters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_no_confusing_letters(), target);
  }

  // bool no_simple_passwords = 11;
  if (this->_internal_no_simple_passwords() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_no_simple_passwords(), target);
  }

  // bool no_common_vocabs = 12;
  if (this->_internal_no_common_vocabs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_no_common_vocabs(), target);
  }

  // bool no_overlap_with_old = 13;
  if (this->_internal_no_overlap_with_old() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_no_overlap_with_old(), target);
  }

  // bool password_lifespan = 14;
  if (this->_internal_password_lifespan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_password_lifespan(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PasswordViolations)
  return target;
}

size_t PasswordViolations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PasswordViolations)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool minimum_length = 1;
  if (this->_internal_minimum_length() != 0) {
    total_size += 1 + 1;
  }

  // bool maximum_length = 2;
  if (this->_internal_maximum_length() != 0) {
    total_size += 1 + 1;
  }

  // bool upper_case_needed = 3;
  if (this->_internal_upper_case_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool lower_case_needed = 4;
  if (this->_internal_lower_case_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool numeric_needed = 5;
  if (this->_internal_numeric_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool non_alphanumeric_needed = 6;
  if (this->_internal_non_alphanumeric_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool password_reuse = 7;
  if (this->_internal_password_reuse() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_names = 8;
  if (this->_internal_exclude_names() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_email = 9;
  if (this->_internal_exclude_email() != 0) {
    total_size += 1 + 1;
  }

  // bool no_confusing_letters = 10;
  if (this->_internal_no_confusing_letters() != 0) {
    total_size += 1 + 1;
  }

  // bool no_simple_passwords = 11;
  if (this->_internal_no_simple_passwords() != 0) {
    total_size += 1 + 1;
  }

  // bool no_common_vocabs = 12;
  if (this->_internal_no_common_vocabs() != 0) {
    total_size += 1 + 1;
  }

  // bool no_overlap_with_old = 13;
  if (this->_internal_no_overlap_with_old() != 0) {
    total_size += 1 + 1;
  }

  // bool password_lifespan = 14;
  if (this->_internal_password_lifespan() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PasswordViolations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PasswordViolations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PasswordViolations::GetClassData() const { return &_class_data_; }

void PasswordViolations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PasswordViolations *>(to)->MergeFrom(
      static_cast<const PasswordViolations &>(from));
}


void PasswordViolations::MergeFrom(const PasswordViolations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PasswordViolations)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_minimum_length() != 0) {
    _internal_set_minimum_length(from._internal_minimum_length());
  }
  if (from._internal_maximum_length() != 0) {
    _internal_set_maximum_length(from._internal_maximum_length());
  }
  if (from._internal_upper_case_needed() != 0) {
    _internal_set_upper_case_needed(from._internal_upper_case_needed());
  }
  if (from._internal_lower_case_needed() != 0) {
    _internal_set_lower_case_needed(from._internal_lower_case_needed());
  }
  if (from._internal_numeric_needed() != 0) {
    _internal_set_numeric_needed(from._internal_numeric_needed());
  }
  if (from._internal_non_alphanumeric_needed() != 0) {
    _internal_set_non_alphanumeric_needed(from._internal_non_alphanumeric_needed());
  }
  if (from._internal_password_reuse() != 0) {
    _internal_set_password_reuse(from._internal_password_reuse());
  }
  if (from._internal_exclude_names() != 0) {
    _internal_set_exclude_names(from._internal_exclude_names());
  }
  if (from._internal_exclude_email() != 0) {
    _internal_set_exclude_email(from._internal_exclude_email());
  }
  if (from._internal_no_confusing_letters() != 0) {
    _internal_set_no_confusing_letters(from._internal_no_confusing_letters());
  }
  if (from._internal_no_simple_passwords() != 0) {
    _internal_set_no_simple_passwords(from._internal_no_simple_passwords());
  }
  if (from._internal_no_common_vocabs() != 0) {
    _internal_set_no_common_vocabs(from._internal_no_common_vocabs());
  }
  if (from._internal_no_overlap_with_old() != 0) {
    _internal_set_no_overlap_with_old(from._internal_no_overlap_with_old());
  }
  if (from._internal_password_lifespan() != 0) {
    _internal_set_password_lifespan(from._internal_password_lifespan());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PasswordViolations::CopyFrom(const PasswordViolations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PasswordViolations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordViolations::IsInitialized() const {
  return true;
}

void PasswordViolations::InternalSwap(PasswordViolations* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PasswordViolations, password_lifespan_)
      + sizeof(PasswordViolations::password_lifespan_)
      - PROTOBUF_FIELD_OFFSET(PasswordViolations, minimum_length_)>(
          reinterpret_cast<char*>(&minimum_length_),
          reinterpret_cast<char*>(&other->minimum_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PasswordViolations::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[106]);
}

// ===================================================================

class Video::_Internal {
 public:
  static const ::clarifai::api::HostedURL& hosted(const Video* msg);
  static const ::clarifai::api::VideoInfo& video_info(const Video* msg);
};

const ::clarifai::api::HostedURL&
Video::_Internal::hosted(const Video* msg) {
  return *msg->hosted_;
}
const ::clarifai::api::VideoInfo&
Video::_Internal::video_info(const Video* msg) {
  return *msg->video_info_;
}
Video::Video(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Video)
}
Video::Video(const Video& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  base64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base64().empty()) {
    base64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_base64(), 
      GetArenaForAllocation());
  }
  thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_thumbnail_url().empty()) {
    thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_hosted()) {
    hosted_ = new ::clarifai::api::HostedURL(*from.hosted_);
  } else {
    hosted_ = nullptr;
  }
  if (from._internal_has_video_info()) {
    video_info_ = new ::clarifai::api::VideoInfo(*from.video_info_);
  } else {
    video_info_ = nullptr;
  }
  allow_duplicate_url_ = from.allow_duplicate_url_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Video)
}

inline void Video::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
base64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hosted_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_duplicate_url_) -
    reinterpret_cast<char*>(&hosted_)) + sizeof(allow_duplicate_url_));
}

Video::~Video() {
  // @@protoc_insertion_point(destructor:clarifai.api.Video)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Video::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base64_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hosted_;
  if (this != internal_default_instance()) delete video_info_;
}

void Video::ArenaDtor(void* object) {
  Video* _this = reinterpret_cast< Video* >(object);
  (void)_this;
}
void Video::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Video::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Video::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Video)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  base64_.ClearToEmpty();
  thumbnail_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && hosted_ != nullptr) {
    delete hosted_;
  }
  hosted_ = nullptr;
  if (GetArenaForAllocation() == nullptr && video_info_ != nullptr) {
    delete video_info_;
  }
  video_info_ = nullptr;
  allow_duplicate_url_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Video::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Video.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes base64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_base64();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_duplicate_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          allow_duplicate_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string thumbnail_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Video.thumbnail_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.HostedURL hosted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_hosted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.VideoInfo video_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Video::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Video)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Video.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // bytes base64 = 2;
  if (!this->_internal_base64().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_base64(), target);
  }

  // bool allow_duplicate_url = 4;
  if (this->_internal_allow_duplicate_url() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_duplicate_url(), target);
  }

  // string thumbnail_url = 5;
  if (!this->_internal_thumbnail_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Video.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_thumbnail_url(), target);
  }

  // .clarifai.api.HostedURL hosted = 6;
  if (this->_internal_has_hosted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::hosted(this), target, stream);
  }

  // .clarifai.api.VideoInfo video_info = 7;
  if (this->_internal_has_video_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::video_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Video)
  return target;
}

size_t Video::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Video)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // bytes base64 = 2;
  if (!this->_internal_base64().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_base64());
  }

  // string thumbnail_url = 5;
  if (!this->_internal_thumbnail_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thumbnail_url());
  }

  // .clarifai.api.HostedURL hosted = 6;
  if (this->_internal_has_hosted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hosted_);
  }

  // .clarifai.api.VideoInfo video_info = 7;
  if (this->_internal_has_video_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *video_info_);
  }

  // bool allow_duplicate_url = 4;
  if (this->_internal_allow_duplicate_url() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Video::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Video::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Video::GetClassData() const { return &_class_data_; }

void Video::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Video *>(to)->MergeFrom(
      static_cast<const Video &>(from));
}


void Video::MergeFrom(const Video& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Video)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_base64().empty()) {
    _internal_set_base64(from._internal_base64());
  }
  if (!from._internal_thumbnail_url().empty()) {
    _internal_set_thumbnail_url(from._internal_thumbnail_url());
  }
  if (from._internal_has_hosted()) {
    _internal_mutable_hosted()->::clarifai::api::HostedURL::MergeFrom(from._internal_hosted());
  }
  if (from._internal_has_video_info()) {
    _internal_mutable_video_info()->::clarifai::api::VideoInfo::MergeFrom(from._internal_video_info());
  }
  if (from._internal_allow_duplicate_url() != 0) {
    _internal_set_allow_duplicate_url(from._internal_allow_duplicate_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Video::CopyFrom(const Video& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Video::IsInitialized() const {
  return true;
}

void Video::InternalSwap(Video* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &base64_, lhs_arena,
      &other->base64_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &thumbnail_url_, lhs_arena,
      &other->thumbnail_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Video, allow_duplicate_url_)
      + sizeof(Video::allow_duplicate_url_)
      - PROTOBUF_FIELD_OFFSET(Video, hosted_)>(
          reinterpret_cast<char*>(&hosted_),
          reinterpret_cast<char*>(&other->hosted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Video::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[107]);
}

// ===================================================================

class VideoInfo::_Internal {
 public:
};

VideoInfo::VideoInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.VideoInfo)
}
VideoInfo::VideoInfo(const VideoInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  video_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    video_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_video_format().empty()) {
    video_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_video_format(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_seconds_) -
    reinterpret_cast<char*>(&width_)) + sizeof(duration_seconds_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.VideoInfo)
}

inline void VideoInfo::SharedCtor() {
video_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  video_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_seconds_) -
    reinterpret_cast<char*>(&width_)) + sizeof(duration_seconds_));
}

VideoInfo::~VideoInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.VideoInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VideoInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  video_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoInfo::ArenaDtor(void* object) {
  VideoInfo* _this = reinterpret_cast< VideoInfo* >(object);
  (void)_this;
}
void VideoInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.VideoInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  video_format_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_seconds_) -
      reinterpret_cast<char*>(&width_)) + sizeof(duration_seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float fps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string video_format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_video_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.VideoInfo.video_format"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bit_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          bit_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 frame_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          frame_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float duration_seconds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.VideoInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // float fps = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fps = this->_internal_fps();
  uint32_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_fps(), target);
  }

  // string video_format = 4;
  if (!this->_internal_video_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_video_format().data(), static_cast<int>(this->_internal_video_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.VideoInfo.video_format");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_video_format(), target);
  }

  // int32 bit_rate = 5;
  if (this->_internal_bit_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_bit_rate(), target);
  }

  // int32 frame_count = 6;
  if (this->_internal_frame_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_frame_count(), target);
  }

  // float duration_seconds = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = this->_internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_duration_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.VideoInfo)
  return target;
}

size_t VideoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.VideoInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string video_format = 4;
  if (!this->_internal_video_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_video_format());
  }

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // float fps = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fps = this->_internal_fps();
  uint32_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    total_size += 1 + 4;
  }

  // int32 bit_rate = 5;
  if (this->_internal_bit_rate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bit_rate());
  }

  // int32 frame_count = 6;
  if (this->_internal_frame_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_frame_count());
  }

  // float duration_seconds = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = this->_internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoInfo::GetClassData() const { return &_class_data_; }

void VideoInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoInfo *>(to)->MergeFrom(
      static_cast<const VideoInfo &>(from));
}


void VideoInfo::MergeFrom(const VideoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.VideoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_video_format().empty()) {
    _internal_set_video_format(from._internal_video_format());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fps = from._internal_fps();
  uint32_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    _internal_set_fps(from._internal_fps());
  }
  if (from._internal_bit_rate() != 0) {
    _internal_set_bit_rate(from._internal_bit_rate());
  }
  if (from._internal_frame_count() != 0) {
    _internal_set_frame_count(from._internal_frame_count());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = from._internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    _internal_set_duration_seconds(from._internal_duration_seconds());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoInfo::CopyFrom(const VideoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.VideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoInfo::IsInitialized() const {
  return true;
}

void VideoInfo::InternalSwap(VideoInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &video_format_, lhs_arena,
      &other->video_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoInfo, duration_seconds_)
      + sizeof(VideoInfo::duration_seconds_)
      - PROTOBUF_FIELD_OFFSET(VideoInfo, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[108]);
}

// ===================================================================

class Workflow::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Workflow* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const Workflow* msg);
  static const ::clarifai::api::Visibility& visibility(const Workflow* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Workflow* msg);
  static const ::clarifai::api::WorkflowVersion& version(const Workflow* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Workflow::_Internal::created_at(const Workflow* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Workflow::_Internal::metadata(const Workflow* msg) {
  return *msg->metadata_;
}
const ::clarifai::api::Visibility&
Workflow::_Internal::visibility(const Workflow* msg) {
  return *msg->visibility_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Workflow::_Internal::modified_at(const Workflow* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::WorkflowVersion&
Workflow::_Internal::version(const Workflow* msg) {
  return *msg->version_;
}
void Workflow::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Workflow::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
void Workflow::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
Workflow::Workflow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodes_(arena),
  use_cases_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Workflow)
}
Workflow::Workflow(const Workflow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_),
      use_cases_(from.use_cases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notes().empty()) {
    notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notes(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::clarifai::api::WorkflowVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  ::memcpy(&is_starred_, &from.is_starred_,
    static_cast<size_t>(reinterpret_cast<char*>(&star_count_) -
    reinterpret_cast<char*>(&is_starred_)) + sizeof(star_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Workflow)
}

inline void Workflow::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&star_count_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(star_count_));
}

Workflow::~Workflow() {
  // @@protoc_insertion_point(destructor:clarifai.api.Workflow)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Workflow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete visibility_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete version_;
}

void Workflow::ArenaDtor(void* object) {
  Workflow* _this = reinterpret_cast< Workflow* >(object);
  (void)_this;
}
void Workflow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Workflow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Workflow::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Workflow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  use_cases_.Clear();
  id_.ClearToEmpty();
  app_id_.ClearToEmpty();
  user_id_.ClearToEmpty();
  description_.ClearToEmpty();
  notes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  ::memset(&is_starred_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_count_) -
      reinterpret_cast<char*>(&is_starred_)) + sizeof(star_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Workflow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Workflow.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Workflow.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowNode nodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Workflow.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.WorkflowVersion version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_starred = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 star_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          star_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Workflow.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string notes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Workflow.notes"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string use_cases = 14 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_use_cases();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Workflow.use_cases"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Workflow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Workflow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::created_at(this), target, stream);
  }

  // repeated .clarifai.api.WorkflowNode nodes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_nodes(i), target, stream);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metadata(this), target, stream);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->_internal_has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::visibility(this), target, stream);
  }

  // string user_id = 7;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.user_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_id(), target);
  }

  // .google.protobuf.Timestamp modified_at = 8;
  if (this->_internal_has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::modified_at(this), target, stream);
  }

  // .clarifai.api.WorkflowVersion version = 9;
  if (this->_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::version(this), target, stream);
  }

  // bool is_starred = 10;
  if (this->_internal_is_starred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_starred(), target);
  }

  // int32 star_count = 11;
  if (this->_internal_star_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_star_count(), target);
  }

  // string description = 12;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.description");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_description(), target);
  }

  // string notes = 13;
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.notes");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_notes(), target);
  }

  // repeated string use_cases = 14 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (int i = 0, n = this->_internal_use_cases_size(); i < n; i++) {
    const auto& s = this->_internal_use_cases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Workflow.use_cases");
    target = stream->WriteString(14, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Workflow)
  return target;
}

size_t Workflow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Workflow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowNode nodes = 4;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string use_cases = 14 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(use_cases_.size());
  for (int i = 0, n = use_cases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      use_cases_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 7;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string description = 12;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string notes = 13;
  if (!this->_internal_notes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Struct metadata = 5;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .clarifai.api.Visibility visibility = 6;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .google.protobuf.Timestamp modified_at = 8;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.WorkflowVersion version = 9;
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // bool is_starred = 10;
  if (this->_internal_is_starred() != 0) {
    total_size += 1 + 1;
  }

  // int32 star_count = 11;
  if (this->_internal_star_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_star_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Workflow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Workflow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Workflow::GetClassData() const { return &_class_data_; }

void Workflow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Workflow *>(to)->MergeFrom(
      static_cast<const Workflow &>(from));
}


void Workflow::MergeFrom(const Workflow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Workflow)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  use_cases_.MergeFrom(from.use_cases_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_notes().empty()) {
    _internal_set_notes(from._internal_notes());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from._internal_has_modified_at()) {
    _internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from._internal_has_version()) {
    _internal_mutable_version()->::clarifai::api::WorkflowVersion::MergeFrom(from._internal_version());
  }
  if (from._internal_is_starred() != 0) {
    _internal_set_is_starred(from._internal_is_starred());
  }
  if (from._internal_star_count() != 0) {
    _internal_set_star_count(from._internal_star_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Workflow::CopyFrom(const Workflow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Workflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workflow::IsInitialized() const {
  return true;
}

void Workflow::InternalSwap(Workflow* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  use_cases_.InternalSwap(&other->use_cases_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notes_, lhs_arena,
      &other->notes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Workflow, star_count_)
      + sizeof(Workflow::star_count_)
      - PROTOBUF_FIELD_OFFSET(Workflow, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Workflow::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[109]);
}

// ===================================================================

class WorkflowVersion::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const WorkflowVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const WorkflowVersion* msg);
  static const ::clarifai::api::Visibility& visibility(const WorkflowVersion* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const WorkflowVersion* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
WorkflowVersion::_Internal::created_at(const WorkflowVersion* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
WorkflowVersion::_Internal::modified_at(const WorkflowVersion* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::Visibility&
WorkflowVersion::_Internal::visibility(const WorkflowVersion* msg) {
  return *msg->visibility_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
WorkflowVersion::_Internal::metadata(const WorkflowVersion* msg) {
  return *msg->metadata_;
}
void WorkflowVersion::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void WorkflowVersion::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void WorkflowVersion::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
WorkflowVersion::WorkflowVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.WorkflowVersion)
}
WorkflowVersion::WorkflowVersion(const WorkflowVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow_id(), 
      GetArenaForAllocation());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  license_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    license_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_license().empty()) {
    license_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_license(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowVersion)
}

inline void WorkflowVersion::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
license_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  license_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(metadata_));
}

WorkflowVersion::~WorkflowVersion() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  license_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete visibility_;
  if (this != internal_default_instance()) delete metadata_;
}

void WorkflowVersion::ArenaDtor(void* object) {
  WorkflowVersion* _this = reinterpret_cast< WorkflowVersion* >(object);
  (void)_this;
}
void WorkflowVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  id_.ClearToEmpty();
  workflow_id_.ClearToEmpty();
  app_id_.ClearToEmpty();
  user_id_.ClearToEmpty();
  description_.ClearToEmpty();
  license_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowVersion.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowVersion.workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowNode nodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowVersion.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowVersion.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowVersion.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string license = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_license();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowVersion.license"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 4;
  if (this->_internal_has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::modified_at(this), target, stream);
  }

  // .clarifai.api.Visibility visibility = 5;
  if (this->_internal_has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::visibility(this), target, stream);
  }

  // repeated .clarifai.api.WorkflowNode nodes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_nodes(i), target, stream);
  }

  // .google.protobuf.Struct metadata = 7;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::metadata(this), target, stream);
  }

  // string app_id = 8;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.app_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_app_id(), target);
  }

  // string user_id = 9;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.user_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_user_id(), target);
  }

  // string description = 10;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.description");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_description(), target);
  }

  // string license = 11;
  if (!this->_internal_license().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersion.license");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_license(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowVersion)
  return target;
}

size_t WorkflowVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowNode nodes = 6;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // string app_id = 8;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 9;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string description = 10;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string license = 11;
  if (!this->_internal_license().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 4;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.Visibility visibility = 5;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .google.protobuf.Struct metadata = 7;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkflowVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowVersion::GetClassData() const { return &_class_data_; }

void WorkflowVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WorkflowVersion *>(to)->MergeFrom(
      static_cast<const WorkflowVersion &>(from));
}


void WorkflowVersion::MergeFrom(const WorkflowVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_workflow_id().empty()) {
    _internal_set_workflow_id(from._internal_workflow_id());
  }
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_license().empty()) {
    _internal_set_license(from._internal_license());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from._internal_has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowVersion::CopyFrom(const WorkflowVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowVersion::IsInitialized() const {
  return true;
}

void WorkflowVersion::InternalSwap(WorkflowVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workflow_id_, lhs_arena,
      &other->workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &license_, lhs_arena,
      &other->license_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkflowVersion, metadata_)
      + sizeof(WorkflowVersion::metadata_)
      - PROTOBUF_FIELD_OFFSET(WorkflowVersion, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[110]);
}

// ===================================================================

class WorkflowNode::_Internal {
 public:
  static const ::clarifai::api::Model& model(const WorkflowNode* msg);
};

const ::clarifai::api::Model&
WorkflowNode::_Internal::model(const WorkflowNode* msg) {
  return *msg->model_;
}
WorkflowNode::WorkflowNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  node_inputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.WorkflowNode)
}
WorkflowNode::WorkflowNode(const WorkflowNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_inputs_(from.node_inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::api::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  suppress_output_ = from.suppress_output_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowNode)
}

inline void WorkflowNode::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&model_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&suppress_output_) -
    reinterpret_cast<char*>(&model_)) + sizeof(suppress_output_));
}

WorkflowNode::~WorkflowNode() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete model_;
}

void WorkflowNode::ArenaDtor(void* object) {
  WorkflowNode* _this = reinterpret_cast< WorkflowNode* >(object);
  (void)_this;
}
void WorkflowNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowNode::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_inputs_.Clear();
  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  suppress_output_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowNode.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.NodeInput node_inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool suppress_output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          suppress_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowNode.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.Model model = 2;
  if (this->_internal_has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model(this), target, stream);
  }

  // repeated .clarifai.api.NodeInput node_inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_node_inputs(i), target, stream);
  }

  // bool suppress_output = 4;
  if (this->_internal_suppress_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_suppress_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowNode)
  return target;
}

size_t WorkflowNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.NodeInput node_inputs = 3;
  total_size += 1UL * this->_internal_node_inputs_size();
  for (const auto& msg : this->node_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.Model model = 2;
  if (this->_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  // bool suppress_output = 4;
  if (this->_internal_suppress_output() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkflowNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowNode::GetClassData() const { return &_class_data_; }

void WorkflowNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WorkflowNode *>(to)->MergeFrom(
      static_cast<const WorkflowNode &>(from));
}


void WorkflowNode::MergeFrom(const WorkflowNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  node_inputs_.MergeFrom(from.node_inputs_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_model()) {
    _internal_mutable_model()->::clarifai::api::Model::MergeFrom(from._internal_model());
  }
  if (from._internal_suppress_output() != 0) {
    _internal_set_suppress_output(from._internal_suppress_output());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowNode::CopyFrom(const WorkflowNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowNode::IsInitialized() const {
  return true;
}

void WorkflowNode::InternalSwap(WorkflowNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  node_inputs_.InternalSwap(&other->node_inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkflowNode, suppress_output_)
      + sizeof(WorkflowNode::suppress_output_)
      - PROTOBUF_FIELD_OFFSET(WorkflowNode, model_)>(
          reinterpret_cast<char*>(&model_),
          reinterpret_cast<char*>(&other->model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[111]);
}

// ===================================================================

class NodeInput::_Internal {
 public:
};

NodeInput::NodeInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.NodeInput)
}
NodeInput::NodeInput(const NodeInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.NodeInput)
}

inline void NodeInput::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeInput::~NodeInput() {
  // @@protoc_insertion_point(destructor:clarifai.api.NodeInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInput::ArenaDtor(void* object) {
  NodeInput* _this = reinterpret_cast< NodeInput* >(object);
  (void)_this;
}
void NodeInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeInput::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.NodeInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.NodeInput.node_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.NodeInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (!this->_internal_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.NodeInput.node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.NodeInput)
  return target;
}

size_t NodeInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.NodeInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInput::GetClassData() const { return &_class_data_; }

void NodeInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NodeInput *>(to)->MergeFrom(
      static_cast<const NodeInput &>(from));
}


void NodeInput::MergeFrom(const NodeInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.NodeInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_id().empty()) {
    _internal_set_node_id(from._internal_node_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInput::CopyFrom(const NodeInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.NodeInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInput::IsInitialized() const {
  return true;
}

void NodeInput::InternalSwap(NodeInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, lhs_arena,
      &other->node_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[112]);
}

// ===================================================================

class WorkflowResult::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const WorkflowResult* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const WorkflowResult* msg);
  static const ::clarifai::api::Model& model(const WorkflowResult* msg);
  static const ::clarifai::api::Input& input(const WorkflowResult* msg);
};

const ::clarifai::api::status::Status&
WorkflowResult::_Internal::status(const WorkflowResult* msg) {
  return *msg->status_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
WorkflowResult::_Internal::created_at(const WorkflowResult* msg) {
  return *msg->created_at_;
}
const ::clarifai::api::Model&
WorkflowResult::_Internal::model(const WorkflowResult* msg) {
  return *msg->model_;
}
const ::clarifai::api::Input&
WorkflowResult::_Internal::input(const WorkflowResult* msg) {
  return *msg->input_;
}
void WorkflowResult::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void WorkflowResult::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
WorkflowResult::WorkflowResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  outputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.WorkflowResult)
}
WorkflowResult::WorkflowResult(const WorkflowResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::api::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  suppress_output_ = from.suppress_output_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowResult)
}

inline void WorkflowResult::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&suppress_output_) -
    reinterpret_cast<char*>(&status_)) + sizeof(suppress_output_));
}

WorkflowResult::~WorkflowResult() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete model_;
  if (this != internal_default_instance()) delete input_;
}

void WorkflowResult::ArenaDtor(void* object) {
  WorkflowResult* _this = reinterpret_cast< WorkflowResult* >(object);
  (void)_this;
}
void WorkflowResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowResult::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  suppress_output_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowResult.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Output outputs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool suppress_output = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          suppress_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowResult.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.status.Status status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::created_at(this), target, stream);
  }

  // .clarifai.api.Model model = 4;
  if (this->_internal_has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::model(this), target, stream);
  }

  // .clarifai.api.Input input = 5;
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::input(this), target, stream);
  }

  // repeated .clarifai.api.Output outputs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_outputs(i), target, stream);
  }

  // bool suppress_output = 7;
  if (this->_internal_suppress_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_suppress_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowResult)
  return target;
}

size_t WorkflowResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Output outputs = 6;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.status.Status status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .clarifai.api.Model model = 4;
  if (this->_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  // .clarifai.api.Input input = 5;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // bool suppress_output = 7;
  if (this->_internal_suppress_output() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkflowResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowResult::GetClassData() const { return &_class_data_; }

void WorkflowResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WorkflowResult *>(to)->MergeFrom(
      static_cast<const WorkflowResult &>(from));
}


void WorkflowResult::MergeFrom(const WorkflowResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_model()) {
    _internal_mutable_model()->::clarifai::api::Model::MergeFrom(from._internal_model());
  }
  if (from._internal_has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
  if (from._internal_suppress_output() != 0) {
    _internal_set_suppress_output(from._internal_suppress_output());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowResult::CopyFrom(const WorkflowResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowResult::IsInitialized() const {
  return true;
}

void WorkflowResult::InternalSwap(WorkflowResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  outputs_.InternalSwap(&other->outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkflowResult, suppress_output_)
      + sizeof(WorkflowResult::suppress_output_)
      - PROTOBUF_FIELD_OFFSET(WorkflowResult, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[113]);
}

// ===================================================================

class WorkflowState::_Internal {
 public:
};

WorkflowState::WorkflowState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.WorkflowState)
}
WorkflowState::WorkflowState(const WorkflowState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowState)
}

inline void WorkflowState::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkflowState::~WorkflowState() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkflowState::ArenaDtor(void* object) {
  WorkflowState* _this = reinterpret_cast< WorkflowState* >(object);
  (void)_this;
}
void WorkflowState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowState::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowState.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowState.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowState)
  return target;
}

size_t WorkflowState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkflowState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowState::GetClassData() const { return &_class_data_; }

void WorkflowState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WorkflowState *>(to)->MergeFrom(
      static_cast<const WorkflowState &>(from));
}


void WorkflowState::MergeFrom(const WorkflowState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowState::CopyFrom(const WorkflowState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowState::IsInitialized() const {
  return true;
}

void WorkflowState::InternalSwap(WorkflowState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[114]);
}

// ===================================================================

class AppDuplication::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const AppDuplication* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const AppDuplication* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_modified_at(const AppDuplication* msg);
  static const ::clarifai::api::AppDuplicationFilters& filter(const AppDuplication* msg);
};

const ::clarifai::api::status::Status&
AppDuplication::_Internal::status(const AppDuplication* msg) {
  return *msg->status_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AppDuplication::_Internal::created_at(const AppDuplication* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AppDuplication::_Internal::last_modified_at(const AppDuplication* msg) {
  return *msg->last_modified_at_;
}
const ::clarifai::api::AppDuplicationFilters&
AppDuplication::_Internal::filter(const AppDuplication* msg) {
  return *msg->filter_;
}
void AppDuplication::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void AppDuplication::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void AppDuplication::clear_last_modified_at() {
  if (GetArenaForAllocation() == nullptr && last_modified_at_ != nullptr) {
    delete last_modified_at_;
  }
  last_modified_at_ = nullptr;
}
AppDuplication::AppDuplication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  progress_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AppDuplication)
}
AppDuplication::AppDuplication(const AppDuplication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      progress_(from.progress_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  new_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    new_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_app_id().empty()) {
    new_app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_app_id(), 
      GetArenaForAllocation());
  }
  new_app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    new_app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_app_name().empty()) {
    new_app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_app_name(), 
      GetArenaForAllocation());
  }
  existing_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    existing_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_existing_app_id().empty()) {
    existing_app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_existing_app_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_last_modified_at()) {
    last_modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_modified_at_);
  } else {
    last_modified_at_ = nullptr;
  }
  if (from._internal_has_filter()) {
    filter_ = new ::clarifai::api::AppDuplicationFilters(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AppDuplication)
}

inline void AppDuplication::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
new_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  new_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
new_app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  new_app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
existing_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  existing_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filter_) -
    reinterpret_cast<char*>(&status_)) + sizeof(filter_));
}

AppDuplication::~AppDuplication() {
  // @@protoc_insertion_point(destructor:clarifai.api.AppDuplication)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppDuplication::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_app_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  existing_app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete last_modified_at_;
  if (this != internal_default_instance()) delete filter_;
}

void AppDuplication::ArenaDtor(void* object) {
  AppDuplication* _this = reinterpret_cast< AppDuplication* >(object);
  (void)_this;
}
void AppDuplication::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppDuplication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppDuplication::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AppDuplication)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  progress_.Clear();
  id_.ClearToEmpty();
  new_app_id_.ClearToEmpty();
  new_app_name_.ClearToEmpty();
  existing_app_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_modified_at_ != nullptr) {
    delete last_modified_at_;
  }
  last_modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppDuplication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AppDuplication.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string new_app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AppDuplication.new_app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string new_app_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_new_app_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AppDuplication.new_app_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_modified_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AppDuplicationFilters filter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string existing_app_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_existing_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AppDuplication.existing_app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.AppCopyProgress progress = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppDuplication::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AppDuplication)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppDuplication.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string new_app_id = 2;
  if (!this->_internal_new_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_app_id().data(), static_cast<int>(this->_internal_new_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppDuplication.new_app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_app_id(), target);
  }

  // string new_app_name = 3;
  if (!this->_internal_new_app_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_app_name().data(), static_cast<int>(this->_internal_new_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppDuplication.new_app_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_new_app_name(), target);
  }

  // .clarifai.api.status.Status status = 4;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp last_modified_at = 6;
  if (this->_internal_has_last_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::last_modified_at(this), target, stream);
  }

  // .clarifai.api.AppDuplicationFilters filter = 7;
  if (this->_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::filter(this), target, stream);
  }

  // string existing_app_id = 8;
  if (!this->_internal_existing_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_existing_app_id().data(), static_cast<int>(this->_internal_existing_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppDuplication.existing_app_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_existing_app_id(), target);
  }

  // repeated .clarifai.api.AppCopyProgress progress = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_progress_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_progress(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AppDuplication)
  return target;
}

size_t AppDuplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AppDuplication)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AppCopyProgress progress = 9;
  total_size += 1UL * this->_internal_progress_size();
  for (const auto& msg : this->progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string new_app_id = 2;
  if (!this->_internal_new_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_app_id());
  }

  // string new_app_name = 3;
  if (!this->_internal_new_app_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_app_name());
  }

  // string existing_app_id = 8;
  if (!this->_internal_existing_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_existing_app_id());
  }

  // .clarifai.api.status.Status status = 4;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp last_modified_at = 6;
  if (this->_internal_has_last_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_modified_at_);
  }

  // .clarifai.api.AppDuplicationFilters filter = 7;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppDuplication::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppDuplication::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppDuplication::GetClassData() const { return &_class_data_; }

void AppDuplication::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppDuplication *>(to)->MergeFrom(
      static_cast<const AppDuplication &>(from));
}


void AppDuplication::MergeFrom(const AppDuplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AppDuplication)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  progress_.MergeFrom(from.progress_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_new_app_id().empty()) {
    _internal_set_new_app_id(from._internal_new_app_id());
  }
  if (!from._internal_new_app_name().empty()) {
    _internal_set_new_app_name(from._internal_new_app_name());
  }
  if (!from._internal_existing_app_id().empty()) {
    _internal_set_existing_app_id(from._internal_existing_app_id());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_last_modified_at()) {
    _internal_mutable_last_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_modified_at());
  }
  if (from._internal_has_filter()) {
    _internal_mutable_filter()->::clarifai::api::AppDuplicationFilters::MergeFrom(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppDuplication::CopyFrom(const AppDuplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AppDuplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppDuplication::IsInitialized() const {
  return true;
}

void AppDuplication::InternalSwap(AppDuplication* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  progress_.InternalSwap(&other->progress_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &new_app_id_, lhs_arena,
      &other->new_app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &new_app_name_, lhs_arena,
      &other->new_app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &existing_app_id_, lhs_arena,
      &other->existing_app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppDuplication, filter_)
      + sizeof(AppDuplication::filter_)
      - PROTOBUF_FIELD_OFFSET(AppDuplication, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppDuplication::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[115]);
}

// ===================================================================

class AppCopyProgress::_Internal {
 public:
};

AppCopyProgress::AppCopyProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AppCopyProgress)
}
AppCopyProgress::AppCopyProgress(const AppCopyProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    field_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AppCopyProgress)
}

inline void AppCopyProgress::SharedCtor() {
field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  field_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = 0;
}

AppCopyProgress::~AppCopyProgress() {
  // @@protoc_insertion_point(destructor:clarifai.api.AppCopyProgress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppCopyProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppCopyProgress::ArenaDtor(void* object) {
  AppCopyProgress* _this = reinterpret_cast< AppCopyProgress* >(object);
  (void)_this;
}
void AppCopyProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppCopyProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppCopyProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AppCopyProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.ClearToEmpty();
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppCopyProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AppCopyProgress.field"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppCopyProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AppCopyProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AppCopyProgress.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AppCopyProgress)
  return target;
}

size_t AppCopyProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AppCopyProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppCopyProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppCopyProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppCopyProgress::GetClassData() const { return &_class_data_; }

void AppCopyProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppCopyProgress *>(to)->MergeFrom(
      static_cast<const AppCopyProgress &>(from));
}


void AppCopyProgress::MergeFrom(const AppCopyProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AppCopyProgress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_field().empty()) {
    _internal_set_field(from._internal_field());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppCopyProgress::CopyFrom(const AppCopyProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AppCopyProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppCopyProgress::IsInitialized() const {
  return true;
}

void AppCopyProgress::InternalSwap(AppCopyProgress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &field_, lhs_arena,
      &other->field_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppCopyProgress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[116]);
}

// ===================================================================

class AppDuplicationFilters::_Internal {
 public:
};

AppDuplicationFilters::AppDuplicationFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AppDuplicationFilters)
}
AppDuplicationFilters::AppDuplicationFilters(const AppDuplicationFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&copy_inputs_, &from.copy_inputs_,
    static_cast<size_t>(reinterpret_cast<char*>(&copy_workflows_) -
    reinterpret_cast<char*>(&copy_inputs_)) + sizeof(copy_workflows_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AppDuplicationFilters)
}

inline void AppDuplicationFilters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&copy_inputs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&copy_workflows_) -
    reinterpret_cast<char*>(&copy_inputs_)) + sizeof(copy_workflows_));
}

AppDuplicationFilters::~AppDuplicationFilters() {
  // @@protoc_insertion_point(destructor:clarifai.api.AppDuplicationFilters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppDuplicationFilters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppDuplicationFilters::ArenaDtor(void* object) {
  AppDuplicationFilters* _this = reinterpret_cast< AppDuplicationFilters* >(object);
  (void)_this;
}
void AppDuplicationFilters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppDuplicationFilters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppDuplicationFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AppDuplicationFilters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&copy_inputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copy_workflows_) -
      reinterpret_cast<char*>(&copy_inputs_)) + sizeof(copy_workflows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppDuplicationFilters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool copy_inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          copy_inputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool copy_concepts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          copy_concepts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool copy_annotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          copy_annotations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool copy_models = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          copy_models_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool copy_workflows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          copy_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppDuplicationFilters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AppDuplicationFilters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool copy_inputs = 1;
  if (this->_internal_copy_inputs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_copy_inputs(), target);
  }

  // bool copy_concepts = 2;
  if (this->_internal_copy_concepts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_copy_concepts(), target);
  }

  // bool copy_annotations = 3;
  if (this->_internal_copy_annotations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_copy_annotations(), target);
  }

  // bool copy_models = 4;
  if (this->_internal_copy_models() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_copy_models(), target);
  }

  // bool copy_workflows = 5;
  if (this->_internal_copy_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_copy_workflows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AppDuplicationFilters)
  return target;
}

size_t AppDuplicationFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AppDuplicationFilters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool copy_inputs = 1;
  if (this->_internal_copy_inputs() != 0) {
    total_size += 1 + 1;
  }

  // bool copy_concepts = 2;
  if (this->_internal_copy_concepts() != 0) {
    total_size += 1 + 1;
  }

  // bool copy_annotations = 3;
  if (this->_internal_copy_annotations() != 0) {
    total_size += 1 + 1;
  }

  // bool copy_models = 4;
  if (this->_internal_copy_models() != 0) {
    total_size += 1 + 1;
  }

  // bool copy_workflows = 5;
  if (this->_internal_copy_workflows() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppDuplicationFilters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppDuplicationFilters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppDuplicationFilters::GetClassData() const { return &_class_data_; }

void AppDuplicationFilters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppDuplicationFilters *>(to)->MergeFrom(
      static_cast<const AppDuplicationFilters &>(from));
}


void AppDuplicationFilters::MergeFrom(const AppDuplicationFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AppDuplicationFilters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_copy_inputs() != 0) {
    _internal_set_copy_inputs(from._internal_copy_inputs());
  }
  if (from._internal_copy_concepts() != 0) {
    _internal_set_copy_concepts(from._internal_copy_concepts());
  }
  if (from._internal_copy_annotations() != 0) {
    _internal_set_copy_annotations(from._internal_copy_annotations());
  }
  if (from._internal_copy_models() != 0) {
    _internal_set_copy_models(from._internal_copy_models());
  }
  if (from._internal_copy_workflows() != 0) {
    _internal_set_copy_workflows(from._internal_copy_workflows());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppDuplicationFilters::CopyFrom(const AppDuplicationFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AppDuplicationFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppDuplicationFilters::IsInitialized() const {
  return true;
}

void AppDuplicationFilters::InternalSwap(AppDuplicationFilters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppDuplicationFilters, copy_workflows_)
      + sizeof(AppDuplicationFilters::copy_workflows_)
      - PROTOBUF_FIELD_OFFSET(AppDuplicationFilters, copy_inputs_)>(
          reinterpret_cast<char*>(&copy_inputs_),
          reinterpret_cast<char*>(&other->copy_inputs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppDuplicationFilters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[117]);
}

// ===================================================================

class LabelOrder::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const LabelOrder* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& desired_fulfill_time(const LabelOrder* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& estimate_fulfill_time(const LabelOrder* msg);
  static const ::clarifai::api::Task& task(const LabelOrder* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const LabelOrder* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const LabelOrder* msg);
};

const ::clarifai::api::status::Status&
LabelOrder::_Internal::status(const LabelOrder* msg) {
  return *msg->status_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LabelOrder::_Internal::desired_fulfill_time(const LabelOrder* msg) {
  return *msg->desired_fulfill_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LabelOrder::_Internal::estimate_fulfill_time(const LabelOrder* msg) {
  return *msg->estimate_fulfill_time_;
}
const ::clarifai::api::Task&
LabelOrder::_Internal::task(const LabelOrder* msg) {
  return *msg->task_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LabelOrder::_Internal::created_at(const LabelOrder* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LabelOrder::_Internal::modified_at(const LabelOrder* msg) {
  return *msg->modified_at_;
}
void LabelOrder::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void LabelOrder::clear_desired_fulfill_time() {
  if (GetArenaForAllocation() == nullptr && desired_fulfill_time_ != nullptr) {
    delete desired_fulfill_time_;
  }
  desired_fulfill_time_ = nullptr;
}
void LabelOrder::clear_estimate_fulfill_time() {
  if (GetArenaForAllocation() == nullptr && estimate_fulfill_time_ != nullptr) {
    delete estimate_fulfill_time_;
  }
  estimate_fulfill_time_ = nullptr;
}
void LabelOrder::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void LabelOrder::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
LabelOrder::LabelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.LabelOrder)
}
LabelOrder::LabelOrder(const LabelOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_desired_fulfill_time()) {
    desired_fulfill_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.desired_fulfill_time_);
  } else {
    desired_fulfill_time_ = nullptr;
  }
  if (from._internal_has_estimate_fulfill_time()) {
    estimate_fulfill_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.estimate_fulfill_time_);
  } else {
    estimate_fulfill_time_ = nullptr;
  }
  if (from._internal_has_task()) {
    task_ = new ::clarifai::api::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  ::memcpy(&auto_release_, &from.auto_release_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_empty_tag_) -
    reinterpret_cast<char*>(&auto_release_)) + sizeof(allow_empty_tag_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.LabelOrder)
}

inline void LabelOrder::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_empty_tag_) -
    reinterpret_cast<char*>(&status_)) + sizeof(allow_empty_tag_));
}

LabelOrder::~LabelOrder() {
  // @@protoc_insertion_point(destructor:clarifai.api.LabelOrder)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LabelOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete desired_fulfill_time_;
  if (this != internal_default_instance()) delete estimate_fulfill_time_;
  if (this != internal_default_instance()) delete task_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
}

void LabelOrder::ArenaDtor(void* object) {
  LabelOrder* _this = reinterpret_cast< LabelOrder* >(object);
  (void)_this;
}
void LabelOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LabelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.LabelOrder)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && desired_fulfill_time_ != nullptr) {
    delete desired_fulfill_time_;
  }
  desired_fulfill_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && estimate_fulfill_time_ != nullptr) {
    delete estimate_fulfill_time_;
  }
  estimate_fulfill_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  ::memset(&auto_release_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_empty_tag_) -
      reinterpret_cast<char*>(&auto_release_)) + sizeof(allow_empty_tag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.LabelOrder.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.LabelOrder.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_release = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          auto_release_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_empty_tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          allow_empty_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp desired_fulfill_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_desired_fulfill_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp estimate_fulfill_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_estimate_fulfill_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Task task = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LabelOrder::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.LabelOrder)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.LabelOrder.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.LabelOrder.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .clarifai.api.status.Status status = 3;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  // bool auto_release = 4;
  if (this->_internal_auto_release() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_auto_release(), target);
  }

  // bool allow_empty_tag = 5;
  if (this->_internal_allow_empty_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_allow_empty_tag(), target);
  }

  // .google.protobuf.Timestamp desired_fulfill_time = 6;
  if (this->_internal_has_desired_fulfill_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::desired_fulfill_time(this), target, stream);
  }

  // .google.protobuf.Timestamp estimate_fulfill_time = 7;
  if (this->_internal_has_estimate_fulfill_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::estimate_fulfill_time(this), target, stream);
  }

  // .clarifai.api.Task task = 8;
  if (this->_internal_has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::task(this), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 10;
  if (this->_internal_has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::modified_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.LabelOrder)
  return target;
}

size_t LabelOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.LabelOrder)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .clarifai.api.status.Status status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Timestamp desired_fulfill_time = 6;
  if (this->_internal_has_desired_fulfill_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *desired_fulfill_time_);
  }

  // .google.protobuf.Timestamp estimate_fulfill_time = 7;
  if (this->_internal_has_estimate_fulfill_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *estimate_fulfill_time_);
  }

  // .clarifai.api.Task task = 8;
  if (this->_internal_has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 10;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // bool auto_release = 4;
  if (this->_internal_auto_release() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_empty_tag = 5;
  if (this->_internal_allow_empty_tag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabelOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LabelOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabelOrder::GetClassData() const { return &_class_data_; }

void LabelOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LabelOrder *>(to)->MergeFrom(
      static_cast<const LabelOrder &>(from));
}


void LabelOrder::MergeFrom(const LabelOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.LabelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_desired_fulfill_time()) {
    _internal_mutable_desired_fulfill_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_desired_fulfill_time());
  }
  if (from._internal_has_estimate_fulfill_time()) {
    _internal_mutable_estimate_fulfill_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_estimate_fulfill_time());
  }
  if (from._internal_has_task()) {
    _internal_mutable_task()->::clarifai::api::Task::MergeFrom(from._internal_task());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from._internal_auto_release() != 0) {
    _internal_set_auto_release(from._internal_auto_release());
  }
  if (from._internal_allow_empty_tag() != 0) {
    _internal_set_allow_empty_tag(from._internal_allow_empty_tag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabelOrder::CopyFrom(const LabelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.LabelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelOrder::IsInitialized() const {
  return true;
}

void LabelOrder::InternalSwap(LabelOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LabelOrder, allow_empty_tag_)
      + sizeof(LabelOrder::allow_empty_tag_)
      - PROTOBUF_FIELD_OFFSET(LabelOrder, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelOrder::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[118]);
}

// ===================================================================

class Task::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Task* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const Task* msg);
  static const ::clarifai::api::TaskWorker& worker(const Task* msg);
  static const ::clarifai::api::TaskInputSource& input_source(const Task* msg);
  static const ::clarifai::api::TaskAIAssistant& ai_assistant(const Task* msg);
  static const ::clarifai::api::TaskReview& review(const Task* msg);
  static const ::clarifai::api::status::Status& status(const Task* msg);
  static const ::clarifai::api::AiAssistParameters& ai_assist_params(const Task* msg);
  static const ::clarifai::api::Visibility& visibility(const Task* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Task::_Internal::created_at(const Task* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Task::_Internal::modified_at(const Task* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::TaskWorker&
Task::_Internal::worker(const Task* msg) {
  return *msg->worker_;
}
const ::clarifai::api::TaskInputSource&
Task::_Internal::input_source(const Task* msg) {
  return *msg->input_source_;
}
const ::clarifai::api::TaskAIAssistant&
Task::_Internal::ai_assistant(const Task* msg) {
  return *msg->ai_assistant_;
}
const ::clarifai::api::TaskReview&
Task::_Internal::review(const Task* msg) {
  return *msg->review_;
}
const ::clarifai::api::status::Status&
Task::_Internal::status(const Task* msg) {
  return *msg->status_;
}
const ::clarifai::api::AiAssistParameters&
Task::_Internal::ai_assist_params(const Task* msg) {
  return *msg->ai_assist_params_;
}
const ::clarifai::api::Visibility&
Task::_Internal::visibility(const Task* msg) {
  return *msg->visibility_;
}
void Task::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Task::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void Task::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  concept_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      concept_ids_(from.concept_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_worker()) {
    worker_ = new ::clarifai::api::TaskWorker(*from.worker_);
  } else {
    worker_ = nullptr;
  }
  if (from._internal_has_input_source()) {
    input_source_ = new ::clarifai::api::TaskInputSource(*from.input_source_);
  } else {
    input_source_ = nullptr;
  }
  if (from._internal_has_ai_assistant()) {
    ai_assistant_ = new ::clarifai::api::TaskAIAssistant(*from.ai_assistant_);
  } else {
    ai_assistant_ = nullptr;
  }
  if (from._internal_has_review()) {
    review_ = new ::clarifai::api::TaskReview(*from.review_);
  } else {
    review_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_ai_assist_params()) {
    ai_assist_params_ = new ::clarifai::api::AiAssistParameters(*from.ai_assist_params_);
  } else {
    ai_assist_params_ = nullptr;
  }
  if (from._internal_has_visibility()) {
    visibility_ = new ::clarifai::api::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_ms_) -
    reinterpret_cast<char*>(&type_)) + sizeof(sample_ms_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Task)
}

inline void Task::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sample_ms_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(sample_ms_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:clarifai.api.Task)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete worker_;
  if (this != internal_default_instance()) delete input_source_;
  if (this != internal_default_instance()) delete ai_assistant_;
  if (this != internal_default_instance()) delete review_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete ai_assist_params_;
  if (this != internal_default_instance()) delete visibility_;
}

void Task::ArenaDtor(void* object) {
  Task* _this = reinterpret_cast< Task* >(object);
  (void)_this;
}
void Task::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Task)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_ids_.Clear();
  id_.ClearToEmpty();
  description_.ClearToEmpty();
  name_.ClearToEmpty();
  app_id_.ClearToEmpty();
  user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && worker_ != nullptr) {
    delete worker_;
  }
  worker_ = nullptr;
  if (GetArenaForAllocation() == nullptr && input_source_ != nullptr) {
    delete input_source_;
  }
  input_source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ai_assistant_ != nullptr) {
    delete ai_assistant_;
  }
  ai_assistant_ = nullptr;
  if (GetArenaForAllocation() == nullptr && review_ != nullptr) {
    delete review_;
  }
  review_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ai_assist_params_ != nullptr) {
    delete ai_assist_params_;
  }
  ai_assist_params_ = nullptr;
  if (GetArenaForAllocation() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_ms_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sample_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Task.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Task.TaskType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::clarifai::api::Task_TaskType>(val));
        } else
          goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Task.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TaskWorker worker = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_worker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string concept_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Task.concept_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TaskInputSource input_source = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sample_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          sample_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TaskAIAssistant ai_assistant = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ai_assistant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TaskReview review = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_review(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Task.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AiAssistParameters ai_assist_params = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ai_assist_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Visibility visibility = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Task.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Task.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Task::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Task)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::modified_at(this), target, stream);
  }

  // .clarifai.api.Task.TaskType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // .clarifai.api.TaskWorker worker = 6;
  if (this->_internal_has_worker()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::worker(this), target, stream);
  }

  // repeated string concept_ids = 7;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.concept_ids");
    target = stream->WriteString(7, s, target);
  }

  // .clarifai.api.TaskInputSource input_source = 8;
  if (this->_internal_has_input_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::input_source(this), target, stream);
  }

  // uint32 sample_ms = 9;
  if (this->_internal_sample_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_sample_ms(), target);
  }

  // .clarifai.api.TaskAIAssistant ai_assistant = 10;
  if (this->_internal_has_ai_assistant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::ai_assistant(this), target, stream);
  }

  // .clarifai.api.TaskReview review = 11;
  if (this->_internal_has_review()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::review(this), target, stream);
  }

  // .clarifai.api.status.Status status = 12;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::status(this), target, stream);
  }

  // string name = 13;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_name(), target);
  }

  // .clarifai.api.AiAssistParameters ai_assist_params = 14;
  if (this->_internal_has_ai_assist_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::ai_assist_params(this), target, stream);
  }

  // .clarifai.api.Visibility visibility = 15;
  if (this->_internal_has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::visibility(this), target, stream);
  }

  // string app_id = 16;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.app_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_app_id(), target);
  }

  // string user_id = 17;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Task.user_id");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Task)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string concept_ids = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(concept_ids_.size());
  for (int i = 0, n = concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      concept_ids_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string name = 13;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string app_id = 16;
  if (!this->_internal_app_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string user_id = 17;
  if (!this->_internal_user_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.TaskWorker worker = 6;
  if (this->_internal_has_worker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *worker_);
  }

  // .clarifai.api.TaskInputSource input_source = 8;
  if (this->_internal_has_input_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_source_);
  }

  // .clarifai.api.TaskAIAssistant ai_assistant = 10;
  if (this->_internal_has_ai_assistant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ai_assistant_);
  }

  // .clarifai.api.TaskReview review = 11;
  if (this->_internal_has_review()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *review_);
  }

  // .clarifai.api.status.Status status = 12;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.AiAssistParameters ai_assist_params = 14;
  if (this->_internal_has_ai_assist_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ai_assist_params_);
  }

  // .clarifai.api.Visibility visibility = 15;
  if (this->_internal_has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .clarifai.api.Task.TaskType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 sample_ms = 9;
  if (this->_internal_sample_ms() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Task::GetClassData() const { return &_class_data_; }

void Task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Task *>(to)->MergeFrom(
      static_cast<const Task &>(from));
}


void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Task)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  concept_ids_.MergeFrom(from.concept_ids_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from._internal_has_worker()) {
    _internal_mutable_worker()->::clarifai::api::TaskWorker::MergeFrom(from._internal_worker());
  }
  if (from._internal_has_input_source()) {
    _internal_mutable_input_source()->::clarifai::api::TaskInputSource::MergeFrom(from._internal_input_source());
  }
  if (from._internal_has_ai_assistant()) {
    _internal_mutable_ai_assistant()->::clarifai::api::TaskAIAssistant::MergeFrom(from._internal_ai_assistant());
  }
  if (from._internal_has_review()) {
    _internal_mutable_review()->::clarifai::api::TaskReview::MergeFrom(from._internal_review());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_ai_assist_params()) {
    _internal_mutable_ai_assist_params()->::clarifai::api::AiAssistParameters::MergeFrom(from._internal_ai_assist_params());
  }
  if (from._internal_has_visibility()) {
    _internal_mutable_visibility()->::clarifai::api::Visibility::MergeFrom(from._internal_visibility());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_sample_ms() != 0) {
    _internal_set_sample_ms(from._internal_sample_ms());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  concept_ids_.InternalSwap(&other->concept_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Task, sample_ms_)
      + sizeof(Task::sample_ms_)
      - PROTOBUF_FIELD_OFFSET(Task, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[119]);
}

// ===================================================================

class AiAssistParameters::_Internal {
 public:
};

AiAssistParameters::AiAssistParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  concept_relation_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.AiAssistParameters)
}
AiAssistParameters::AiAssistParameters(const AiAssistParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      concept_relation_ids_(from.concept_relation_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_threshold_, &from.min_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_threshold_) -
    reinterpret_cast<char*>(&min_threshold_)) + sizeof(max_threshold_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.AiAssistParameters)
}

inline void AiAssistParameters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_threshold_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_threshold_) -
    reinterpret_cast<char*>(&min_threshold_)) + sizeof(max_threshold_));
}

AiAssistParameters::~AiAssistParameters() {
  // @@protoc_insertion_point(destructor:clarifai.api.AiAssistParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AiAssistParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AiAssistParameters::ArenaDtor(void* object) {
  AiAssistParameters* _this = reinterpret_cast< AiAssistParameters* >(object);
  (void)_this;
}
void AiAssistParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AiAssistParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AiAssistParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.AiAssistParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_relation_ids_.Clear();
  ::memset(&min_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_threshold_) -
      reinterpret_cast<char*>(&min_threshold_)) + sizeof(max_threshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AiAssistParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float min_threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          min_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float max_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          max_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated string concept_relation_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_relation_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.AiAssistParameters.concept_relation_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AiAssistParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.AiAssistParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_threshold = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_threshold = this->_internal_min_threshold();
  uint32_t raw_min_threshold;
  memcpy(&raw_min_threshold, &tmp_min_threshold, sizeof(tmp_min_threshold));
  if (raw_min_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_threshold(), target);
  }

  // float max_threshold = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_threshold = this->_internal_max_threshold();
  uint32_t raw_max_threshold;
  memcpy(&raw_max_threshold, &tmp_max_threshold, sizeof(tmp_max_threshold));
  if (raw_max_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_threshold(), target);
  }

  // repeated string concept_relation_ids = 3;
  for (int i = 0, n = this->_internal_concept_relation_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_relation_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.AiAssistParameters.concept_relation_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.AiAssistParameters)
  return target;
}

size_t AiAssistParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.AiAssistParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string concept_relation_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(concept_relation_ids_.size());
  for (int i = 0, n = concept_relation_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      concept_relation_ids_.Get(i));
  }

  // float min_threshold = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_threshold = this->_internal_min_threshold();
  uint32_t raw_min_threshold;
  memcpy(&raw_min_threshold, &tmp_min_threshold, sizeof(tmp_min_threshold));
  if (raw_min_threshold != 0) {
    total_size += 1 + 4;
  }

  // float max_threshold = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_threshold = this->_internal_max_threshold();
  uint32_t raw_max_threshold;
  memcpy(&raw_max_threshold, &tmp_max_threshold, sizeof(tmp_max_threshold));
  if (raw_max_threshold != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AiAssistParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AiAssistParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AiAssistParameters::GetClassData() const { return &_class_data_; }

void AiAssistParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AiAssistParameters *>(to)->MergeFrom(
      static_cast<const AiAssistParameters &>(from));
}


void AiAssistParameters::MergeFrom(const AiAssistParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.AiAssistParameters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  concept_relation_ids_.MergeFrom(from.concept_relation_ids_);
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_threshold = from._internal_min_threshold();
  uint32_t raw_min_threshold;
  memcpy(&raw_min_threshold, &tmp_min_threshold, sizeof(tmp_min_threshold));
  if (raw_min_threshold != 0) {
    _internal_set_min_threshold(from._internal_min_threshold());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_threshold = from._internal_max_threshold();
  uint32_t raw_max_threshold;
  memcpy(&raw_max_threshold, &tmp_max_threshold, sizeof(tmp_max_threshold));
  if (raw_max_threshold != 0) {
    _internal_set_max_threshold(from._internal_max_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AiAssistParameters::CopyFrom(const AiAssistParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.AiAssistParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AiAssistParameters::IsInitialized() const {
  return true;
}

void AiAssistParameters::InternalSwap(AiAssistParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  concept_relation_ids_.InternalSwap(&other->concept_relation_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiAssistParameters, max_threshold_)
      + sizeof(AiAssistParameters::max_threshold_)
      - PROTOBUF_FIELD_OFFSET(AiAssistParameters, min_threshold_)>(
          reinterpret_cast<char*>(&min_threshold_),
          reinterpret_cast<char*>(&other->min_threshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AiAssistParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[120]);
}

// ===================================================================

class TaskWorker::_Internal {
 public:
  static const ::clarifai::api::TaskWorkerPartitionedStrategyInfo& partitioned_strategy_info(const TaskWorker* msg);
};

const ::clarifai::api::TaskWorkerPartitionedStrategyInfo&
TaskWorker::_Internal::partitioned_strategy_info(const TaskWorker* msg) {
  return *msg->strategy_info_.partitioned_strategy_info_;
}
void TaskWorker::set_allocated_partitioned_strategy_info(::clarifai::api::TaskWorkerPartitionedStrategyInfo* partitioned_strategy_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_strategy_info();
  if (partitioned_strategy_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::clarifai::api::TaskWorkerPartitionedStrategyInfo>::GetOwningArena(partitioned_strategy_info);
    if (message_arena != submessage_arena) {
      partitioned_strategy_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partitioned_strategy_info, submessage_arena);
    }
    set_has_partitioned_strategy_info();
    strategy_info_.partitioned_strategy_info_ = partitioned_strategy_info;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TaskWorker.partitioned_strategy_info)
}
TaskWorker::TaskWorker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  user_ids_(arena),
  users_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskWorker)
}
TaskWorker::TaskWorker(const TaskWorker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_ids_(from.user_ids_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strategy_ = from.strategy_;
  clear_has_strategy_info();
  switch (from.strategy_info_case()) {
    case kPartitionedStrategyInfo: {
      _internal_mutable_partitioned_strategy_info()->::clarifai::api::TaskWorkerPartitionedStrategyInfo::MergeFrom(from._internal_partitioned_strategy_info());
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskWorker)
}

inline void TaskWorker::SharedCtor() {
strategy_ = 0;
clear_has_strategy_info();
}

TaskWorker::~TaskWorker() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskWorker)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskWorker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_strategy_info()) {
    clear_strategy_info();
  }
}

void TaskWorker::ArenaDtor(void* object) {
  TaskWorker* _this = reinterpret_cast< TaskWorker* >(object);
  (void)_this;
}
void TaskWorker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskWorker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskWorker::clear_strategy_info() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.TaskWorker)
  switch (strategy_info_case()) {
    case kPartitionedStrategyInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete strategy_info_.partitioned_strategy_info_;
      }
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STRATEGY_INFO_NOT_SET;
}


void TaskWorker::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskWorker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  users_.Clear();
  strategy_ = 0;
  clear_strategy_info();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskWorker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.TaskWorker.TaskWorkerStrategy strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strategy(static_cast<::clarifai::api::TaskWorker_TaskWorkerStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TaskWorker.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TaskWorkerPartitionedStrategyInfo partitioned_strategy_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_partitioned_strategy_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.User users = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskWorker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskWorker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.TaskWorker.TaskWorkerStrategy strategy = 1;
  if (this->_internal_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_strategy(), target);
  }

  // repeated string user_ids = 2 [deprecated = true];
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TaskWorker.user_ids");
    target = stream->WriteString(2, s, target);
  }

  // .clarifai.api.TaskWorkerPartitionedStrategyInfo partitioned_strategy_info = 3;
  if (_internal_has_partitioned_strategy_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::partitioned_strategy_info(this), target, stream);
  }

  // repeated .clarifai.api.User users = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskWorker)
  return target;
}

size_t TaskWorker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskWorker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // repeated .clarifai.api.User users = 4;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.TaskWorker.TaskWorkerStrategy strategy = 1;
  if (this->_internal_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_strategy());
  }

  switch (strategy_info_case()) {
    // .clarifai.api.TaskWorkerPartitionedStrategyInfo partitioned_strategy_info = 3;
    case kPartitionedStrategyInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strategy_info_.partitioned_strategy_info_);
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskWorker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskWorker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskWorker::GetClassData() const { return &_class_data_; }

void TaskWorker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskWorker *>(to)->MergeFrom(
      static_cast<const TaskWorker &>(from));
}


void TaskWorker::MergeFrom(const TaskWorker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskWorker)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  users_.MergeFrom(from.users_);
  if (from._internal_strategy() != 0) {
    _internal_set_strategy(from._internal_strategy());
  }
  switch (from.strategy_info_case()) {
    case kPartitionedStrategyInfo: {
      _internal_mutable_partitioned_strategy_info()->::clarifai::api::TaskWorkerPartitionedStrategyInfo::MergeFrom(from._internal_partitioned_strategy_info());
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskWorker::CopyFrom(const TaskWorker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskWorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskWorker::IsInitialized() const {
  return true;
}

void TaskWorker::InternalSwap(TaskWorker* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  users_.InternalSwap(&other->users_);
  swap(strategy_, other->strategy_);
  swap(strategy_info_, other->strategy_info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskWorker::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[121]);
}

// ===================================================================

class TaskWorkerPartitionedStrategyInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& weights(const TaskWorkerPartitionedStrategyInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
TaskWorkerPartitionedStrategyInfo::_Internal::weights(const TaskWorkerPartitionedStrategyInfo* msg) {
  return *msg->weights_;
}
void TaskWorkerPartitionedStrategyInfo::clear_weights() {
  if (GetArenaForAllocation() == nullptr && weights_ != nullptr) {
    delete weights_;
  }
  weights_ = nullptr;
}
TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskWorkerPartitionedStrategyInfo)
}
TaskWorkerPartitionedStrategyInfo::TaskWorkerPartitionedStrategyInfo(const TaskWorkerPartitionedStrategyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_weights()) {
    weights_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.weights_);
  } else {
    weights_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&workers_per_input_) -
    reinterpret_cast<char*>(&type_)) + sizeof(workers_per_input_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskWorkerPartitionedStrategyInfo)
}

inline void TaskWorkerPartitionedStrategyInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weights_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&workers_per_input_) -
    reinterpret_cast<char*>(&weights_)) + sizeof(workers_per_input_));
}

TaskWorkerPartitionedStrategyInfo::~TaskWorkerPartitionedStrategyInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskWorkerPartitionedStrategyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete weights_;
}

void TaskWorkerPartitionedStrategyInfo::ArenaDtor(void* object) {
  TaskWorkerPartitionedStrategyInfo* _this = reinterpret_cast< TaskWorkerPartitionedStrategyInfo* >(object);
  (void)_this;
}
void TaskWorkerPartitionedStrategyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskWorkerPartitionedStrategyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskWorkerPartitionedStrategyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && weights_ != nullptr) {
    delete weights_;
  }
  weights_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workers_per_input_) -
      reinterpret_cast<char*>(&type_)) + sizeof(workers_per_input_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskWorkerPartitionedStrategyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.TaskWorkerPartitionedStrategyInfo.TaskWorkerPartitionedStrategy type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::clarifai::api::TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 workers_per_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          workers_per_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct weights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskWorkerPartitionedStrategyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.TaskWorkerPartitionedStrategyInfo.TaskWorkerPartitionedStrategy type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 workers_per_input = 2;
  if (this->_internal_workers_per_input() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_workers_per_input(), target);
  }

  // .google.protobuf.Struct weights = 3;
  if (this->_internal_has_weights()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::weights(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  return target;
}

size_t TaskWorkerPartitionedStrategyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct weights = 3;
  if (this->_internal_has_weights()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weights_);
  }

  // .clarifai.api.TaskWorkerPartitionedStrategyInfo.TaskWorkerPartitionedStrategy type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 workers_per_input = 2;
  if (this->_internal_workers_per_input() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_workers_per_input());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskWorkerPartitionedStrategyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskWorkerPartitionedStrategyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskWorkerPartitionedStrategyInfo::GetClassData() const { return &_class_data_; }

void TaskWorkerPartitionedStrategyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskWorkerPartitionedStrategyInfo *>(to)->MergeFrom(
      static_cast<const TaskWorkerPartitionedStrategyInfo &>(from));
}


void TaskWorkerPartitionedStrategyInfo::MergeFrom(const TaskWorkerPartitionedStrategyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_weights()) {
    _internal_mutable_weights()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_weights());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_workers_per_input() != 0) {
    _internal_set_workers_per_input(from._internal_workers_per_input());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskWorkerPartitionedStrategyInfo::CopyFrom(const TaskWorkerPartitionedStrategyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskWorkerPartitionedStrategyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskWorkerPartitionedStrategyInfo::IsInitialized() const {
  return true;
}

void TaskWorkerPartitionedStrategyInfo::InternalSwap(TaskWorkerPartitionedStrategyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskWorkerPartitionedStrategyInfo, workers_per_input_)
      + sizeof(TaskWorkerPartitionedStrategyInfo::workers_per_input_)
      - PROTOBUF_FIELD_OFFSET(TaskWorkerPartitionedStrategyInfo, weights_)>(
          reinterpret_cast<char*>(&weights_),
          reinterpret_cast<char*>(&other->weights_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskWorkerPartitionedStrategyInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[122]);
}

// ===================================================================

class TaskInputSource::_Internal {
 public:
};

TaskInputSource::TaskInputSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskInputSource)
}
TaskInputSource::TaskInputSource(const TaskInputSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskInputSource)
}

inline void TaskInputSource::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

TaskInputSource::~TaskInputSource() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskInputSource)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskInputSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskInputSource::ArenaDtor(void* object) {
  TaskInputSource* _this = reinterpret_cast< TaskInputSource* >(object);
  (void)_this;
}
void TaskInputSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskInputSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskInputSource::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskInputSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskInputSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.TaskInputSource.TaskInputSourceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::clarifai::api::TaskInputSource_TaskInputSourceType>(val));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TaskInputSource.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskInputSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskInputSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.TaskInputSource.TaskInputSourceType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TaskInputSource.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskInputSource)
  return target;
}

size_t TaskInputSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskInputSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.TaskInputSource.TaskInputSourceType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskInputSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskInputSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskInputSource::GetClassData() const { return &_class_data_; }

void TaskInputSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskInputSource *>(to)->MergeFrom(
      static_cast<const TaskInputSource &>(from));
}


void TaskInputSource::MergeFrom(const TaskInputSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskInputSource)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskInputSource::CopyFrom(const TaskInputSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskInputSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInputSource::IsInitialized() const {
  return true;
}

void TaskInputSource::InternalSwap(TaskInputSource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskInputSource::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[123]);
}

// ===================================================================

class TaskReview::_Internal {
 public:
  static const ::clarifai::api::TaskReviewManualStrategyInfo& manual_strategy_info(const TaskReview* msg);
  static const ::clarifai::api::TaskReviewConsensusStrategyInfo& consensus_strategy_info(const TaskReview* msg);
};

const ::clarifai::api::TaskReviewManualStrategyInfo&
TaskReview::_Internal::manual_strategy_info(const TaskReview* msg) {
  return *msg->strategy_info_.manual_strategy_info_;
}
const ::clarifai::api::TaskReviewConsensusStrategyInfo&
TaskReview::_Internal::consensus_strategy_info(const TaskReview* msg) {
  return *msg->strategy_info_.consensus_strategy_info_;
}
void TaskReview::set_allocated_manual_strategy_info(::clarifai::api::TaskReviewManualStrategyInfo* manual_strategy_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_strategy_info();
  if (manual_strategy_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::clarifai::api::TaskReviewManualStrategyInfo>::GetOwningArena(manual_strategy_info);
    if (message_arena != submessage_arena) {
      manual_strategy_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manual_strategy_info, submessage_arena);
    }
    set_has_manual_strategy_info();
    strategy_info_.manual_strategy_info_ = manual_strategy_info;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TaskReview.manual_strategy_info)
}
void TaskReview::set_allocated_consensus_strategy_info(::clarifai::api::TaskReviewConsensusStrategyInfo* consensus_strategy_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_strategy_info();
  if (consensus_strategy_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::clarifai::api::TaskReviewConsensusStrategyInfo>::GetOwningArena(consensus_strategy_info);
    if (message_arena != submessage_arena) {
      consensus_strategy_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus_strategy_info, submessage_arena);
    }
    set_has_consensus_strategy_info();
    strategy_info_.consensus_strategy_info_ = consensus_strategy_info;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TaskReview.consensus_strategy_info)
}
TaskReview::TaskReview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  user_ids_(arena),
  users_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskReview)
}
TaskReview::TaskReview(const TaskReview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_ids_(from.user_ids_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strategy_ = from.strategy_;
  clear_has_strategy_info();
  switch (from.strategy_info_case()) {
    case kManualStrategyInfo: {
      _internal_mutable_manual_strategy_info()->::clarifai::api::TaskReviewManualStrategyInfo::MergeFrom(from._internal_manual_strategy_info());
      break;
    }
    case kConsensusStrategyInfo: {
      _internal_mutable_consensus_strategy_info()->::clarifai::api::TaskReviewConsensusStrategyInfo::MergeFrom(from._internal_consensus_strategy_info());
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskReview)
}

inline void TaskReview::SharedCtor() {
strategy_ = 0;
clear_has_strategy_info();
}

TaskReview::~TaskReview() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskReview)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskReview::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_strategy_info()) {
    clear_strategy_info();
  }
}

void TaskReview::ArenaDtor(void* object) {
  TaskReview* _this = reinterpret_cast< TaskReview* >(object);
  (void)_this;
}
void TaskReview::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskReview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskReview::clear_strategy_info() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.TaskReview)
  switch (strategy_info_case()) {
    case kManualStrategyInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete strategy_info_.manual_strategy_info_;
      }
      break;
    }
    case kConsensusStrategyInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete strategy_info_.consensus_strategy_info_;
      }
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STRATEGY_INFO_NOT_SET;
}


void TaskReview::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskReview)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  users_.Clear();
  strategy_ = 0;
  clear_strategy_info();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskReview::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.TaskReview.TaskReviewStrategy strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strategy(static_cast<::clarifai::api::TaskReview_TaskReviewStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TaskReview.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TaskReviewManualStrategyInfo manual_strategy_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_manual_strategy_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TaskReviewConsensusStrategyInfo consensus_strategy_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_strategy_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.User users = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskReview::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskReview)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.TaskReview.TaskReviewStrategy strategy = 1;
  if (this->_internal_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_strategy(), target);
  }

  // repeated string user_ids = 2 [deprecated = true];
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TaskReview.user_ids");
    target = stream->WriteString(2, s, target);
  }

  // .clarifai.api.TaskReviewManualStrategyInfo manual_strategy_info = 3;
  if (_internal_has_manual_strategy_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::manual_strategy_info(this), target, stream);
  }

  // .clarifai.api.TaskReviewConsensusStrategyInfo consensus_strategy_info = 4;
  if (_internal_has_consensus_strategy_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::consensus_strategy_info(this), target, stream);
  }

  // repeated .clarifai.api.User users = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskReview)
  return target;
}

size_t TaskReview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskReview)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // repeated .clarifai.api.User users = 5;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.TaskReview.TaskReviewStrategy strategy = 1;
  if (this->_internal_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_strategy());
  }

  switch (strategy_info_case()) {
    // .clarifai.api.TaskReviewManualStrategyInfo manual_strategy_info = 3;
    case kManualStrategyInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strategy_info_.manual_strategy_info_);
      break;
    }
    // .clarifai.api.TaskReviewConsensusStrategyInfo consensus_strategy_info = 4;
    case kConsensusStrategyInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strategy_info_.consensus_strategy_info_);
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskReview::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskReview::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskReview::GetClassData() const { return &_class_data_; }

void TaskReview::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskReview *>(to)->MergeFrom(
      static_cast<const TaskReview &>(from));
}


void TaskReview::MergeFrom(const TaskReview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskReview)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  users_.MergeFrom(from.users_);
  if (from._internal_strategy() != 0) {
    _internal_set_strategy(from._internal_strategy());
  }
  switch (from.strategy_info_case()) {
    case kManualStrategyInfo: {
      _internal_mutable_manual_strategy_info()->::clarifai::api::TaskReviewManualStrategyInfo::MergeFrom(from._internal_manual_strategy_info());
      break;
    }
    case kConsensusStrategyInfo: {
      _internal_mutable_consensus_strategy_info()->::clarifai::api::TaskReviewConsensusStrategyInfo::MergeFrom(from._internal_consensus_strategy_info());
      break;
    }
    case STRATEGY_INFO_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskReview::CopyFrom(const TaskReview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskReview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskReview::IsInitialized() const {
  return true;
}

void TaskReview::InternalSwap(TaskReview* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  users_.InternalSwap(&other->users_);
  swap(strategy_, other->strategy_);
  swap(strategy_info_, other->strategy_info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskReview::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[124]);
}

// ===================================================================

class TaskReviewManualStrategyInfo::_Internal {
 public:
};

TaskReviewManualStrategyInfo::TaskReviewManualStrategyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskReviewManualStrategyInfo)
}
TaskReviewManualStrategyInfo::TaskReviewManualStrategyInfo(const TaskReviewManualStrategyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sample_percentage_ = from.sample_percentage_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskReviewManualStrategyInfo)
}

inline void TaskReviewManualStrategyInfo::SharedCtor() {
sample_percentage_ = 0;
}

TaskReviewManualStrategyInfo::~TaskReviewManualStrategyInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskReviewManualStrategyInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskReviewManualStrategyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TaskReviewManualStrategyInfo::ArenaDtor(void* object) {
  TaskReviewManualStrategyInfo* _this = reinterpret_cast< TaskReviewManualStrategyInfo* >(object);
  (void)_this;
}
void TaskReviewManualStrategyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskReviewManualStrategyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskReviewManualStrategyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskReviewManualStrategyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_percentage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskReviewManualStrategyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float sample_percentage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          sample_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskReviewManualStrategyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskReviewManualStrategyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float sample_percentage = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sample_percentage = this->_internal_sample_percentage();
  uint32_t raw_sample_percentage;
  memcpy(&raw_sample_percentage, &tmp_sample_percentage, sizeof(tmp_sample_percentage));
  if (raw_sample_percentage != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_sample_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskReviewManualStrategyInfo)
  return target;
}

size_t TaskReviewManualStrategyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskReviewManualStrategyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float sample_percentage = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sample_percentage = this->_internal_sample_percentage();
  uint32_t raw_sample_percentage;
  memcpy(&raw_sample_percentage, &tmp_sample_percentage, sizeof(tmp_sample_percentage));
  if (raw_sample_percentage != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskReviewManualStrategyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskReviewManualStrategyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskReviewManualStrategyInfo::GetClassData() const { return &_class_data_; }

void TaskReviewManualStrategyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskReviewManualStrategyInfo *>(to)->MergeFrom(
      static_cast<const TaskReviewManualStrategyInfo &>(from));
}


void TaskReviewManualStrategyInfo::MergeFrom(const TaskReviewManualStrategyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskReviewManualStrategyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sample_percentage = from._internal_sample_percentage();
  uint32_t raw_sample_percentage;
  memcpy(&raw_sample_percentage, &tmp_sample_percentage, sizeof(tmp_sample_percentage));
  if (raw_sample_percentage != 0) {
    _internal_set_sample_percentage(from._internal_sample_percentage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskReviewManualStrategyInfo::CopyFrom(const TaskReviewManualStrategyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskReviewManualStrategyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskReviewManualStrategyInfo::IsInitialized() const {
  return true;
}

void TaskReviewManualStrategyInfo::InternalSwap(TaskReviewManualStrategyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(sample_percentage_, other->sample_percentage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskReviewManualStrategyInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[125]);
}

// ===================================================================

class TaskReviewConsensusStrategyInfo::_Internal {
 public:
};

TaskReviewConsensusStrategyInfo::TaskReviewConsensusStrategyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskReviewConsensusStrategyInfo)
}
TaskReviewConsensusStrategyInfo::TaskReviewConsensusStrategyInfo(const TaskReviewConsensusStrategyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  approval_threshold_ = from.approval_threshold_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskReviewConsensusStrategyInfo)
}

inline void TaskReviewConsensusStrategyInfo::SharedCtor() {
approval_threshold_ = 0u;
}

TaskReviewConsensusStrategyInfo::~TaskReviewConsensusStrategyInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskReviewConsensusStrategyInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskReviewConsensusStrategyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TaskReviewConsensusStrategyInfo::ArenaDtor(void* object) {
  TaskReviewConsensusStrategyInfo* _this = reinterpret_cast< TaskReviewConsensusStrategyInfo* >(object);
  (void)_this;
}
void TaskReviewConsensusStrategyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskReviewConsensusStrategyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskReviewConsensusStrategyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  approval_threshold_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskReviewConsensusStrategyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 approval_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          approval_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskReviewConsensusStrategyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 approval_threshold = 2;
  if (this->_internal_approval_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_approval_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskReviewConsensusStrategyInfo)
  return target;
}

size_t TaskReviewConsensusStrategyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 approval_threshold = 2;
  if (this->_internal_approval_threshold() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_approval_threshold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskReviewConsensusStrategyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskReviewConsensusStrategyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskReviewConsensusStrategyInfo::GetClassData() const { return &_class_data_; }

void TaskReviewConsensusStrategyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskReviewConsensusStrategyInfo *>(to)->MergeFrom(
      static_cast<const TaskReviewConsensusStrategyInfo &>(from));
}


void TaskReviewConsensusStrategyInfo::MergeFrom(const TaskReviewConsensusStrategyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_approval_threshold() != 0) {
    _internal_set_approval_threshold(from._internal_approval_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskReviewConsensusStrategyInfo::CopyFrom(const TaskReviewConsensusStrategyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskReviewConsensusStrategyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskReviewConsensusStrategyInfo::IsInitialized() const {
  return true;
}

void TaskReviewConsensusStrategyInfo::InternalSwap(TaskReviewConsensusStrategyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(approval_threshold_, other->approval_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskReviewConsensusStrategyInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[126]);
}

// ===================================================================

class TaskAIAssistant::_Internal {
 public:
};

TaskAIAssistant::TaskAIAssistant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskAIAssistant)
}
TaskAIAssistant::TaskAIAssistant(const TaskAIAssistant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskAIAssistant)
}

inline void TaskAIAssistant::SharedCtor() {
workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskAIAssistant::~TaskAIAssistant() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskAIAssistant)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskAIAssistant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskAIAssistant::ArenaDtor(void* object) {
  TaskAIAssistant* _this = reinterpret_cast< TaskAIAssistant* >(object);
  (void)_this;
}
void TaskAIAssistant::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskAIAssistant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskAIAssistant::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskAIAssistant)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflow_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskAIAssistant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string workflow_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TaskAIAssistant.workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskAIAssistant::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskAIAssistant)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string workflow_id = 1;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TaskAIAssistant.workflow_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_workflow_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskAIAssistant)
  return target;
}

size_t TaskAIAssistant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskAIAssistant)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workflow_id = 1;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskAIAssistant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskAIAssistant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskAIAssistant::GetClassData() const { return &_class_data_; }

void TaskAIAssistant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskAIAssistant *>(to)->MergeFrom(
      static_cast<const TaskAIAssistant &>(from));
}


void TaskAIAssistant::MergeFrom(const TaskAIAssistant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskAIAssistant)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_workflow_id().empty()) {
    _internal_set_workflow_id(from._internal_workflow_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskAIAssistant::CopyFrom(const TaskAIAssistant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskAIAssistant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskAIAssistant::IsInitialized() const {
  return true;
}

void TaskAIAssistant::InternalSwap(TaskAIAssistant* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workflow_id_, lhs_arena,
      &other->workflow_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskAIAssistant::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[127]);
}

// ===================================================================

class TaskStatusCountPerUser::_Internal {
 public:
};

TaskStatusCountPerUser::TaskStatusCountPerUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TaskStatusCountPerUser)
}
TaskStatusCountPerUser::TaskStatusCountPerUser(const TaskStatusCountPerUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pending_, &from.pending_,
    static_cast<size_t>(reinterpret_cast<char*>(&awaiting_consensus_review_) -
    reinterpret_cast<char*>(&pending_)) + sizeof(awaiting_consensus_review_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TaskStatusCountPerUser)
}

inline void TaskStatusCountPerUser::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pending_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&awaiting_consensus_review_) -
    reinterpret_cast<char*>(&pending_)) + sizeof(awaiting_consensus_review_));
}

TaskStatusCountPerUser::~TaskStatusCountPerUser() {
  // @@protoc_insertion_point(destructor:clarifai.api.TaskStatusCountPerUser)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskStatusCountPerUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskStatusCountPerUser::ArenaDtor(void* object) {
  TaskStatusCountPerUser* _this = reinterpret_cast< TaskStatusCountPerUser* >(object);
  (void)_this;
}
void TaskStatusCountPerUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskStatusCountPerUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskStatusCountPerUser::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TaskStatusCountPerUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  ::memset(&pending_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&awaiting_consensus_review_) -
      reinterpret_cast<char*>(&pending_)) + sizeof(awaiting_consensus_review_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskStatusCountPerUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TaskStatusCountPerUser.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pending = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 awaiting_review = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          awaiting_review_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 success = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 review_denied = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          review_denied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 awaiting_consensus_review = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          awaiting_consensus_review_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskStatusCountPerUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TaskStatusCountPerUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TaskStatusCountPerUser.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // uint32 pending = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pending(), target);
  }

  // uint32 awaiting_review = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_awaiting_review() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_awaiting_review(), target);
  }

  // uint32 success = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_success(), target);
  }

  // uint32 review_denied = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_review_denied() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_review_denied(), target);
  }

  // uint32 awaiting_consensus_review = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_awaiting_consensus_review() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_awaiting_consensus_review(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TaskStatusCountPerUser)
  return target;
}

size_t TaskStatusCountPerUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TaskStatusCountPerUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // uint32 pending = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_pending() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pending());
  }

  // uint32 awaiting_review = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_awaiting_review() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_awaiting_review());
  }

  // uint32 success = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_success() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_success());
  }

  // uint32 review_denied = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_review_denied() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_review_denied());
  }

  // uint32 awaiting_consensus_review = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_awaiting_consensus_review() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_awaiting_consensus_review());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskStatusCountPerUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskStatusCountPerUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskStatusCountPerUser::GetClassData() const { return &_class_data_; }

void TaskStatusCountPerUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskStatusCountPerUser *>(to)->MergeFrom(
      static_cast<const TaskStatusCountPerUser &>(from));
}


void TaskStatusCountPerUser::MergeFrom(const TaskStatusCountPerUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TaskStatusCountPerUser)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_pending() != 0) {
    _internal_set_pending(from._internal_pending());
  }
  if (from._internal_awaiting_review() != 0) {
    _internal_set_awaiting_review(from._internal_awaiting_review());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_review_denied() != 0) {
    _internal_set_review_denied(from._internal_review_denied());
  }
  if (from._internal_awaiting_consensus_review() != 0) {
    _internal_set_awaiting_consensus_review(from._internal_awaiting_consensus_review());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskStatusCountPerUser::CopyFrom(const TaskStatusCountPerUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TaskStatusCountPerUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStatusCountPerUser::IsInitialized() const {
  return true;
}

void TaskStatusCountPerUser::InternalSwap(TaskStatusCountPerUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskStatusCountPerUser, awaiting_consensus_review_)
      + sizeof(TaskStatusCountPerUser::awaiting_consensus_review_)
      - PROTOBUF_FIELD_OFFSET(TaskStatusCountPerUser, pending_)>(
          reinterpret_cast<char*>(&pending_),
          reinterpret_cast<char*>(&other->pending_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskStatusCountPerUser::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[128]);
}

// ===================================================================

class Collector::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Collector* msg);
  static const ::clarifai::api::CollectorSource& collector_source(const Collector* msg);
  static const ::clarifai::api::status::Status& status(const Collector* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Collector::_Internal::created_at(const Collector* msg) {
  return *msg->created_at_;
}
const ::clarifai::api::CollectorSource&
Collector::_Internal::collector_source(const Collector* msg) {
  return *msg->collector_source_;
}
const ::clarifai::api::status::Status&
Collector::_Internal::status(const Collector* msg) {
  return *msg->status_;
}
void Collector::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void Collector::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
Collector::Collector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Collector)
}
Collector::Collector(const Collector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  pre_queue_workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pre_queue_workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pre_queue_workflow_id().empty()) {
    pre_queue_workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pre_queue_workflow_id(), 
      GetArenaForAllocation());
  }
  post_queue_workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    post_queue_workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_post_queue_workflow_id().empty()) {
    post_queue_workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_post_queue_workflow_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_collector_source()) {
    collector_source_ = new ::clarifai::api::CollectorSource(*from.collector_source_);
  } else {
    collector_source_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Collector)
}

inline void Collector::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pre_queue_workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pre_queue_workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
post_queue_workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  post_queue_workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(status_));
}

Collector::~Collector() {
  // @@protoc_insertion_point(destructor:clarifai.api.Collector)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Collector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre_queue_workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  post_queue_workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete collector_source_;
  if (this != internal_default_instance()) delete status_;
}

void Collector::ArenaDtor(void* object) {
  Collector* _this = reinterpret_cast< Collector* >(object);
  (void)_this;
}
void Collector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Collector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Collector::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Collector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  description_.ClearToEmpty();
  pre_queue_workflow_id_.ClearToEmpty();
  post_queue_workflow_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && collector_source_ != nullptr) {
    delete collector_source_;
  }
  collector_source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Collector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collector.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collector.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pre_queue_workflow_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pre_queue_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collector.pre_queue_workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string post_queue_workflow_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_post_queue_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.Collector.post_queue_workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.CollectorSource collector_source = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_collector_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Collector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Collector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collector.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collector.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::created_at(this), target, stream);
  }

  // string pre_queue_workflow_id = 4;
  if (!this->_internal_pre_queue_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pre_queue_workflow_id().data(), static_cast<int>(this->_internal_pre_queue_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collector.pre_queue_workflow_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pre_queue_workflow_id(), target);
  }

  // string post_queue_workflow_id = 5;
  if (!this->_internal_post_queue_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_queue_workflow_id().data(), static_cast<int>(this->_internal_post_queue_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.Collector.post_queue_workflow_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_post_queue_workflow_id(), target);
  }

  // .clarifai.api.CollectorSource collector_source = 6;
  if (this->_internal_has_collector_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::collector_source(this), target, stream);
  }

  // .clarifai.api.status.Status status = 7;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Collector)
  return target;
}

size_t Collector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Collector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string pre_queue_workflow_id = 4;
  if (!this->_internal_pre_queue_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pre_queue_workflow_id());
  }

  // string post_queue_workflow_id = 5;
  if (!this->_internal_post_queue_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_queue_workflow_id());
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .clarifai.api.CollectorSource collector_source = 6;
  if (this->_internal_has_collector_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *collector_source_);
  }

  // .clarifai.api.status.Status status = 7;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Collector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Collector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Collector::GetClassData() const { return &_class_data_; }

void Collector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Collector *>(to)->MergeFrom(
      static_cast<const Collector &>(from));
}


void Collector::MergeFrom(const Collector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Collector)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_pre_queue_workflow_id().empty()) {
    _internal_set_pre_queue_workflow_id(from._internal_pre_queue_workflow_id());
  }
  if (!from._internal_post_queue_workflow_id().empty()) {
    _internal_set_post_queue_workflow_id(from._internal_post_queue_workflow_id());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_collector_source()) {
    _internal_mutable_collector_source()->::clarifai::api::CollectorSource::MergeFrom(from._internal_collector_source());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Collector::CopyFrom(const Collector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Collector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collector::IsInitialized() const {
  return true;
}

void Collector::InternalSwap(Collector* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pre_queue_workflow_id_, lhs_arena,
      &other->pre_queue_workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &post_queue_workflow_id_, lhs_arena,
      &other->post_queue_workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Collector, status_)
      + sizeof(Collector::status_)
      - PROTOBUF_FIELD_OFFSET(Collector, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Collector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[129]);
}

// ===================================================================

class CollectorSource::_Internal {
 public:
  static const ::clarifai::api::APIPostModelOutputsCollectorSource& api_post_model_outputs_collector_source(const CollectorSource* msg);
};

const ::clarifai::api::APIPostModelOutputsCollectorSource&
CollectorSource::_Internal::api_post_model_outputs_collector_source(const CollectorSource* msg) {
  return *msg->api_post_model_outputs_collector_source_;
}
CollectorSource::CollectorSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.CollectorSource)
}
CollectorSource::CollectorSource(const CollectorSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_api_post_model_outputs_collector_source()) {
    api_post_model_outputs_collector_source_ = new ::clarifai::api::APIPostModelOutputsCollectorSource(*from.api_post_model_outputs_collector_source_);
  } else {
    api_post_model_outputs_collector_source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.CollectorSource)
}

inline void CollectorSource::SharedCtor() {
api_post_model_outputs_collector_source_ = nullptr;
}

CollectorSource::~CollectorSource() {
  // @@protoc_insertion_point(destructor:clarifai.api.CollectorSource)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CollectorSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete api_post_model_outputs_collector_source_;
}

void CollectorSource::ArenaDtor(void* object) {
  CollectorSource* _this = reinterpret_cast< CollectorSource* >(object);
  (void)_this;
}
void CollectorSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollectorSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollectorSource::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.CollectorSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && api_post_model_outputs_collector_source_ != nullptr) {
    delete api_post_model_outputs_collector_source_;
  }
  api_post_model_outputs_collector_source_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectorSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.APIPostModelOutputsCollectorSource api_post_model_outputs_collector_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_api_post_model_outputs_collector_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectorSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.CollectorSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.APIPostModelOutputsCollectorSource api_post_model_outputs_collector_source = 2;
  if (this->_internal_has_api_post_model_outputs_collector_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::api_post_model_outputs_collector_source(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.CollectorSource)
  return target;
}

size_t CollectorSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.CollectorSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.APIPostModelOutputsCollectorSource api_post_model_outputs_collector_source = 2;
  if (this->_internal_has_api_post_model_outputs_collector_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *api_post_model_outputs_collector_source_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectorSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollectorSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectorSource::GetClassData() const { return &_class_data_; }

void CollectorSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CollectorSource *>(to)->MergeFrom(
      static_cast<const CollectorSource &>(from));
}


void CollectorSource::MergeFrom(const CollectorSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.CollectorSource)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_api_post_model_outputs_collector_source()) {
    _internal_mutable_api_post_model_outputs_collector_source()->::clarifai::api::APIPostModelOutputsCollectorSource::MergeFrom(from._internal_api_post_model_outputs_collector_source());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectorSource::CopyFrom(const CollectorSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.CollectorSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectorSource::IsInitialized() const {
  return true;
}

void CollectorSource::InternalSwap(CollectorSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(api_post_model_outputs_collector_source_, other->api_post_model_outputs_collector_source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectorSource::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[130]);
}

// ===================================================================

class APIPostModelOutputsCollectorSource::_Internal {
 public:
};

APIPostModelOutputsCollectorSource::APIPostModelOutputsCollectorSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.APIPostModelOutputsCollectorSource)
}
APIPostModelOutputsCollectorSource::APIPostModelOutputsCollectorSource(const APIPostModelOutputsCollectorSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_user_id().empty()) {
    model_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_user_id(), 
      GetArenaForAllocation());
  }
  model_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_app_id().empty()) {
    model_app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_app_id(), 
      GetArenaForAllocation());
  }
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_version_id(), 
      GetArenaForAllocation());
  }
  post_inputs_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    post_inputs_key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_post_inputs_key_id().empty()) {
    post_inputs_key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_post_inputs_key_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.APIPostModelOutputsCollectorSource)
}

inline void APIPostModelOutputsCollectorSource::SharedCtor() {
model_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
post_inputs_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  post_inputs_key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

APIPostModelOutputsCollectorSource::~APIPostModelOutputsCollectorSource() {
  // @@protoc_insertion_point(destructor:clarifai.api.APIPostModelOutputsCollectorSource)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void APIPostModelOutputsCollectorSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  post_inputs_key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void APIPostModelOutputsCollectorSource::ArenaDtor(void* object) {
  APIPostModelOutputsCollectorSource* _this = reinterpret_cast< APIPostModelOutputsCollectorSource* >(object);
  (void)_this;
}
void APIPostModelOutputsCollectorSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void APIPostModelOutputsCollectorSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void APIPostModelOutputsCollectorSource::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.APIPostModelOutputsCollectorSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_user_id_.ClearToEmpty();
  model_app_id_.ClearToEmpty();
  model_id_.ClearToEmpty();
  model_version_id_.ClearToEmpty();
  post_inputs_key_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APIPostModelOutputsCollectorSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.APIPostModelOutputsCollectorSource.model_user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.APIPostModelOutputsCollectorSource.model_app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.APIPostModelOutputsCollectorSource.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.APIPostModelOutputsCollectorSource.model_version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string post_inputs_key_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_post_inputs_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APIPostModelOutputsCollectorSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.APIPostModelOutputsCollectorSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_user_id = 1;
  if (!this->_internal_model_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_user_id().data(), static_cast<int>(this->_internal_model_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.APIPostModelOutputsCollectorSource.model_user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_user_id(), target);
  }

  // string model_app_id = 2;
  if (!this->_internal_model_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_app_id().data(), static_cast<int>(this->_internal_model_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.APIPostModelOutputsCollectorSource.model_app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_app_id(), target);
  }

  // string model_id = 3;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.APIPostModelOutputsCollectorSource.model_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_id(), target);
  }

  // string model_version_id = 4;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.APIPostModelOutputsCollectorSource.model_version_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model_version_id(), target);
  }

  // string post_inputs_key_id = 5;
  if (!this->_internal_post_inputs_key_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_post_inputs_key_id().data(), static_cast<int>(this->_internal_post_inputs_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_post_inputs_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.APIPostModelOutputsCollectorSource)
  return target;
}

size_t APIPostModelOutputsCollectorSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.APIPostModelOutputsCollectorSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_user_id = 1;
  if (!this->_internal_model_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_user_id());
  }

  // string model_app_id = 2;
  if (!this->_internal_model_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_app_id());
  }

  // string model_id = 3;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_version_id = 4;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // string post_inputs_key_id = 5;
  if (!this->_internal_post_inputs_key_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_post_inputs_key_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APIPostModelOutputsCollectorSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    APIPostModelOutputsCollectorSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APIPostModelOutputsCollectorSource::GetClassData() const { return &_class_data_; }

void APIPostModelOutputsCollectorSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<APIPostModelOutputsCollectorSource *>(to)->MergeFrom(
      static_cast<const APIPostModelOutputsCollectorSource &>(from));
}


void APIPostModelOutputsCollectorSource::MergeFrom(const APIPostModelOutputsCollectorSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.APIPostModelOutputsCollectorSource)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_user_id().empty()) {
    _internal_set_model_user_id(from._internal_model_user_id());
  }
  if (!from._internal_model_app_id().empty()) {
    _internal_set_model_app_id(from._internal_model_app_id());
  }
  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_model_version_id().empty()) {
    _internal_set_model_version_id(from._internal_model_version_id());
  }
  if (!from._internal_post_inputs_key_id().empty()) {
    _internal_set_post_inputs_key_id(from._internal_post_inputs_key_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APIPostModelOutputsCollectorSource::CopyFrom(const APIPostModelOutputsCollectorSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.APIPostModelOutputsCollectorSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APIPostModelOutputsCollectorSource::IsInitialized() const {
  return true;
}

void APIPostModelOutputsCollectorSource::InternalSwap(APIPostModelOutputsCollectorSource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_user_id_, lhs_arena,
      &other->model_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_app_id_, lhs_arena,
      &other->model_app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_version_id_, lhs_arena,
      &other->model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &post_inputs_key_id_, lhs_arena,
      &other->post_inputs_key_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata APIPostModelOutputsCollectorSource::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[131]);
}

// ===================================================================

class StatValue::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const StatValue* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StatValue::_Internal::time(const StatValue* msg) {
  return *msg->time_;
}
void StatValue::clear_time() {
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
StatValue::StatValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.StatValue)
}
StatValue::StatValue(const StatValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time()) {
    time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StatValue)
}

inline void StatValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&time_)) + sizeof(value_));
}

StatValue::~StatValue() {
  // @@protoc_insertion_point(destructor:clarifai.api.StatValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete time_;
}

void StatValue::ArenaDtor(void* object) {
  StatValue* _this = reinterpret_cast< StatValue* >(object);
  (void)_this;
}
void StatValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatValue::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StatValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.StatValue.tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StatValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // float value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  // repeated string tags = 3;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StatValue.tags");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StatValue)
  return target;
}

size_t StatValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StatValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // float value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatValue::GetClassData() const { return &_class_data_; }

void StatValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatValue *>(to)->MergeFrom(
      static_cast<const StatValue &>(from));
}


void StatValue::MergeFrom(const StatValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StatValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from._internal_has_time()) {
    _internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatValue::CopyFrom(const StatValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StatValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatValue::IsInitialized() const {
  return true;
}

void StatValue::InternalSwap(StatValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatValue, value_)
      + sizeof(StatValue::value_)
      - PROTOBUF_FIELD_OFFSET(StatValue, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[132]);
}

// ===================================================================

class StatValueAggregateResult::_Internal {
 public:
  static const ::clarifai::api::StatValueAggregateQuery& stat_value_aggregate_query(const StatValueAggregateResult* msg);
};

const ::clarifai::api::StatValueAggregateQuery&
StatValueAggregateResult::_Internal::stat_value_aggregate_query(const StatValueAggregateResult* msg) {
  return *msg->stat_value_aggregate_query_;
}
StatValueAggregateResult::StatValueAggregateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stat_value_aggregates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.StatValueAggregateResult)
}
StatValueAggregateResult::StatValueAggregateResult(const StatValueAggregateResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stat_value_aggregates_(from.stat_value_aggregates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stat_value_aggregate_query()) {
    stat_value_aggregate_query_ = new ::clarifai::api::StatValueAggregateQuery(*from.stat_value_aggregate_query_);
  } else {
    stat_value_aggregate_query_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StatValueAggregateResult)
}

inline void StatValueAggregateResult::SharedCtor() {
stat_value_aggregate_query_ = nullptr;
}

StatValueAggregateResult::~StatValueAggregateResult() {
  // @@protoc_insertion_point(destructor:clarifai.api.StatValueAggregateResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatValueAggregateResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete stat_value_aggregate_query_;
}

void StatValueAggregateResult::ArenaDtor(void* object) {
  StatValueAggregateResult* _this = reinterpret_cast< StatValueAggregateResult* >(object);
  (void)_this;
}
void StatValueAggregateResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatValueAggregateResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatValueAggregateResult::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StatValueAggregateResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_value_aggregates_.Clear();
  if (GetArenaForAllocation() == nullptr && stat_value_aggregate_query_ != nullptr) {
    delete stat_value_aggregate_query_;
  }
  stat_value_aggregate_query_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatValueAggregateResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .clarifai.api.StatValueAggregate stat_value_aggregates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_value_aggregates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.StatValueAggregateQuery stat_value_aggregate_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat_value_aggregate_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatValueAggregateResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StatValueAggregateResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValueAggregate stat_value_aggregates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_value_aggregates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stat_value_aggregates(i), target, stream);
  }

  // .clarifai.api.StatValueAggregateQuery stat_value_aggregate_query = 2;
  if (this->_internal_has_stat_value_aggregate_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stat_value_aggregate_query(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StatValueAggregateResult)
  return target;
}

size_t StatValueAggregateResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StatValueAggregateResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValueAggregate stat_value_aggregates = 1;
  total_size += 1UL * this->_internal_stat_value_aggregates_size();
  for (const auto& msg : this->stat_value_aggregates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.StatValueAggregateQuery stat_value_aggregate_query = 2;
  if (this->_internal_has_stat_value_aggregate_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stat_value_aggregate_query_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatValueAggregateResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatValueAggregateResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatValueAggregateResult::GetClassData() const { return &_class_data_; }

void StatValueAggregateResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatValueAggregateResult *>(to)->MergeFrom(
      static_cast<const StatValueAggregateResult &>(from));
}


void StatValueAggregateResult::MergeFrom(const StatValueAggregateResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StatValueAggregateResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stat_value_aggregates_.MergeFrom(from.stat_value_aggregates_);
  if (from._internal_has_stat_value_aggregate_query()) {
    _internal_mutable_stat_value_aggregate_query()->::clarifai::api::StatValueAggregateQuery::MergeFrom(from._internal_stat_value_aggregate_query());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatValueAggregateResult::CopyFrom(const StatValueAggregateResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StatValueAggregateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatValueAggregateResult::IsInitialized() const {
  return true;
}

void StatValueAggregateResult::InternalSwap(StatValueAggregateResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stat_value_aggregates_.InternalSwap(&other->stat_value_aggregates_);
  swap(stat_value_aggregate_query_, other->stat_value_aggregate_query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatValueAggregateResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[133]);
}

// ===================================================================

class StatValueAggregate::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const StatValueAggregate* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StatValueAggregate::_Internal::time(const StatValueAggregate* msg) {
  return *msg->time_;
}
void StatValueAggregate::clear_time() {
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
StatValueAggregate::StatValueAggregate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.StatValueAggregate)
}
StatValueAggregate::StatValueAggregate(const StatValueAggregate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time()) {
    time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&aggregate_value_) -
    reinterpret_cast<char*>(&count_)) + sizeof(aggregate_value_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StatValueAggregate)
}

inline void StatValueAggregate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aggregate_value_) -
    reinterpret_cast<char*>(&time_)) + sizeof(aggregate_value_));
}

StatValueAggregate::~StatValueAggregate() {
  // @@protoc_insertion_point(destructor:clarifai.api.StatValueAggregate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatValueAggregate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete time_;
}

void StatValueAggregate::ArenaDtor(void* object) {
  StatValueAggregate* _this = reinterpret_cast< StatValueAggregate* >(object);
  (void)_this;
}
void StatValueAggregate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatValueAggregate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatValueAggregate::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StatValueAggregate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggregate_value_) -
      reinterpret_cast<char*>(&count_)) + sizeof(aggregate_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatValueAggregate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float aggregate_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          aggregate_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.StatValueAggregate.tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatValueAggregate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StatValueAggregate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // float aggregate_value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_aggregate_value = this->_internal_aggregate_value();
  uint32_t raw_aggregate_value;
  memcpy(&raw_aggregate_value, &tmp_aggregate_value, sizeof(tmp_aggregate_value));
  if (raw_aggregate_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_aggregate_value(), target);
  }

  // uint64 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_count(), target);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StatValueAggregate.tags");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StatValueAggregate)
  return target;
}

size_t StatValueAggregate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StatValueAggregate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // uint64 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  // float aggregate_value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_aggregate_value = this->_internal_aggregate_value();
  uint32_t raw_aggregate_value;
  memcpy(&raw_aggregate_value, &tmp_aggregate_value, sizeof(tmp_aggregate_value));
  if (raw_aggregate_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatValueAggregate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatValueAggregate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatValueAggregate::GetClassData() const { return &_class_data_; }

void StatValueAggregate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatValueAggregate *>(to)->MergeFrom(
      static_cast<const StatValueAggregate &>(from));
}


void StatValueAggregate::MergeFrom(const StatValueAggregate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StatValueAggregate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from._internal_has_time()) {
    _internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_aggregate_value = from._internal_aggregate_value();
  uint32_t raw_aggregate_value;
  memcpy(&raw_aggregate_value, &tmp_aggregate_value, sizeof(tmp_aggregate_value));
  if (raw_aggregate_value != 0) {
    _internal_set_aggregate_value(from._internal_aggregate_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatValueAggregate::CopyFrom(const StatValueAggregate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StatValueAggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatValueAggregate::IsInitialized() const {
  return true;
}

void StatValueAggregate::InternalSwap(StatValueAggregate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatValueAggregate, aggregate_value_)
      + sizeof(StatValueAggregate::aggregate_value_)
      - PROTOBUF_FIELD_OFFSET(StatValueAggregate, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatValueAggregate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[134]);
}

// ===================================================================

class StatValueAggregateQuery::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const StatValueAggregateQuery* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const StatValueAggregateQuery* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StatValueAggregateQuery::_Internal::start_time(const StatValueAggregateQuery* msg) {
  return *msg->start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StatValueAggregateQuery::_Internal::end_time(const StatValueAggregateQuery* msg) {
  return *msg->end_time_;
}
void StatValueAggregateQuery::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void StatValueAggregateQuery::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
StatValueAggregateQuery::StatValueAggregateQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena),
  tag_groups_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.StatValueAggregateQuery)
}
StatValueAggregateQuery::StatValueAggregateQuery(const StatValueAggregateQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_),
      tag_groups_(from.tag_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  ::memcpy(&stat_value_agg_type_, &from.stat_value_agg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_time_agg_type_) -
    reinterpret_cast<char*>(&stat_value_agg_type_)) + sizeof(stat_time_agg_type_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StatValueAggregateQuery)
}

inline void StatValueAggregateQuery::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stat_time_agg_type_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(stat_time_agg_type_));
}

StatValueAggregateQuery::~StatValueAggregateQuery() {
  // @@protoc_insertion_point(destructor:clarifai.api.StatValueAggregateQuery)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatValueAggregateQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void StatValueAggregateQuery::ArenaDtor(void* object) {
  StatValueAggregateQuery* _this = reinterpret_cast< StatValueAggregateQuery* >(object);
  (void)_this;
}
void StatValueAggregateQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatValueAggregateQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatValueAggregateQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StatValueAggregateQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  tag_groups_.Clear();
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  ::memset(&stat_value_agg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stat_time_agg_type_) -
      reinterpret_cast<char*>(&stat_value_agg_type_)) + sizeof(stat_time_agg_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatValueAggregateQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.StatValueAggregateQuery.tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tag_groups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tag_groups();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.StatValueAggregateQuery.tag_groups"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.StatValueAggType stat_value_agg_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stat_value_agg_type(static_cast<::clarifai::api::StatValueAggType>(val));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.StatTimeAggType stat_time_agg_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stat_time_agg_type(static_cast<::clarifai::api::StatTimeAggType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatValueAggregateQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StatValueAggregateQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tags = 1;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StatValueAggregateQuery.tags");
    target = stream->WriteString(1, s, target);
  }

  // repeated string tag_groups = 2;
  for (int i = 0, n = this->_internal_tag_groups_size(); i < n; i++) {
    const auto& s = this->_internal_tag_groups(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StatValueAggregateQuery.tag_groups");
    target = stream->WriteString(2, s, target);
  }

  // .clarifai.api.StatValueAggType stat_value_agg_type = 3;
  if (this->_internal_stat_value_agg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_stat_value_agg_type(), target);
  }

  // .clarifai.api.StatTimeAggType stat_time_agg_type = 4;
  if (this->_internal_stat_time_agg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_stat_time_agg_type(), target);
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->_internal_has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->_internal_has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::end_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StatValueAggregateQuery)
  return target;
}

size_t StatValueAggregateQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StatValueAggregateQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // repeated string tag_groups = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tag_groups_.size());
  for (int i = 0, n = tag_groups_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tag_groups_.Get(i));
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // .clarifai.api.StatValueAggType stat_value_agg_type = 3;
  if (this->_internal_stat_value_agg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stat_value_agg_type());
  }

  // .clarifai.api.StatTimeAggType stat_time_agg_type = 4;
  if (this->_internal_stat_time_agg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stat_time_agg_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatValueAggregateQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatValueAggregateQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatValueAggregateQuery::GetClassData() const { return &_class_data_; }

void StatValueAggregateQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatValueAggregateQuery *>(to)->MergeFrom(
      static_cast<const StatValueAggregateQuery &>(from));
}


void StatValueAggregateQuery::MergeFrom(const StatValueAggregateQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StatValueAggregateQuery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  tag_groups_.MergeFrom(from.tag_groups_);
  if (from._internal_has_start_time()) {
    _internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
  if (from._internal_stat_value_agg_type() != 0) {
    _internal_set_stat_value_agg_type(from._internal_stat_value_agg_type());
  }
  if (from._internal_stat_time_agg_type() != 0) {
    _internal_set_stat_time_agg_type(from._internal_stat_time_agg_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatValueAggregateQuery::CopyFrom(const StatValueAggregateQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StatValueAggregateQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatValueAggregateQuery::IsInitialized() const {
  return true;
}

void StatValueAggregateQuery::InternalSwap(StatValueAggregateQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  tag_groups_.InternalSwap(&other->tag_groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatValueAggregateQuery, stat_time_agg_type_)
      + sizeof(StatValueAggregateQuery::stat_time_agg_type_)
      - PROTOBUF_FIELD_OFFSET(StatValueAggregateQuery, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatValueAggregateQuery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[135]);
}

// ===================================================================

class DatasetInputsSearchAddJob::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const DatasetInputsSearchAddJob* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const DatasetInputsSearchAddJob* msg);
  static const ::clarifai::api::status::Status& status(const DatasetInputsSearchAddJob* msg);
  static const ::clarifai::api::Search& search(const DatasetInputsSearchAddJob* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DatasetInputsSearchAddJob::_Internal::created_at(const DatasetInputsSearchAddJob* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DatasetInputsSearchAddJob::_Internal::modified_at(const DatasetInputsSearchAddJob* msg) {
  return *msg->modified_at_;
}
const ::clarifai::api::status::Status&
DatasetInputsSearchAddJob::_Internal::status(const DatasetInputsSearchAddJob* msg) {
  return *msg->status_;
}
const ::clarifai::api::Search&
DatasetInputsSearchAddJob::_Internal::search(const DatasetInputsSearchAddJob* msg) {
  return *msg->search_;
}
void DatasetInputsSearchAddJob::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void DatasetInputsSearchAddJob::clear_modified_at() {
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void DatasetInputsSearchAddJob::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DatasetInputsSearchAddJob::DatasetInputsSearchAddJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DatasetInputsSearchAddJob)
}
DatasetInputsSearchAddJob::DatasetInputsSearchAddJob(const DatasetInputsSearchAddJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_search()) {
    search_ = new ::clarifai::api::Search(*from.search_);
  } else {
    search_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DatasetInputsSearchAddJob)
}

inline void DatasetInputsSearchAddJob::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&search_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(search_));
}

DatasetInputsSearchAddJob::~DatasetInputsSearchAddJob() {
  // @@protoc_insertion_point(destructor:clarifai.api.DatasetInputsSearchAddJob)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DatasetInputsSearchAddJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete search_;
}

void DatasetInputsSearchAddJob::ArenaDtor(void* object) {
  DatasetInputsSearchAddJob* _this = reinterpret_cast< DatasetInputsSearchAddJob* >(object);
  (void)_this;
}
void DatasetInputsSearchAddJob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DatasetInputsSearchAddJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DatasetInputsSearchAddJob::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DatasetInputsSearchAddJob)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetInputsSearchAddJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DatasetInputsSearchAddJob.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DatasetInputsSearchAddJob.dataset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search search = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetInputsSearchAddJob::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DatasetInputsSearchAddJob)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetInputsSearchAddJob.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::modified_at(this), target, stream);
  }

  // .clarifai.api.status.Status status = 4;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  // string dataset_id = 5;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DatasetInputsSearchAddJob.dataset_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dataset_id(), target);
  }

  // .clarifai.api.Search search = 6;
  if (this->_internal_has_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::search(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DatasetInputsSearchAddJob)
  return target;
}

size_t DatasetInputsSearchAddJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DatasetInputsSearchAddJob)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string dataset_id = 5;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 3;
  if (this->_internal_has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.status.Status status = 4;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Search search = 6;
  if (this->_internal_has_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetInputsSearchAddJob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DatasetInputsSearchAddJob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetInputsSearchAddJob::GetClassData() const { return &_class_data_; }

void DatasetInputsSearchAddJob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DatasetInputsSearchAddJob *>(to)->MergeFrom(
      static_cast<const DatasetInputsSearchAddJob &>(from));
}


void DatasetInputsSearchAddJob::MergeFrom(const DatasetInputsSearchAddJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DatasetInputsSearchAddJob)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_dataset_id().empty()) {
    _internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_has_modified_at()) {
    _internal_mutable_modified_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_search()) {
    _internal_mutable_search()->::clarifai::api::Search::MergeFrom(from._internal_search());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetInputsSearchAddJob::CopyFrom(const DatasetInputsSearchAddJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DatasetInputsSearchAddJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetInputsSearchAddJob::IsInitialized() const {
  return true;
}

void DatasetInputsSearchAddJob::InternalSwap(DatasetInputsSearchAddJob* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_id_, lhs_arena,
      &other->dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetInputsSearchAddJob, search_)
      + sizeof(DatasetInputsSearchAddJob::search_)
      - PROTOBUF_FIELD_OFFSET(DatasetInputsSearchAddJob, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetInputsSearchAddJob::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[136]);
}

// ===================================================================

class Visibility::_Internal {
 public:
};

Visibility::Visibility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Visibility)
}
Visibility::Visibility(const Visibility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gettable_ = from.gettable_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Visibility)
}

inline void Visibility::SharedCtor() {
gettable_ = 0;
}

Visibility::~Visibility() {
  // @@protoc_insertion_point(destructor:clarifai.api.Visibility)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Visibility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Visibility::ArenaDtor(void* object) {
  Visibility* _this = reinterpret_cast< Visibility* >(object);
  (void)_this;
}
void Visibility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Visibility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Visibility::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Visibility)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gettable_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Visibility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.Visibility.Gettable gettable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gettable(static_cast<::clarifai::api::Visibility_Gettable>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Visibility::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Visibility)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Visibility.Gettable gettable = 1;
  if (this->_internal_gettable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gettable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Visibility)
  return target;
}

size_t Visibility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Visibility)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.Visibility.Gettable gettable = 1;
  if (this->_internal_gettable() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gettable());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Visibility::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Visibility::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Visibility::GetClassData() const { return &_class_data_; }

void Visibility::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Visibility *>(to)->MergeFrom(
      static_cast<const Visibility &>(from));
}


void Visibility::MergeFrom(const Visibility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Visibility)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gettable() != 0) {
    _internal_set_gettable(from._internal_gettable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Visibility::CopyFrom(const Visibility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Visibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visibility::IsInitialized() const {
  return true;
}

void Visibility::InternalSwap(Visibility* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(gettable_, other->gettable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Visibility::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[137]);
}

// ===================================================================

class TrendingMetric::_Internal {
 public:
};

TrendingMetric::TrendingMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TrendingMetric)
}
TrendingMetric::TrendingMetric(const TrendingMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object_id().empty()) {
    object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_id(), 
      GetArenaForAllocation());
  }
  view_count_ = from.view_count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TrendingMetric)
}

inline void TrendingMetric::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
view_count_ = uint64_t{0u};
}

TrendingMetric::~TrendingMetric() {
  // @@protoc_insertion_point(destructor:clarifai.api.TrendingMetric)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrendingMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrendingMetric::ArenaDtor(void* object) {
  TrendingMetric* _this = reinterpret_cast< TrendingMetric* >(object);
  (void)_this;
}
void TrendingMetric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrendingMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrendingMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TrendingMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  app_id_.ClearToEmpty();
  object_id_.ClearToEmpty();
  view_count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrendingMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TrendingMetric.user_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TrendingMetric.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_object_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TrendingMetric.object_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 view_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          view_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrendingMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TrendingMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TrendingMetric.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TrendingMetric.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // string object_id = 3;
  if (!this->_internal_object_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object_id().data(), static_cast<int>(this->_internal_object_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TrendingMetric.object_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_object_id(), target);
  }

  // uint64 view_count = 4;
  if (this->_internal_view_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_view_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TrendingMetric)
  return target;
}

size_t TrendingMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TrendingMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string object_id = 3;
  if (!this->_internal_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object_id());
  }

  // uint64 view_count = 4;
  if (this->_internal_view_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_view_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrendingMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrendingMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrendingMetric::GetClassData() const { return &_class_data_; }

void TrendingMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrendingMetric *>(to)->MergeFrom(
      static_cast<const TrendingMetric &>(from));
}


void TrendingMetric::MergeFrom(const TrendingMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TrendingMetric)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_object_id().empty()) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_view_count() != 0) {
    _internal_set_view_count(from._internal_view_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrendingMetric::CopyFrom(const TrendingMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TrendingMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendingMetric::IsInitialized() const {
  return true;
}

void TrendingMetric::InternalSwap(TrendingMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &object_id_, lhs_arena,
      &other->object_id_, rhs_arena
  );
  swap(view_count_, other->view_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrendingMetric::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[138]);
}

// ===================================================================

class TimeSegment::_Internal {
 public:
  static const ::clarifai::api::Data& data(const TimeSegment* msg);
  static const ::clarifai::api::TimeInfo& time_info(const TimeSegment* msg);
};

const ::clarifai::api::Data&
TimeSegment::_Internal::data(const TimeSegment* msg) {
  return *msg->data_;
}
const ::clarifai::api::TimeInfo&
TimeSegment::_Internal::time_info(const TimeSegment* msg) {
  return *msg->time_info_;
}
TimeSegment::TimeSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TimeSegment)
}
TimeSegment::TimeSegment(const TimeSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_time_info()) {
    time_info_ = new ::clarifai::api::TimeInfo(*from.time_info_);
  } else {
    time_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TimeSegment)
}

inline void TimeSegment::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_info_) -
    reinterpret_cast<char*>(&data_)) + sizeof(time_info_));
}

TimeSegment::~TimeSegment() {
  // @@protoc_insertion_point(destructor:clarifai.api.TimeSegment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TimeSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete time_info_;
}

void TimeSegment::ArenaDtor(void* object) {
  TimeSegment* _this = reinterpret_cast< TimeSegment* >(object);
  (void)_this;
}
void TimeSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TimeSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && time_info_ != nullptr) {
    delete time_info_;
  }
  time_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TimeSegment.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.TimeInfo time_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TimeSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TimeSegment.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // .clarifai.api.TimeInfo time_info = 3;
  if (this->_internal_has_time_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TimeSegment)
  return target;
}

size_t TimeSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TimeSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.Data data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .clarifai.api.TimeInfo time_info = 3;
  if (this->_internal_has_time_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimeSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeSegment::GetClassData() const { return &_class_data_; }

void TimeSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TimeSegment *>(to)->MergeFrom(
      static_cast<const TimeSegment &>(from));
}


void TimeSegment::MergeFrom(const TimeSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TimeSegment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (from._internal_has_time_info()) {
    _internal_mutable_time_info()->::clarifai::api::TimeInfo::MergeFrom(from._internal_time_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeSegment::CopyFrom(const TimeSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TimeSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSegment::IsInitialized() const {
  return true;
}

void TimeSegment::InternalSwap(TimeSegment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSegment, time_info_)
      + sizeof(TimeSegment::time_info_)
      - PROTOBUF_FIELD_OFFSET(TimeSegment, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[139]);
}

// ===================================================================

class TimeInfo::_Internal {
 public:
};

TimeInfo::TimeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.TimeInfo)
}
TimeInfo::TimeInfo(const TimeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_frames_, &from.num_frames_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&num_frames_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TimeInfo)
}

inline void TimeInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_frames_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&num_frames_)) + sizeof(end_time_));
}

TimeInfo::~TimeInfo() {
  // @@protoc_insertion_point(destructor:clarifai.api.TimeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TimeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeInfo::ArenaDtor(void* object) {
  TimeInfo* _this = reinterpret_cast< TimeInfo* >(object);
  (void)_this;
}
void TimeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TimeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_frames_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&num_frames_)) + sizeof(end_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 num_frames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          num_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 begin_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TimeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_frames = 1;
  if (this->_internal_num_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_frames(), target);
  }

  // uint32 begin_time = 2;
  if (this->_internal_begin_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_begin_time(), target);
  }

  // uint32 end_time = 3;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TimeInfo)
  return target;
}

size_t TimeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TimeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 num_frames = 1;
  if (this->_internal_num_frames() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_frames());
  }

  // uint32 begin_time = 2;
  if (this->_internal_begin_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_begin_time());
  }

  // uint32 end_time = 3;
  if (this->_internal_end_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_end_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeInfo::GetClassData() const { return &_class_data_; }

void TimeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TimeInfo *>(to)->MergeFrom(
      static_cast<const TimeInfo &>(from));
}


void TimeInfo::MergeFrom(const TimeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TimeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num_frames() != 0) {
    _internal_set_num_frames(from._internal_num_frames());
  }
  if (from._internal_begin_time() != 0) {
    _internal_set_begin_time(from._internal_begin_time());
  }
  if (from._internal_end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeInfo::CopyFrom(const TimeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeInfo::IsInitialized() const {
  return true;
}

void TimeInfo::InternalSwap(TimeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeInfo, end_time_)
      + sizeof(TimeInfo::end_time_)
      - PROTOBUF_FIELD_OFFSET(TimeInfo, num_frames_)>(
          reinterpret_cast<char*>(&num_frames_),
          reinterpret_cast<char*>(&other->num_frames_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fresources_2eproto[140]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::api::Annotation* Arena::CreateMaybeMessage< ::clarifai::api::Annotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Annotation >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::App* Arena::CreateMaybeMessage< ::clarifai::api::App >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::App >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AppQuery* Arena::CreateMaybeMessage< ::clarifai::api::AppQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AppQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Collaborator* Arena::CreateMaybeMessage< ::clarifai::api::Collaborator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Collaborator >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Collaboration* Arena::CreateMaybeMessage< ::clarifai::api::Collaboration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Collaboration >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Audio* Arena::CreateMaybeMessage< ::clarifai::api::Audio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Audio >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AudioInfo* Arena::CreateMaybeMessage< ::clarifai::api::AudioInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AudioInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Track* Arena::CreateMaybeMessage< ::clarifai::api::Track >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Track >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Cluster* Arena::CreateMaybeMessage< ::clarifai::api::Cluster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Cluster >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Color* Arena::CreateMaybeMessage< ::clarifai::api::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::W3C* Arena::CreateMaybeMessage< ::clarifai::api::W3C >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::W3C >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::UserAppIDSet* Arena::CreateMaybeMessage< ::clarifai::api::UserAppIDSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::UserAppIDSet >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAction* Arena::CreateMaybeMessage< ::clarifai::api::PatchAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAction >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Concept* Arena::CreateMaybeMessage< ::clarifai::api::Concept >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Concept >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptCount* Arena::CreateMaybeMessage< ::clarifai::api::ConceptCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConceptCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptTypeCount* Arena::CreateMaybeMessage< ::clarifai::api::ConceptTypeCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConceptTypeCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DetailConceptCount* Arena::CreateMaybeMessage< ::clarifai::api::DetailConceptCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DetailConceptCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptQuery* Arena::CreateMaybeMessage< ::clarifai::api::ConceptQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConceptQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptRelation* Arena::CreateMaybeMessage< ::clarifai::api::ConceptRelation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConceptRelation >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::KnowledgeGraph* Arena::CreateMaybeMessage< ::clarifai::api::KnowledgeGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::KnowledgeGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptMappingJob* Arena::CreateMaybeMessage< ::clarifai::api::ConceptMappingJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConceptMappingJob >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptLanguage* Arena::CreateMaybeMessage< ::clarifai::api::ConceptLanguage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConceptLanguage >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Data* Arena::CreateMaybeMessage< ::clarifai::api::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Data >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Region* Arena::CreateMaybeMessage< ::clarifai::api::Region >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Region >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::RegionInfo* Arena::CreateMaybeMessage< ::clarifai::api::RegionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::RegionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::BoundingBox* Arena::CreateMaybeMessage< ::clarifai::api::BoundingBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::BoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::FrameInfo* Arena::CreateMaybeMessage< ::clarifai::api::FrameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::FrameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Frame* Arena::CreateMaybeMessage< ::clarifai::api::Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Mask* Arena::CreateMaybeMessage< ::clarifai::api::Mask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Mask >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Polygon* Arena::CreateMaybeMessage< ::clarifai::api::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Point* Arena::CreateMaybeMessage< ::clarifai::api::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Span* Arena::CreateMaybeMessage< ::clarifai::api::Span >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Span >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Token* Arena::CreateMaybeMessage< ::clarifai::api::Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Token >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Embedding* Arena::CreateMaybeMessage< ::clarifai::api::Embedding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Embedding >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GeoPoint* Arena::CreateMaybeMessage< ::clarifai::api::GeoPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GeoPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GeoLimit* Arena::CreateMaybeMessage< ::clarifai::api::GeoLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GeoLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GeoBoxedPoint* Arena::CreateMaybeMessage< ::clarifai::api::GeoBoxedPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GeoBoxedPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Geo* Arena::CreateMaybeMessage< ::clarifai::api::Geo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Geo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Image* Arena::CreateMaybeMessage< ::clarifai::api::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ImageInfo* Arena::CreateMaybeMessage< ::clarifai::api::ImageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ImageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::HostedURL* Arena::CreateMaybeMessage< ::clarifai::api::HostedURL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::HostedURL >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Input* Arena::CreateMaybeMessage< ::clarifai::api::Input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Input >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::InputCount* Arena::CreateMaybeMessage< ::clarifai::api::InputCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::InputCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Dataset* Arena::CreateMaybeMessage< ::clarifai::api::Dataset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Dataset >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AnnotationFilter* Arena::CreateMaybeMessage< ::clarifai::api::AnnotationFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AnnotationFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetInput* Arena::CreateMaybeMessage< ::clarifai::api::DatasetInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetInput >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse* Arena::CreateMaybeMessage< ::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetVersion_MetricsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetVersion* Arena::CreateMaybeMessage< ::clarifai::api::DatasetVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AnnotationFilterConfig* Arena::CreateMaybeMessage< ::clarifai::api::AnnotationFilterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AnnotationFilterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetVersionMetrics* Arena::CreateMaybeMessage< ::clarifai::api::DatasetVersionMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetVersionMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetVersionMetricsGroup* Arena::CreateMaybeMessage< ::clarifai::api::DatasetVersionMetricsGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetVersionMetricsGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowResultsSimilarity* Arena::CreateMaybeMessage< ::clarifai::api::WorkflowResultsSimilarity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::WorkflowResultsSimilarity >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Key* Arena::CreateMaybeMessage< ::clarifai::api::Key >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Key >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Model* Arena::CreateMaybeMessage< ::clarifai::api::Model >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Model >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelReference* Arena::CreateMaybeMessage< ::clarifai::api::ModelReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelReference >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelVersionInputExample* Arena::CreateMaybeMessage< ::clarifai::api::ModelVersionInputExample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelVersionInputExample >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::OutputInfo* Arena::CreateMaybeMessage< ::clarifai::api::OutputInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::OutputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::InputInfo* Arena::CreateMaybeMessage< ::clarifai::api::InputInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::InputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TrainInfo* Arena::CreateMaybeMessage< ::clarifai::api::TrainInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TrainInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::EvalInfo* Arena::CreateMaybeMessage< ::clarifai::api::EvalInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::EvalInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ImportInfo* Arena::CreateMaybeMessage< ::clarifai::api::ImportInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ImportInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::OutputConfig* Arena::CreateMaybeMessage< ::clarifai::api::OutputConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::OutputConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelType* Arena::CreateMaybeMessage< ::clarifai::api::ModelType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelType >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelLayerInfo* Arena::CreateMaybeMessage< ::clarifai::api::ModelLayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelLayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LayerShape* Arena::CreateMaybeMessage< ::clarifai::api::LayerShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::LayerShape >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelTypeField* Arena::CreateMaybeMessage< ::clarifai::api::ModelTypeField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelTypeField >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelTypeRangeInfo* Arena::CreateMaybeMessage< ::clarifai::api::ModelTypeRangeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelTypeRangeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelTypeEnumOption* Arena::CreateMaybeMessage< ::clarifai::api::ModelTypeEnumOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelTypeEnumOption >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelTypeEnumOptionAlias* Arena::CreateMaybeMessage< ::clarifai::api::ModelTypeEnumOptionAlias >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelTypeEnumOptionAlias >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelQuery* Arena::CreateMaybeMessage< ::clarifai::api::ModelQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelVersion* Arena::CreateMaybeMessage< ::clarifai::api::ModelVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PretrainedModelConfig* Arena::CreateMaybeMessage< ::clarifai::api::PretrainedModelConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PretrainedModelConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TrainStats* Arena::CreateMaybeMessage< ::clarifai::api::TrainStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TrainStats >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LossCurveEntry* Arena::CreateMaybeMessage< ::clarifai::api::LossCurveEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::LossCurveEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LabelCount* Arena::CreateMaybeMessage< ::clarifai::api::LabelCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::LabelCount >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LabelDistribution* Arena::CreateMaybeMessage< ::clarifai::api::LabelDistribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::LabelDistribution >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::CooccurrenceMatrixEntry* Arena::CreateMaybeMessage< ::clarifai::api::CooccurrenceMatrixEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::CooccurrenceMatrixEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::CooccurrenceMatrix* Arena::CreateMaybeMessage< ::clarifai::api::CooccurrenceMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::CooccurrenceMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConfusionMatrixEntry* Arena::CreateMaybeMessage< ::clarifai::api::ConfusionMatrixEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConfusionMatrixEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConfusionMatrix* Arena::CreateMaybeMessage< ::clarifai::api::ConfusionMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ConfusionMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ROC* Arena::CreateMaybeMessage< ::clarifai::api::ROC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ROC >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PrecisionRecallCurve* Arena::CreateMaybeMessage< ::clarifai::api::PrecisionRecallCurve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PrecisionRecallCurve >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::BinaryMetrics* Arena::CreateMaybeMessage< ::clarifai::api::BinaryMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::BinaryMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TrackerMetrics* Arena::CreateMaybeMessage< ::clarifai::api::TrackerMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TrackerMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::EvalTestSetEntry* Arena::CreateMaybeMessage< ::clarifai::api::EvalTestSetEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::EvalTestSetEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LOPQEvalResult* Arena::CreateMaybeMessage< ::clarifai::api::LOPQEvalResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::LOPQEvalResult >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MetricsSummary* Arena::CreateMaybeMessage< ::clarifai::api::MetricsSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MetricsSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::EvalMetrics* Arena::CreateMaybeMessage< ::clarifai::api::EvalMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::EvalMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::FieldsValue* Arena::CreateMaybeMessage< ::clarifai::api::FieldsValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::FieldsValue >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Output* Arena::CreateMaybeMessage< ::clarifai::api::Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Output >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ScopeDeps* Arena::CreateMaybeMessage< ::clarifai::api::ScopeDeps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ScopeDeps >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::EndpointDeps* Arena::CreateMaybeMessage< ::clarifai::api::EndpointDeps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::EndpointDeps >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Hit* Arena::CreateMaybeMessage< ::clarifai::api::Hit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Hit >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::And* Arena::CreateMaybeMessage< ::clarifai::api::And >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::And >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Query* Arena::CreateMaybeMessage< ::clarifai::api::Query >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Query >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Search* Arena::CreateMaybeMessage< ::clarifai::api::Search >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Search >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Filter* Arena::CreateMaybeMessage< ::clarifai::api::Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TimeRange* Arena::CreateMaybeMessage< ::clarifai::api::TimeRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TimeRange >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Rank* Arena::CreateMaybeMessage< ::clarifai::api::Rank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Rank >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AnnotationSearchMetrics* Arena::CreateMaybeMessage< ::clarifai::api::AnnotationSearchMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AnnotationSearchMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Text* Arena::CreateMaybeMessage< ::clarifai::api::Text >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Text >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TextInfo* Arena::CreateMaybeMessage< ::clarifai::api::TextInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TextInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::User* Arena::CreateMaybeMessage< ::clarifai::api::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::User >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::UserDetail* Arena::CreateMaybeMessage< ::clarifai::api::UserDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::UserDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::EmailAddress* Arena::CreateMaybeMessage< ::clarifai::api::EmailAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::EmailAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Password* Arena::CreateMaybeMessage< ::clarifai::api::Password >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Password >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PasswordViolations* Arena::CreateMaybeMessage< ::clarifai::api::PasswordViolations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PasswordViolations >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Video* Arena::CreateMaybeMessage< ::clarifai::api::Video >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Video >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::VideoInfo* Arena::CreateMaybeMessage< ::clarifai::api::VideoInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::VideoInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Workflow* Arena::CreateMaybeMessage< ::clarifai::api::Workflow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Workflow >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowVersion* Arena::CreateMaybeMessage< ::clarifai::api::WorkflowVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::WorkflowVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowNode* Arena::CreateMaybeMessage< ::clarifai::api::WorkflowNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::WorkflowNode >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::NodeInput* Arena::CreateMaybeMessage< ::clarifai::api::NodeInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::NodeInput >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowResult* Arena::CreateMaybeMessage< ::clarifai::api::WorkflowResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::WorkflowResult >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowState* Arena::CreateMaybeMessage< ::clarifai::api::WorkflowState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::WorkflowState >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AppDuplication* Arena::CreateMaybeMessage< ::clarifai::api::AppDuplication >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AppDuplication >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AppCopyProgress* Arena::CreateMaybeMessage< ::clarifai::api::AppCopyProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AppCopyProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AppDuplicationFilters* Arena::CreateMaybeMessage< ::clarifai::api::AppDuplicationFilters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AppDuplicationFilters >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::LabelOrder* Arena::CreateMaybeMessage< ::clarifai::api::LabelOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::LabelOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Task* Arena::CreateMaybeMessage< ::clarifai::api::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::AiAssistParameters* Arena::CreateMaybeMessage< ::clarifai::api::AiAssistParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::AiAssistParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskWorker* Arena::CreateMaybeMessage< ::clarifai::api::TaskWorker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskWorker >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskWorkerPartitionedStrategyInfo* Arena::CreateMaybeMessage< ::clarifai::api::TaskWorkerPartitionedStrategyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskWorkerPartitionedStrategyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskInputSource* Arena::CreateMaybeMessage< ::clarifai::api::TaskInputSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskInputSource >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskReview* Arena::CreateMaybeMessage< ::clarifai::api::TaskReview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskReview >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskReviewManualStrategyInfo* Arena::CreateMaybeMessage< ::clarifai::api::TaskReviewManualStrategyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskReviewManualStrategyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskReviewConsensusStrategyInfo* Arena::CreateMaybeMessage< ::clarifai::api::TaskReviewConsensusStrategyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskReviewConsensusStrategyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskAIAssistant* Arena::CreateMaybeMessage< ::clarifai::api::TaskAIAssistant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskAIAssistant >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TaskStatusCountPerUser* Arena::CreateMaybeMessage< ::clarifai::api::TaskStatusCountPerUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TaskStatusCountPerUser >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Collector* Arena::CreateMaybeMessage< ::clarifai::api::Collector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Collector >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::CollectorSource* Arena::CreateMaybeMessage< ::clarifai::api::CollectorSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::CollectorSource >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::APIPostModelOutputsCollectorSource* Arena::CreateMaybeMessage< ::clarifai::api::APIPostModelOutputsCollectorSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::APIPostModelOutputsCollectorSource >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StatValue* Arena::CreateMaybeMessage< ::clarifai::api::StatValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::StatValue >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StatValueAggregateResult* Arena::CreateMaybeMessage< ::clarifai::api::StatValueAggregateResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::StatValueAggregateResult >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StatValueAggregate* Arena::CreateMaybeMessage< ::clarifai::api::StatValueAggregate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::StatValueAggregate >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StatValueAggregateQuery* Arena::CreateMaybeMessage< ::clarifai::api::StatValueAggregateQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::StatValueAggregateQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DatasetInputsSearchAddJob* Arena::CreateMaybeMessage< ::clarifai::api::DatasetInputsSearchAddJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DatasetInputsSearchAddJob >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Visibility* Arena::CreateMaybeMessage< ::clarifai::api::Visibility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Visibility >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TrendingMetric* Arena::CreateMaybeMessage< ::clarifai::api::TrendingMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TrendingMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TimeSegment* Arena::CreateMaybeMessage< ::clarifai::api::TimeSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TimeSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TimeInfo* Arena::CreateMaybeMessage< ::clarifai::api::TimeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::TimeInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
