// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/service.proto

#include "proto/clarifai/api/service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AnnotationSearchMetrics_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AppDuplication_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppQuery_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Collaboration_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Collaborator_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptMappingJob_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptQuery_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConceptRelation_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndpointDeps_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldsValue_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputCount_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KnowledgeGraph_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Model_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelQuery_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelType_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModelVersion_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Output_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OutputConfig_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Password_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PasswordViolations_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PatchAction_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Query_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScopeDeps_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatValue_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatValueAggregateQuery_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StatValueAggregateResult_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskStatusCountPerUser_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_WorkflowResult_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkflowResultsSimilarity_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto;
namespace clarifai {
namespace api {
class PaginationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pagination> _instance;
} _Pagination_default_instance_;
class GetAnnotationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAnnotationRequest> _instance;
} _GetAnnotationRequest_default_instance_;
class ListAnnotationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAnnotationsRequest> _instance;
} _ListAnnotationsRequest_default_instance_;
class PostAnnotationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostAnnotationsRequest> _instance;
} _PostAnnotationsRequest_default_instance_;
class PatchAnnotationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchAnnotationsRequest> _instance;
} _PatchAnnotationsRequest_default_instance_;
class PatchAnnotationsStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchAnnotationsStatusRequest> _instance;
} _PatchAnnotationsStatusRequest_default_instance_;
class PatchAnnotationsStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchAnnotationsStatusResponse> _instance;
} _PatchAnnotationsStatusResponse_default_instance_;
class DeleteAnnotationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAnnotationRequest> _instance;
} _DeleteAnnotationRequest_default_instance_;
class DeleteAnnotationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAnnotationsRequest> _instance;
} _DeleteAnnotationsRequest_default_instance_;
class SingleAnnotationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleAnnotationResponse> _instance;
} _SingleAnnotationResponse_default_instance_;
class MultiAnnotationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiAnnotationResponse> _instance;
} _MultiAnnotationResponse_default_instance_;
class GetAppRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAppRequest> _instance;
} _GetAppRequest_default_instance_;
class ListAppsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAppsRequest> _instance;
} _ListAppsRequest_default_instance_;
class PostAppsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostAppsRequest> _instance;
} _PostAppsRequest_default_instance_;
class DeleteAppRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAppRequest> _instance;
} _DeleteAppRequest_default_instance_;
class PatchAppsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchAppsRequest> _instance;
} _PatchAppsRequest_default_instance_;
class PostAppsSearchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostAppsSearchesRequest> _instance;
} _PostAppsSearchesRequest_default_instance_;
class SingleAppResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleAppResponse> _instance;
} _SingleAppResponse_default_instance_;
class MultiAppResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiAppResponse> _instance;
} _MultiAppResponse_default_instance_;
class ListCollaboratorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCollaboratorsRequest> _instance;
} _ListCollaboratorsRequest_default_instance_;
class PostCollaboratorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostCollaboratorsRequest> _instance;
} _PostCollaboratorsRequest_default_instance_;
class PatchCollaboratorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchCollaboratorsRequest> _instance;
} _PatchCollaboratorsRequest_default_instance_;
class DeleteCollaboratorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteCollaboratorsRequest> _instance;
} _DeleteCollaboratorsRequest_default_instance_;
class MultiCollaboratorsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiCollaboratorsResponse> _instance;
} _MultiCollaboratorsResponse_default_instance_;
class ListCollaborationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCollaborationsRequest> _instance;
} _ListCollaborationsRequest_default_instance_;
class MultiCollaborationsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiCollaborationsResponse> _instance;
} _MultiCollaborationsResponse_default_instance_;
class GetStatusCodeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStatusCodeRequest> _instance;
} _GetStatusCodeRequest_default_instance_;
class ListStatusCodesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListStatusCodesRequest> _instance;
} _ListStatusCodesRequest_default_instance_;
class SingleStatusCodeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleStatusCodeResponse> _instance;
} _SingleStatusCodeResponse_default_instance_;
class MultiStatusCodeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiStatusCodeResponse> _instance;
} _MultiStatusCodeResponse_default_instance_;
class GetConceptRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConceptRequest> _instance;
} _GetConceptRequest_default_instance_;
class ListConceptsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListConceptsRequest> _instance;
} _ListConceptsRequest_default_instance_;
class PostConceptsSearchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostConceptsSearchesRequest> _instance;
} _PostConceptsSearchesRequest_default_instance_;
class PostConceptsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostConceptsRequest> _instance;
} _PostConceptsRequest_default_instance_;
class PatchConceptsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchConceptsRequest> _instance;
} _PatchConceptsRequest_default_instance_;
class GetConceptCountsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConceptCountsRequest> _instance;
} _GetConceptCountsRequest_default_instance_;
class SingleConceptResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleConceptResponse> _instance;
} _SingleConceptResponse_default_instance_;
class MultiConceptResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiConceptResponse> _instance;
} _MultiConceptResponse_default_instance_;
class MultiConceptCountResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiConceptCountResponse> _instance;
} _MultiConceptCountResponse_default_instance_;
class ListConceptRelationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListConceptRelationsRequest> _instance;
} _ListConceptRelationsRequest_default_instance_;
class PostConceptRelationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostConceptRelationsRequest> _instance;
} _PostConceptRelationsRequest_default_instance_;
class DeleteConceptRelationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteConceptRelationsRequest> _instance;
} _DeleteConceptRelationsRequest_default_instance_;
class ListKnowledgeGraphsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListKnowledgeGraphsRequest> _instance;
} _ListKnowledgeGraphsRequest_default_instance_;
class PostKnowledgeGraphsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostKnowledgeGraphsRequest> _instance;
} _PostKnowledgeGraphsRequest_default_instance_;
class PostConceptMappingJobsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostConceptMappingJobsRequest> _instance;
} _PostConceptMappingJobsRequest_default_instance_;
class MultiConceptRelationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiConceptRelationResponse> _instance;
} _MultiConceptRelationResponse_default_instance_;
class MultiKnowledgeGraphResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiKnowledgeGraphResponse> _instance;
} _MultiKnowledgeGraphResponse_default_instance_;
class MultiConceptMappingJobResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiConceptMappingJobResponse> _instance;
} _MultiConceptMappingJobResponse_default_instance_;
class GetConceptLanguageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConceptLanguageRequest> _instance;
} _GetConceptLanguageRequest_default_instance_;
class ListConceptLanguagesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListConceptLanguagesRequest> _instance;
} _ListConceptLanguagesRequest_default_instance_;
class PatchConceptLanguagesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchConceptLanguagesRequest> _instance;
} _PatchConceptLanguagesRequest_default_instance_;
class PostConceptLanguagesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostConceptLanguagesRequest> _instance;
} _PostConceptLanguagesRequest_default_instance_;
class SingleConceptLanguageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleConceptLanguageResponse> _instance;
} _SingleConceptLanguageResponse_default_instance_;
class MultiConceptLanguageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiConceptLanguageResponse> _instance;
} _MultiConceptLanguageResponse_default_instance_;
class GetInputRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInputRequest> _instance;
} _GetInputRequest_default_instance_;
class GetInputSamplesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInputSamplesRequest> _instance;
} _GetInputSamplesRequest_default_instance_;
class ListInputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListInputsRequest> _instance;
} _ListInputsRequest_default_instance_;
class StreamInputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamInputsRequest> _instance;
} _StreamInputsRequest_default_instance_;
class PostInputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostInputsRequest> _instance;
} _PostInputsRequest_default_instance_;
class PatchInputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchInputsRequest> _instance;
} _PatchInputsRequest_default_instance_;
class DeleteInputRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteInputRequest> _instance;
} _DeleteInputRequest_default_instance_;
class DeleteInputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteInputsRequest> _instance;
} _DeleteInputsRequest_default_instance_;
class SingleInputResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleInputResponse> _instance;
} _SingleInputResponse_default_instance_;
class MultiInputResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiInputResponse> _instance;
} _MultiInputResponse_default_instance_;
class MultiInputAnnotationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiInputAnnotationResponse> _instance;
} _MultiInputAnnotationResponse_default_instance_;
class SingleInputCountResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleInputCountResponse> _instance;
} _SingleInputCountResponse_default_instance_;
class GetInputCountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInputCountRequest> _instance;
} _GetInputCountRequest_default_instance_;
class PostModelOutputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostModelOutputsRequest> _instance;
} _PostModelOutputsRequest_default_instance_;
class ListModelInputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListModelInputsRequest> _instance;
} _ListModelInputsRequest_default_instance_;
class GetKeyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetKeyRequest> _instance;
} _GetKeyRequest_default_instance_;
class ListKeysRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListKeysRequest> _instance;
} _ListKeysRequest_default_instance_;
class ListAppKeysRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAppKeysRequest> _instance;
} _ListAppKeysRequest_default_instance_;
class PostKeysRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostKeysRequest> _instance;
} _PostKeysRequest_default_instance_;
class DeleteKeyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteKeyRequest> _instance;
} _DeleteKeyRequest_default_instance_;
class PatchKeysRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchKeysRequest> _instance;
} _PatchKeysRequest_default_instance_;
class SingleKeyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleKeyResponse> _instance;
} _SingleKeyResponse_default_instance_;
class MultiKeyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiKeyResponse> _instance;
} _MultiKeyResponse_default_instance_;
class GetModelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModelRequest> _instance;
} _GetModelRequest_default_instance_;
class ListModelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListModelsRequest> _instance;
} _ListModelsRequest_default_instance_;
class PostModelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostModelsRequest> _instance;
} _PostModelsRequest_default_instance_;
class PatchModelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchModelsRequest> _instance;
} _PatchModelsRequest_default_instance_;
class DeleteModelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteModelRequest> _instance;
} _DeleteModelRequest_default_instance_;
class DeleteModelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteModelsRequest> _instance;
} _DeleteModelsRequest_default_instance_;
class PostModelsSearchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostModelsSearchesRequest> _instance;
} _PostModelsSearchesRequest_default_instance_;
class SingleModelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleModelResponse> _instance;
} _SingleModelResponse_default_instance_;
class MultiModelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiModelResponse> _instance;
} _MultiModelResponse_default_instance_;
class GetModelVersionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModelVersionRequest> _instance;
} _GetModelVersionRequest_default_instance_;
class ListModelVersionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListModelVersionsRequest> _instance;
} _ListModelVersionsRequest_default_instance_;
class DeleteModelVersionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteModelVersionRequest> _instance;
} _DeleteModelVersionRequest_default_instance_;
class SingleModelVersionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleModelVersionResponse> _instance;
} _SingleModelVersionResponse_default_instance_;
class MultiModelVersionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiModelVersionResponse> _instance;
} _MultiModelVersionResponse_default_instance_;
class PostModelVersionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostModelVersionsRequest> _instance;
} _PostModelVersionsRequest_default_instance_;
class PostModelVersionMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostModelVersionMetricsRequest> _instance;
} _PostModelVersionMetricsRequest_default_instance_;
class GetModelVersionMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModelVersionMetricsRequest> _instance;
} _GetModelVersionMetricsRequest_default_instance_;
class GetModelTypeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModelTypeRequest> _instance;
} _GetModelTypeRequest_default_instance_;
class ListModelTypesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListModelTypesRequest> _instance;
} _ListModelTypesRequest_default_instance_;
class SingleModelTypeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleModelTypeResponse> _instance;
} _SingleModelTypeResponse_default_instance_;
class MultiModelTypeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiModelTypeResponse> _instance;
} _MultiModelTypeResponse_default_instance_;
class MultiOutputResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiOutputResponse> _instance;
} _MultiOutputResponse_default_instance_;
class ListScopesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListScopesRequest> _instance;
} _ListScopesRequest_default_instance_;
class MyScopesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyScopesRequest> _instance;
} _MyScopesRequest_default_instance_;
class MultiScopeDepsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiScopeDepsResponse> _instance;
} _MultiScopeDepsResponse_default_instance_;
class MultiScopeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiScopeResponse> _instance;
} _MultiScopeResponse_default_instance_;
class GetSearchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSearchRequest> _instance;
} _GetSearchRequest_default_instance_;
class ListSearchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSearchesRequest> _instance;
} _ListSearchesRequest_default_instance_;
class PostSearchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostSearchesRequest> _instance;
} _PostSearchesRequest_default_instance_;
class PostSearchesByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostSearchesByIDRequest> _instance;
} _PostSearchesByIDRequest_default_instance_;
class DeleteSearchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteSearchRequest> _instance;
} _DeleteSearchRequest_default_instance_;
class PostAnnotationsSearchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostAnnotationsSearchesRequest> _instance;
} _PostAnnotationsSearchesRequest_default_instance_;
class DeleteAnnotationSearchMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAnnotationSearchMetricsRequest> _instance;
} _DeleteAnnotationSearchMetricsRequest_default_instance_;
class PostInputsSearchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostInputsSearchesRequest> _instance;
} _PostInputsSearchesRequest_default_instance_;
class SingleSearchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleSearchResponse> _instance;
} _SingleSearchResponse_default_instance_;
class MultiSearchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiSearchResponse> _instance;
} _MultiSearchResponse_default_instance_;
class PostAnnotationSearchMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostAnnotationSearchMetricsRequest> _instance;
} _PostAnnotationSearchMetricsRequest_default_instance_;
class GetAnnotationSearchMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAnnotationSearchMetricsRequest> _instance;
} _GetAnnotationSearchMetricsRequest_default_instance_;
class ListAnnotationSearchMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAnnotationSearchMetricsRequest> _instance;
} _ListAnnotationSearchMetricsRequest_default_instance_;
class MultiAnnotationSearchMetricsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiAnnotationSearchMetricsResponse> _instance;
} _MultiAnnotationSearchMetricsResponse_default_instance_;
class PostValidatePasswordRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostValidatePasswordRequest> _instance;
} _PostValidatePasswordRequest_default_instance_;
class SinglePasswordValidationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SinglePasswordValidationResponse> _instance;
} _SinglePasswordValidationResponse_default_instance_;
class GetWorkflowRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetWorkflowRequest> _instance;
} _GetWorkflowRequest_default_instance_;
class ListWorkflowsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListWorkflowsRequest> _instance;
} _ListWorkflowsRequest_default_instance_;
class PostWorkflowsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostWorkflowsRequest> _instance;
} _PostWorkflowsRequest_default_instance_;
class PatchWorkflowsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchWorkflowsRequest> _instance;
} _PatchWorkflowsRequest_default_instance_;
class DeleteWorkflowRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteWorkflowRequest> _instance;
} _DeleteWorkflowRequest_default_instance_;
class DeleteWorkflowsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteWorkflowsRequest> _instance;
} _DeleteWorkflowsRequest_default_instance_;
class SingleWorkflowResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleWorkflowResponse> _instance;
} _SingleWorkflowResponse_default_instance_;
class MultiWorkflowResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiWorkflowResponse> _instance;
} _MultiWorkflowResponse_default_instance_;
class PostWorkflowResultsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostWorkflowResultsRequest> _instance;
} _PostWorkflowResultsRequest_default_instance_;
class PostWorkflowResultsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostWorkflowResultsResponse> _instance;
} _PostWorkflowResultsResponse_default_instance_;
class PostWorkflowResultsSimilarityRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostWorkflowResultsSimilarityRequest> _instance;
} _PostWorkflowResultsSimilarityRequest_default_instance_;
class PostWorkflowResultsSimilarityResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostWorkflowResultsSimilarityResponse> _instance;
} _PostWorkflowResultsSimilarityResponse_default_instance_;
class PostAppDuplicationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostAppDuplicationsRequest> _instance;
} _PostAppDuplicationsRequest_default_instance_;
class GetAppDuplicationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAppDuplicationRequest> _instance;
} _GetAppDuplicationRequest_default_instance_;
class ListAppDuplicationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAppDuplicationsRequest> _instance;
} _ListAppDuplicationsRequest_default_instance_;
class MultiAppDuplicationsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiAppDuplicationsResponse> _instance;
} _MultiAppDuplicationsResponse_default_instance_;
class SingleAppDuplicationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleAppDuplicationResponse> _instance;
} _SingleAppDuplicationResponse_default_instance_;
class PostTasksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostTasksRequest> _instance;
} _PostTasksRequest_default_instance_;
class GetTaskRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTaskRequest> _instance;
} _GetTaskRequest_default_instance_;
class ListTasksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTasksRequest> _instance;
} _ListTasksRequest_default_instance_;
class PatchTasksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchTasksRequest> _instance;
} _PatchTasksRequest_default_instance_;
class DeleteTasksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteTasksRequest> _instance;
} _DeleteTasksRequest_default_instance_;
class MultiTaskResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiTaskResponse> _instance;
} _MultiTaskResponse_default_instance_;
class SingleTaskResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleTaskResponse> _instance;
} _SingleTaskResponse_default_instance_;
class GetTaskCountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTaskCountRequest> _instance;
} _GetTaskCountRequest_default_instance_;
class SingleTaskCountResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleTaskCountResponse> _instance;
} _SingleTaskCountResponse_default_instance_;
class PostCollectorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostCollectorsRequest> _instance;
} _PostCollectorsRequest_default_instance_;
class PatchCollectorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchCollectorsRequest> _instance;
} _PatchCollectorsRequest_default_instance_;
class DeleteCollectorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteCollectorsRequest> _instance;
} _DeleteCollectorsRequest_default_instance_;
class GetCollectorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCollectorRequest> _instance;
} _GetCollectorRequest_default_instance_;
class ListCollectorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCollectorsRequest> _instance;
} _ListCollectorsRequest_default_instance_;
class MultiCollectorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiCollectorResponse> _instance;
} _MultiCollectorResponse_default_instance_;
class SingleCollectorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleCollectorResponse> _instance;
} _SingleCollectorResponse_default_instance_;
class PostStatValuesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostStatValuesRequest> _instance;
} _PostStatValuesRequest_default_instance_;
class MultiStatValueResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiStatValueResponse> _instance;
} _MultiStatValueResponse_default_instance_;
class PostStatValuesAggregateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostStatValuesAggregateRequest> _instance;
} _PostStatValuesAggregateRequest_default_instance_;
class MultiStatValueAggregateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiStatValueAggregateResponse> _instance;
} _MultiStatValueAggregateResponse_default_instance_;
}  // namespace api
}  // namespace clarifai
static void InitDefaultsscc_info_DeleteAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteAnnotationRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteAnnotationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteAnnotationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteAnnotationSearchMetricsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteAnnotationSearchMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteAnnotationSearchMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteAnnotationsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteAnnotationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteAnnotationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteAppRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteAppRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteAppRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteCollaboratorsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteCollaboratorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteCollaboratorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteCollectorsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteCollectorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteCollectorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteConceptRelationsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteConceptRelationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteConceptRelationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteInputRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteInputRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteInputRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteInputsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteInputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteInputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteKeyRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteKeyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteKeyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteModelRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteModelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteModelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteModelVersionRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteModelVersionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteModelVersionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteModelsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteModelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteModelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteSearchRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteSearchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteSearchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteTasksRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteTasksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteTasksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteWorkflowRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteWorkflowRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteWorkflowRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteWorkflowsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteWorkflowsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteWorkflowsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetAnnotationRequest_default_instance_;
    new (ptr) ::clarifai::api::GetAnnotationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetAnnotationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetAnnotationSearchMetricsRequest_default_instance_;
    new (ptr) ::clarifai::api::GetAnnotationSearchMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetAnnotationSearchMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetAppDuplicationRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetAppDuplicationRequest_default_instance_;
    new (ptr) ::clarifai::api::GetAppDuplicationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetAppDuplicationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAppDuplicationRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAppDuplicationRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetAppRequest_default_instance_;
    new (ptr) ::clarifai::api::GetAppRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetAppRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetCollectorRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetCollectorRequest_default_instance_;
    new (ptr) ::clarifai::api::GetCollectorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetCollectorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCollectorRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetCollectorRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetConceptCountsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetConceptCountsRequest_default_instance_;
    new (ptr) ::clarifai::api::GetConceptCountsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetConceptCountsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetConceptCountsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetConceptCountsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetConceptLanguageRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetConceptLanguageRequest_default_instance_;
    new (ptr) ::clarifai::api::GetConceptLanguageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetConceptLanguageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetConceptLanguageRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetConceptLanguageRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetConceptRequest_default_instance_;
    new (ptr) ::clarifai::api::GetConceptRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetConceptRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetInputCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetInputCountRequest_default_instance_;
    new (ptr) ::clarifai::api::GetInputCountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetInputCountRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInputCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInputCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetInputRequest_default_instance_;
    new (ptr) ::clarifai::api::GetInputRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetInputRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetInputSamplesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetInputSamplesRequest_default_instance_;
    new (ptr) ::clarifai::api::GetInputSamplesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetInputSamplesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInputSamplesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInputSamplesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetKeyRequest_default_instance_;
    new (ptr) ::clarifai::api::GetKeyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetKeyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetModelRequest_default_instance_;
    new (ptr) ::clarifai::api::GetModelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetModelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetModelTypeRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetModelTypeRequest_default_instance_;
    new (ptr) ::clarifai::api::GetModelTypeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetModelTypeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetModelTypeRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetModelTypeRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetModelVersionMetricsRequest_default_instance_;
    new (ptr) ::clarifai::api::GetModelVersionMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetModelVersionMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_FieldsValue_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetModelVersionRequest_default_instance_;
    new (ptr) ::clarifai::api::GetModelVersionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetModelVersionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetSearchRequest_default_instance_;
    new (ptr) ::clarifai::api::GetSearchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetSearchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetStatusCodeRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetStatusCodeRequest_default_instance_;
    new (ptr) ::clarifai::api::GetStatusCodeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetStatusCodeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStatusCodeRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetStatusCodeRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetTaskCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetTaskCountRequest_default_instance_;
    new (ptr) ::clarifai::api::GetTaskCountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetTaskCountRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTaskCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTaskCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetTaskRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetTaskRequest_default_instance_;
    new (ptr) ::clarifai::api::GetTaskRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetTaskRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTaskRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTaskRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetWorkflowRequest_default_instance_;
    new (ptr) ::clarifai::api::GetWorkflowRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetWorkflowRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListAnnotationSearchMetricsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListAnnotationSearchMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListAnnotationSearchMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListAnnotationsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListAnnotationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListAnnotationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_ListAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListAppDuplicationsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListAppDuplicationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListAppDuplicationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListAppKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListAppKeysRequest_default_instance_;
    new (ptr) ::clarifai::api::ListAppKeysRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListAppKeysRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAppKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAppKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListAppsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListAppsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListAppsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListCollaborationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListCollaborationsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListCollaborationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListCollaborationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListCollaborationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListCollaborationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListCollaboratorsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListCollaboratorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListCollaboratorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListCollectorsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListCollectorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListCollectorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListConceptLanguagesRequest_default_instance_;
    new (ptr) ::clarifai::api::ListConceptLanguagesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListConceptLanguagesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListConceptRelationsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListConceptRelationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListConceptRelationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListConceptsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListConceptsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListConceptsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListInputsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListInputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListInputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_ListKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListKeysRequest_default_instance_;
    new (ptr) ::clarifai::api::ListKeysRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListKeysRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListKnowledgeGraphsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListKnowledgeGraphsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListKnowledgeGraphsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListModelInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListModelInputsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListModelInputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListModelInputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListModelInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListModelInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListModelTypesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListModelTypesRequest_default_instance_;
    new (ptr) ::clarifai::api::ListModelTypesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListModelTypesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListModelTypesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListModelTypesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListModelVersionsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListModelVersionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListModelVersionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListModelsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListModelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListModelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListScopesRequest_default_instance_;
    new (ptr) ::clarifai::api::ListScopesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListScopesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_ListSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListSearchesRequest_default_instance_;
    new (ptr) ::clarifai::api::ListSearchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListSearchesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListStatusCodesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListStatusCodesRequest_default_instance_;
    new (ptr) ::clarifai::api::ListStatusCodesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListStatusCodesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListStatusCodesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListStatusCodesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_ListTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListTasksRequest_default_instance_;
    new (ptr) ::clarifai::api::ListTasksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListTasksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListWorkflowsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListWorkflowsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListWorkflowsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiAnnotationResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiAnnotationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiAnnotationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiAnnotationSearchMetricsResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiAnnotationSearchMetricsResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiAnnotationSearchMetricsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiAnnotationSearchMetricsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiAnnotationSearchMetricsResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiAnnotationSearchMetricsResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_AnnotationSearchMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiAppDuplicationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiAppDuplicationsResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiAppDuplicationsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiAppDuplicationsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiAppDuplicationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiAppDuplicationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_AppDuplication_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiAppResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiAppResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiAppResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiCollaborationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiCollaborationsResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiCollaborationsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiCollaborationsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiCollaborationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiCollaborationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Collaboration_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiCollaboratorsResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiCollaboratorsResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiCollaboratorsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiCollaboratorsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiCollaboratorsResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiCollaboratorsResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Collaborator_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiCollectorResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiCollectorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiCollectorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiConceptCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiConceptCountResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiConceptCountResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiConceptCountResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiConceptCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiConceptCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiConceptLanguageResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiConceptLanguageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiConceptLanguageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiConceptMappingJobResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiConceptMappingJobResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiConceptMappingJobResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_MultiConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiConceptRelationResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiConceptRelationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiConceptRelationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ConceptRelation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiConceptResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiConceptResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiConceptResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiInputAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiInputAnnotationResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiInputAnnotationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiInputAnnotationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiInputAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiInputAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiInputResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiInputResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiInputResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiKeyResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiKeyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiKeyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiKnowledgeGraphResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiKnowledgeGraphResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiKnowledgeGraphResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_KnowledgeGraph_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiModelResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiModelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiModelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Model_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiModelTypeResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiModelTypeResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiModelTypeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiModelTypeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiModelTypeResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiModelTypeResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ModelType_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiModelVersionResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiModelVersionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiModelVersionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ModelVersion_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiOutputResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiOutputResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiOutputResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiOutputResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiOutputResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiOutputResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Output_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiScopeDepsResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiScopeDepsResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiScopeDepsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiScopeDepsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MultiScopeDepsResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MultiScopeDepsResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ScopeDeps_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_EndpointDeps_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiScopeResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiScopeResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiScopeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiScopeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiScopeResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiScopeResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiSearchResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiSearchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiSearchResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MultiSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MultiSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Query_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiStatValueAggregateResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiStatValueAggregateResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiStatValueAggregateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiStatValueAggregateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiStatValueAggregateResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiStatValueAggregateResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_StatValueAggregateResult_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiStatValueResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiStatValueResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiStatValueResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiStatValueResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiStatValueResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiStatValueResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_StatValue_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiStatusCodeResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiStatusCodeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiStatusCodeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_MultiTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiTaskResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiTaskResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiTaskResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiWorkflowResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiWorkflowResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiWorkflowResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MyScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MyScopesRequest_default_instance_;
    new (ptr) ::clarifai::api::MyScopesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MyScopesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MyScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MyScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Pagination_default_instance_;
    new (ptr) ::clarifai::api::Pagination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Pagination::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_PatchAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchAnnotationsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchAnnotationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchAnnotationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchAnnotationsStatusRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchAnnotationsStatusRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchAnnotationsStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchAnnotationsStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PatchAnnotationsStatusRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PatchAnnotationsStatusRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchAnnotationsStatusResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchAnnotationsStatusResponse_default_instance_;
    new (ptr) ::clarifai::api::PatchAnnotationsStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchAnnotationsStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PatchAnnotationsStatusResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PatchAnnotationsStatusResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_PatchAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchAppsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchAppsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchAppsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PatchAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PatchAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_PatchAction_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchCollaboratorsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchCollaboratorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchCollaboratorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Collaborator_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchCollectorsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchCollectorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchCollectorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchConceptLanguagesRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchConceptLanguagesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchConceptLanguagesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchConceptsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchConceptsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchConceptsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchInputsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchInputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchInputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchKeysRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchKeysRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchKeysRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchModelsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchModelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchModelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Model_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchTasksRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchTasksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchTasksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchWorkflowsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchWorkflowsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchWorkflowsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostAnnotationSearchMetricsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostAnnotationSearchMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostAnnotationSearchMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostAnnotationsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostAnnotationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostAnnotationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostAnnotationsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostAnnotationsSearchesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostAnnotationsSearchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostAnnotationsSearchesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostAnnotationsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostAnnotationsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,}};

static void InitDefaultsscc_info_PostAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostAppDuplicationsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostAppDuplicationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostAppDuplicationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_AppDuplication_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostAppsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostAppsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostAppsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostAppsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostAppsSearchesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostAppsSearchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostAppsSearchesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostAppsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostAppsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_AppQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,}};

static void InitDefaultsscc_info_PostCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostCollaboratorsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostCollaboratorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostCollaboratorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Collaborator_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostCollectorsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostCollectorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostCollectorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostConceptLanguagesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostConceptLanguagesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostConceptLanguagesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostConceptMappingJobsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostConceptMappingJobsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostConceptMappingJobsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostConceptMappingJobsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostConceptMappingJobsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostConceptMappingJobsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ConceptMappingJob_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostConceptRelationsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostConceptRelationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostConceptRelationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ConceptRelation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostConceptsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostConceptsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostConceptsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostConceptsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostConceptsSearchesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostConceptsSearchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostConceptsSearchesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostConceptsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostConceptsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ConceptQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,}};

static void InitDefaultsscc_info_PostInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostInputsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostInputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostInputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostInputsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostInputsSearchesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostInputsSearchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostInputsSearchesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostInputsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostInputsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,}};

static void InitDefaultsscc_info_PostKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostKeysRequest_default_instance_;
    new (ptr) ::clarifai::api::PostKeysRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostKeysRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostKnowledgeGraphsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostKnowledgeGraphsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostKnowledgeGraphsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_KnowledgeGraph_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostModelOutputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostModelOutputsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostModelOutputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostModelOutputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostModelOutputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostModelOutputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Model_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostModelVersionMetricsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostModelVersionMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostModelVersionMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostModelVersionsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostModelVersionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostModelVersionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ModelVersion_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostModelsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostModelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostModelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Model_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostModelsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostModelsSearchesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostModelsSearchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostModelsSearchesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostModelsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostModelsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ModelQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,}};

static void InitDefaultsscc_info_PostSearchesByIDRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostSearchesByIDRequest_default_instance_;
    new (ptr) ::clarifai::api::PostSearchesByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostSearchesByIDRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostSearchesByIDRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostSearchesByIDRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,}};

static void InitDefaultsscc_info_PostSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostSearchesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostSearchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostSearchesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PostSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PostSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Query_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,}};

static void InitDefaultsscc_info_PostStatValuesAggregateRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostStatValuesAggregateRequest_default_instance_;
    new (ptr) ::clarifai::api::PostStatValuesAggregateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostStatValuesAggregateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostStatValuesAggregateRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostStatValuesAggregateRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_StatValueAggregateQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostStatValuesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostStatValuesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostStatValuesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostStatValuesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostStatValuesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostStatValuesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_StatValue_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostTasksRequest_default_instance_;
    new (ptr) ::clarifai::api::PostTasksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostTasksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostValidatePasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostValidatePasswordRequest_default_instance_;
    new (ptr) ::clarifai::api::PostValidatePasswordRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostValidatePasswordRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostValidatePasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostValidatePasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Password_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostWorkflowResultsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostWorkflowResultsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostWorkflowResultsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostWorkflowResultsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostWorkflowResultsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostWorkflowResultsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_OutputConfig_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostWorkflowResultsResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostWorkflowResultsResponse_default_instance_;
    new (ptr) ::clarifai::api::PostWorkflowResultsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostWorkflowResultsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostWorkflowResultsResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostWorkflowResultsResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_WorkflowResult_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostWorkflowResultsSimilarityRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostWorkflowResultsSimilarityRequest_default_instance_;
    new (ptr) ::clarifai::api::PostWorkflowResultsSimilarityRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostWorkflowResultsSimilarityRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostWorkflowResultsSimilarityRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostWorkflowResultsSimilarityRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostWorkflowResultsSimilarityResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostWorkflowResultsSimilarityResponse_default_instance_;
    new (ptr) ::clarifai::api::PostWorkflowResultsSimilarityResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostWorkflowResultsSimilarityResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostWorkflowResultsSimilarityResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostWorkflowResultsSimilarityResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_WorkflowResultsSimilarity_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostWorkflowsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostWorkflowsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostWorkflowsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleAnnotationResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleAnnotationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleAnnotationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleAppDuplicationResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleAppDuplicationResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleAppDuplicationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleAppDuplicationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleAppDuplicationResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleAppDuplicationResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_AppDuplication_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleAppResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleAppResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleAppResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleCollectorResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleCollectorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleCollectorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleConceptLanguageResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleConceptLanguageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleConceptLanguageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleConceptResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleConceptResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleConceptResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleInputCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleInputCountResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleInputCountResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleInputCountResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleInputCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleInputCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_InputCount_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleInputResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleInputResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleInputResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleKeyResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleKeyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleKeyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleModelResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleModelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleModelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Model_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleModelTypeResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleModelTypeResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleModelTypeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleModelTypeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleModelTypeResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleModelTypeResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ModelType_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleModelVersionResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleModelVersionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleModelVersionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ModelVersion_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SinglePasswordValidationResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SinglePasswordValidationResponse_default_instance_;
    new (ptr) ::clarifai::api::SinglePasswordValidationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SinglePasswordValidationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SinglePasswordValidationResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SinglePasswordValidationResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_PasswordViolations_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleSearchResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleSearchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleSearchResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleStatusCodeResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleStatusCodeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleStatusCodeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SingleStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_SingleTaskCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleTaskCountResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleTaskCountResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleTaskCountResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleTaskCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleTaskCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_TaskStatusCountPerUser_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleTaskResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleTaskResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleTaskResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleWorkflowResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleWorkflowResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleWorkflowResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_StreamInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_StreamInputsRequest_default_instance_;
    new (ptr) ::clarifai::api::StreamInputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::StreamInputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[156];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Pagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Pagination, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Pagination, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, annotation_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, input_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, input_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, model_version_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, statuses_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, list_all_annotations_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsRequest, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, annotations_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, status_code_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, task_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusResponse, user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusResponse, updated_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, input_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, annotation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, input_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationResponse, annotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationResponse, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsRequest, apps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAppRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, apps_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, action_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, metadata_action_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, reindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsSearchesRequest, app_query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppResponse, app_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppResponse, apps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaboratorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaboratorsRequest, list_all_collaborators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollaboratorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollaboratorsRequest, collaborators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, collaborators_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, collaborator_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, user_emails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaboratorsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaboratorsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaboratorsResponse, collaborators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaborationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaborationsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaborationsResponse, collaborations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetStatusCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetStatusCodeRequest, status_code_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListStatusCodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleStatusCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleStatusCodeResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatusCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatusCodeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatusCodeResponse, statuses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptRequest, concept_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, concept_query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsRequest, concepts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptResponse, concept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptResponse, concepts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptCountResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptCountResponse, concept_counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, predicate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, knowledge_graph_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, concept_relations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKnowledgeGraphsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKnowledgeGraphsRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphsRequest, knowledge_graphs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingJobsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingJobsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingJobsRequest, concept_mapping_jobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptRelationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptRelationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptRelationResponse, concept_relations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKnowledgeGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKnowledgeGraphResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKnowledgeGraphResponse, knowledge_graphs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptMappingJobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptMappingJobResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptMappingJobResponse, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, concept_languages_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, concept_languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptLanguageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptLanguageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptLanguageResponse, concept_language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptLanguageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptLanguageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptLanguageResponse, concept_languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputRequest, input_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputSamplesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputSamplesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputSamplesRequest, task_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputSamplesRequest, user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, last_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, descending_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsRequest, inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputRequest, input_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputsRequest, delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputResponse, input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputResponse, inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputAnnotationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputAnnotationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputAnnotationResponse, hits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputCountResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputCountResponse, counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputCountRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetKeyRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetKeyRequest, key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKeysRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKeysRequest, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteKeyRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteKeyRequest, key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, keys_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleKeyResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleKeyResponse, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKeyResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKeyResponse, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, trained_before_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, models_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, models_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelRequest, model_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, model_query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelResponse, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelResponse, models_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, concept_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionResponse, model_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionResponse, model_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, model_versions_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, search_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, train_search_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, test_search_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, evaluate_after_training_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, max_examples_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, test_search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelTypeRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelTypeRequest, model_type_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelTypesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelTypesRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelTypesRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelTypeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelTypeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelTypeResponse, model_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelTypeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelTypeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelTypeResponse, model_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiOutputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiOutputResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiOutputResponse, outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListScopesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListScopesRequest, key_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MyScopesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MyScopesRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, scope_deps_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, endpoint_deps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, app_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, endpoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetSearchRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetSearchRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteSearchRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteSearchRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationSearchMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationSearchMetricsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationSearchMetricsRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSearchResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSearchResponse, search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, hits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, searches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, ground_truth_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, search_to_eval_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, evaluation_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationSearchMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationSearchMetricsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationSearchMetricsRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationSearchMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationSearchMetricsRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationSearchMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationSearchMetricsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationSearchMetricsResponse, annotation_search_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostValidatePasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostValidatePasswordRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostValidatePasswordRequest, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SinglePasswordValidationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SinglePasswordValidationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SinglePasswordValidationResponse, password_violations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, favor_clarifai_workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowsRequest, workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, workflows_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowRequest, workflow_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowResponse, workflow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowResponse, workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, output_config_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, favor_clarifai_workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, workflow_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, probe_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, pool_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, favor_clarifai_workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppDuplicationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppDuplicationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppDuplicationsRequest, app_duplications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppDuplicationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppDuplicationRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppDuplicationRequest, app_duplication_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppDuplicationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppDuplicationsRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppDuplicationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppDuplicationsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppDuplicationsResponse, app_duplications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppDuplicationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppDuplicationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppDuplicationResponse, app_duplication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTasksRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTasksRequest, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskRequest, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, worker_user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, review_user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, including_label_order_tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, tasks_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteTasksRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteTasksRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTaskResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTaskResponse, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskResponse, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskCountRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskCountRequest, task_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskCountRequest, user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskCountResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskCountResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskCountResponse, task_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskCountResponse, counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollectorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollectorsRequest, collectors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, collectors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetCollectorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetCollectorRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetCollectorRequest, collector_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollectorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollectorResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollectorResponse, collectors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleCollectorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleCollectorResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleCollectorResponse, collector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesRequest, stat_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueResponse, stat_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesAggregateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesAggregateRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesAggregateRequest, stat_value_aggregate_queries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueAggregateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueAggregateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueAggregateResponse, stat_value_aggregate_results_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clarifai::api::Pagination)},
  { 7, -1, sizeof(::clarifai::api::GetAnnotationRequest)},
  { 15, -1, sizeof(::clarifai::api::ListAnnotationsRequest)},
  { 30, -1, sizeof(::clarifai::api::PostAnnotationsRequest)},
  { 37, -1, sizeof(::clarifai::api::PatchAnnotationsRequest)},
  { 45, -1, sizeof(::clarifai::api::PatchAnnotationsStatusRequest)},
  { 55, -1, sizeof(::clarifai::api::PatchAnnotationsStatusResponse)},
  { 63, -1, sizeof(::clarifai::api::DeleteAnnotationRequest)},
  { 71, -1, sizeof(::clarifai::api::DeleteAnnotationsRequest)},
  { 79, -1, sizeof(::clarifai::api::SingleAnnotationResponse)},
  { 86, -1, sizeof(::clarifai::api::MultiAnnotationResponse)},
  { 93, -1, sizeof(::clarifai::api::GetAppRequest)},
  { 99, -1, sizeof(::clarifai::api::ListAppsRequest)},
  { 107, -1, sizeof(::clarifai::api::PostAppsRequest)},
  { 114, -1, sizeof(::clarifai::api::DeleteAppRequest)},
  { 120, -1, sizeof(::clarifai::api::PatchAppsRequest)},
  { 130, -1, sizeof(::clarifai::api::PostAppsSearchesRequest)},
  { 138, -1, sizeof(::clarifai::api::SingleAppResponse)},
  { 145, -1, sizeof(::clarifai::api::MultiAppResponse)},
  { 152, -1, sizeof(::clarifai::api::ListCollaboratorsRequest)},
  { 159, -1, sizeof(::clarifai::api::PostCollaboratorsRequest)},
  { 166, -1, sizeof(::clarifai::api::PatchCollaboratorsRequest)},
  { 174, -1, sizeof(::clarifai::api::DeleteCollaboratorsRequest)},
  { 182, -1, sizeof(::clarifai::api::MultiCollaboratorsResponse)},
  { 189, -1, sizeof(::clarifai::api::ListCollaborationsRequest)},
  { 197, -1, sizeof(::clarifai::api::MultiCollaborationsResponse)},
  { 204, -1, sizeof(::clarifai::api::GetStatusCodeRequest)},
  { 210, -1, sizeof(::clarifai::api::ListStatusCodesRequest)},
  { 215, -1, sizeof(::clarifai::api::SingleStatusCodeResponse)},
  { 221, -1, sizeof(::clarifai::api::MultiStatusCodeResponse)},
  { 228, -1, sizeof(::clarifai::api::GetConceptRequest)},
  { 235, -1, sizeof(::clarifai::api::ListConceptsRequest)},
  { 243, -1, sizeof(::clarifai::api::PostConceptsSearchesRequest)},
  { 251, -1, sizeof(::clarifai::api::PostConceptsRequest)},
  { 258, -1, sizeof(::clarifai::api::PatchConceptsRequest)},
  { 266, -1, sizeof(::clarifai::api::GetConceptCountsRequest)},
  { 274, -1, sizeof(::clarifai::api::SingleConceptResponse)},
  { 281, -1, sizeof(::clarifai::api::MultiConceptResponse)},
  { 288, -1, sizeof(::clarifai::api::MultiConceptCountResponse)},
  { 295, -1, sizeof(::clarifai::api::ListConceptRelationsRequest)},
  { 306, -1, sizeof(::clarifai::api::PostConceptRelationsRequest)},
  { 314, -1, sizeof(::clarifai::api::DeleteConceptRelationsRequest)},
  { 322, -1, sizeof(::clarifai::api::ListKnowledgeGraphsRequest)},
  { 328, -1, sizeof(::clarifai::api::PostKnowledgeGraphsRequest)},
  { 335, -1, sizeof(::clarifai::api::PostConceptMappingJobsRequest)},
  { 342, -1, sizeof(::clarifai::api::MultiConceptRelationResponse)},
  { 349, -1, sizeof(::clarifai::api::MultiKnowledgeGraphResponse)},
  { 356, -1, sizeof(::clarifai::api::MultiConceptMappingJobResponse)},
  { 363, -1, sizeof(::clarifai::api::GetConceptLanguageRequest)},
  { 371, -1, sizeof(::clarifai::api::ListConceptLanguagesRequest)},
  { 380, -1, sizeof(::clarifai::api::PatchConceptLanguagesRequest)},
  { 389, -1, sizeof(::clarifai::api::PostConceptLanguagesRequest)},
  { 397, -1, sizeof(::clarifai::api::SingleConceptLanguageResponse)},
  { 404, -1, sizeof(::clarifai::api::MultiConceptLanguageResponse)},
  { 411, -1, sizeof(::clarifai::api::GetInputRequest)},
  { 418, -1, sizeof(::clarifai::api::GetInputSamplesRequest)},
  { 426, -1, sizeof(::clarifai::api::ListInputsRequest)},
  { 436, -1, sizeof(::clarifai::api::StreamInputsRequest)},
  { 445, -1, sizeof(::clarifai::api::PostInputsRequest)},
  { 452, -1, sizeof(::clarifai::api::PatchInputsRequest)},
  { 460, -1, sizeof(::clarifai::api::DeleteInputRequest)},
  { 467, -1, sizeof(::clarifai::api::DeleteInputsRequest)},
  { 475, -1, sizeof(::clarifai::api::SingleInputResponse)},
  { 482, -1, sizeof(::clarifai::api::MultiInputResponse)},
  { 489, -1, sizeof(::clarifai::api::MultiInputAnnotationResponse)},
  { 496, -1, sizeof(::clarifai::api::SingleInputCountResponse)},
  { 503, -1, sizeof(::clarifai::api::GetInputCountRequest)},
  { 509, -1, sizeof(::clarifai::api::PostModelOutputsRequest)},
  { 519, -1, sizeof(::clarifai::api::ListModelInputsRequest)},
  { 529, -1, sizeof(::clarifai::api::GetKeyRequest)},
  { 536, -1, sizeof(::clarifai::api::ListKeysRequest)},
  { 544, -1, sizeof(::clarifai::api::ListAppKeysRequest)},
  { 552, -1, sizeof(::clarifai::api::PostKeysRequest)},
  { 559, -1, sizeof(::clarifai::api::DeleteKeyRequest)},
  { 566, -1, sizeof(::clarifai::api::PatchKeysRequest)},
  { 574, -1, sizeof(::clarifai::api::SingleKeyResponse)},
  { 581, -1, sizeof(::clarifai::api::MultiKeyResponse)},
  { 588, -1, sizeof(::clarifai::api::GetModelRequest)},
  { 598, -1, sizeof(::clarifai::api::ListModelsRequest)},
  { 607, -1, sizeof(::clarifai::api::PostModelsRequest)},
  { 615, -1, sizeof(::clarifai::api::PatchModelsRequest)},
  { 623, -1, sizeof(::clarifai::api::DeleteModelRequest)},
  { 630, -1, sizeof(::clarifai::api::DeleteModelsRequest)},
  { 638, -1, sizeof(::clarifai::api::PostModelsSearchesRequest)},
  { 646, -1, sizeof(::clarifai::api::SingleModelResponse)},
  { 653, -1, sizeof(::clarifai::api::MultiModelResponse)},
  { 660, -1, sizeof(::clarifai::api::GetModelVersionRequest)},
  { 668, -1, sizeof(::clarifai::api::ListModelVersionsRequest)},
  { 678, -1, sizeof(::clarifai::api::DeleteModelVersionRequest)},
  { 686, -1, sizeof(::clarifai::api::SingleModelVersionResponse)},
  { 693, -1, sizeof(::clarifai::api::MultiModelVersionResponse)},
  { 700, -1, sizeof(::clarifai::api::PostModelVersionsRequest)},
  { 713, -1, sizeof(::clarifai::api::PostModelVersionMetricsRequest)},
  { 723, -1, sizeof(::clarifai::api::GetModelVersionMetricsRequest)},
  { 732, -1, sizeof(::clarifai::api::GetModelTypeRequest)},
  { 739, -1, sizeof(::clarifai::api::ListModelTypesRequest)},
  { 747, -1, sizeof(::clarifai::api::SingleModelTypeResponse)},
  { 754, -1, sizeof(::clarifai::api::MultiModelTypeResponse)},
  { 761, -1, sizeof(::clarifai::api::MultiOutputResponse)},
  { 768, -1, sizeof(::clarifai::api::ListScopesRequest)},
  { 774, -1, sizeof(::clarifai::api::MyScopesRequest)},
  { 780, -1, sizeof(::clarifai::api::MultiScopeDepsResponse)},
  { 788, -1, sizeof(::clarifai::api::MultiScopeResponse)},
  { 797, -1, sizeof(::clarifai::api::GetSearchRequest)},
  { 804, -1, sizeof(::clarifai::api::ListSearchesRequest)},
  { 812, -1, sizeof(::clarifai::api::PostSearchesRequest)},
  { 821, -1, sizeof(::clarifai::api::PostSearchesByIDRequest)},
  { 829, -1, sizeof(::clarifai::api::DeleteSearchRequest)},
  { 836, -1, sizeof(::clarifai::api::PostAnnotationsSearchesRequest)},
  { 844, -1, sizeof(::clarifai::api::DeleteAnnotationSearchMetricsRequest)},
  { 851, -1, sizeof(::clarifai::api::PostInputsSearchesRequest)},
  { 859, -1, sizeof(::clarifai::api::SingleSearchResponse)},
  { 866, -1, sizeof(::clarifai::api::MultiSearchResponse)},
  { 876, -1, sizeof(::clarifai::api::PostAnnotationSearchMetricsRequest)},
  { 887, -1, sizeof(::clarifai::api::GetAnnotationSearchMetricsRequest)},
  { 894, -1, sizeof(::clarifai::api::ListAnnotationSearchMetricsRequest)},
  { 900, -1, sizeof(::clarifai::api::MultiAnnotationSearchMetricsResponse)},
  { 907, -1, sizeof(::clarifai::api::PostValidatePasswordRequest)},
  { 914, -1, sizeof(::clarifai::api::SinglePasswordValidationResponse)},
  { 921, -1, sizeof(::clarifai::api::GetWorkflowRequest)},
  { 929, -1, sizeof(::clarifai::api::ListWorkflowsRequest)},
  { 937, -1, sizeof(::clarifai::api::PostWorkflowsRequest)},
  { 944, -1, sizeof(::clarifai::api::PatchWorkflowsRequest)},
  { 952, -1, sizeof(::clarifai::api::DeleteWorkflowRequest)},
  { 959, -1, sizeof(::clarifai::api::DeleteWorkflowsRequest)},
  { 967, -1, sizeof(::clarifai::api::SingleWorkflowResponse)},
  { 974, -1, sizeof(::clarifai::api::MultiWorkflowResponse)},
  { 981, -1, sizeof(::clarifai::api::PostWorkflowResultsRequest)},
  { 991, -1, sizeof(::clarifai::api::PostWorkflowResultsResponse)},
  { 999, -1, sizeof(::clarifai::api::PostWorkflowResultsSimilarityRequest)},
  { 1010, -1, sizeof(::clarifai::api::PostWorkflowResultsSimilarityResponse)},
  { 1017, -1, sizeof(::clarifai::api::PostAppDuplicationsRequest)},
  { 1024, -1, sizeof(::clarifai::api::GetAppDuplicationRequest)},
  { 1031, -1, sizeof(::clarifai::api::ListAppDuplicationsRequest)},
  { 1037, -1, sizeof(::clarifai::api::MultiAppDuplicationsResponse)},
  { 1044, -1, sizeof(::clarifai::api::SingleAppDuplicationResponse)},
  { 1051, -1, sizeof(::clarifai::api::PostTasksRequest)},
  { 1058, -1, sizeof(::clarifai::api::GetTaskRequest)},
  { 1065, -1, sizeof(::clarifai::api::ListTasksRequest)},
  { 1076, -1, sizeof(::clarifai::api::PatchTasksRequest)},
  { 1084, -1, sizeof(::clarifai::api::DeleteTasksRequest)},
  { 1091, -1, sizeof(::clarifai::api::MultiTaskResponse)},
  { 1098, -1, sizeof(::clarifai::api::SingleTaskResponse)},
  { 1105, -1, sizeof(::clarifai::api::GetTaskCountRequest)},
  { 1113, -1, sizeof(::clarifai::api::SingleTaskCountResponse)},
  { 1122, -1, sizeof(::clarifai::api::PostCollectorsRequest)},
  { 1129, -1, sizeof(::clarifai::api::PatchCollectorsRequest)},
  { 1137, -1, sizeof(::clarifai::api::DeleteCollectorsRequest)},
  { 1145, -1, sizeof(::clarifai::api::GetCollectorRequest)},
  { 1152, -1, sizeof(::clarifai::api::ListCollectorsRequest)},
  { 1160, -1, sizeof(::clarifai::api::MultiCollectorResponse)},
  { 1167, -1, sizeof(::clarifai::api::SingleCollectorResponse)},
  { 1174, -1, sizeof(::clarifai::api::PostStatValuesRequest)},
  { 1181, -1, sizeof(::clarifai::api::MultiStatValueResponse)},
  { 1188, -1, sizeof(::clarifai::api::PostStatValuesAggregateRequest)},
  { 1195, -1, sizeof(::clarifai::api::MultiStatValueAggregateResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Pagination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetAnnotationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAnnotationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAnnotationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAnnotationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAnnotationsStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAnnotationsStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteAnnotationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteAnnotationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleAnnotationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiAnnotationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetAppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAppsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAppsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteAppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAppsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAppsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListCollaboratorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostCollaboratorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchCollaboratorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteCollaboratorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiCollaboratorsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListCollaborationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiCollaborationsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetStatusCodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListStatusCodesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleStatusCodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiStatusCodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetConceptRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListConceptsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchConceptsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetConceptCountsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleConceptResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListConceptRelationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptRelationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteConceptRelationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListKnowledgeGraphsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostKnowledgeGraphsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptMappingJobsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptRelationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiKnowledgeGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptMappingJobResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetConceptLanguageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListConceptLanguagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchConceptLanguagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptLanguagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleConceptLanguageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptLanguageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetInputRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetInputSamplesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_StreamInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteInputRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleInputResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiInputResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiInputAnnotationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleInputCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetInputCountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelOutputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListModelInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAppKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetModelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListModelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchModelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteModelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteModelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleModelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiModelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetModelVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListModelVersionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteModelVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleModelVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiModelVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelVersionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelVersionMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetModelVersionMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetModelTypeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListModelTypesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleModelTypeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiModelTypeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiOutputResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListScopesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MyScopesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiScopeDepsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiScopeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetSearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostSearchesByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteSearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAnnotationsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteAnnotationSearchMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostInputsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleSearchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiSearchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAnnotationSearchMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetAnnotationSearchMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAnnotationSearchMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiAnnotationSearchMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostValidatePasswordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SinglePasswordValidationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetWorkflowRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListWorkflowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchWorkflowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteWorkflowRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteWorkflowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleWorkflowResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiWorkflowResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowResultsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowResultsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowResultsSimilarityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowResultsSimilarityResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAppDuplicationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetAppDuplicationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAppDuplicationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiAppDuplicationsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleAppDuplicationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostTasksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListTasksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchTasksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteTasksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiTaskResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleTaskResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetTaskCountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleTaskCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostCollectorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchCollectorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteCollectorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetCollectorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListCollectorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiCollectorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleCollectorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostStatValuesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiStatValueResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostStatValuesAggregateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiStatValueAggregateResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fapi_2fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n proto/clarifai/api/service.proto\022\014clar"
  "ifai.api\032\"proto/clarifai/api/resources.p"
  "roto\032&proto/clarifai/api/status/status.p"
  "roto\032)proto/clarifai/api/utils/extension"
  "s.proto\032%proto/clarifai/auth/scope/scope"
  ".proto\032(proto/clarifai/auth/util/extensi"
  "on.proto\032+proto/clarifai/api/status/stat"
  "us_code.proto\032\034google/api/annotations.pr"
  "oto\032\036google/protobuf/duration.proto\032\034goo"
  "gle/protobuf/struct.proto\032\037google/protob"
  "uf/timestamp.proto\",\n\nPagination\022\014\n\004page"
  "\030\001 \001(\r\022\020\n\010per_page\030\002 \001(\r\"p\n\024GetAnnotatio"
  "nRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai"
  ".api.UserAppIDSet\022\025\n\rannotation_id\030\002 \001(\t"
  "\022\020\n\010input_id\030\003 \001(\t\"\232\002\n\026ListAnnotationsRe"
  "quest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.ap"
  "i.UserAppIDSet\022\013\n\003ids\030\002 \003(\t\022\021\n\tinput_ids"
  "\030\003 \003(\t\022\020\n\010user_ids\030\t \003(\t\022\031\n\021model_versio"
  "n_ids\030\n \003(\t\022-\n\010statuses\030\005 \003(\0132\033.clarifai"
  ".api.status.Status\022\034\n\024list_all_annotatio"
  "ns\030\006 \001(\010\022\014\n\004page\030\007 \001(\r\022\020\n\010per_page\030\010 \001(\r"
  "\022\017\n\007task_id\030\013 \001(\tJ\004\010\004\020\005\"x\n\026PostAnnotatio"
  "nsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifa"
  "i.api.UserAppIDSet\022-\n\013annotations\030\002 \003(\0132"
  "\030.clarifai.api.Annotation\"\211\001\n\027PatchAnnot"
  "ationsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.cla"
  "rifai.api.UserAppIDSet\022-\n\013annotations\030\002 "
  "\003(\0132\030.clarifai.api.Annotation\022\016\n\006action\030"
  "\003 \001(\t\"\271\001\n\035PatchAnnotationsStatusRequest\022"
  "/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.User"
  "AppIDSet\0224\n\013status_code\030\002 \001(\0162\037.clarifai"
  ".api.status.StatusCode\022\020\n\010user_ids\030\003 \003(\t"
  "\022\017\n\007task_id\030\004 \001(\t\022\016\n\006action\030\005 \001(\t\"v\n\036Pat"
  "chAnnotationsStatusResponse\022+\n\006status\030\001 "
  "\001(\0132\033.clarifai.api.status.Status\022\020\n\010user"
  "_ids\030\002 \003(\t\022\025\n\rupdated_count\030\003 \001(\r\"s\n\027Del"
  "eteAnnotationRequest\022/\n\013user_app_id\030\001 \001("
  "\0132\032.clarifai.api.UserAppIDSet\022\020\n\010input_i"
  "d\030\002 \001(\t\022\025\n\rannotation_id\030\003 \001(\t\"k\n\030Delete"
  "AnnotationsRequest\022/\n\013user_app_id\030\001 \001(\0132"
  "\032.clarifai.api.UserAppIDSet\022\013\n\003ids\030\002 \003(\t"
  "\022\021\n\tinput_ids\030\003 \003(\t\"u\n\030SingleAnnotationR"
  "esponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.s"
  "tatus.Status\022,\n\nannotation\030\002 \001(\0132\030.clari"
  "fai.api.Annotation\"{\n\027MultiAnnotationRes"
  "ponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.sta"
  "tus.Status\0223\n\013annotations\030\002 \003(\0132\030.clarif"
  "ai.api.AnnotationB\004\200\265\030\001\"@\n\rGetAppRequest"
  "\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.Use"
  "rAppIDSet\"b\n\017ListAppsRequest\022/\n\013user_app"
  "_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\014\n"
  "\004page\030\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\"c\n\017PostApp"
  "sRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai"
  ".api.UserAppIDSet\022\037\n\004apps\030\002 \003(\0132\021.clarif"
  "ai.api.App\"C\n\020DeleteAppRequest\022/\n\013user_a"
  "pp_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\""
  "\271\001\n\020PatchAppsRequest\022/\n\013user_app_id\030\001 \001("
  "\0132\032.clarifai.api.UserAppIDSet\022\037\n\004apps\030\002 "
  "\003(\0132\021.clarifai.api.App\022\016\n\006action\030\003 \001(\t\0222"
  "\n\017metadata_action\030\004 \001(\0132\031.clarifai.api.P"
  "atchAction\022\017\n\007reindex\030\005 \001(\010\"\243\001\n\027PostApps"
  "SearchesRequest\022/\n\013user_app_id\030\001 \001(\0132\032.c"
  "larifai.api.UserAppIDSet\022)\n\tapp_query\030\002 "
  "\001(\0132\026.clarifai.api.AppQuery\022,\n\npaginatio"
  "n\030\003 \001(\0132\030.clarifai.api.Pagination\"`\n\021Sin"
  "gleAppResponse\022+\n\006status\030\001 \001(\0132\033.clarifa"
  "i.api.status.Status\022\036\n\003app\030\002 \001(\0132\021.clari"
  "fai.api.App\"f\n\020MultiAppResponse\022+\n\006statu"
  "s\030\001 \001(\0132\033.clarifai.api.status.Status\022%\n\004"
  "apps\030\002 \003(\0132\021.clarifai.api.AppB\004\200\265\030\001\"k\n\030L"
  "istCollaboratorsRequest\022/\n\013user_app_id\030\001"
  " \001(\0132\032.clarifai.api.UserAppIDSet\022\036\n\026list"
  "_all_collaborators\030\002 \001(\010\"~\n\030PostCollabor"
  "atorsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clar"
  "ifai.api.UserAppIDSet\0221\n\rcollaborators\030\002"
  " \003(\0132\032.clarifai.api.Collaborator\"\217\001\n\031Pat"
  "chCollaboratorsRequest\022/\n\013user_app_id\030\001 "
  "\001(\0132\032.clarifai.api.UserAppIDSet\0221\n\rcolla"
  "borators\030\002 \003(\0132\032.clarifai.api.Collaborat"
  "or\022\016\n\006action\030\003 \001(\t\"|\n\032DeleteCollaborator"
  "sRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai"
  ".api.UserAppIDSet\022\030\n\020collaborator_ids\030\002 "
  "\003(\t\022\023\n\013user_emails\030\003 \003(\t\"\202\001\n\032MultiCollab"
  "oratorsResponse\022+\n\006status\030\001 \001(\0132\033.clarif"
  "ai.api.status.Status\0227\n\rcollaborators\030\002 "
  "\003(\0132\032.clarifai.api.CollaboratorB\004\200\265\030\001\"l\n"
  "\031ListCollaborationsRequest\022/\n\013user_app_i"
  "d\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\014\n\004p"
  "age\030\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\"\205\001\n\033MultiCol"
  "laborationsResponse\022+\n\006status\030\001 \001(\0132\033.cl"
  "arifai.api.status.Status\0229\n\016collaboratio"
  "ns\030\002 \003(\0132\033.clarifai.api.CollaborationB\004\200"
  "\265\030\001\".\n\024GetStatusCodeRequest\022\026\n\016status_co"
  "de_id\030\001 \001(\t\"\030\n\026ListStatusCodesRequest\"G\n"
  "\030SingleStatusCodeResponse\022+\n\006status\030\001 \001("
  "\0132\033.clarifai.api.status.Status\"u\n\027MultiS"
  "tatusCodeResponse\022+\n\006status\030\001 \001(\0132\033.clar"
  "ifai.api.status.Status\022-\n\010statuses\030\002 \003(\013"
  "2\033.clarifai.api.status.Status\"X\n\021GetConc"
  "eptRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarif"
  "ai.api.UserAppIDSet\022\022\n\nconcept_id\030\002 \001(\t\""
  "f\n\023ListConceptsRequest\022/\n\013user_app_id\030\001 "
  "\001(\0132\032.clarifai.api.UserAppIDSet\022\014\n\004page\030"
  "\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\"\257\001\n\033PostConcepts"
  "SearchesRequest\022/\n\013user_app_id\030\001 \001(\0132\032.c"
  "larifai.api.UserAppIDSet\0221\n\rconcept_quer"
  "y\030\002 \001(\0132\032.clarifai.api.ConceptQuery\022,\n\np"
  "agination\030\003 \001(\0132\030.clarifai.api.Paginatio"
  "n\"o\n\023PostConceptsRequest\022/\n\013user_app_id\030"
  "\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\'\n\010con"
  "cepts\030\002 \003(\0132\025.clarifai.api.Concept\"\200\001\n\024P"
  "atchConceptsRequest\022/\n\013user_app_id\030\001 \001(\013"
  "2\032.clarifai.api.UserAppIDSet\022\'\n\010concepts"
  "\030\002 \003(\0132\025.clarifai.api.Concept\022\016\n\006action\030"
  "\003 \001(\t\"j\n\027GetConceptCountsRequest\022/\n\013user"
  "_app_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSe"
  "t\022\014\n\004page\030\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\"l\n\025Sin"
  "gleConceptResponse\022+\n\006status\030\001 \001(\0132\033.cla"
  "rifai.api.status.Status\022&\n\007concept\030\002 \001(\013"
  "2\025.clarifai.api.Concept\"r\n\024MultiConceptR"
  "esponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.s"
  "tatus.Status\022-\n\010concepts\030\002 \003(\0132\025.clarifa"
  "i.api.ConceptB\004\200\265\030\001\"\202\001\n\031MultiConceptCoun"
  "tResponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api"
  ".status.Status\0228\n\016concept_counts\030\002 \003(\0132\032"
  ".clarifai.api.ConceptCountB\004\200\265\030\001\"\261\001\n\033Lis"
  "tConceptRelationsRequest\022/\n\013user_app_id\030"
  "\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\022\n\ncon"
  "cept_id\030\002 \001(\t\022\021\n\tpredicate\030\003 \001(\t\022\032\n\022know"
  "ledge_graph_id\030\004 \001(\t\022\014\n\004page\030\005 \001(\r\022\020\n\010pe"
  "r_page\030\006 \001(\r\"\234\001\n\033PostConceptRelationsReq"
  "uest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api"
  ".UserAppIDSet\022\022\n\nconcept_id\030\002 \001(\t\0228\n\021con"
  "cept_relations\030\003 \003(\0132\035.clarifai.api.Conc"
  "eptRelation\"q\n\035DeleteConceptRelationsReq"
  "uest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api"
  ".UserAppIDSet\022\022\n\nconcept_id\030\002 \001(\t\022\013\n\003ids"
  "\030\003 \003(\t\"M\n\032ListKnowledgeGraphsRequest\022/\n\013"
  "user_app_id\030\001 \001(\0132\032.clarifai.api.UserApp"
  "IDSet\"\205\001\n\032PostKnowledgeGraphsRequest\022/\n\013"
  "user_app_id\030\001 \001(\0132\032.clarifai.api.UserApp"
  "IDSet\0226\n\020knowledge_graphs\030\002 \003(\0132\034.clarif"
  "ai.api.KnowledgeGraph\"\217\001\n\035PostConceptMap"
  "pingJobsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.c"
  "larifai.api.UserAppIDSet\022=\n\024concept_mapp"
  "ing_jobs\030\002 \003(\0132\037.clarifai.api.ConceptMap"
  "pingJob\"\213\001\n\034MultiConceptRelationResponse"
  "\022+\n\006status\030\001 \001(\0132\033.clarifai.api.status.S"
  "tatus\022>\n\021concept_relations\030\002 \003(\0132\035.clari"
  "fai.api.ConceptRelationB\004\200\265\030\001\"\210\001\n\033MultiK"
  "nowledgeGraphResponse\022+\n\006status\030\001 \001(\0132\033."
  "clarifai.api.status.Status\022<\n\020knowledge_"
  "graphs\030\002 \003(\0132\034.clarifai.api.KnowledgeGra"
  "phB\004\200\265\030\001\"Z\n\036MultiConceptMappingJobRespon"
  "se\022+\n\006status\030\001 \001(\0132\033.clarifai.api.status"
  ".Status\022\013\n\003ids\030\002 \003(\t\"r\n\031GetConceptLangua"
  "geRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifa"
  "i.api.UserAppIDSet\022\022\n\nconcept_id\030\002 \001(\t\022\020"
  "\n\010language\030\003 \001(\t\"\202\001\n\033ListConceptLanguage"
  "sRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai"
  ".api.UserAppIDSet\022\022\n\nconcept_id\030\002 \001(\t\022\014\n"
  "\004page\030\003 \001(\r\022\020\n\010per_page\030\004 \001(\r\"\255\001\n\034PatchC"
  "onceptLanguagesRequest\022/\n\013user_app_id\030\001 "
  "\001(\0132\032.clarifai.api.UserAppIDSet\022\022\n\nconce"
  "pt_id\030\002 \001(\t\0228\n\021concept_languages\030\003 \003(\0132\035"
  ".clarifai.api.ConceptLanguage\022\016\n\006action\030"
  "\004 \001(\t\"\234\001\n\033PostConceptLanguagesRequest\022/\n"
  "\013user_app_id\030\001 \001(\0132\032.clarifai.api.UserAp"
  "pIDSet\022\022\n\nconcept_id\030\002 \001(\t\0228\n\021concept_la"
  "nguages\030\003 \003(\0132\035.clarifai.api.ConceptLang"
  "uage\"\205\001\n\035SingleConceptLanguageResponse\022+"
  "\n\006status\030\001 \001(\0132\033.clarifai.api.status.Sta"
  "tus\0227\n\020concept_language\030\002 \001(\0132\035.clarifai"
  ".api.ConceptLanguage\"\213\001\n\034MultiConceptLan"
  "guageResponse\022+\n\006status\030\001 \001(\0132\033.clarifai"
  ".api.status.Status\022>\n\021concept_languages\030"
  "\002 \003(\0132\035.clarifai.api.ConceptLanguageB\004\200\265"
  "\030\001\"T\n\017GetInputRequest\022/\n\013user_app_id\030\001 \001"
  "(\0132\032.clarifai.api.UserAppIDSet\022\020\n\010input_"
  "id\030\002 \001(\t\"l\n\026GetInputSamplesRequest\022/\n\013us"
  "er_app_id\030\001 \001(\0132\032.clarifai.api.UserAppID"
  "Set\022\017\n\007task_id\030\002 \001(\t\022\020\n\010user_ids\030\003 \003(\t\"\236"
  "\001\n\021ListInputsRequest\022/\n\013user_app_id\030\001 \001("
  "\0132\032.clarifai.api.UserAppIDSet\022\014\n\004page\030\002 "
  "\001(\r\022\020\n\010per_page\030\003 \001(\r\022+\n\006status\030\005 \001(\0132\033."
  "clarifai.api.status.Status\022\013\n\003ids\030\004 \003(\t\""
  "}\n\023StreamInputsRequest\022/\n\013user_app_id\030\001 "
  "\001(\0132\032.clarifai.api.UserAppIDSet\022\020\n\010per_p"
  "age\030\002 \001(\r\022\017\n\007last_id\030\003 \001(\t\022\022\n\ndescending"
  "\030\004 \001(\010\"i\n\021PostInputsRequest\022/\n\013user_app_"
  "id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022#\n\006"
  "inputs\030\002 \003(\0132\023.clarifai.api.Input\"z\n\022Pat"
  "chInputsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.c"
  "larifai.api.UserAppIDSet\022#\n\006inputs\030\002 \003(\013"
  "2\023.clarifai.api.Input\022\016\n\006action\030\003 \001(\t\"W\n"
  "\022DeleteInputRequest\022/\n\013user_app_id\030\001 \001(\013"
  "2\032.clarifai.api.UserAppIDSet\022\020\n\010input_id"
  "\030\002 \001(\t\"g\n\023DeleteInputsRequest\022/\n\013user_ap"
  "p_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\013"
  "\n\003ids\030\002 \003(\t\022\022\n\ndelete_all\030\003 \001(\010\"f\n\023Singl"
  "eInputResponse\022+\n\006status\030\001 \001(\0132\033.clarifa"
  "i.api.status.Status\022\"\n\005input\030\002 \001(\0132\023.cla"
  "rifai.api.Input\"l\n\022MultiInputResponse\022+\n"
  "\006status\030\001 \001(\0132\033.clarifai.api.status.Stat"
  "us\022)\n\006inputs\030\002 \003(\0132\023.clarifai.api.InputB"
  "\004\200\265\030\001\"r\n\034MultiInputAnnotationResponse\022+\n"
  "\006status\030\001 \001(\0132\033.clarifai.api.status.Stat"
  "us\022%\n\004hits\030\003 \003(\0132\021.clarifai.api.HitB\004\200\265\030"
  "\001\"q\n\030SingleInputCountResponse\022+\n\006status\030"
  "\001 \001(\0132\033.clarifai.api.status.Status\022(\n\006co"
  "unts\030\002 \001(\0132\030.clarifai.api.InputCount\"G\n\024"
  "GetInputCountRequest\022/\n\013user_app_id\030\001 \001("
  "\0132\032.clarifai.api.UserAppIDSet\"\271\001\n\027PostMo"
  "delOutputsRequest\022/\n\013user_app_id\030\001 \001(\0132\032"
  ".clarifai.api.UserAppIDSet\022\020\n\010model_id\030\002"
  " \001(\t\022\022\n\nversion_id\030\003 \001(\t\022#\n\006inputs\030\004 \003(\013"
  "2\023.clarifai.api.Input\022\"\n\005model\030\005 \001(\0132\023.c"
  "larifai.api.Model\"\217\001\n\026ListModelInputsReq"
  "uest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api"
  ".UserAppIDSet\022\020\n\010model_id\030\002 \001(\t\022\022\n\nversi"
  "on_id\030\003 \001(\t\022\014\n\004page\030\004 \001(\r\022\020\n\010per_page\030\005 "
  "\001(\r\"P\n\rGetKeyRequest\022/\n\013user_app_id\030\001 \001("
  "\0132\032.clarifai.api.UserAppIDSet\022\016\n\006key_id\030"
  "\002 \001(\t\"b\n\017ListKeysRequest\022/\n\013user_app_id\030"
  "\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\014\n\004pag"
  "e\030\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\"e\n\022ListAppKeys"
  "Request\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai."
  "api.UserAppIDSet\022\014\n\004page\030\002 \001(\r\022\020\n\010per_pa"
  "ge\030\003 \001(\r\"c\n\017PostKeysRequest\022/\n\013user_app_"
  "id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\037\n\004"
  "keys\030\002 \003(\0132\021.clarifai.api.Key\"S\n\020DeleteK"
  "eyRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifa"
  "i.api.UserAppIDSet\022\016\n\006key_id\030\002 \001(\t\"t\n\020Pa"
  "tchKeysRequest\022/\n\013user_app_id\030\001 \001(\0132\032.cl"
  "arifai.api.UserAppIDSet\022\037\n\004keys\030\002 \003(\0132\021."
  "clarifai.api.Key\022\016\n\006action\030\003 \001(\t\"`\n\021Sing"
  "leKeyResponse\022+\n\006status\030\001 \001(\0132\033.clarifai"
  ".api.status.Status\022\036\n\003key\030\002 \001(\0132\021.clarif"
  "ai.api.Key\"f\n\020MultiKeyResponse\022+\n\006status"
  "\030\001 \001(\0132\033.clarifai.api.status.Status\022%\n\004k"
  "eys\030\002 \003(\0132\021.clarifai.api.KeyB\004\200\265\030\001\"\222\001\n\017G"
  "etModelRequest\022/\n\013user_app_id\030\001 \001(\0132\032.cl"
  "arifai.api.UserAppIDSet\022\020\n\010model_id\030\002 \001("
  "\t\022\022\n\nversion_id\030\003 \001(\t\022\020\n\010language\030\004 \001(\t\022"
  "\026\n\016trained_before\030\005 \001(\010\"q\n\021ListModelsReq"
  "uest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api"
  ".UserAppIDSet\022\014\n\004page\030\002 \001(\r\022\020\n\010per_page\030"
  "\003 \001(\r\022\013\n\003ids\030\004 \003(\t\"\221\001\n\021PostModelsRequest"
  "\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.Use"
  "rAppIDSet\022&\n\005model\030\002 \001(\0132\023.clarifai.api."
  "ModelB\002\030\001\022#\n\006models\030\003 \003(\0132\023.clarifai.api"
  ".Model\"z\n\022PatchModelsRequest\022/\n\013user_app"
  "_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022#\n"
  "\006models\030\002 \003(\0132\023.clarifai.api.Model\022\016\n\006ac"
  "tion\030\003 \001(\t\"W\n\022DeleteModelRequest\022/\n\013user"
  "_app_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSe"
  "t\022\020\n\010model_id\030\002 \001(\t\"g\n\023DeleteModelsReque"
  "st\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.U"
  "serAppIDSet\022\013\n\003ids\030\002 \003(\t\022\022\n\ndelete_all\030\003"
  " \001(\010\"\251\001\n\031PostModelsSearchesRequest\022/\n\013us"
  "er_app_id\030\001 \001(\0132\032.clarifai.api.UserAppID"
  "Set\022-\n\013model_query\030\002 \001(\0132\030.clarifai.api."
  "ModelQuery\022,\n\npagination\030\003 \001(\0132\030.clarifa"
  "i.api.Pagination\"f\n\023SingleModelResponse\022"
  "+\n\006status\030\001 \001(\0132\033.clarifai.api.status.St"
  "atus\022\"\n\005model\030\002 \001(\0132\023.clarifai.api.Model"
  "\"l\n\022MultiModelResponse\022+\n\006status\030\001 \001(\0132\033"
  ".clarifai.api.status.Status\022)\n\006models\030\002 "
  "\003(\0132\023.clarifai.api.ModelB\004\200\265\030\001\"o\n\026GetMod"
  "elVersionRequest\022/\n\013user_app_id\030\001 \001(\0132\032."
  "clarifai.api.UserAppIDSet\022\020\n\010model_id\030\002 "
  "\001(\t\022\022\n\nversion_id\030\003 \001(\t\"\222\001\n\030ListModelVer"
  "sionsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clar"
  "ifai.api.UserAppIDSet\022\020\n\010model_id\030\002 \001(\t\022"
  "\014\n\004page\030\003 \001(\r\022\020\n\010per_page\030\004 \001(\r\022\023\n\013conce"
  "pt_ids\030\005 \003(\t\"r\n\031DeleteModelVersionReques"
  "t\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.Us"
  "erAppIDSet\022\020\n\010model_id\030\003 \001(\t\022\022\n\nversion_"
  "id\030\004 \001(\t\"|\n\032SingleModelVersionResponse\022+"
  "\n\006status\030\001 \001(\0132\033.clarifai.api.status.Sta"
  "tus\0221\n\rmodel_version\030\002 \001(\0132\032.clarifai.ap"
  "i.ModelVersion\"\202\001\n\031MultiModelVersionResp"
  "onse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.stat"
  "us.Status\0228\n\016model_versions\030\002 \003(\0132\032.clar"
  "ifai.api.ModelVersionB\004\200\265\030\001\"\310\002\n\030PostMode"
  "lVersionsRequest\022/\n\013user_app_id\030\001 \001(\0132\032."
  "clarifai.api.UserAppIDSet\022\020\n\010model_id\030\002 "
  "\001(\t\0222\n\016model_versions\030\003 \003(\0132\032.clarifai.a"
  "pi.ModelVersion\022(\n\006search\030\004 \001(\0132\024.clarif"
  "ai.api.SearchB\002\030\001\022*\n\014train_search\030\005 \001(\0132"
  "\024.clarifai.api.Search\022)\n\013test_search\030\006 \001"
  "(\0132\024.clarifai.api.Search\022\037\n\027evaluate_aft"
  "er_training\030\007 \001(\010\022\023\n\013description\030\010 \001(\t\"\270"
  "\001\n\036PostModelVersionMetricsRequest\022/\n\013use"
  "r_app_id\030\001 \001(\0132\032.clarifai.api.UserAppIDS"
  "et\022\020\n\010model_id\030\002 \001(\t\022\022\n\nversion_id\030\003 \001(\t"
  "\022\024\n\014max_examples\030\004 \001(\r\022)\n\013test_search\030\005 "
  "\001(\0132\024.clarifai.api.Search\"\241\001\n\035GetModelVe"
  "rsionMetricsRequest\022/\n\013user_app_id\030\001 \001(\013"
  "2\032.clarifai.api.UserAppIDSet\022\020\n\010model_id"
  "\030\002 \001(\t\022\022\n\nversion_id\030\003 \001(\t\022)\n\006fields\030\004 \001"
  "(\0132\031.clarifai.api.FieldsValue\"]\n\023GetMode"
  "lTypeRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clar"
  "ifai.api.UserAppIDSet\022\025\n\rmodel_type_id\030\002"
  " \001(\t\"h\n\025ListModelTypesRequest\022/\n\013user_ap"
  "p_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\014"
  "\n\004page\030\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\"y\n\027Single"
  "ModelTypeResponse\022+\n\006status\030\001 \001(\0132\033.clar"
  "ifai.api.status.Status\0221\n\nmodel_type\030\002 \001"
  "(\0132\027.clarifai.api.ModelTypeB\004\200\265\030\001\"y\n\026Mul"
  "tiModelTypeResponse\022+\n\006status\030\001 \001(\0132\033.cl"
  "arifai.api.status.Status\0222\n\013model_types\030"
  "\002 \003(\0132\027.clarifai.api.ModelTypeB\004\200\265\030\001\"o\n\023"
  "MultiOutputResponse\022+\n\006status\030\001 \001(\0132\033.cl"
  "arifai.api.status.Status\022+\n\007outputs\030\002 \003("
  "\0132\024.clarifai.api.OutputB\004\200\265\030\001\"%\n\021ListSco"
  "pesRequest\022\020\n\010key_type\030\001 \001(\t\"B\n\017MyScopes"
  "Request\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai."
  "api.UserAppIDSet\"\245\001\n\026MultiScopeDepsRespo"
  "nse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.statu"
  "s.Status\022+\n\nscope_deps\030\002 \003(\0132\027.clarifai."
  "api.ScopeDeps\0221\n\rendpoint_deps\030\003 \003(\0132\032.c"
  "larifai.api.EndpointDeps\"\204\001\n\022MultiScopeR"
  "esponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.s"
  "tatus.Status\022\016\n\006scopes\030\002 \003(\t\022\036\n\003app\030\003 \001("
  "\0132\021.clarifai.api.App\022\021\n\tendpoints\030\004 \003(\t\""
  "O\n\020GetSearchRequest\022/\n\013user_app_id\030\001 \001(\013"
  "2\032.clarifai.api.UserAppIDSet\022\n\n\002id\030\002 \001(\t"
  "\"f\n\023ListSearchesRequest\022/\n\013user_app_id\030\001"
  " \001(\0132\032.clarifai.api.UserAppIDSet\022\014\n\004page"
  "\030\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\"\304\001\n\023PostSearche"
  "sRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai"
  ".api.UserAppIDSet\022&\n\005query\030\002 \001(\0132\023.clari"
  "fai.api.QueryB\002\030\001\022&\n\010searches\030\003 \003(\0132\024.cl"
  "arifai.api.Search\022,\n\npagination\030\004 \001(\0132\030."
  "clarifai.api.Pagination\"\204\001\n\027PostSearches"
  "ByIDRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clari"
  "fai.api.UserAppIDSet\022\n\n\002id\030\002 \001(\t\022,\n\npagi"
  "nation\030\003 \001(\0132\030.clarifai.api.Pagination\"R"
  "\n\023DeleteSearchRequest\022/\n\013user_app_id\030\001 \001"
  "(\0132\032.clarifai.api.UserAppIDSet\022\n\n\002id\030\002 \001"
  "(\t\"\247\001\n\036PostAnnotationsSearchesRequest\022/\n"
  "\013user_app_id\030\001 \001(\0132\032.clarifai.api.UserAp"
  "pIDSet\022&\n\010searches\030\002 \003(\0132\024.clarifai.api."
  "Search\022,\n\npagination\030\003 \001(\0132\030.clarifai.ap"
  "i.Pagination\"c\n$DeleteAnnotationSearchMe"
  "tricsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clar"
  "ifai.api.UserAppIDSet\022\n\n\002id\030\002 \001(\t\"\242\001\n\031Po"
  "stInputsSearchesRequest\022/\n\013user_app_id\030\001"
  " \001(\0132\032.clarifai.api.UserAppIDSet\022&\n\010sear"
  "ches\030\002 \003(\0132\024.clarifai.api.Search\022,\n\npagi"
  "nation\030\003 \001(\0132\030.clarifai.api.Pagination\"i"
  "\n\024SingleSearchResponse\022+\n\006status\030\001 \001(\0132\033"
  ".clarifai.api.status.Status\022$\n\006search\030\005 "
  "\001(\0132\024.clarifai.api.Search\"\301\001\n\023MultiSearc"
  "hResponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api"
  ".status.Status\022\n\n\002id\030\002 \001(\t\022%\n\004hits\030\003 \003(\013"
  "2\021.clarifai.api.HitB\004\200\265\030\001\022\"\n\005query\030\004 \001(\013"
  "2\023.clarifai.api.Query\022&\n\010searches\030\005 \003(\0132"
  "\024.clarifai.api.Search\"\224\002\n\"PostAnnotation"
  "SearchMetricsRequest\022/\n\013user_app_id\030\001 \001("
  "\0132\032.clarifai.api.UserAppIDSet\022\n\n\002id\030\002 \001("
  "\t\022*\n\014ground_truth\030\003 \001(\0132\024.clarifai.api.S"
  "earch\022,\n\016search_to_eval\030\004 \001(\0132\024.clarifai"
  ".api.Search\022 \n\004data\030\005 \001(\0132\022.clarifai.api"
  ".Data\0225\n\017evaluation_type\030\006 \001(\0162\034.clarifa"
  "i.api.EvaluationType\"`\n!GetAnnotationSea"
  "rchMetricsRequest\022/\n\013user_app_id\030\001 \001(\0132\032"
  ".clarifai.api.UserAppIDSet\022\n\n\002id\030\002 \001(\t\"U"
  "\n\"ListAnnotationSearchMetricsRequest\022/\n\013"
  "user_app_id\030\001 \001(\0132\032.clarifai.api.UserApp"
  "IDSet\"\235\001\n$MultiAnnotationSearchMetricsRe"
  "sponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.st"
  "atus.Status\022H\n\031annotation_search_metrics"
  "\030\002 \003(\0132%.clarifai.api.AnnotationSearchMe"
  "trics\"x\n\033PostValidatePasswordRequest\022/\n\013"
  "user_app_id\030\001 \001(\0132\032.clarifai.api.UserApp"
  "IDSet\022(\n\010password\030\002 \001(\0132\026.clarifai.api.P"
  "assword\"\216\001\n SinglePasswordValidationResp"
  "onse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.stat"
  "us.Status\022=\n\023password_violations\030\002 \001(\0132 "
  ".clarifai.api.PasswordViolations\"|\n\022GetW"
  "orkflowRequest\022/\n\013user_app_id\030\001 \001(\0132\032.cl"
  "arifai.api.UserAppIDSet\022\023\n\013workflow_id\030\002"
  " \001(\t\022 \n\030favor_clarifai_workflows\030\003 \001(\010\"g"
  "\n\024ListWorkflowsRequest\022/\n\013user_app_id\030\001 "
  "\001(\0132\032.clarifai.api.UserAppIDSet\022\014\n\004page\030"
  "\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\"r\n\024PostWorkflows"
  "Request\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai."
  "api.UserAppIDSet\022)\n\tworkflows\030\002 \003(\0132\026.cl"
  "arifai.api.Workflow\"\203\001\n\025PatchWorkflowsRe"
  "quest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.ap"
  "i.UserAppIDSet\022)\n\tworkflows\030\002 \003(\0132\026.clar"
  "ifai.api.Workflow\022\016\n\006action\030\003 \001(\t\"]\n\025Del"
  "eteWorkflowRequest\022/\n\013user_app_id\030\001 \001(\0132"
  "\032.clarifai.api.UserAppIDSet\022\023\n\013workflow_"
  "id\030\002 \001(\t\"j\n\026DeleteWorkflowsRequest\022/\n\013us"
  "er_app_id\030\001 \001(\0132\032.clarifai.api.UserAppID"
  "Set\022\013\n\003ids\030\002 \003(\t\022\022\n\ndelete_all\030\003 \001(\010\"o\n\026"
  "SingleWorkflowResponse\022+\n\006status\030\001 \001(\0132\033"
  ".clarifai.api.status.Status\022(\n\010workflow\030"
  "\002 \001(\0132\026.clarifai.api.Workflow\"u\n\025MultiWo"
  "rkflowResponse\022+\n\006status\030\001 \001(\0132\033.clarifa"
  "i.api.status.Status\022/\n\tworkflows\030\002 \003(\0132\026"
  ".clarifai.api.WorkflowB\004\200\265\030\001\"\334\001\n\032PostWor"
  "kflowResultsRequest\022/\n\013user_app_id\030\001 \001(\013"
  "2\032.clarifai.api.UserAppIDSet\022\023\n\013workflow"
  "_id\030\002 \001(\t\022#\n\006inputs\030\003 \003(\0132\023.clarifai.api"
  ".Input\0221\n\routput_config\030\004 \001(\0132\032.clarifai"
  ".api.OutputConfig\022 \n\030favor_clarifai_work"
  "flows\030\005 \001(\010\"\243\001\n\033PostWorkflowResultsRespo"
  "nse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.statu"
  "s.Status\022(\n\010workflow\030\002 \001(\0132\026.clarifai.ap"
  "i.Workflow\022-\n\007results\030\003 \003(\0132\034.clarifai.a"
  "pi.WorkflowResult\"\375\001\n$PostWorkflowResult"
  "sSimilarityRequest\022/\n\013user_app_id\030\001 \001(\0132"
  "\032.clarifai.api.UserAppIDSet\022\023\n\013workflow_"
  "id\030\002 \001(\t\022\030\n\020model_version_id\030\003 \001(\t\022)\n\014pr"
  "obe_inputs\030\004 \003(\0132\023.clarifai.api.Input\022(\n"
  "\013pool_inputs\030\005 \003(\0132\023.clarifai.api.Input\022"
  " \n\030favor_clarifai_workflows\030\006 \001(\010\"\216\001\n%Po"
  "stWorkflowResultsSimilarityResponse\022+\n\006s"
  "tatus\030\001 \001(\0132\033.clarifai.api.status.Status"
  "\0228\n\007results\030\002 \003(\0132\'.clarifai.api.Workflo"
  "wResultsSimilarity\"\205\001\n\032PostAppDuplicatio"
  "nsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifa"
  "i.api.UserAppIDSet\0226\n\020app_duplications\030\002"
  " \003(\0132\034.clarifai.api.AppDuplication\"g\n\030Ge"
  "tAppDuplicationRequest\022/\n\013user_app_id\030\001 "
  "\001(\0132\032.clarifai.api.UserAppIDSet\022\032\n\022app_d"
  "uplication_id\030\002 \001(\t\"M\n\032ListAppDuplicatio"
  "nsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifa"
  "i.api.UserAppIDSet\"\203\001\n\034MultiAppDuplicati"
  "onsResponse\022+\n\006status\030\001 \001(\0132\033.clarifai.a"
  "pi.status.Status\0226\n\020app_duplications\030\002 \003"
  "(\0132\034.clarifai.api.AppDuplication\"\202\001\n\034Sin"
  "gleAppDuplicationResponse\022+\n\006status\030\001 \001("
  "\0132\033.clarifai.api.status.Status\0225\n\017app_du"
  "plication\030\002 \001(\0132\034.clarifai.api.AppDuplic"
  "ation\"f\n\020PostTasksRequest\022/\n\013user_app_id"
  "\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022!\n\005ta"
  "sks\030\002 \003(\0132\022.clarifai.api.Task\"R\n\016GetTask"
  "Request\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai."
  "api.UserAppIDSet\022\017\n\007task_id\030\002 \001(\t\"\272\001\n\020Li"
  "stTasksRequest\022/\n\013user_app_id\030\001 \001(\0132\032.cl"
  "arifai.api.UserAppIDSet\022\014\n\004page\030\002 \001(\r\022\020\n"
  "\010per_page\030\003 \001(\r\022\027\n\017worker_user_ids\030\004 \003(\t"
  "\022\027\n\017review_user_ids\030\005 \003(\t\022#\n\033including_l"
  "abel_order_tasks\030\006 \001(\010\"w\n\021PatchTasksRequ"
  "est\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api."
  "UserAppIDSet\022!\n\005tasks\030\002 \003(\0132\022.clarifai.a"
  "pi.Task\022\016\n\006action\030\003 \001(\t\"R\n\022DeleteTasksRe"
  "quest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.ap"
  "i.UserAppIDSet\022\013\n\003ids\030\002 \003(\t\"i\n\021MultiTask"
  "Response\022+\n\006status\030\001 \001(\0132\033.clarifai.api."
  "status.Status\022\'\n\005tasks\030\002 \003(\0132\022.clarifai."
  "api.TaskB\004\200\265\030\001\"c\n\022SingleTaskResponse\022+\n\006"
  "status\030\001 \001(\0132\033.clarifai.api.status.Statu"
  "s\022 \n\004task\030\002 \001(\0132\022.clarifai.api.Task\"i\n\023G"
  "etTaskCountRequest\022/\n\013user_app_id\030\001 \001(\0132"
  "\032.clarifai.api.UserAppIDSet\022\017\n\007task_id\030\002"
  " \001(\t\022\020\n\010user_ids\030\003 \003(\t\"\235\001\n\027SingleTaskCou"
  "ntResponse\022+\n\006status\030\001 \001(\0132\033.clarifai.ap"
  "i.status.Status\022\016\n\006app_id\030\002 \001(\t\022\017\n\007task_"
  "id\030\003 \001(\t\0224\n\006counts\030\004 \003(\0132$.clarifai.api."
  "TaskStatusCountPerUser\"u\n\025PostCollectors"
  "Request\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai."
  "api.UserAppIDSet\022+\n\ncollectors\030\002 \003(\0132\027.c"
  "larifai.api.Collector\"\206\001\n\026PatchCollector"
  "sRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai"
  ".api.UserAppIDSet\022+\n\ncollectors\030\002 \003(\0132\027."
  "clarifai.api.Collector\022\016\n\006action\030\003 \001(\t\"k"
  "\n\027DeleteCollectorsRequest\022/\n\013user_app_id"
  "\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\013\n\003id"
  "s\030\002 \003(\t\022\022\n\ndelete_all\030\003 \001(\010\"\\\n\023GetCollec"
  "torRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarif"
  "ai.api.UserAppIDSet\022\024\n\014collector_id\030\002 \001("
  "\t\"h\n\025ListCollectorsRequest\022/\n\013user_app_i"
  "d\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\014\n\004p"
  "age\030\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\"r\n\026MultiColl"
  "ectorResponse\022+\n\006status\030\001 \001(\0132\033.clarifai"
  ".api.status.Status\022+\n\ncollectors\030\002 \003(\0132\027"
  ".clarifai.api.Collector\"r\n\027SingleCollect"
  "orResponse\022+\n\006status\030\001 \001(\0132\033.clarifai.ap"
  "i.status.Status\022*\n\tcollector\030\002 \001(\0132\027.cla"
  "rifai.api.Collector\"v\n\025PostStatValuesReq"
  "uest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api"
  ".UserAppIDSet\022,\n\013stat_values\030\002 \003(\0132\027.cla"
  "rifai.api.StatValue\"y\n\026MultiStatValueRes"
  "ponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.sta"
  "tus.Status\0222\n\013stat_values\030\002 \003(\0132\027.clarif"
  "ai.api.StatValueB\004\200\265\030\001\"\236\001\n\036PostStatValue"
  "sAggregateRequest\022/\n\013user_app_id\030\001 \001(\0132\032"
  ".clarifai.api.UserAppIDSet\022K\n\034stat_value"
  "_aggregate_queries\030\002 \003(\0132%.clarifai.api."
  "StatValueAggregateQuery\"\234\001\n\037MultiStatVal"
  "ueAggregateResponse\022+\n\006status\030\001 \001(\0132\033.cl"
  "arifai.api.status.Status\022L\n\034stat_value_a"
  "ggregate_results\030\002 \003(\0132&.clarifai.api.St"
  "atValueAggregateResult*p\n\034OrganizationIn"
  "vitationStatus\022\013\n\007NOT_SET\020\000\022\013\n\007PENDING\020\001"
  "\022\014\n\010ACCEPTED\020\002\022\r\n\tCANCELLED\020\003\022\014\n\010DECLINE"
  "D\020\004\022\013\n\007EXPIRED\020\0052\234\276\001\n\002V2\022\353\002\n\024ListConcept"
  "Relations\022).clarifai.api.ListConceptRela"
  "tionsRequest\032*.clarifai.api.MultiConcept"
  "RelationResponse\"\373\001\202\323\344\223\002\354\001\022Y/v2/users/{u"
  "ser_app_id.user_id}/apps/{user_app_id.ap"
  "p_id}/concepts/{concept_id}/relationsZ%\022"
  "#/v2/concepts/{concept_id}/relationsZN\022L"
  "/v2/users/{user_app_id.user_id}/apps/{us"
  "er_app_id.app_id}/concepts/relationsZ\030\022\026"
  "/v2/concepts/relations\230\234\'\005\220\234\'\013\022\213\002\n\024PostC"
  "onceptRelations\022).clarifai.api.PostConce"
  "ptRelationsRequest\032*.clarifai.api.MultiC"
  "onceptRelationResponse\"\233\001\202\323\344\223\002\210\001\"Y/v2/us"
  "ers/{user_app_id.user_id}/apps/{user_app"
  "_id.app_id}/concepts/{concept_id}/relati"
  "ons:\001*Z(\"#/v2/concepts/{concept_id}/rela"
  "tions:\001*\230\234\'\005\220\234\'\n\220\234\'\013\022\212\002\n\026DeleteConceptRe"
  "lations\022+.clarifai.api.DeleteConceptRela"
  "tionsRequest\032!.clarifai.api.status.BaseR"
  "esponse\"\237\001\202\323\344\223\002\210\001*Y/v2/users/{user_app_i"
  "d.user_id}/apps/{user_app_id.app_id}/con"
  "cepts/{concept_id}/relations:\001*Z(*#/v2/c"
  "oncepts/{concept_id}/relations:\001*\230\234\'\005\220\234\'"
  "\r\220\234\'\n\220\234\'\013\022\334\001\n\020GetConceptCounts\022%.clarifa"
  "i.api.GetConceptCountsRequest\032\'.clarifai"
  ".api.MultiConceptCountResponse\"x\202\323\344\223\002b\022I"
  "/v2/users/{user_app_id.user_id}/apps/{us"
  "er_app_id.app_id}/concepts/statusZ\025\022\023/v2"
  "/concepts/status\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\022\320\001\n\nGet"
  "Concept\022\037.clarifai.api.GetConceptRequest"
  "\032#.clarifai.api.SingleConceptResponse\"|\202"
  "\323\344\223\002n\022O/v2/users/{user_app_id.user_id}/a"
  "pps/{user_app_id.app_id}/concepts/{conce"
  "pt_id}Z\033\022\031/v2/concepts/{concept_id}\230\234\'\002\220"
  "\234\'\013\022\271\001\n\014ListConcepts\022!.clarifai.api.List"
  "ConceptsRequest\032\".clarifai.api.MultiConc"
  "eptResponse\"b\202\323\344\223\002T\022B/v2/users/{user_app"
  "_id.user_id}/apps/{user_app_id.app_id}/c"
  "onceptsZ\016\022\014/v2/concepts\230\234\'\002\220\234\'\013\022\352\001\n\024Post"
  "ConceptsSearches\022).clarifai.api.PostConc"
  "eptsSearchesRequest\032\".clarifai.api.Multi"
  "ConceptResponse\"\202\001\202\323\344\223\002l\"K/v2/users/{use"
  "r_app_id.user_id}/apps/{user_app_id.app_"
  "id}/concepts/searches:\001*Z\032\"\025/v2/concepts"
  "/searches:\001*\230\234\'\002\220\234\'\013\220\234\'\017\220\234\'\023\022\303\001\n\014PostCon"
  "cepts\022!.clarifai.api.PostConceptsRequest"
  "\032\".clarifai.api.MultiConceptResponse\"l\202\323"
  "\344\223\002Z\"B/v2/users/{user_app_id.user_id}/ap"
  "ps/{user_app_id.app_id}/concepts:\001*Z\021\"\014/"
  "v2/concepts:\001*\230\234\'\002\220\234\'\n\220\234\'\013\022\305\001\n\rPatchConc"
  "epts\022\".clarifai.api.PatchConceptsRequest"
  "\032\".clarifai.api.MultiConceptResponse\"l\202\323"
  "\344\223\002Z2B/v2/users/{user_app_id.user_id}/ap"
  "ps/{user_app_id.app_id}/concepts:\001*Z\0212\014/"
  "v2/concepts:\001*\230\234\'\002\220\234\'\n\220\234\'\013\022\224\002\n\022GetConcep"
  "tLanguage\022\'.clarifai.api.GetConceptLangu"
  "ageRequest\032+.clarifai.api.SingleConceptL"
  "anguageResponse\"\247\001\202\323\344\223\002\230\001\022d/v2/users/{us"
  "er_app_id.user_id}/apps/{user_app_id.app"
  "_id}/concepts/{concept_id}/languages/{la"
  "nguage}Z0\022./v2/concepts/{concept_id}/lan"
  "guages/{language}\230\234\'\002\220\234\'\013\022\201\002\n\024ListConcep"
  "tLanguages\022).clarifai.api.ListConceptLan"
  "guagesRequest\032*.clarifai.api.MultiConcep"
  "tLanguageResponse\"\221\001\202\323\344\223\002\202\001\022Y/v2/users/{"
  "user_app_id.user_id}/apps/{user_app_id.a"
  "pp_id}/concepts/{concept_id}/languagesZ%"
  "\022#/v2/concepts/{concept_id}/languages\230\234\'"
  "\002\220\234\'\013\022\213\002\n\024PostConceptLanguages\022).clarifa"
  "i.api.PostConceptLanguagesRequest\032*.clar"
  "ifai.api.MultiConceptLanguageResponse\"\233\001"
  "\202\323\344\223\002\210\001\"Y/v2/users/{user_app_id.user_id}"
  "/apps/{user_app_id.app_id}/concepts/{con"
  "cept_id}/languages:\001*Z(\"#/v2/concepts/{c"
  "oncept_id}/languages:\001*\230\234\'\002\220\234\'\n\220\234\'\013\022\215\002\n\025"
  "PatchConceptLanguages\022*.clarifai.api.Pat"
  "chConceptLanguagesRequest\032*.clarifai.api"
  ".MultiConceptLanguageResponse\"\233\001\202\323\344\223\002\210\0012"
  "Y/v2/users/{user_app_id.user_id}/apps/{u"
  "ser_app_id.app_id}/concepts/{concept_id}"
  "/languages:\001*Z(2#/v2/concepts/{concept_i"
  "d}/languages:\001*\230\234\'\002\220\234\'\n\220\234\'\013\022\361\001\n\023ListKnow"
  "ledgeGraphs\022(.clarifai.api.ListKnowledge"
  "GraphsRequest\032).clarifai.api.MultiKnowle"
  "dgeGraphResponse\"\204\001\202\323\344\223\002v\022S/v2/users/{us"
  "er_app_id.user_id}/apps/{user_app_id.app"
  "_id}/concepts/knowledge_graphsZ\037\022\035/v2/co"
  "ncepts/knowledge_graphs\230\234\'\002\220\234\'\013\022\373\001\n\023Post"
  "KnowledgeGraphs\022(.clarifai.api.PostKnowl"
  "edgeGraphsRequest\032).clarifai.api.MultiKn"
  "owledgeGraphResponse\"\216\001\202\323\344\223\002|\"S/v2/users"
  "/{user_app_id.user_id}/apps/{user_app_id"
  ".app_id}/concepts/knowledge_graphs:\001*Z\"\""
  "\035/v2/concepts/knowledge_graphs:\001*\230\234\'\002\220\234\'"
  "\n\220\234\'\013\022\376\001\n\026PostConceptMappingJobs\022+.clari"
  "fai.api.PostConceptMappingJobsRequest\032,."
  "clarifai.api.MultiConceptMappingJobRespo"
  "nse\"\210\001\202\323\344\223\002v\"P/v2/users/{user_app_id.use"
  "r_id}/apps/{user_app_id.app_id}/concepts"
  "/mappings/jobs:\001*Z\037\"\032/v2/concepts/mappin"
  "gs/jobs:\001*\230\234\'\002\220\234\'\n\220\234\'\013\022\223\002\n\rGetAnnotation"
  "\022\".clarifai.api.GetAnnotationRequest\032&.c"
  "larifai.api.SingleAnnotationResponse\"\265\001\202"
  "\323\344\223\002\236\001\022g/v2/users/{user_app_id.user_id}/"
  "apps/{user_app_id.app_id}/inputs/{input_"
  "id}/annotations/{annotation_id}Z3\0221/v2/i"
  "nputs/{input_id}/annotations/{annotation"
  "_id}\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\017\022\320\001\n\017ListAnnotations"
  "\022$.clarifai.api.ListAnnotationsRequest\032%"
  ".clarifai.api.MultiAnnotationResponse\"p\202"
  "\323\344\223\002Z\022E/v2/users/{user_app_id.user_id}/a"
  "pps/{user_app_id.app_id}/annotationsZ\021\022\017"
  "/v2/annotations\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\017\022\343\001\n\017Post"
  "Annotations\022$.clarifai.api.PostAnnotatio"
  "nsRequest\032%.clarifai.api.MultiAnnotation"
  "Response\"\202\001\202\323\344\223\002`\"E/v2/users/{user_app_i"
  "d.user_id}/apps/{user_app_id.app_id}/ann"
  "otations:\001*Z\024\"\017/v2/annotations:\001*\230\234\'\002\220\234\'"
  "\005\220\234\'%\220\234\'&\220\234\'\013\220\234\'\017\220\234\'\023\022\345\001\n\020PatchAnnotatio"
  "ns\022%.clarifai.api.PatchAnnotationsReques"
  "t\032%.clarifai.api.MultiAnnotationResponse"
  "\"\202\001\202\323\344\223\002`2E/v2/users/{user_app_id.user_i"
  "d}/apps/{user_app_id.app_id}/annotations"
  ":\001*Z\0242\017/v2/annotations:\001*\230\234\'\002\220\234\'\005\220\234\'%\220\234\'"
  "&\220\234\'\013\220\234\'\023\220\234\'\017\022\363\001\n\026PatchAnnotationsStatus"
  "\022+.clarifai.api.PatchAnnotationsStatusRe"
  "quest\032,.clarifai.api.PatchAnnotationsSta"
  "tusResponse\"~\202\323\344\223\002`2[/v2/users/{user_app"
  "_id.user_id}/apps/{user_app_id.app_id}/t"
  "ask/{task_id}/annotations/status:\001*\230\234\'\002\220"
  "\234\'%\220\234\'&\220\234\'\013\220\234\'\023\220\234\'\017\022\230\002\n\020DeleteAnnotation"
  "\022%.clarifai.api.DeleteAnnotationRequest\032"
  "!.clarifai.api.status.BaseResponse\"\271\001\202\323\344"
  "\223\002\236\001*g/v2/users/{user_app_id.user_id}/ap"
  "ps/{user_app_id.app_id}/inputs/{input_id"
  "}/annotations/{annotation_id}Z3*1/v2/inp"
  "uts/{input_id}/annotations/{annotation_i"
  "d}\230\234\'\002\220\234\'%\220\234\'(\220\234\'&\220\234\'\023\022\314\002\n\021DeleteAnnotat"
  "ions\022&.clarifai.api.DeleteAnnotationsReq"
  "uest\032!.clarifai.api.status.BaseResponse\""
  "\353\001\202\323\344\223\002\320\001*L/v2/users/{user_app_id.user_i"
  "d}/apps/{user_app_id.app_id}/inputs/anno"
  "tations:\001*Z\033*\026/v2/inputs/annotations:\001*Z"
  "J*E/v2/users/{user_app_id.user_id}/apps/"
  "{user_app_id.app_id}/annotations:\001*Z\024*\017/"
  "v2/annotations:\001*\230\234\'\002\220\234\'%\220\234\'(\220\234\'&\220\234\'\023\022\201\002"
  "\n\027PostAnnotationsSearches\022,.clarifai.api"
  ".PostAnnotationsSearchesRequest\032!.clarif"
  "ai.api.MultiSearchResponse\"\224\001\202\323\344\223\002r\"N/v2"
  "/users/{user_app_id.user_id}/apps/{user_"
  "app_id.app_id}/annotations/searches:\001*Z\035"
  "\"\030/v2/annotations/searches:\001*\230\234\'\002\220\234\'&\220\234\'"
  "\013\220\234\'\005\220\234\'\017\220\234\'\003\220\234\'\023\022\321\001\n\rGetInputCount\022\".cl"
  "arifai.api.GetInputCountRequest\032&.clarif"
  "ai.api.SingleInputCountResponse\"t\202\323\344\223\002^\022"
  "G/v2/users/{user_app_id.user_id}/apps/{u"
  "ser_app_id.app_id}/inputs/statusZ\023\022\021/v2/"
  "inputs/status\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\022\311\001\n\014Stream"
  "Inputs\022!.clarifai.api.StreamInputsReques"
  "t\032 .clarifai.api.MultiInputResponse\"t\202\323\344"
  "\223\002^\022G/v2/users/{user_app_id.user_id}/app"
  "s/{user_app_id.app_id}/inputs/streamZ\023\022\021"
  "/v2/inputs/stream\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\022\375\001\n\017Ge"
  "tInputSamples\022$.clarifai.api.GetInputSam"
  "plesRequest\032*.clarifai.api.MultiInputAnn"
  "otationResponse\"\227\001\202\323\344\223\002\200\001\022X/v2/users/{us"
  "er_app_id.user_id}/apps/{user_app_id.app"
  "_id}/tasks/{task_id}/inputs/samplesZ$\022\"/"
  "v2/tasks/{task_id}/inputs/samples\230\234\'\002\220\234\'"
  "&\220\234\'\013\220\234\'\005\022\312\001\n\010GetInput\022\035.clarifai.api.Ge"
  "tInputRequest\032!.clarifai.api.SingleInput"
  "Response\"|\202\323\344\223\002f\022K/v2/users/{user_app_id"
  ".user_id}/apps/{user_app_id.app_id}/inpu"
  "ts/{input_id}Z\027\022\025/v2/inputs/{input_id}\230\234"
  "\'\002\220\234\'&\220\234\'\013\220\234\'\005\022\267\001\n\nListInputs\022\037.clarifai"
  ".api.ListInputsRequest\032 .clarifai.api.Mu"
  "ltiInputResponse\"f\202\323\344\223\002P\022@/v2/users/{use"
  "r_app_id.user_id}/apps/{user_app_id.app_"
  "id}/inputsZ\014\022\n/v2/inputs\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005"
  "\022\322\001\n\nPostInputs\022\037.clarifai.api.PostInput"
  "sRequest\032 .clarifai.api.MultiInputRespon"
  "se\"\200\001\202\323\344\223\002V\"@/v2/users/{user_app_id.user"
  "_id}/apps/{user_app_id.app_id}/inputs:\001*"
  "Z\017\"\n/v2/inputs:\001*\230\234\'\002\220\234\'%\220\234\'&\220\234\'\013\220\234\'\004\220\234\'"
  "\005\220\234\'\017\220\234\'\002\220\234\'\023\022\313\001\n\013PatchInputs\022 .clarifai"
  ".api.PatchInputsRequest\032 .clarifai.api.M"
  "ultiInputResponse\"x\202\323\344\223\002V2@/v2/users/{us"
  "er_app_id.user_id}/apps/{user_app_id.app"
  "_id}/inputs:\001*Z\0172\n/v2/inputs:\001*\230\234\'\002\220\234\'%\220"
  "\234\'&\220\234\'\013\220\234\'\004\220\234\'\005\220\234\'\017\022\345\001\n\013DeleteInput\022 .cl"
  "arifai.api.DeleteInputRequest\032!.clarifai"
  ".api.status.BaseResponse\"\220\001\202\323\344\223\002f*K/v2/u"
  "sers/{user_app_id.user_id}/apps/{user_ap"
  "p_id.app_id}/inputs/{input_id}Z\027*\025/v2/in"
  "puts/{input_id}\230\234\'\002\220\234\'%\220\234\'(\220\234\'&\220\234\'\004\220\234\'\010\220"
  "\234\'\005\220\234\'\017\220\234\'\023\022\327\001\n\014DeleteInputs\022!.clarifai."
  "api.DeleteInputsRequest\032!.clarifai.api.s"
  "tatus.BaseResponse\"\200\001\202\323\344\223\002V*@/v2/users/{"
  "user_app_id.user_id}/apps/{user_app_id.a"
  "pp_id}/inputs:\001*Z\017*\n/v2/inputs:\001*\230\234\'\002\220\234\'"
  "%\220\234\'(\220\234\'&\220\234\'\004\220\234\'\010\220\234\'\005\220\234\'\017\220\234\'\023\022\355\001\n\022PostIn"
  "putsSearches\022\'.clarifai.api.PostInputsSe"
  "archesRequest\032!.clarifai.api.MultiSearch"
  "Response\"\212\001\202\323\344\223\002h\"I/v2/users/{user_app_i"
  "d.user_id}/apps/{user_app_id.app_id}/inp"
  "uts/searches:\001*Z\030\"\023/v2/inputs/searches:\001"
  "*\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\220\234\'\017\220\234\'\003\220\234\'\023\022\234\003\n\020PostMo"
  "delOutputs\022%.clarifai.api.PostModelOutpu"
  "tsRequest\032!.clarifai.api.MultiOutputResp"
  "onse\"\275\002\202\323\344\223\002\246\002\"i/v2/users/{user_app_id.u"
  "ser_id}/apps/{user_app_id.app_id}/models"
  "/{model_id}/versions/{version_id}/output"
  "s:\001*Z8\"3/v2/models/{model_id}/versions/{"
  "version_id}/outputs:\001*ZX\"S/v2/users/{use"
  "r_app_id.user_id}/apps/{user_app_id.app_"
  "id}/models/{model_id}/outputs:\001*Z\"\"\035/v2/"
  "models/{model_id}/outputs:\001*\230\234\'\002\220\234\'\013\220\234\'\017"
  "\220\234\'\002\022\345\001\n\014GetModelType\022!.clarifai.api.Get"
  "ModelTypeRequest\032%.clarifai.api.SingleMo"
  "delTypeResponse\"\212\001\202\323\344\223\002|\022V/v2/users/{use"
  "r_app_id.user_id}/apps/{user_app_id.app_"
  "id}/models/types/{model_type_id}Z\"\022 /v2/"
  "models/types/{model_type_id}\230\234\'\002\220\234\'\017\022\307\001\n"
  "\016ListModelTypes\022#.clarifai.api.ListModel"
  "TypesRequest\032$.clarifai.api.MultiModelTy"
  "peResponse\"j\202\323\344\223\002\\\022F/v2/users/{user_app_"
  "id.user_id}/apps/{user_app_id.app_id}/mo"
  "dels/typesZ\022\022\020/v2/models/types\230\234\'\002\220\234\'\017\022\306"
  "\001\n\010GetModel\022\035.clarifai.api.GetModelReque"
  "st\032!.clarifai.api.SingleModelResponse\"x\202"
  "\323\344\223\002f\022K/v2/users/{user_app_id.user_id}/a"
  "pps/{user_app_id.app_id}/models/{model_i"
  "d}Z\027\022\025/v2/models/{model_id}\230\234\'\002\220\234\'\013\220\234\'\017\022"
  "\226\003\n\022GetModelOutputInfo\022\035.clarifai.api.Ge"
  "tModelRequest\032!.clarifai.api.SingleModel"
  "Response\"\275\002\202\323\344\223\002\252\002\022W/v2/users/{user_app_"
  "id.user_id}/apps/{user_app_id.app_id}/mo"
  "dels/{model_id}/output_infoZ#\022!/v2/model"
  "s/{model_id}/output_infoZo\022m/v2/users/{u"
  "ser_app_id.user_id}/apps/{user_app_id.ap"
  "p_id}/models/{model_id}/versions/{versio"
  "n_id}/output_infoZ9\0227/v2/models/{model_i"
  "d}/versions/{version_id}/output_info\230\234\'\002"
  "\220\234\'\013\220\234\'\017\022\263\001\n\nListModels\022\037.clarifai.api.L"
  "istModelsRequest\032 .clarifai.api.MultiMod"
  "elResponse\"b\202\323\344\223\002P\022@/v2/users/{user_app_"
  "id.user_id}/apps/{user_app_id.app_id}/mo"
  "delsZ\014\022\n/v2/models\230\234\'\002\220\234\'\013\220\234\'\017\022\333\001\n\022PostM"
  "odelsSearches\022\'.clarifai.api.PostModelsS"
  "earchesRequest\032 .clarifai.api.MultiModel"
  "Response\"z\202\323\344\223\002h\"I/v2/users/{user_app_id"
  ".user_id}/apps/{user_app_id.app_id}/mode"
  "ls/searches:\001*Z\030\"\023/v2/models/searches:\001*"
  "\230\234\'\002\220\234\'\013\220\234\'\017\022\306\001\n\nPostModels\022\037.clarifai.a"
  "pi.PostModelsRequest\032!.clarifai.api.Sing"
  "leModelResponse\"t\202\323\344\223\002V\"@/v2/users/{user"
  "_app_id.user_id}/apps/{user_app_id.app_i"
  "d}/models:\001*Z\017\"\n/v2/models:\001*\230\234\'\002\220\234\'\013\220\234\'"
  "\016\220\234\'\017\220\234\'\032\220\234\'\023\022\303\001\n\013PatchModels\022 .clarifai"
  ".api.PatchModelsRequest\032 .clarifai.api.M"
  "ultiModelResponse\"p\202\323\344\223\002V2@/v2/users/{us"
  "er_app_id.user_id}/apps/{user_app_id.app"
  "_id}/models:\001*Z\0172\n/v2/models:\001*\230\234\'\002\220\234\'\013\220"
  "\234\'\016\220\234\'\017\220\234\'\032\022\331\001\n\013DeleteModel\022 .clarifai.a"
  "pi.DeleteModelRequest\032!.clarifai.api.sta"
  "tus.BaseResponse\"\204\001\202\323\344\223\002f*K/v2/users/{us"
  "er_app_id.user_id}/apps/{user_app_id.app"
  "_id}/models/{model_id}Z\027*\025/v2/models/{mo"
  "del_id}\230\234\'\002\220\234\'\013\220\234\'\016\220\234\'\021\220\234\'\017\220\234\'\023\022\312\001\n\014Dele"
  "teModels\022!.clarifai.api.DeleteModelsRequ"
  "est\032!.clarifai.api.status.BaseResponse\"t"
  "\202\323\344\223\002V*@/v2/users/{user_app_id.user_id}/"
  "apps/{user_app_id.app_id}/models:\001*Z\017*\n/"
  "v2/models:\001*\230\234\'\002\220\234\'\013\220\234\'\016\220\234\'\021\220\234\'\017\220\234\'\023\022\215\003\n"
  "\017ListModelInputs\022$.clarifai.api.ListMode"
  "lInputsRequest\032 .clarifai.api.MultiInput"
  "Response\"\261\002\202\323\344\223\002\226\002\022R/v2/users/{user_app_"
  "id.user_id}/apps/{user_app_id.app_id}/mo"
  "dels/{model_id}/inputsZ\036\022\034/v2/models/{mo"
  "del_id}/inputsZj\022h/v2/users/{user_app_id"
  ".user_id}/apps/{user_app_id.app_id}/mode"
  "ls/{model_id}/versions/{version_id}/inpu"
  "tsZ4\0222/v2/models/{model_id}/versions/{ve"
  "rsion_id}/inputs\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\220\234\'\017\022\211\002\n"
  "\017GetModelVersion\022$.clarifai.api.GetModel"
  "VersionRequest\032(.clarifai.api.SingleMode"
  "lVersionResponse\"\245\001\202\323\344\223\002\222\001\022a/v2/users/{u"
  "ser_app_id.user_id}/apps/{user_app_id.ap"
  "p_id}/models/{model_id}/versions/{versio"
  "n_id}Z-\022+/v2/models/{model_id}/versions/"
  "{version_id}\230\234\'\002\220\234\'\013\220\234\'\017\022\361\001\n\021ListModelVe"
  "rsions\022&.clarifai.api.ListModelVersionsR"
  "equest\032\'.clarifai.api.MultiModelVersionR"
  "esponse\"\212\001\202\323\344\223\002x\022T/v2/users/{user_app_id"
  ".user_id}/apps/{user_app_id.app_id}/mode"
  "ls/{model_id}/versionsZ \022\036/v2/models/{mo"
  "del_id}/versions\230\234\'\002\220\234\'\013\220\234\'\017\022\215\002\n\021PostMod"
  "elVersions\022&.clarifai.api.PostModelVersi"
  "onsRequest\032!.clarifai.api.SingleModelRes"
  "ponse\"\254\001\202\323\344\223\002~\"T/v2/users/{user_app_id.u"
  "ser_id}/apps/{user_app_id.app_id}/models"
  "/{model_id}/versions:\001*Z#\"\036/v2/models/{m"
  "odel_id}/versions:\001*\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\220\234\'\016"
  "\220\234\'\017\220\234\'\032\220\234\'\023\220\234\'5\220\234\'6\022\224\002\n\022DeleteModelVers"
  "ion\022\'.clarifai.api.DeleteModelVersionReq"
  "uest\032!.clarifai.api.status.BaseResponse\""
  "\261\001\202\323\344\223\002\222\001*a/v2/users/{user_app_id.user_i"
  "d}/apps/{user_app_id.app_id}/models/{mod"
  "el_id}/versions/{version_id}Z-*+/v2/mode"
  "ls/{model_id}/versions/{version_id}\230\234\'\002\220"
  "\234\'\013\220\234\'\016\220\234\'\021\220\234\'\017\220\234\'\023\022\263\002\n\026GetModelVersionM"
  "etrics\022+.clarifai.api.GetModelVersionMet"
  "ricsRequest\032(.clarifai.api.SingleModelVe"
  "rsionResponse\"\301\001\202\323\344\223\002\242\001\022i/v2/users/{user"
  "_app_id.user_id}/apps/{user_app_id.app_i"
  "d}/models/{model_id}/versions/{version_i"
  "d}/metricsZ5\0223/v2/models/{model_id}/vers"
  "ions/{version_id}/metrics\230\234\'\002\220\234\'&\220\234\'\013\220\234\'"
  "\017\220\234\'\005\220\234\'5\022\317\002\n\027PostModelVersionMetrics\022,."
  "clarifai.api.PostModelVersionMetricsRequ"
  "est\032(.clarifai.api.SingleModelVersionRes"
  "ponse\"\333\001\202\323\344\223\002\250\001\"i/v2/users/{user_app_id."
  "user_id}/apps/{user_app_id.app_id}/model"
  "s/{model_id}/versions/{version_id}/metri"
  "cs:\001*Z8\"3/v2/models/{model_id}/versions/"
  "{version_id}/metrics:\001*\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\220"
  "\234\'\016\220\234\'\017\220\234\'\032\220\234\'\002\220\234\'\023\220\234\'5\220\234\'6\022\334\001\n\013GetWorkf"
  "low\022 .clarifai.api.GetWorkflowRequest\032$."
  "clarifai.api.SingleWorkflowResponse\"\204\001\202\323"
  "\344\223\002r\022Q/v2/users/{user_app_id.user_id}/ap"
  "ps/{user_app_id.app_id}/workflows/{workf"
  "low_id}Z\035\022\033/v2/workflows/{workflow_id}\230\234"
  "\'\002\220\234\'\017\220\234\'\023\022\302\001\n\rListWorkflows\022\".clarifai."
  "api.ListWorkflowsRequest\032#.clarifai.api."
  "MultiWorkflowResponse\"h\202\323\344\223\002V\022C/v2/users"
  "/{user_app_id.user_id}/apps/{user_app_id"
  ".app_id}/workflowsZ\017\022\r/v2/workflows\230\234\'\002\220"
  "\234\'\017\220\234\'\023\022\314\001\n\rPostWorkflows\022\".clarifai.api"
  ".PostWorkflowsRequest\032#.clarifai.api.Mul"
  "tiWorkflowResponse\"r\202\323\344\223\002\\\"C/v2/users/{u"
  "ser_app_id.user_id}/apps/{user_app_id.ap"
  "p_id}/workflows:\001*Z\022\"\r/v2/workflows:\001*\230\234"
  "\'\002\220\234\'\017\220\234\'\022\220\234\'\023\022\316\001\n\016PatchWorkflows\022#.clar"
  "ifai.api.PatchWorkflowsRequest\032#.clarifa"
  "i.api.MultiWorkflowResponse\"r\202\323\344\223\002\\2C/v2"
  "/users/{user_app_id.user_id}/apps/{user_"
  "app_id.app_id}/workflows:\001*Z\0222\r/v2/workf"
  "lows:\001*\230\234\'\002\220\234\'\017\220\234\'\022\220\234\'\023\022\343\001\n\016DeleteWorkfl"
  "ow\022#.clarifai.api.DeleteWorkflowRequest\032"
  "!.clarifai.api.status.BaseResponse\"\210\001\202\323\344"
  "\223\002r*Q/v2/users/{user_app_id.user_id}/app"
  "s/{user_app_id.app_id}/workflows/{workfl"
  "ow_id}Z\035*\033/v2/workflows/{workflow_id}\230\234\'"
  "\002\220\234\'\022\220\234\'\025\220\234\'\023\022\316\001\n\017DeleteWorkflows\022$.clar"
  "ifai.api.DeleteWorkflowsRequest\032!.clarif"
  "ai.api.status.BaseResponse\"r\202\323\344\223\002\\*C/v2/"
  "users/{user_app_id.user_id}/apps/{user_a"
  "pp_id.app_id}/workflows:\001*Z\022*\r/v2/workfl"
  "ows:\001*\230\234\'\002\220\234\'\022\220\234\'\025\220\234\'\023\022\220\002\n\023PostWorkflowR"
  "esults\022(.clarifai.api.PostWorkflowResult"
  "sRequest\032).clarifai.api.PostWorkflowResu"
  "ltsResponse\"\243\001\202\323\344\223\002\210\001\"Y/v2/users/{user_a"
  "pp_id.user_id}/apps/{user_app_id.app_id}"
  "/workflows/{workflow_id}/results:\001*Z(\"#/"
  "v2/workflows/{workflow_id}/results:\001*\230\234\'"
  "\002\220\234\'\017\220\234\'\013\220\234\'\002\220\234\'\023\022\304\002\n\035PostWorkflowResult"
  "sSimilarity\0222.clarifai.api.PostWorkflowR"
  "esultsSimilarityRequest\0323.clarifai.api.P"
  "ostWorkflowResultsSimilarityResponse\"\271\001\202"
  "\323\344\223\002\236\001\"d/v2/users/{user_app_id.user_id}/"
  "apps/{user_app_id.app_id}/workflows/{wor"
  "kflow_id}/results/similarity:\001*Z3\"./v2/w"
  "orkflows/{workflow_id}/results/similarit"
  "y:\001*\230\234\'\002\220\234\'\017\220\234\'\013\220\234\'\002\220\234\'\023\022\205\001\n\006GetKey\022\033.cl"
  "arifai.api.GetKeyRequest\032\037.clarifai.api."
  "SingleKeyResponse\"=\202\323\344\223\002/\022-/v2/users/{us"
  "er_app_id.user_id}/keys/{key_id}\230\234\'\005\220\234\'0"
  "\022\177\n\010ListKeys\022\035.clarifai.api.ListKeysRequ"
  "est\032\036.clarifai.api.MultiKeyResponse\"4\202\323\344"
  "\223\002&\022$/v2/users/{user_app_id.user_id}/key"
  "s\230\234\'\005\220\234\'0\022\237\001\n\013ListAppKeys\022 .clarifai.api"
  ".ListAppKeysRequest\032\036.clarifai.api.Multi"
  "KeyResponse\"N\202\323\344\223\002@\022>/v2/users/{user_app"
  "_id.user_id}/apps/{user_app_id.app_id}/k"
  "eys\230\234\'\005\220\234\'0\022\225\001\n\tDeleteKey\022\036.clarifai.api"
  ".DeleteKeyRequest\032!.clarifai.api.status."
  "BaseResponse\"E\202\323\344\223\002/*-/v2/users/{user_ap"
  "p_id.user_id}/keys/{key_id}\230\234\'\005\220\234\'/\220\234\'1\220"
  "\234\'0\022\212\001\n\010PostKeys\022\035.clarifai.api.PostKeys"
  "Request\032\036.clarifai.api.MultiKeyResponse\""
  "\?\202\323\344\223\002)\"$/v2/users/{user_app_id.user_id}"
  "/keys:\001*\230\234\'\005\220\234\'-\220\234\'/\220\234\'0\022\210\001\n\tPatchKeys\022\036"
  ".clarifai.api.PatchKeysRequest\032\036.clarifa"
  "i.api.MultiKeyResponse\";\202\323\344\223\002)2$/v2/user"
  "s/{user_app_id.user_id}/keys:\001*\230\234\'\005\220\234\'/\220"
  "\234\'0\022\274\001\n\010MyScopes\022\035.clarifai.api.MyScopes"
  "Request\032 .clarifai.api.MultiScopeRespons"
  "e\"o\202\323\344\223\002e\022B/v2/users/{user_app_id.user_i"
  "d}/apps/{user_app_id.app_id}/myscopesZ\016\022"
  "\014/v2/myscopesZ\017\022\r/v2/my_scopes\230\234\'\002\022k\n\nLi"
  "stScopes\022\037.clarifai.api.ListScopesReques"
  "t\032$.clarifai.api.MultiScopeDepsResponse\""
  "\026\202\323\344\223\002\014\022\n/v2/scopes\230\234\'\003\022\266\001\n\006GetApp\022\033.cla"
  "rifai.api.GetAppRequest\032\037.clarifai.api.S"
  "ingleAppResponse\"n\202\323\344\223\002\\\0229/v2/users/{use"
  "r_app_id.user_id}/apps/{user_app_id.app_"
  "id}Z\037\022\035/v2/apps/{user_app_id.app_id}\230\234\'\005"
  "\220\234\'-\220\234\'\023\022\217\001\n\010ListApps\022\035.clarifai.api.Lis"
  "tAppsRequest\032\036.clarifai.api.MultiAppResp"
  "onse\"D\202\323\344\223\0022\022$/v2/users/{user_app_id.use"
  "r_id}/appsZ\n\022\010/v2/apps\230\234\'\005\220\234\'-\220\234\'\023\022\245\001\n\tD"
  "eleteApp\022\036.clarifai.api.DeleteAppRequest"
  "\032!.clarifai.api.status.BaseResponse\"U\202\323\344"
  "\223\002;*9/v2/users/{user_app_id.user_id}/app"
  "s/{user_app_id.app_id}\230\234\'\005\220\234\',\220\234\'.\220\234\'-\220\234"
  "\'\023\022\222\001\n\010PostApps\022\035.clarifai.api.PostAppsR"
  "equest\032\036.clarifai.api.MultiAppResponse\"G"
  "\202\323\344\223\002)\"$/v2/users/{user_app_id.user_id}/"
  "apps:\001*\230\234\'\005\220\234\',\220\234\'-\220\234\'\017\220\234\'\023\220\234\'\022\022\210\001\n\tPatc"
  "hApps\022\036.clarifai.api.PatchAppsRequest\032\036."
  "clarifai.api.MultiAppResponse\";\202\323\344\223\002)2$/"
  "v2/users/{user_app_id.user_id}/apps:\001*\230\234"
  "\'\005\220\234\',\220\234\'-\022\267\001\n\020PostAppsSearches\022%.clarif"
  "ai.api.PostAppsSearchesRequest\032\036.clarifa"
  "i.api.MultiAppResponse\"\\\202\323\344\223\002J\"-/v2/user"
  "s/{user_app_id.user_id}/apps/searches:\001*"
  "Z\026\"\021/v2/apps/searches:\001*\230\234\'\005\220\234\'-\220\234\'\023\022\323\001\n"
  "\024PostValidatePassword\022).clarifai.api.Pos"
  "tValidatePasswordRequest\032..clarifai.api."
  "SinglePasswordValidationResponse\"`\202\323\344\223\002R"
  "\"1/v2/users/{user_app_id.user_id}/valida"
  "te_password:\001*Z\032\"\025/v2/validate_password:"
  "\001*\230\234\'\005\220\234\':\022\275\001\n\tGetSearch\022\036.clarifai.api."
  "GetSearchRequest\032\".clarifai.api.SingleSe"
  "archResponse\"l\202\323\344\223\002^\022G/v2/users/{user_ap"
  "p_id.user_id}/apps/{user_app_id.app_id}/"
  "searches/{id}Z\023\022\021/v2/searches/{id}\230\234\'\002\220\234"
  "\'\003\022\270\001\n\014ListSearches\022!.clarifai.api.ListS"
  "earchesRequest\032!.clarifai.api.MultiSearc"
  "hResponse\"b\202\323\344\223\002T\022B/v2/users/{user_app_i"
  "d.user_id}/apps/{user_app_id.app_id}/sea"
  "rchesZ\016\022\014/v2/searches\230\234\'\002\220\234\'\003\022\322\001\n\014PostSe"
  "arches\022!.clarifai.api.PostSearchesReques"
  "t\032!.clarifai.api.MultiSearchResponse\"|\202\323"
  "\344\223\002Z\"B/v2/users/{user_app_id.user_id}/ap"
  "ps/{user_app_id.app_id}/searches:\001*Z\021\"\014/"
  "v2/searches:\001*\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\220\234\'\017\220\234\'\003\220\234"
  "\'\023\022\320\001\n\020PostSearchesByID\022%.clarifai.api.P"
  "ostSearchesByIDRequest\032!.clarifai.api.Mu"
  "ltiSearchResponse\"r\202\323\344\223\002d\"G/v2/users/{us"
  "er_app_id.user_id}/apps/{user_app_id.app"
  "_id}/searches/{id}:\001*Z\026\"\021/v2/searches/{i"
  "d}:\001*\230\234\'\002\220\234\'\003\022\257\002\n\033PostAnnotationSearchMe"
  "trics\0220.clarifai.api.PostAnnotationSearc"
  "hMetricsRequest\0322.clarifai.api.MultiAnno"
  "tationSearchMetricsResponse\"\251\001\202\323\344\223\002\202\001\"V/"
  "v2/users/{user_app_id.user_id}/apps/{use"
  "r_app_id.app_id}/annotations/searches/me"
  "trics:\001*Z%\" /v2/annotations/searches/met"
  "rics:\001*\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\220\234\'5\220\234\'6\220\234\'\017\220\234\'\023\022"
  "\245\002\n\032GetAnnotationSearchMetrics\022/.clarifa"
  "i.api.GetAnnotationSearchMetricsRequest\032"
  "2.clarifai.api.MultiAnnotationSearchMetr"
  "icsResponse\"\241\001\202\323\344\223\002\206\001\022[/v2/users/{user_a"
  "pp_id.user_id}/apps/{user_app_id.app_id}"
  "/annotations/searches/metrics/{id}Z\'\022%/v"
  "2/annotations/searches/metrics/{id}\230\234\'\002\220"
  "\234\'&\220\234\'\013\220\234\'\005\220\234\'5\022\234\002\n\033ListAnnotationSearch"
  "Metrics\0220.clarifai.api.ListAnnotationSea"
  "rchMetricsRequest\0322.clarifai.api.MultiAn"
  "notationSearchMetricsResponse\"\226\001\202\323\344\223\002|\022V"
  "/v2/users/{user_app_id.user_id}/apps/{us"
  "er_app_id.app_id}/annotations/searches/m"
  "etricsZ\"\022 /v2/annotations/searches/metri"
  "cs\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\220\234\'5\022\226\002\n\035DeleteAnnotat"
  "ionSearchMetrics\0222.clarifai.api.DeleteAn"
  "notationSearchMetricsRequest\032!.clarifai."
  "api.status.BaseResponse\"\235\001\202\323\344\223\002\206\001*[/v2/u"
  "sers/{user_app_id.user_id}/apps/{user_ap"
  "p_id.app_id}/annotations/searches/metric"
  "s/{id}Z\'*%/v2/annotations/searches/metri"
  "cs/{id}\230\234\'\002\220\234\'5\220\234\'6\220\234\'\?\022\302\001\n\014DeleteSearch"
  "\022!.clarifai.api.DeleteSearchRequest\032!.cl"
  "arifai.api.status.BaseResponse\"l\202\323\344\223\002^*G"
  "/v2/users/{user_app_id.user_id}/apps/{us"
  "er_app_id.app_id}/searches/{id}Z\023*\021/v2/s"
  "earches/{id}\230\234\'\002\220\234\'\003\022|\n\017ListStatusCodes\022"
  "$.clarifai.api.ListStatusCodesRequest\032%."
  "clarifai.api.MultiStatusCodeResponse\"\034\202\323"
  "\344\223\002\022\022\020/v2/status_codes\230\234\'\001\022\212\001\n\rGetStatus"
  "Code\022\".clarifai.api.GetStatusCodeRequest"
  "\032&.clarifai.api.SingleStatusCodeResponse"
  "\"-\202\323\344\223\002#\022!/v2/status_codes/{status_code_"
  "id}\230\234\'\001\022\276\001\n\021ListCollaborators\022&.clarifai"
  ".api.ListCollaboratorsRequest\032(.clarifai"
  ".api.MultiCollaboratorsResponse\"W\202\323\344\223\002I\022"
  "G/v2/users/{user_app_id.user_id}/apps/{u"
  "ser_app_id.app_id}/collaborators\230\234\'\002\220\234\'2"
  "\022\305\001\n\021PostCollaborators\022&.clarifai.api.Po"
  "stCollaboratorsRequest\032(.clarifai.api.Mu"
  "ltiCollaboratorsResponse\"^\202\323\344\223\002L\"G/v2/us"
  "ers/{user_app_id.user_id}/apps/{user_app"
  "_id.app_id}/collaborators:\001*\230\234\'\002\220\234\'3\220\234\'2"
  "\022\313\001\n\022PatchCollaborators\022\'.clarifai.api.P"
  "atchCollaboratorsRequest\032(.clarifai.api."
  "MultiCollaboratorsResponse\"b\202\323\344\223\002L2G/v2/"
  "users/{user_app_id.user_id}/apps/{user_a"
  "pp_id.app_id}/collaborators:\001*\230\234\'\002\220\234\'3\220\234"
  "\'2\220\234\'4\022\316\001\n\023DeleteCollaborators\022(.clarifa"
  "i.api.DeleteCollaboratorsRequest\032!.clari"
  "fai.api.status.BaseResponse\"j\202\323\344\223\002L*G/v2"
  "/users/{user_app_id.user_id}/apps/{user_"
  "app_id.app_id}/collaborators:\001*\230\234\'\002\220\234\'3\220"
  "\234\'2\220\234\'4\220\234\'7\220\234\'8\022\272\001\n\022ListCollaborations\022\'"
  ".clarifai.api.ListCollaborationsRequest\032"
  ").clarifai.api.MultiCollaborationsRespon"
  "se\"P\202\323\344\223\002F\022./v2/users/{user_app_id.user_"
  "id}/collaborationsZ\024\022\022/v2/collaborations"
  "\230\234\'\003\022\357\001\n\023PostAppDuplications\022(.clarifai."
  "api.PostAppDuplicationsRequest\032*.clarifa"
  "i.api.MultiAppDuplicationsResponse\"\201\001\202\323\344"
  "\223\002K\"F/v2/users/{user_app_id.user_id}/app"
  "s/{user_app_id.app_id}/duplications:\001*\230\234"
  "\'\002\220\234\'\016\220\234\'\017\220\234\'\032\220\234\'\n\220\234\'\013\220\234\'\004\220\234\'\005\220\234\'%\220\234\'&\220\234"
  "\'\022\220\234\'\023\022\245\001\n\023ListAppDuplications\022(.clarifa"
  "i.api.ListAppDuplicationsRequest\032*.clari"
  "fai.api.MultiAppDuplicationsResponse\"8\202\323"
  "\344\223\002.\022,/v2/users/{user_app_id.user_id}/du"
  "plications\230\234\'\003\022\266\001\n\021GetAppDuplication\022&.c"
  "larifai.api.GetAppDuplicationRequest\032*.c"
  "larifai.api.SingleAppDuplicationResponse"
  "\"M\202\323\344\223\002C\022A/v2/users/{user_app_id.user_id"
  "}/duplications/{app_duplication_id}\230\234\'\003\022"
  "\321\001\n\tPostTasks\022\036.clarifai.api.PostTasksRe"
  "quest\032\037.clarifai.api.MultiTaskResponse\"\202"
  "\001\202\323\344\223\002T\"\?/v2/users/{user_app_id.user_id}"
  "/apps/{user_app_id.app_id}/tasks:\001*Z\016\"\t/"
  "v2/tasks:\001*\230\234\'\002\220\234\'7\220\234\'8\220\234\'\005\220\234\'\003\220\234\'\013\220\234\'\023\220"
  "\234\'\017\220\234\'%\220\234\'&\022\372\001\n\026GetTaskAnnotationCount\022!"
  ".clarifai.api.GetTaskCountRequest\032%.clar"
  "ifai.api.SingleTaskCountResponse\"\225\001\202\323\344\223\002"
  "\206\001\022[/v2/users/{user_app_id.user_id}/apps"
  "/{user_app_id.app_id}/tasks/{task_id}/an"
  "notations/countZ\'\022%/v2/tasks/{task_id}/a"
  "nnotations/count\230\234\'\002\220\234\'8\022\352\001\n\021GetTaskInpu"
  "tCount\022!.clarifai.api.GetTaskCountReques"
  "t\032%.clarifai.api.SingleTaskCountResponse"
  "\"\212\001\202\323\344\223\002|\022V/v2/users/{user_app_id.user_i"
  "d}/apps/{user_app_id.app_id}/tasks/{task"
  "_id}/inputs/countZ\"\022 /v2/tasks/{task_id}"
  "/inputs/count\230\234\'\002\220\234\'8\022\314\001\n\007GetTask\022\034.clar"
  "ifai.api.GetTaskRequest\032 .clarifai.api.S"
  "ingleTaskResponse\"\200\001\202\323\344\223\002b\022I/v2/users/{u"
  "ser_app_id.user_id}/apps/{user_app_id.ap"
  "p_id}/tasks/{task_id}Z\025\022\023/v2/tasks/{task"
  "_id}\230\234\'\002\220\234\'8\220\234\'\003\220\234\'\013\220\234\'\023\220\234\'\017\022\272\001\n\tListTas"
  "ks\022\036.clarifai.api.ListTasksRequest\032\037.cla"
  "rifai.api.MultiTaskResponse\"l\202\323\344\223\002N\022\?/v2"
  "/users/{user_app_id.user_id}/apps/{user_"
  "app_id.app_id}/tasksZ\013\022\t/v2/tasks\230\234\'\002\220\234\'"
  "8\220\234\'\003\220\234\'\013\220\234\'\023\220\234\'\017\022\323\001\n\nPatchTasks\022\037.clari"
  "fai.api.PatchTasksRequest\032\037.clarifai.api"
  ".MultiTaskResponse\"\202\001\202\323\344\223\002T2\?/v2/users/{"
  "user_app_id.user_id}/apps/{user_app_id.a"
  "pp_id}/tasks:\001*Z\0162\t/v2/tasks:\001*\230\234\'\002\220\234\'7\220"
  "\234\'8\220\234\'\005\220\234\'\003\220\234\'\013\220\234\'\023\220\234\'\017\220\234\'%\220\234\'&\022\276\001\n\013Dele"
  "teTasks\022 .clarifai.api.DeleteTasksReques"
  "t\032!.clarifai.api.status.BaseResponse\"j\202\323"
  "\344\223\002T*\?/v2/users/{user_app_id.user_id}/ap"
  "ps/{user_app_id.app_id}/tasks:\001*Z\016*\t/v2/"
  "tasks:\001*\230\234\'\002\220\234\'7\220\234\'8\220\234\'F\022\356\001\n\016PostCollect"
  "ors\022#.clarifai.api.PostCollectorsRequest"
  "\032$.clarifai.api.MultiCollectorResponse\"\220"
  "\001\202\323\344\223\002^\"D/v2/users/{user_app_id.user_id}"
  "/apps/{user_app_id.app_id}/collectors:\001*"
  "Z\023\"\016/v2/collectors:\001*\230\234\'\002\220\234\'\004\220\234\'%\220\234\'&\220\234\'"
  ")\220\234\'\013\220\234\'\004\220\234\'\005\220\234\'\017\220\234\'\002\220\234\'\023\022\337\001\n\014GetCollect"
  "or\022!.clarifai.api.GetCollectorRequest\032%."
  "clarifai.api.SingleCollectorResponse\"\204\001\202"
  "\323\344\223\002v\022S/v2/users/{user_app_id.user_id}/a"
  "pps/{user_app_id.app_id}/collectors/{col"
  "lector_id}Z\037\022\035/v2/collectors/{collector_"
  "id}\230\234\'\002\220\234\'*\022\303\001\n\016ListCollectors\022#.clarifa"
  "i.api.ListCollectorsRequest\032$.clarifai.a"
  "pi.MultiCollectorResponse\"f\202\323\344\223\002X\022D/v2/u"
  "sers/{user_app_id.user_id}/apps/{user_ap"
  "p_id.app_id}/collectorsZ\020\022\016/v2/collector"
  "s\230\234\'\002\220\234\'*\022\317\001\n\017PatchCollectors\022$.clarifai"
  ".api.PatchCollectorsRequest\032$.clarifai.a"
  "pi.MultiCollectorResponse\"p\202\323\344\223\002^2D/v2/u"
  "sers/{user_app_id.user_id}/apps/{user_ap"
  "p_id.app_id}/collectors:\001*Z\0232\016/v2/collec"
  "tors:\001*\230\234\'\002\220\234\')\220\234\'*\022\322\001\n\020DeleteCollectors"
  "\022%.clarifai.api.DeleteCollectorsRequest\032"
  "!.clarifai.api.status.BaseResponse\"t\202\323\344\223"
  "\002^*D/v2/users/{user_app_id.user_id}/apps"
  "/{user_app_id.app_id}/collectors:\001*Z\023*\016/"
  "v2/collectors:\001*\230\234\'\002\220\234\')\220\234\'+\220\234\'*\022\311\001\n\016Pos"
  "tStatValues\022#.clarifai.api.PostStatValue"
  "sRequest\032$.clarifai.api.MultiStatValueRe"
  "sponse\"l\202\323\344\223\002b\"F/v2/users/{user_app_id.u"
  "ser_id}/apps/{user_app_id.app_id}/stats/"
  "values:\001*Z\025\"\020/v2/stats/values:\001*\230\234\'\002\022\371\001\n"
  "\027PostStatValuesAggregate\022,.clarifai.api."
  "PostStatValuesAggregateRequest\032-.clarifa"
  "i.api.MultiStatValueAggregateResponse\"\200\001"
  "\202\323\344\223\002v\"P/v2/users/{user_app_id.user_id}/"
  "apps/{user_app_id.app_id}/stats/values/a"
  "ggregate:\001*Z\037\"\032/v2/stats/values/aggregat"
  "e:\001*\230\234\'\002B]\n\025com.clarifai.grpc.apiP\001Z;git"
  "hub.com/Clarifai/clarifai-go-grpc/proto/"
  "clarifai/api/api\242\002\004CAIPb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_deps[10] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fstatus_2fstatus_5fcode_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2futils_2fextensions_2eproto,
  &::descriptor_table_proto_2fclarifai_2fauth_2fscope_2fscope_2eproto,
  &::descriptor_table_proto_2fclarifai_2fauth_2futil_2fextension_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_sccs[156] = {
  &scc_info_DeleteAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetAppDuplicationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetCollectorRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetConceptCountsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetConceptLanguageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetInputCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetInputSamplesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetModelTypeRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetStatusCodeRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetTaskCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetTaskRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListAppKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListCollaborationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListModelInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListModelTypesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListStatusCodesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiAnnotationSearchMetricsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiAppDuplicationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiCollaborationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiCollaboratorsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiConceptCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiInputAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiModelTypeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiOutputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiScopeDepsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiScopeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiStatValueAggregateResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiStatValueResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MyScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchAnnotationsStatusRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchAnnotationsStatusResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostAnnotationsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostAppsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostConceptMappingJobsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostConceptsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostInputsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostModelOutputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostModelsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostSearchesByIDRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostStatValuesAggregateRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostStatValuesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostValidatePasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostWorkflowResultsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostWorkflowResultsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostWorkflowResultsSimilarityRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostWorkflowResultsSimilarityResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleAppDuplicationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleInputCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleModelTypeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SinglePasswordValidationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleTaskCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_StreamInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once;
static bool descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto = {
  &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_initialized, descriptor_table_protodef_proto_2fclarifai_2fapi_2fservice_2eproto, "proto/clarifai/api/service.proto", 44551,
  &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once, descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_sccs, descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_deps, 156, 10,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto, 156, file_level_enum_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto, file_level_service_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fclarifai_2fapi_2fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto), true);
namespace clarifai {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrganizationInvitationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto[0];
}
bool OrganizationInvitationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Pagination::InitAsDefaultInstance() {
}
class Pagination::_Internal {
 public:
};

Pagination::Pagination()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Pagination)
}
Pagination::Pagination(const Pagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Pagination)
}

void Pagination::SharedCtor() {
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
}

Pagination::~Pagination() {
  // @@protoc_insertion_point(destructor:clarifai.api.Pagination)
  SharedDtor();
}

void Pagination::SharedDtor() {
}

void Pagination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pagination& Pagination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void Pagination::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Pagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* Pagination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pagination::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Pagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // uint32 per_page = 2;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Pagination)
  return target;
}

size_t Pagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Pagination)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 2;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pagination::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Pagination)
  GOOGLE_DCHECK_NE(&from, this);
  const Pagination* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pagination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Pagination)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Pagination)
    MergeFrom(*source);
  }
}

void Pagination::MergeFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Pagination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void Pagination::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pagination::CopyFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pagination::IsInitialized() const {
  return true;
}

void Pagination::InternalSwap(Pagination* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pagination::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAnnotationRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetAnnotationRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetAnnotationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAnnotationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAnnotationRequest::_Internal::user_app_id(const GetAnnotationRequest* msg) {
  return *msg->user_app_id_;
}
void GetAnnotationRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetAnnotationRequest::GetAnnotationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetAnnotationRequest)
}
GetAnnotationRequest::GetAnnotationRequest(const GetAnnotationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  annotation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_annotation_id().empty()) {
    annotation_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotation_id_);
  }
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_id().empty()) {
    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAnnotationRequest)
}

void GetAnnotationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  annotation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetAnnotationRequest::~GetAnnotationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAnnotationRequest)
  SharedDtor();
}

void GetAnnotationRequest::SharedDtor() {
  annotation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetAnnotationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAnnotationRequest& GetAnnotationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetAnnotationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAnnotationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetAnnotationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string annotation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_annotation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetAnnotationRequest.annotation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_input_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetAnnotationRequest.input_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAnnotationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAnnotationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string annotation_id = 2;
  if (this->annotation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_annotation_id().data(), static_cast<int>(this->_internal_annotation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAnnotationRequest.annotation_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_annotation_id(), target);
  }

  // string input_id = 3;
  if (this->input_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAnnotationRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_input_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAnnotationRequest)
  return target;
}

size_t GetAnnotationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAnnotationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string annotation_id = 2;
  if (this->annotation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_annotation_id());
  }

  // string input_id = 3;
  if (this->input_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAnnotationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAnnotationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAnnotationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetAnnotationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetAnnotationRequest)
    MergeFrom(*source);
  }
}

void GetAnnotationRequest::MergeFrom(const GetAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.annotation_id().size() > 0) {

    annotation_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotation_id_);
  }
  if (from.input_id().size() > 0) {

    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetAnnotationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAnnotationRequest::CopyFrom(const GetAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAnnotationRequest::IsInitialized() const {
  return true;
}

void GetAnnotationRequest::InternalSwap(GetAnnotationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  annotation_id_.Swap(&other->annotation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  input_id_.Swap(&other->input_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAnnotationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAnnotationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListAnnotationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAnnotationsRequest::_Internal::user_app_id(const ListAnnotationsRequest* msg) {
  return *msg->user_app_id_;
}
void ListAnnotationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void ListAnnotationsRequest::clear_statuses() {
  statuses_.Clear();
}
ListAnnotationsRequest::ListAnnotationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListAnnotationsRequest)
}
ListAnnotationsRequest::ListAnnotationsRequest(const ListAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_),
      input_ids_(from.input_ids_),
      statuses_(from.statuses_),
      user_ids_(from.user_ids_),
      model_version_ids_(from.model_version_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&list_all_annotations_, &from.list_all_annotations_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&list_all_annotations_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAnnotationsRequest)
}

void ListAnnotationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListAnnotationsRequest::~ListAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAnnotationsRequest)
  SharedDtor();
}

void ListAnnotationsRequest::SharedDtor() {
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAnnotationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAnnotationsRequest& ListAnnotationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  input_ids_.Clear();
  statuses_.Clear();
  user_ids_.Clear();
  model_version_ids_.Clear();
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&list_all_annotations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&list_all_annotations_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListAnnotationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string input_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.input_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.status.Status statuses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statuses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool list_all_annotations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          list_all_annotations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string user_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string model_version_ids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_model_version_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.model_version_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // string task_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.task_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAnnotationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated string input_ids = 3;
  for (int i = 0, n = this->_internal_input_ids_size(); i < n; i++) {
    const auto& s = this->_internal_input_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.input_ids");
    target = stream->WriteString(3, s, target);
  }

  // repeated .clarifai.api.status.Status statuses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_statuses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_statuses(i), target, stream);
  }

  // bool list_all_annotations = 6;
  if (this->list_all_annotations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_list_all_annotations(), target);
  }

  // uint32 page = 7;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_page(), target);
  }

  // uint32 per_page = 8;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_per_page(), target);
  }

  // repeated string user_ids = 9;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.user_ids");
    target = stream->WriteString(9, s, target);
  }

  // repeated string model_version_ids = 10;
  for (int i = 0, n = this->_internal_model_version_ids_size(); i < n; i++) {
    const auto& s = this->_internal_model_version_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.model_version_ids");
    target = stream->WriteString(10, s, target);
  }

  // string task_id = 11;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAnnotationsRequest)
  return target;
}

size_t ListAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAnnotationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // repeated string input_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_ids_.size());
  for (int i = 0, n = input_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_ids_.Get(i));
  }

  // repeated .clarifai.api.status.Status statuses = 5;
  total_size += 1UL * this->_internal_statuses_size();
  for (const auto& msg : this->statuses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string user_ids = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // repeated string model_version_ids = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(model_version_ids_.size());
  for (int i = 0, n = model_version_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      model_version_ids_.Get(i));
  }

  // string task_id = 11;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool list_all_annotations = 6;
  if (this->list_all_annotations() != 0) {
    total_size += 1 + 1;
  }

  // uint32 page = 7;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 8;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAnnotationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAnnotationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAnnotationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListAnnotationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListAnnotationsRequest)
    MergeFrom(*source);
  }
}

void ListAnnotationsRequest::MergeFrom(const ListAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  input_ids_.MergeFrom(from.input_ids_);
  statuses_.MergeFrom(from.statuses_);
  user_ids_.MergeFrom(from.user_ids_);
  model_version_ids_.MergeFrom(from.model_version_ids_);
  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.list_all_annotations() != 0) {
    _internal_set_list_all_annotations(from._internal_list_all_annotations());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListAnnotationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAnnotationsRequest::CopyFrom(const ListAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAnnotationsRequest::IsInitialized() const {
  return true;
}

void ListAnnotationsRequest::InternalSwap(ListAnnotationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  input_ids_.InternalSwap(&other->input_ids_);
  statuses_.InternalSwap(&other->statuses_);
  user_ids_.InternalSwap(&other->user_ids_);
  model_version_ids_.InternalSwap(&other->model_version_ids_);
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(list_all_annotations_, other->list_all_annotations_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAnnotationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostAnnotationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostAnnotationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAnnotationsRequest::_Internal::user_app_id(const PostAnnotationsRequest* msg) {
  return *msg->user_app_id_;
}
void PostAnnotationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAnnotationsRequest::clear_annotations() {
  annotations_.Clear();
}
PostAnnotationsRequest::PostAnnotationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostAnnotationsRequest)
}
PostAnnotationsRequest::PostAnnotationsRequest(const PostAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      annotations_(from.annotations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAnnotationsRequest)
}

void PostAnnotationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostAnnotationsRequest::~PostAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAnnotationsRequest)
  SharedDtor();
}

void PostAnnotationsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostAnnotationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostAnnotationsRequest& PostAnnotationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostAnnotationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Annotation annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostAnnotationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Annotation annotations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAnnotationsRequest)
  return target;
}

size_t PostAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAnnotationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Annotation annotations = 2;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostAnnotationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostAnnotationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostAnnotationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostAnnotationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostAnnotationsRequest)
    MergeFrom(*source);
  }
}

void PostAnnotationsRequest::MergeFrom(const PostAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostAnnotationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostAnnotationsRequest::CopyFrom(const PostAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAnnotationsRequest::IsInitialized() const {
  return true;
}

void PostAnnotationsRequest::InternalSwap(PostAnnotationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAnnotationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchAnnotationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchAnnotationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAnnotationsRequest::_Internal::user_app_id(const PatchAnnotationsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchAnnotationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchAnnotationsRequest::clear_annotations() {
  annotations_.Clear();
}
PatchAnnotationsRequest::PatchAnnotationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchAnnotationsRequest)
}
PatchAnnotationsRequest::PatchAnnotationsRequest(const PatchAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      annotations_(from.annotations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAnnotationsRequest)
}

void PatchAnnotationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchAnnotationsRequest::~PatchAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAnnotationsRequest)
  SharedDtor();
}

void PatchAnnotationsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchAnnotationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchAnnotationsRequest& PatchAnnotationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchAnnotationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Annotation annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAnnotationsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchAnnotationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Annotation annotations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotations(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAnnotationsRequest)
  return target;
}

size_t PatchAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAnnotationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Annotation annotations = 2;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchAnnotationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchAnnotationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchAnnotationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchAnnotationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchAnnotationsRequest)
    MergeFrom(*source);
  }
}

void PatchAnnotationsRequest::MergeFrom(const PatchAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchAnnotationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchAnnotationsRequest::CopyFrom(const PatchAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAnnotationsRequest::IsInitialized() const {
  return true;
}

void PatchAnnotationsRequest::InternalSwap(PatchAnnotationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAnnotationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchAnnotationsStatusRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchAnnotationsStatusRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchAnnotationsStatusRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAnnotationsStatusRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAnnotationsStatusRequest::_Internal::user_app_id(const PatchAnnotationsStatusRequest* msg) {
  return *msg->user_app_id_;
}
void PatchAnnotationsStatusRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PatchAnnotationsStatusRequest::PatchAnnotationsStatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchAnnotationsStatusRequest)
}
PatchAnnotationsStatusRequest::PatchAnnotationsStatusRequest(const PatchAnnotationsStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAnnotationsStatusRequest)
}

void PatchAnnotationsStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchAnnotationsStatusRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(status_code_));
}

PatchAnnotationsStatusRequest::~PatchAnnotationsStatusRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAnnotationsStatusRequest)
  SharedDtor();
}

void PatchAnnotationsStatusRequest::SharedDtor() {
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchAnnotationsStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchAnnotationsStatusRequest& PatchAnnotationsStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchAnnotationsStatusRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchAnnotationsStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAnnotationsStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  status_code_ = 0;
  _internal_metadata_.Clear();
}

const char* PatchAnnotationsStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.status.StatusCode status_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status_code(static_cast<::clarifai::api::status::StatusCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated string user_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAnnotationsStatusRequest.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string task_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAnnotationsStatusRequest.task_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAnnotationsStatusRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchAnnotationsStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAnnotationsStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.status.StatusCode status_code = 2;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status_code(), target);
  }

  // repeated string user_ids = 3;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsStatusRequest.user_ids");
    target = stream->WriteString(3, s, target);
  }

  // string task_id = 4;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsStatusRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_task_id(), target);
  }

  // string action = 5;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsStatusRequest.action");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAnnotationsStatusRequest)
  return target;
}

size_t PatchAnnotationsStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAnnotationsStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // string task_id = 4;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // string action = 5;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.status.StatusCode status_code = 2;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchAnnotationsStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchAnnotationsStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchAnnotationsStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchAnnotationsStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchAnnotationsStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchAnnotationsStatusRequest)
    MergeFrom(*source);
  }
}

void PatchAnnotationsStatusRequest::MergeFrom(const PatchAnnotationsStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAnnotationsStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void PatchAnnotationsStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchAnnotationsStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchAnnotationsStatusRequest::CopyFrom(const PatchAnnotationsStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAnnotationsStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAnnotationsStatusRequest::IsInitialized() const {
  return true;
}

void PatchAnnotationsStatusRequest::InternalSwap(PatchAnnotationsStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAnnotationsStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchAnnotationsStatusResponse::InitAsDefaultInstance() {
  ::clarifai::api::_PatchAnnotationsStatusResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class PatchAnnotationsStatusResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const PatchAnnotationsStatusResponse* msg);
};

const ::clarifai::api::status::Status&
PatchAnnotationsStatusResponse::_Internal::status(const PatchAnnotationsStatusResponse* msg) {
  return *msg->status_;
}
void PatchAnnotationsStatusResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
PatchAnnotationsStatusResponse::PatchAnnotationsStatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchAnnotationsStatusResponse)
}
PatchAnnotationsStatusResponse::PatchAnnotationsStatusResponse(const PatchAnnotationsStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  updated_count_ = from.updated_count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAnnotationsStatusResponse)
}

void PatchAnnotationsStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchAnnotationsStatusResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(updated_count_));
}

PatchAnnotationsStatusResponse::~PatchAnnotationsStatusResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAnnotationsStatusResponse)
  SharedDtor();
}

void PatchAnnotationsStatusResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void PatchAnnotationsStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchAnnotationsStatusResponse& PatchAnnotationsStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchAnnotationsStatusResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchAnnotationsStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAnnotationsStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  updated_count_ = 0u;
  _internal_metadata_.Clear();
}

const char* PatchAnnotationsStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string user_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAnnotationsStatusResponse.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 updated_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          updated_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchAnnotationsStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAnnotationsStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsStatusResponse.user_ids");
    target = stream->WriteString(2, s, target);
  }

  // uint32 updated_count = 3;
  if (this->updated_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updated_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAnnotationsStatusResponse)
  return target;
}

size_t PatchAnnotationsStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAnnotationsStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // uint32 updated_count = 3;
  if (this->updated_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchAnnotationsStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchAnnotationsStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchAnnotationsStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchAnnotationsStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchAnnotationsStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchAnnotationsStatusResponse)
    MergeFrom(*source);
  }
}

void PatchAnnotationsStatusResponse::MergeFrom(const PatchAnnotationsStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAnnotationsStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.updated_count() != 0) {
    _internal_set_updated_count(from._internal_updated_count());
  }
}

void PatchAnnotationsStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchAnnotationsStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchAnnotationsStatusResponse::CopyFrom(const PatchAnnotationsStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAnnotationsStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAnnotationsStatusResponse::IsInitialized() const {
  return true;
}

void PatchAnnotationsStatusResponse::InternalSwap(PatchAnnotationsStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  swap(status_, other->status_);
  swap(updated_count_, other->updated_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAnnotationsStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAnnotationRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteAnnotationRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteAnnotationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAnnotationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAnnotationRequest::_Internal::user_app_id(const DeleteAnnotationRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteAnnotationRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteAnnotationRequest::DeleteAnnotationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteAnnotationRequest)
}
DeleteAnnotationRequest::DeleteAnnotationRequest(const DeleteAnnotationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_id().empty()) {
    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  annotation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_annotation_id().empty()) {
    annotation_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotation_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAnnotationRequest)
}

void DeleteAnnotationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteAnnotationRequest::~DeleteAnnotationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAnnotationRequest)
  SharedDtor();
}

void DeleteAnnotationRequest::SharedDtor() {
  input_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteAnnotationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAnnotationRequest& DeleteAnnotationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteAnnotationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAnnotationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotation_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteAnnotationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_input_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteAnnotationRequest.input_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string annotation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_annotation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteAnnotationRequest.annotation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAnnotationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAnnotationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string input_id = 2;
  if (this->input_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_id(), target);
  }

  // string annotation_id = 3;
  if (this->annotation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_annotation_id().data(), static_cast<int>(this->_internal_annotation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationRequest.annotation_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_annotation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAnnotationRequest)
  return target;
}

size_t DeleteAnnotationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAnnotationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_id = 2;
  if (this->input_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // string annotation_id = 3;
  if (this->annotation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_annotation_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAnnotationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAnnotationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAnnotationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteAnnotationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteAnnotationRequest)
    MergeFrom(*source);
  }
}

void DeleteAnnotationRequest::MergeFrom(const DeleteAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_id().size() > 0) {

    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  if (from.annotation_id().size() > 0) {

    annotation_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotation_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteAnnotationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAnnotationRequest::CopyFrom(const DeleteAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAnnotationRequest::IsInitialized() const {
  return true;
}

void DeleteAnnotationRequest::InternalSwap(DeleteAnnotationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_id_.Swap(&other->input_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  annotation_id_.Swap(&other->annotation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAnnotationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAnnotationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteAnnotationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAnnotationsRequest::_Internal::user_app_id(const DeleteAnnotationsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteAnnotationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteAnnotationsRequest::DeleteAnnotationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteAnnotationsRequest)
}
DeleteAnnotationsRequest::DeleteAnnotationsRequest(const DeleteAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_),
      input_ids_(from.input_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAnnotationsRequest)
}

void DeleteAnnotationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

DeleteAnnotationsRequest::~DeleteAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAnnotationsRequest)
  SharedDtor();
}

void DeleteAnnotationsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteAnnotationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAnnotationsRequest& DeleteAnnotationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  input_ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteAnnotationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteAnnotationsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string input_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteAnnotationsRequest.input_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAnnotationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated string input_ids = 3;
  for (int i = 0, n = this->_internal_input_ids_size(); i < n; i++) {
    const auto& s = this->_internal_input_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationsRequest.input_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAnnotationsRequest)
  return target;
}

size_t DeleteAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAnnotationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // repeated string input_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_ids_.size());
  for (int i = 0, n = input_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAnnotationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAnnotationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAnnotationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteAnnotationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteAnnotationsRequest)
    MergeFrom(*source);
  }
}

void DeleteAnnotationsRequest::MergeFrom(const DeleteAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  input_ids_.MergeFrom(from.input_ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteAnnotationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAnnotationsRequest::CopyFrom(const DeleteAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAnnotationsRequest::IsInitialized() const {
  return true;
}

void DeleteAnnotationsRequest::InternalSwap(DeleteAnnotationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  input_ids_.InternalSwap(&other->input_ids_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAnnotationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleAnnotationResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleAnnotationResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleAnnotationResponse_default_instance_._instance.get_mutable()->annotation_ = const_cast< ::clarifai::api::Annotation*>(
      ::clarifai::api::Annotation::internal_default_instance());
}
class SingleAnnotationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleAnnotationResponse* msg);
  static const ::clarifai::api::Annotation& annotation(const SingleAnnotationResponse* msg);
};

const ::clarifai::api::status::Status&
SingleAnnotationResponse::_Internal::status(const SingleAnnotationResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Annotation&
SingleAnnotationResponse::_Internal::annotation(const SingleAnnotationResponse* msg) {
  return *msg->annotation_;
}
void SingleAnnotationResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleAnnotationResponse::clear_annotation() {
  if (GetArenaNoVirtual() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
SingleAnnotationResponse::SingleAnnotationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleAnnotationResponse)
}
SingleAnnotationResponse::SingleAnnotationResponse(const SingleAnnotationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_annotation()) {
    annotation_ = new ::clarifai::api::Annotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleAnnotationResponse)
}

void SingleAnnotationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&annotation_) -
      reinterpret_cast<char*>(&status_)) + sizeof(annotation_));
}

SingleAnnotationResponse::~SingleAnnotationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleAnnotationResponse)
  SharedDtor();
}

void SingleAnnotationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete annotation_;
}

void SingleAnnotationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleAnnotationResponse& SingleAnnotationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleAnnotationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleAnnotationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleAnnotationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleAnnotationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleAnnotationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Annotation annotation = 2;
  if (this->has_annotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::annotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleAnnotationResponse)
  return target;
}

size_t SingleAnnotationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleAnnotationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Annotation annotation = 2;
  if (this->has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleAnnotationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleAnnotationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleAnnotationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleAnnotationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleAnnotationResponse)
    MergeFrom(*source);
  }
}

void SingleAnnotationResponse::MergeFrom(const SingleAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_annotation()) {
    _internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(from._internal_annotation());
  }
}

void SingleAnnotationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleAnnotationResponse::CopyFrom(const SingleAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAnnotationResponse::IsInitialized() const {
  return true;
}

void SingleAnnotationResponse::InternalSwap(SingleAnnotationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(annotation_, other->annotation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAnnotationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiAnnotationResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiAnnotationResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiAnnotationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAnnotationResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAnnotationResponse::_Internal::status(const MultiAnnotationResponse* msg) {
  return *msg->status_;
}
void MultiAnnotationResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiAnnotationResponse::clear_annotations() {
  annotations_.Clear();
}
MultiAnnotationResponse::MultiAnnotationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiAnnotationResponse)
}
MultiAnnotationResponse::MultiAnnotationResponse(const MultiAnnotationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      annotations_(from.annotations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAnnotationResponse)
}

void MultiAnnotationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiAnnotationResponse::~MultiAnnotationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAnnotationResponse)
  SharedDtor();
}

void MultiAnnotationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiAnnotationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiAnnotationResponse& MultiAnnotationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiAnnotationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAnnotationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiAnnotationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAnnotationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAnnotationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAnnotationResponse)
  return target;
}

size_t MultiAnnotationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAnnotationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiAnnotationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiAnnotationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiAnnotationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiAnnotationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiAnnotationResponse)
    MergeFrom(*source);
  }
}

void MultiAnnotationResponse::MergeFrom(const MultiAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiAnnotationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiAnnotationResponse::CopyFrom(const MultiAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAnnotationResponse::IsInitialized() const {
  return true;
}

void MultiAnnotationResponse::InternalSwap(MultiAnnotationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAnnotationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAppRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetAppRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetAppRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAppRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAppRequest::_Internal::user_app_id(const GetAppRequest* msg) {
  return *msg->user_app_id_;
}
void GetAppRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetAppRequest::GetAppRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetAppRequest)
}
GetAppRequest::GetAppRequest(const GetAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAppRequest)
}

void GetAppRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

GetAppRequest::~GetAppRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAppRequest)
  SharedDtor();
}

void GetAppRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetAppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAppRequest& GetAppRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetAppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAppRequest)
  return target;
}

size_t GetAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAppRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetAppRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetAppRequest)
    MergeFrom(*source);
  }
}

void GetAppRequest::MergeFrom(const GetAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetAppRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppRequest::CopyFrom(const GetAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppRequest::IsInitialized() const {
  return true;
}

void GetAppRequest::InternalSwap(GetAppRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAppsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListAppsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListAppsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAppsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAppsRequest::_Internal::user_app_id(const ListAppsRequest* msg) {
  return *msg->user_app_id_;
}
void ListAppsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListAppsRequest::ListAppsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListAppsRequest)
}
ListAppsRequest::ListAppsRequest(const ListAppsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAppsRequest)
}

void ListAppsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListAppsRequest::~ListAppsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAppsRequest)
  SharedDtor();
}

void ListAppsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAppsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAppsRequest& ListAppsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListAppsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListAppsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAppsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAppsRequest)
  return target;
}

size_t ListAppsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAppsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAppsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAppsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAppsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListAppsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListAppsRequest)
    MergeFrom(*source);
  }
}

void ListAppsRequest::MergeFrom(const ListAppsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListAppsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAppsRequest::CopyFrom(const ListAppsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppsRequest::IsInitialized() const {
  return true;
}

void ListAppsRequest::InternalSwap(ListAppsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostAppsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostAppsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostAppsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAppsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAppsRequest::_Internal::user_app_id(const PostAppsRequest* msg) {
  return *msg->user_app_id_;
}
void PostAppsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAppsRequest::clear_apps() {
  apps_.Clear();
}
PostAppsRequest::PostAppsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostAppsRequest)
}
PostAppsRequest::PostAppsRequest(const PostAppsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAppsRequest)
}

void PostAppsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostAppsRequest::~PostAppsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAppsRequest)
  SharedDtor();
}

void PostAppsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostAppsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostAppsRequest& PostAppsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostAppsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostAppsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.App apps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostAppsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.App apps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAppsRequest)
  return target;
}

size_t PostAppsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAppsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.App apps = 2;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostAppsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostAppsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostAppsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostAppsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostAppsRequest)
    MergeFrom(*source);
  }
}

void PostAppsRequest::MergeFrom(const PostAppsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostAppsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostAppsRequest::CopyFrom(const PostAppsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAppsRequest::IsInitialized() const {
  return true;
}

void PostAppsRequest::InternalSwap(PostAppsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAppsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAppRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteAppRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteAppRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAppRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAppRequest::_Internal::user_app_id(const DeleteAppRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteAppRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteAppRequest::DeleteAppRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteAppRequest)
}
DeleteAppRequest::DeleteAppRequest(const DeleteAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAppRequest)
}

void DeleteAppRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

DeleteAppRequest::~DeleteAppRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAppRequest)
  SharedDtor();
}

void DeleteAppRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteAppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAppRequest& DeleteAppRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteAppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAppRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAppRequest)
  return target;
}

size_t DeleteAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAppRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAppRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAppRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAppRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteAppRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteAppRequest)
    MergeFrom(*source);
  }
}

void DeleteAppRequest::MergeFrom(const DeleteAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteAppRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAppRequest::CopyFrom(const DeleteAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAppRequest::IsInitialized() const {
  return true;
}

void DeleteAppRequest::InternalSwap(DeleteAppRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAppRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchAppsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchAppsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PatchAppsRequest_default_instance_._instance.get_mutable()->metadata_action_ = const_cast< ::clarifai::api::PatchAction*>(
      ::clarifai::api::PatchAction::internal_default_instance());
}
class PatchAppsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAppsRequest* msg);
  static const ::clarifai::api::PatchAction& metadata_action(const PatchAppsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAppsRequest::_Internal::user_app_id(const PatchAppsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::PatchAction&
PatchAppsRequest::_Internal::metadata_action(const PatchAppsRequest* msg) {
  return *msg->metadata_action_;
}
void PatchAppsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchAppsRequest::clear_apps() {
  apps_.Clear();
}
void PatchAppsRequest::clear_metadata_action() {
  if (GetArenaNoVirtual() == nullptr && metadata_action_ != nullptr) {
    delete metadata_action_;
  }
  metadata_action_ = nullptr;
}
PatchAppsRequest::PatchAppsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchAppsRequest)
}
PatchAppsRequest::PatchAppsRequest(const PatchAppsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_metadata_action()) {
    metadata_action_ = new ::clarifai::api::PatchAction(*from.metadata_action_);
  } else {
    metadata_action_ = nullptr;
  }
  reindex_ = from.reindex_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAppsRequest)
}

void PatchAppsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reindex_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(reindex_));
}

PatchAppsRequest::~PatchAppsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAppsRequest)
  SharedDtor();
}

void PatchAppsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete metadata_action_;
}

void PatchAppsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchAppsRequest& PatchAppsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchAppsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_action_ != nullptr) {
    delete metadata_action_;
  }
  metadata_action_ = nullptr;
  reindex_ = false;
  _internal_metadata_.Clear();
}

const char* PatchAppsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.App apps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAppsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.PatchAction metadata_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reindex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchAppsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.App apps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_apps(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAppsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  // .clarifai.api.PatchAction metadata_action = 4;
  if (this->has_metadata_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::metadata_action(this), target, stream);
  }

  // bool reindex = 5;
  if (this->reindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_reindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAppsRequest)
  return target;
}

size_t PatchAppsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAppsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.App apps = 2;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.PatchAction metadata_action = 4;
  if (this->has_metadata_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_action_);
  }

  // bool reindex = 5;
  if (this->reindex() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchAppsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchAppsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchAppsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchAppsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchAppsRequest)
    MergeFrom(*source);
  }
}

void PatchAppsRequest::MergeFrom(const PatchAppsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_metadata_action()) {
    _internal_mutable_metadata_action()->::clarifai::api::PatchAction::MergeFrom(from._internal_metadata_action());
  }
  if (from.reindex() != 0) {
    _internal_set_reindex(from._internal_reindex());
  }
}

void PatchAppsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchAppsRequest::CopyFrom(const PatchAppsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAppsRequest::IsInitialized() const {
  return true;
}

void PatchAppsRequest::InternalSwap(PatchAppsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(metadata_action_, other->metadata_action_);
  swap(reindex_, other->reindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAppsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostAppsSearchesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostAppsSearchesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostAppsSearchesRequest_default_instance_._instance.get_mutable()->app_query_ = const_cast< ::clarifai::api::AppQuery*>(
      ::clarifai::api::AppQuery::internal_default_instance());
  ::clarifai::api::_PostAppsSearchesRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::clarifai::api::Pagination*>(
      ::clarifai::api::Pagination::internal_default_instance());
}
class PostAppsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAppsSearchesRequest* msg);
  static const ::clarifai::api::AppQuery& app_query(const PostAppsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostAppsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAppsSearchesRequest::_Internal::user_app_id(const PostAppsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::AppQuery&
PostAppsSearchesRequest::_Internal::app_query(const PostAppsSearchesRequest* msg) {
  return *msg->app_query_;
}
const ::clarifai::api::Pagination&
PostAppsSearchesRequest::_Internal::pagination(const PostAppsSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostAppsSearchesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAppsSearchesRequest::clear_app_query() {
  if (GetArenaNoVirtual() == nullptr && app_query_ != nullptr) {
    delete app_query_;
  }
  app_query_ = nullptr;
}
PostAppsSearchesRequest::PostAppsSearchesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostAppsSearchesRequest)
}
PostAppsSearchesRequest::PostAppsSearchesRequest(const PostAppsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_app_query()) {
    app_query_ = new ::clarifai::api::AppQuery(*from.app_query_);
  } else {
    app_query_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAppsSearchesRequest)
}

void PostAppsSearchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostAppsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostAppsSearchesRequest::~PostAppsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAppsSearchesRequest)
  SharedDtor();
}

void PostAppsSearchesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete app_query_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostAppsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostAppsSearchesRequest& PostAppsSearchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostAppsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostAppsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAppsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && app_query_ != nullptr) {
    delete app_query_;
  }
  app_query_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostAppsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.AppQuery app_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostAppsSearchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAppsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.AppQuery app_query = 2;
  if (this->has_app_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app_query(this), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAppsSearchesRequest)
  return target;
}

size_t PostAppsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAppsSearchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.AppQuery app_query = 2;
  if (this->has_app_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_query_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostAppsSearchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostAppsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostAppsSearchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostAppsSearchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostAppsSearchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostAppsSearchesRequest)
    MergeFrom(*source);
  }
}

void PostAppsSearchesRequest::MergeFrom(const PostAppsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAppsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_app_query()) {
    _internal_mutable_app_query()->::clarifai::api::AppQuery::MergeFrom(from._internal_app_query());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void PostAppsSearchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostAppsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostAppsSearchesRequest::CopyFrom(const PostAppsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAppsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAppsSearchesRequest::IsInitialized() const {
  return true;
}

void PostAppsSearchesRequest::InternalSwap(PostAppsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(app_query_, other->app_query_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAppsSearchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleAppResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleAppResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleAppResponse_default_instance_._instance.get_mutable()->app_ = const_cast< ::clarifai::api::App*>(
      ::clarifai::api::App::internal_default_instance());
}
class SingleAppResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleAppResponse* msg);
  static const ::clarifai::api::App& app(const SingleAppResponse* msg);
};

const ::clarifai::api::status::Status&
SingleAppResponse::_Internal::status(const SingleAppResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::App&
SingleAppResponse::_Internal::app(const SingleAppResponse* msg) {
  return *msg->app_;
}
void SingleAppResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleAppResponse::clear_app() {
  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
}
SingleAppResponse::SingleAppResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleAppResponse)
}
SingleAppResponse::SingleAppResponse(const SingleAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_app()) {
    app_ = new ::clarifai::api::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleAppResponse)
}

void SingleAppResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_) -
      reinterpret_cast<char*>(&status_)) + sizeof(app_));
}

SingleAppResponse::~SingleAppResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleAppResponse)
  SharedDtor();
}

void SingleAppResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete app_;
}

void SingleAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleAppResponse& SingleAppResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.App app = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleAppResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.App app = 2;
  if (this->has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleAppResponse)
  return target;
}

size_t SingleAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleAppResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.App app = 2;
  if (this->has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleAppResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleAppResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleAppResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleAppResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleAppResponse)
    MergeFrom(*source);
  }
}

void SingleAppResponse::MergeFrom(const SingleAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_app()) {
    _internal_mutable_app()->::clarifai::api::App::MergeFrom(from._internal_app());
  }
}

void SingleAppResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleAppResponse::CopyFrom(const SingleAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAppResponse::IsInitialized() const {
  return true;
}

void SingleAppResponse::InternalSwap(SingleAppResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(app_, other->app_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAppResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiAppResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiAppResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiAppResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAppResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAppResponse::_Internal::status(const MultiAppResponse* msg) {
  return *msg->status_;
}
void MultiAppResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiAppResponse::clear_apps() {
  apps_.Clear();
}
MultiAppResponse::MultiAppResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiAppResponse)
}
MultiAppResponse::MultiAppResponse(const MultiAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAppResponse)
}

void MultiAppResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiAppResponse::~MultiAppResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAppResponse)
  SharedDtor();
}

void MultiAppResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiAppResponse& MultiAppResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAppResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAppResponse)
  return target;
}

size_t MultiAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAppResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiAppResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiAppResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiAppResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiAppResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiAppResponse)
    MergeFrom(*source);
  }
}

void MultiAppResponse::MergeFrom(const MultiAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiAppResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiAppResponse::CopyFrom(const MultiAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAppResponse::IsInitialized() const {
  return true;
}

void MultiAppResponse::InternalSwap(MultiAppResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAppResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCollaboratorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListCollaboratorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListCollaboratorsRequest::_Internal::user_app_id(const ListCollaboratorsRequest* msg) {
  return *msg->user_app_id_;
}
void ListCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListCollaboratorsRequest::ListCollaboratorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListCollaboratorsRequest)
}
ListCollaboratorsRequest::ListCollaboratorsRequest(const ListCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  list_all_collaborators_ = from.list_all_collaborators_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListCollaboratorsRequest)
}

void ListCollaboratorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&list_all_collaborators_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(list_all_collaborators_));
}

ListCollaboratorsRequest::~ListCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListCollaboratorsRequest)
  SharedDtor();
}

void ListCollaboratorsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListCollaboratorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCollaboratorsRequest& ListCollaboratorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  list_all_collaborators_ = false;
  _internal_metadata_.Clear();
}

const char* ListCollaboratorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool list_all_collaborators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          list_all_collaborators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCollaboratorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // bool list_all_collaborators = 2;
  if (this->list_all_collaborators() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_list_all_collaborators(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListCollaboratorsRequest)
  return target;
}

size_t ListCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListCollaboratorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool list_all_collaborators = 2;
  if (this->list_all_collaborators() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCollaboratorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCollaboratorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCollaboratorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListCollaboratorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListCollaboratorsRequest)
    MergeFrom(*source);
  }
}

void ListCollaboratorsRequest::MergeFrom(const ListCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.list_all_collaborators() != 0) {
    _internal_set_list_all_collaborators(from._internal_list_all_collaborators());
  }
}

void ListCollaboratorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCollaboratorsRequest::CopyFrom(const ListCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollaboratorsRequest::IsInitialized() const {
  return true;
}

void ListCollaboratorsRequest::InternalSwap(ListCollaboratorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(list_all_collaborators_, other->list_all_collaborators_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCollaboratorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostCollaboratorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostCollaboratorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostCollaboratorsRequest::_Internal::user_app_id(const PostCollaboratorsRequest* msg) {
  return *msg->user_app_id_;
}
void PostCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostCollaboratorsRequest::clear_collaborators() {
  collaborators_.Clear();
}
PostCollaboratorsRequest::PostCollaboratorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostCollaboratorsRequest)
}
PostCollaboratorsRequest::PostCollaboratorsRequest(const PostCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collaborators_(from.collaborators_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostCollaboratorsRequest)
}

void PostCollaboratorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostCollaboratorsRequest::~PostCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostCollaboratorsRequest)
  SharedDtor();
}

void PostCollaboratorsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostCollaboratorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostCollaboratorsRequest& PostCollaboratorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborators_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostCollaboratorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaborator collaborators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostCollaboratorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Collaborator collaborators = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collaborators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collaborators(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostCollaboratorsRequest)
  return target;
}

size_t PostCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostCollaboratorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaborator collaborators = 2;
  total_size += 1UL * this->_internal_collaborators_size();
  for (const auto& msg : this->collaborators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostCollaboratorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostCollaboratorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostCollaboratorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostCollaboratorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostCollaboratorsRequest)
    MergeFrom(*source);
  }
}

void PostCollaboratorsRequest::MergeFrom(const PostCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collaborators_.MergeFrom(from.collaborators_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostCollaboratorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostCollaboratorsRequest::CopyFrom(const PostCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostCollaboratorsRequest::IsInitialized() const {
  return true;
}

void PostCollaboratorsRequest::InternalSwap(PostCollaboratorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collaborators_.InternalSwap(&other->collaborators_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostCollaboratorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchCollaboratorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchCollaboratorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchCollaboratorsRequest::_Internal::user_app_id(const PatchCollaboratorsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchCollaboratorsRequest::clear_collaborators() {
  collaborators_.Clear();
}
PatchCollaboratorsRequest::PatchCollaboratorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchCollaboratorsRequest)
}
PatchCollaboratorsRequest::PatchCollaboratorsRequest(const PatchCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collaborators_(from.collaborators_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchCollaboratorsRequest)
}

void PatchCollaboratorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchCollaboratorsRequest::~PatchCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchCollaboratorsRequest)
  SharedDtor();
}

void PatchCollaboratorsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchCollaboratorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchCollaboratorsRequest& PatchCollaboratorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborators_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchCollaboratorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaborator collaborators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchCollaboratorsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchCollaboratorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Collaborator collaborators = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collaborators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collaborators(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchCollaboratorsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchCollaboratorsRequest)
  return target;
}

size_t PatchCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchCollaboratorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaborator collaborators = 2;
  total_size += 1UL * this->_internal_collaborators_size();
  for (const auto& msg : this->collaborators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchCollaboratorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchCollaboratorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchCollaboratorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchCollaboratorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchCollaboratorsRequest)
    MergeFrom(*source);
  }
}

void PatchCollaboratorsRequest::MergeFrom(const PatchCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collaborators_.MergeFrom(from.collaborators_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchCollaboratorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchCollaboratorsRequest::CopyFrom(const PatchCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchCollaboratorsRequest::IsInitialized() const {
  return true;
}

void PatchCollaboratorsRequest::InternalSwap(PatchCollaboratorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collaborators_.InternalSwap(&other->collaborators_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchCollaboratorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteCollaboratorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteCollaboratorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteCollaboratorsRequest::_Internal::user_app_id(const DeleteCollaboratorsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteCollaboratorsRequest::DeleteCollaboratorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteCollaboratorsRequest)
}
DeleteCollaboratorsRequest::DeleteCollaboratorsRequest(const DeleteCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collaborator_ids_(from.collaborator_ids_),
      user_emails_(from.user_emails_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteCollaboratorsRequest)
}

void DeleteCollaboratorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

DeleteCollaboratorsRequest::~DeleteCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteCollaboratorsRequest)
  SharedDtor();
}

void DeleteCollaboratorsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteCollaboratorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteCollaboratorsRequest& DeleteCollaboratorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborator_ids_.Clear();
  user_emails_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteCollaboratorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string collaborator_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_collaborator_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteCollaboratorsRequest.collaborator_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string user_emails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_emails();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteCollaboratorsRequest.user_emails"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteCollaboratorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string collaborator_ids = 2;
  for (int i = 0, n = this->_internal_collaborator_ids_size(); i < n; i++) {
    const auto& s = this->_internal_collaborator_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteCollaboratorsRequest.collaborator_ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated string user_emails = 3;
  for (int i = 0, n = this->_internal_user_emails_size(); i < n; i++) {
    const auto& s = this->_internal_user_emails(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteCollaboratorsRequest.user_emails");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteCollaboratorsRequest)
  return target;
}

size_t DeleteCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteCollaboratorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collaborator_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(collaborator_ids_.size());
  for (int i = 0, n = collaborator_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      collaborator_ids_.Get(i));
  }

  // repeated string user_emails = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_emails_.size());
  for (int i = 0, n = user_emails_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_emails_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteCollaboratorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteCollaboratorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteCollaboratorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteCollaboratorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteCollaboratorsRequest)
    MergeFrom(*source);
  }
}

void DeleteCollaboratorsRequest::MergeFrom(const DeleteCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collaborator_ids_.MergeFrom(from.collaborator_ids_);
  user_emails_.MergeFrom(from.user_emails_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteCollaboratorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCollaboratorsRequest::CopyFrom(const DeleteCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCollaboratorsRequest::IsInitialized() const {
  return true;
}

void DeleteCollaboratorsRequest::InternalSwap(DeleteCollaboratorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collaborator_ids_.InternalSwap(&other->collaborator_ids_);
  user_emails_.InternalSwap(&other->user_emails_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCollaboratorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiCollaboratorsResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiCollaboratorsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiCollaboratorsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiCollaboratorsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiCollaboratorsResponse::_Internal::status(const MultiCollaboratorsResponse* msg) {
  return *msg->status_;
}
void MultiCollaboratorsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiCollaboratorsResponse::clear_collaborators() {
  collaborators_.Clear();
}
MultiCollaboratorsResponse::MultiCollaboratorsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiCollaboratorsResponse)
}
MultiCollaboratorsResponse::MultiCollaboratorsResponse(const MultiCollaboratorsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collaborators_(from.collaborators_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiCollaboratorsResponse)
}

void MultiCollaboratorsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiCollaboratorsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiCollaboratorsResponse::~MultiCollaboratorsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiCollaboratorsResponse)
  SharedDtor();
}

void MultiCollaboratorsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiCollaboratorsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiCollaboratorsResponse& MultiCollaboratorsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiCollaboratorsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiCollaboratorsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiCollaboratorsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborators_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiCollaboratorsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaborator collaborators = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiCollaboratorsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiCollaboratorsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Collaborator collaborators = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collaborators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collaborators(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiCollaboratorsResponse)
  return target;
}

size_t MultiCollaboratorsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiCollaboratorsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaborator collaborators = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_collaborators_size();
  for (const auto& msg : this->collaborators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiCollaboratorsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiCollaboratorsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiCollaboratorsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiCollaboratorsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiCollaboratorsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiCollaboratorsResponse)
    MergeFrom(*source);
  }
}

void MultiCollaboratorsResponse::MergeFrom(const MultiCollaboratorsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiCollaboratorsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collaborators_.MergeFrom(from.collaborators_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiCollaboratorsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiCollaboratorsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiCollaboratorsResponse::CopyFrom(const MultiCollaboratorsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiCollaboratorsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCollaboratorsResponse::IsInitialized() const {
  return true;
}

void MultiCollaboratorsResponse::InternalSwap(MultiCollaboratorsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collaborators_.InternalSwap(&other->collaborators_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiCollaboratorsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCollaborationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListCollaborationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListCollaborationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListCollaborationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListCollaborationsRequest::_Internal::user_app_id(const ListCollaborationsRequest* msg) {
  return *msg->user_app_id_;
}
void ListCollaborationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListCollaborationsRequest::ListCollaborationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListCollaborationsRequest)
}
ListCollaborationsRequest::ListCollaborationsRequest(const ListCollaborationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListCollaborationsRequest)
}

void ListCollaborationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCollaborationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListCollaborationsRequest::~ListCollaborationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListCollaborationsRequest)
  SharedDtor();
}

void ListCollaborationsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListCollaborationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCollaborationsRequest& ListCollaborationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCollaborationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListCollaborationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListCollaborationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListCollaborationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCollaborationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListCollaborationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListCollaborationsRequest)
  return target;
}

size_t ListCollaborationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListCollaborationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCollaborationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListCollaborationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCollaborationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCollaborationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListCollaborationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListCollaborationsRequest)
    MergeFrom(*source);
  }
}

void ListCollaborationsRequest::MergeFrom(const ListCollaborationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListCollaborationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListCollaborationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListCollaborationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCollaborationsRequest::CopyFrom(const ListCollaborationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListCollaborationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollaborationsRequest::IsInitialized() const {
  return true;
}

void ListCollaborationsRequest::InternalSwap(ListCollaborationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCollaborationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiCollaborationsResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiCollaborationsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiCollaborationsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiCollaborationsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiCollaborationsResponse::_Internal::status(const MultiCollaborationsResponse* msg) {
  return *msg->status_;
}
void MultiCollaborationsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiCollaborationsResponse::clear_collaborations() {
  collaborations_.Clear();
}
MultiCollaborationsResponse::MultiCollaborationsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiCollaborationsResponse)
}
MultiCollaborationsResponse::MultiCollaborationsResponse(const MultiCollaborationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collaborations_(from.collaborations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiCollaborationsResponse)
}

void MultiCollaborationsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiCollaborationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiCollaborationsResponse::~MultiCollaborationsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiCollaborationsResponse)
  SharedDtor();
}

void MultiCollaborationsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiCollaborationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiCollaborationsResponse& MultiCollaborationsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiCollaborationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiCollaborationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiCollaborationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborations_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiCollaborationsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaboration collaborations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiCollaborationsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiCollaborationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Collaboration collaborations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collaborations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collaborations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiCollaborationsResponse)
  return target;
}

size_t MultiCollaborationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiCollaborationsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaboration collaborations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_collaborations_size();
  for (const auto& msg : this->collaborations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiCollaborationsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiCollaborationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiCollaborationsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiCollaborationsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiCollaborationsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiCollaborationsResponse)
    MergeFrom(*source);
  }
}

void MultiCollaborationsResponse::MergeFrom(const MultiCollaborationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiCollaborationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collaborations_.MergeFrom(from.collaborations_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiCollaborationsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiCollaborationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiCollaborationsResponse::CopyFrom(const MultiCollaborationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiCollaborationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCollaborationsResponse::IsInitialized() const {
  return true;
}

void MultiCollaborationsResponse::InternalSwap(MultiCollaborationsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collaborations_.InternalSwap(&other->collaborations_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiCollaborationsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStatusCodeRequest::InitAsDefaultInstance() {
}
class GetStatusCodeRequest::_Internal {
 public:
};

GetStatusCodeRequest::GetStatusCodeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetStatusCodeRequest)
}
GetStatusCodeRequest::GetStatusCodeRequest(const GetStatusCodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_code_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status_code_id().empty()) {
    status_code_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_code_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetStatusCodeRequest)
}

void GetStatusCodeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStatusCodeRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_code_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetStatusCodeRequest::~GetStatusCodeRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetStatusCodeRequest)
  SharedDtor();
}

void GetStatusCodeRequest::SharedDtor() {
  status_code_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetStatusCodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStatusCodeRequest& GetStatusCodeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStatusCodeRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetStatusCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetStatusCodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetStatusCodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status_code_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status_code_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetStatusCodeRequest.status_code_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatusCodeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetStatusCodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status_code_id = 1;
  if (this->status_code_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_code_id().data(), static_cast<int>(this->_internal_status_code_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetStatusCodeRequest.status_code_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status_code_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetStatusCodeRequest)
  return target;
}

size_t GetStatusCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetStatusCodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status_code_id = 1;
  if (this->status_code_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_code_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStatusCodeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetStatusCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatusCodeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStatusCodeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetStatusCodeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetStatusCodeRequest)
    MergeFrom(*source);
  }
}

void GetStatusCodeRequest::MergeFrom(const GetStatusCodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetStatusCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status_code_id().size() > 0) {

    status_code_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_code_id_);
  }
}

void GetStatusCodeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetStatusCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatusCodeRequest::CopyFrom(const GetStatusCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetStatusCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusCodeRequest::IsInitialized() const {
  return true;
}

void GetStatusCodeRequest::InternalSwap(GetStatusCodeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_code_id_.Swap(&other->status_code_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusCodeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListStatusCodesRequest::InitAsDefaultInstance() {
}
class ListStatusCodesRequest::_Internal {
 public:
};

ListStatusCodesRequest::ListStatusCodesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListStatusCodesRequest)
}
ListStatusCodesRequest::ListStatusCodesRequest(const ListStatusCodesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListStatusCodesRequest)
}

void ListStatusCodesRequest::SharedCtor() {
}

ListStatusCodesRequest::~ListStatusCodesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListStatusCodesRequest)
  SharedDtor();
}

void ListStatusCodesRequest::SharedDtor() {
}

void ListStatusCodesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListStatusCodesRequest& ListStatusCodesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListStatusCodesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListStatusCodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListStatusCodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ListStatusCodesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListStatusCodesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListStatusCodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListStatusCodesRequest)
  return target;
}

size_t ListStatusCodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListStatusCodesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListStatusCodesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListStatusCodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListStatusCodesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListStatusCodesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListStatusCodesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListStatusCodesRequest)
    MergeFrom(*source);
  }
}

void ListStatusCodesRequest::MergeFrom(const ListStatusCodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListStatusCodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListStatusCodesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListStatusCodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListStatusCodesRequest::CopyFrom(const ListStatusCodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListStatusCodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStatusCodesRequest::IsInitialized() const {
  return true;
}

void ListStatusCodesRequest::InternalSwap(ListStatusCodesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListStatusCodesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleStatusCodeResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleStatusCodeResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class SingleStatusCodeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleStatusCodeResponse* msg);
};

const ::clarifai::api::status::Status&
SingleStatusCodeResponse::_Internal::status(const SingleStatusCodeResponse* msg) {
  return *msg->status_;
}
void SingleStatusCodeResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SingleStatusCodeResponse::SingleStatusCodeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleStatusCodeResponse)
}
SingleStatusCodeResponse::SingleStatusCodeResponse(const SingleStatusCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleStatusCodeResponse)
}

void SingleStatusCodeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

SingleStatusCodeResponse::~SingleStatusCodeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleStatusCodeResponse)
  SharedDtor();
}

void SingleStatusCodeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void SingleStatusCodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleStatusCodeResponse& SingleStatusCodeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleStatusCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleStatusCodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleStatusCodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleStatusCodeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleStatusCodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleStatusCodeResponse)
  return target;
}

size_t SingleStatusCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleStatusCodeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleStatusCodeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleStatusCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleStatusCodeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleStatusCodeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleStatusCodeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleStatusCodeResponse)
    MergeFrom(*source);
  }
}

void SingleStatusCodeResponse::MergeFrom(const SingleStatusCodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleStatusCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void SingleStatusCodeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleStatusCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleStatusCodeResponse::CopyFrom(const SingleStatusCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleStatusCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleStatusCodeResponse::IsInitialized() const {
  return true;
}

void SingleStatusCodeResponse::InternalSwap(SingleStatusCodeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleStatusCodeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiStatusCodeResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiStatusCodeResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiStatusCodeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiStatusCodeResponse* msg);
};

const ::clarifai::api::status::Status&
MultiStatusCodeResponse::_Internal::status(const MultiStatusCodeResponse* msg) {
  return *msg->status_;
}
void MultiStatusCodeResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiStatusCodeResponse::clear_statuses() {
  statuses_.Clear();
}
MultiStatusCodeResponse::MultiStatusCodeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiStatusCodeResponse)
}
MultiStatusCodeResponse::MultiStatusCodeResponse(const MultiStatusCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      statuses_(from.statuses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiStatusCodeResponse)
}

void MultiStatusCodeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiStatusCodeResponse::~MultiStatusCodeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiStatusCodeResponse)
  SharedDtor();
}

void MultiStatusCodeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiStatusCodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiStatusCodeResponse& MultiStatusCodeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiStatusCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiStatusCodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statuses_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiStatusCodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.status.Status statuses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statuses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiStatusCodeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiStatusCodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.status.Status statuses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_statuses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_statuses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiStatusCodeResponse)
  return target;
}

size_t MultiStatusCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiStatusCodeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.status.Status statuses = 2;
  total_size += 1UL * this->_internal_statuses_size();
  for (const auto& msg : this->statuses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiStatusCodeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiStatusCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiStatusCodeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiStatusCodeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiStatusCodeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiStatusCodeResponse)
    MergeFrom(*source);
  }
}

void MultiStatusCodeResponse::MergeFrom(const MultiStatusCodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiStatusCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statuses_.MergeFrom(from.statuses_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiStatusCodeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiStatusCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiStatusCodeResponse::CopyFrom(const MultiStatusCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiStatusCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiStatusCodeResponse::IsInitialized() const {
  return true;
}

void MultiStatusCodeResponse::InternalSwap(MultiStatusCodeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  statuses_.InternalSwap(&other->statuses_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiStatusCodeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConceptRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetConceptRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetConceptRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetConceptRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetConceptRequest::_Internal::user_app_id(const GetConceptRequest* msg) {
  return *msg->user_app_id_;
}
void GetConceptRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetConceptRequest::GetConceptRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetConceptRequest)
}
GetConceptRequest::GetConceptRequest(const GetConceptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetConceptRequest)
}

void GetConceptRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetConceptRequest::~GetConceptRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetConceptRequest)
  SharedDtor();
}

void GetConceptRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetConceptRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConceptRequest& GetConceptRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetConceptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetConceptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetConceptRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetConceptRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConceptRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetConceptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetConceptRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetConceptRequest)
  return target;
}

size_t GetConceptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetConceptRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConceptRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetConceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConceptRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConceptRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetConceptRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetConceptRequest)
    MergeFrom(*source);
  }
}

void GetConceptRequest::MergeFrom(const GetConceptRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetConceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetConceptRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetConceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConceptRequest::CopyFrom(const GetConceptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetConceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConceptRequest::IsInitialized() const {
  return true;
}

void GetConceptRequest::InternalSwap(GetConceptRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConceptRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListConceptsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListConceptsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListConceptsRequest::_Internal::user_app_id(const ListConceptsRequest* msg) {
  return *msg->user_app_id_;
}
void ListConceptsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListConceptsRequest::ListConceptsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListConceptsRequest)
}
ListConceptsRequest::ListConceptsRequest(const ListConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListConceptsRequest)
}

void ListConceptsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListConceptsRequest::~ListConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListConceptsRequest)
  SharedDtor();
}

void ListConceptsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListConceptsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListConceptsRequest& ListConceptsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListConceptsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListConceptsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListConceptsRequest)
  return target;
}

size_t ListConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListConceptsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListConceptsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListConceptsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListConceptsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListConceptsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListConceptsRequest)
    MergeFrom(*source);
  }
}

void ListConceptsRequest::MergeFrom(const ListConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListConceptsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListConceptsRequest::CopyFrom(const ListConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConceptsRequest::IsInitialized() const {
  return true;
}

void ListConceptsRequest::InternalSwap(ListConceptsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConceptsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostConceptsSearchesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostConceptsSearchesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostConceptsSearchesRequest_default_instance_._instance.get_mutable()->concept_query_ = const_cast< ::clarifai::api::ConceptQuery*>(
      ::clarifai::api::ConceptQuery::internal_default_instance());
  ::clarifai::api::_PostConceptsSearchesRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::clarifai::api::Pagination*>(
      ::clarifai::api::Pagination::internal_default_instance());
}
class PostConceptsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptsSearchesRequest* msg);
  static const ::clarifai::api::ConceptQuery& concept_query(const PostConceptsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostConceptsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptsSearchesRequest::_Internal::user_app_id(const PostConceptsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::ConceptQuery&
PostConceptsSearchesRequest::_Internal::concept_query(const PostConceptsSearchesRequest* msg) {
  return *msg->concept_query_;
}
const ::clarifai::api::Pagination&
PostConceptsSearchesRequest::_Internal::pagination(const PostConceptsSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostConceptsSearchesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptsSearchesRequest::clear_concept_query() {
  if (GetArenaNoVirtual() == nullptr && concept_query_ != nullptr) {
    delete concept_query_;
  }
  concept_query_ = nullptr;
}
PostConceptsSearchesRequest::PostConceptsSearchesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostConceptsSearchesRequest)
}
PostConceptsSearchesRequest::PostConceptsSearchesRequest(const PostConceptsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_concept_query()) {
    concept_query_ = new ::clarifai::api::ConceptQuery(*from.concept_query_);
  } else {
    concept_query_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptsSearchesRequest)
}

void PostConceptsSearchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostConceptsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostConceptsSearchesRequest::~PostConceptsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptsSearchesRequest)
  SharedDtor();
}

void PostConceptsSearchesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete concept_query_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostConceptsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostConceptsSearchesRequest& PostConceptsSearchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostConceptsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostConceptsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && concept_query_ != nullptr) {
    delete concept_query_;
  }
  concept_query_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostConceptsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ConceptQuery concept_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostConceptsSearchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.ConceptQuery concept_query = 2;
  if (this->has_concept_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::concept_query(this), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptsSearchesRequest)
  return target;
}

size_t PostConceptsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptsSearchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.ConceptQuery concept_query = 2;
  if (this->has_concept_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_query_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostConceptsSearchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostConceptsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostConceptsSearchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostConceptsSearchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostConceptsSearchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostConceptsSearchesRequest)
    MergeFrom(*source);
  }
}

void PostConceptsSearchesRequest::MergeFrom(const PostConceptsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_concept_query()) {
    _internal_mutable_concept_query()->::clarifai::api::ConceptQuery::MergeFrom(from._internal_concept_query());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void PostConceptsSearchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostConceptsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostConceptsSearchesRequest::CopyFrom(const PostConceptsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptsSearchesRequest::IsInitialized() const {
  return true;
}

void PostConceptsSearchesRequest::InternalSwap(PostConceptsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(concept_query_, other->concept_query_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptsSearchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostConceptsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostConceptsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptsRequest::_Internal::user_app_id(const PostConceptsRequest* msg) {
  return *msg->user_app_id_;
}
void PostConceptsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptsRequest::clear_concepts() {
  concepts_.Clear();
}
PostConceptsRequest::PostConceptsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostConceptsRequest)
}
PostConceptsRequest::PostConceptsRequest(const PostConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concepts_(from.concepts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptsRequest)
}

void PostConceptsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostConceptsRequest::~PostConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptsRequest)
  SharedDtor();
}

void PostConceptsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostConceptsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostConceptsRequest& PostConceptsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concepts_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostConceptsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostConceptsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Concept concepts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concepts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptsRequest)
  return target;
}

size_t PostConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 2;
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostConceptsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostConceptsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostConceptsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostConceptsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostConceptsRequest)
    MergeFrom(*source);
  }
}

void PostConceptsRequest::MergeFrom(const PostConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concepts_.MergeFrom(from.concepts_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostConceptsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostConceptsRequest::CopyFrom(const PostConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptsRequest::IsInitialized() const {
  return true;
}

void PostConceptsRequest::InternalSwap(PostConceptsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concepts_.InternalSwap(&other->concepts_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchConceptsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchConceptsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchConceptsRequest::_Internal::user_app_id(const PatchConceptsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchConceptsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchConceptsRequest::clear_concepts() {
  concepts_.Clear();
}
PatchConceptsRequest::PatchConceptsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchConceptsRequest)
}
PatchConceptsRequest::PatchConceptsRequest(const PatchConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concepts_(from.concepts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchConceptsRequest)
}

void PatchConceptsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchConceptsRequest::~PatchConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchConceptsRequest)
  SharedDtor();
}

void PatchConceptsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchConceptsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchConceptsRequest& PatchConceptsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concepts_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchConceptsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchConceptsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchConceptsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Concept concepts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concepts(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchConceptsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchConceptsRequest)
  return target;
}

size_t PatchConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchConceptsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 2;
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchConceptsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchConceptsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchConceptsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchConceptsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchConceptsRequest)
    MergeFrom(*source);
  }
}

void PatchConceptsRequest::MergeFrom(const PatchConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concepts_.MergeFrom(from.concepts_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchConceptsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchConceptsRequest::CopyFrom(const PatchConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchConceptsRequest::IsInitialized() const {
  return true;
}

void PatchConceptsRequest::InternalSwap(PatchConceptsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concepts_.InternalSwap(&other->concepts_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchConceptsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConceptCountsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetConceptCountsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetConceptCountsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetConceptCountsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetConceptCountsRequest::_Internal::user_app_id(const GetConceptCountsRequest* msg) {
  return *msg->user_app_id_;
}
void GetConceptCountsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetConceptCountsRequest::GetConceptCountsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetConceptCountsRequest)
}
GetConceptCountsRequest::GetConceptCountsRequest(const GetConceptCountsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetConceptCountsRequest)
}

void GetConceptCountsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetConceptCountsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

GetConceptCountsRequest::~GetConceptCountsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetConceptCountsRequest)
  SharedDtor();
}

void GetConceptCountsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetConceptCountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConceptCountsRequest& GetConceptCountsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConceptCountsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetConceptCountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetConceptCountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* GetConceptCountsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConceptCountsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetConceptCountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetConceptCountsRequest)
  return target;
}

size_t GetConceptCountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetConceptCountsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConceptCountsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetConceptCountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConceptCountsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConceptCountsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetConceptCountsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetConceptCountsRequest)
    MergeFrom(*source);
  }
}

void GetConceptCountsRequest::MergeFrom(const GetConceptCountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetConceptCountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void GetConceptCountsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetConceptCountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConceptCountsRequest::CopyFrom(const GetConceptCountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetConceptCountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConceptCountsRequest::IsInitialized() const {
  return true;
}

void GetConceptCountsRequest::InternalSwap(GetConceptCountsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConceptCountsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleConceptResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleConceptResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleConceptResponse_default_instance_._instance.get_mutable()->concept_ = const_cast< ::clarifai::api::Concept*>(
      ::clarifai::api::Concept::internal_default_instance());
}
class SingleConceptResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleConceptResponse* msg);
  static const ::clarifai::api::Concept& concept(const SingleConceptResponse* msg);
};

const ::clarifai::api::status::Status&
SingleConceptResponse::_Internal::status(const SingleConceptResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Concept&
SingleConceptResponse::_Internal::concept(const SingleConceptResponse* msg) {
  return *msg->concept_;
}
void SingleConceptResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleConceptResponse::clear_concept() {
  if (GetArenaNoVirtual() == nullptr && concept_ != nullptr) {
    delete concept_;
  }
  concept_ = nullptr;
}
SingleConceptResponse::SingleConceptResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleConceptResponse)
}
SingleConceptResponse::SingleConceptResponse(const SingleConceptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_concept()) {
    concept_ = new ::clarifai::api::Concept(*from.concept_);
  } else {
    concept_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleConceptResponse)
}

void SingleConceptResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&concept_) -
      reinterpret_cast<char*>(&status_)) + sizeof(concept_));
}

SingleConceptResponse::~SingleConceptResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleConceptResponse)
  SharedDtor();
}

void SingleConceptResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete concept_;
}

void SingleConceptResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleConceptResponse& SingleConceptResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleConceptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleConceptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && concept_ != nullptr) {
    delete concept_;
  }
  concept_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleConceptResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Concept concept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleConceptResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleConceptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Concept concept = 2;
  if (this->has_concept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::concept(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleConceptResponse)
  return target;
}

size_t SingleConceptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleConceptResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Concept concept = 2;
  if (this->has_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleConceptResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleConceptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleConceptResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleConceptResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleConceptResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleConceptResponse)
    MergeFrom(*source);
  }
}

void SingleConceptResponse::MergeFrom(const SingleConceptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleConceptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_concept()) {
    _internal_mutable_concept()->::clarifai::api::Concept::MergeFrom(from._internal_concept());
  }
}

void SingleConceptResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleConceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleConceptResponse::CopyFrom(const SingleConceptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleConceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleConceptResponse::IsInitialized() const {
  return true;
}

void SingleConceptResponse::InternalSwap(SingleConceptResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(concept_, other->concept_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleConceptResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiConceptResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiConceptResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiConceptResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptResponse::_Internal::status(const MultiConceptResponse* msg) {
  return *msg->status_;
}
void MultiConceptResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiConceptResponse::clear_concepts() {
  concepts_.Clear();
}
MultiConceptResponse::MultiConceptResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiConceptResponse)
}
MultiConceptResponse::MultiConceptResponse(const MultiConceptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concepts_(from.concepts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptResponse)
}

void MultiConceptResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiConceptResponse::~MultiConceptResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptResponse)
  SharedDtor();
}

void MultiConceptResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiConceptResponse& MultiConceptResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiConceptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concepts_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiConceptResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiConceptResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concepts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptResponse)
  return target;
}

size_t MultiConceptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiConceptResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiConceptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiConceptResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiConceptResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiConceptResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiConceptResponse)
    MergeFrom(*source);
  }
}

void MultiConceptResponse::MergeFrom(const MultiConceptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concepts_.MergeFrom(from.concepts_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiConceptResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiConceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiConceptResponse::CopyFrom(const MultiConceptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptResponse::IsInitialized() const {
  return true;
}

void MultiConceptResponse::InternalSwap(MultiConceptResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concepts_.InternalSwap(&other->concepts_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiConceptCountResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiConceptCountResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiConceptCountResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptCountResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptCountResponse::_Internal::status(const MultiConceptCountResponse* msg) {
  return *msg->status_;
}
void MultiConceptCountResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiConceptCountResponse::clear_concept_counts() {
  concept_counts_.Clear();
}
MultiConceptCountResponse::MultiConceptCountResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiConceptCountResponse)
}
MultiConceptCountResponse::MultiConceptCountResponse(const MultiConceptCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_counts_(from.concept_counts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptCountResponse)
}

void MultiConceptCountResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiConceptCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiConceptCountResponse::~MultiConceptCountResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptCountResponse)
  SharedDtor();
}

void MultiConceptCountResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiConceptCountResponse& MultiConceptCountResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiConceptCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiConceptCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_counts_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiConceptCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiConceptCountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_counts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concept_counts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptCountResponse)
  return target;
}

size_t MultiConceptCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptCountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concept_counts_size();
  for (const auto& msg : this->concept_counts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiConceptCountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiConceptCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiConceptCountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiConceptCountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiConceptCountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiConceptCountResponse)
    MergeFrom(*source);
  }
}

void MultiConceptCountResponse::MergeFrom(const MultiConceptCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_counts_.MergeFrom(from.concept_counts_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiConceptCountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiConceptCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiConceptCountResponse::CopyFrom(const MultiConceptCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptCountResponse::IsInitialized() const {
  return true;
}

void MultiConceptCountResponse::InternalSwap(MultiConceptCountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_counts_.InternalSwap(&other->concept_counts_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptCountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListConceptRelationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListConceptRelationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListConceptRelationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListConceptRelationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListConceptRelationsRequest::_Internal::user_app_id(const ListConceptRelationsRequest* msg) {
  return *msg->user_app_id_;
}
void ListConceptRelationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListConceptRelationsRequest::ListConceptRelationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListConceptRelationsRequest)
}
ListConceptRelationsRequest::ListConceptRelationsRequest(const ListConceptRelationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  predicate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_predicate().empty()) {
    predicate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.predicate_);
  }
  knowledge_graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_knowledge_graph_id().empty()) {
    knowledge_graph_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.knowledge_graph_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListConceptRelationsRequest)
}

void ListConceptRelationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  knowledge_graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListConceptRelationsRequest::~ListConceptRelationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListConceptRelationsRequest)
  SharedDtor();
}

void ListConceptRelationsRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  knowledge_graph_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListConceptRelationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListConceptRelationsRequest& ListConceptRelationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListConceptRelationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListConceptRelationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  knowledge_graph_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListConceptRelationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListConceptRelationsRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string predicate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_predicate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListConceptRelationsRequest.predicate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string knowledge_graph_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_knowledge_graph_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListConceptRelationsRequest.knowledge_graph_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListConceptRelationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListConceptRelationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptRelationsRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // string predicate = 3;
  if (this->predicate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_predicate().data(), static_cast<int>(this->_internal_predicate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptRelationsRequest.predicate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_predicate(), target);
  }

  // string knowledge_graph_id = 4;
  if (this->knowledge_graph_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_knowledge_graph_id().data(), static_cast<int>(this->_internal_knowledge_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptRelationsRequest.knowledge_graph_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_knowledge_graph_id(), target);
  }

  // uint32 page = 5;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_page(), target);
  }

  // uint32 per_page = 6;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListConceptRelationsRequest)
  return target;
}

size_t ListConceptRelationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListConceptRelationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // string predicate = 3;
  if (this->predicate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_predicate());
  }

  // string knowledge_graph_id = 4;
  if (this->knowledge_graph_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_knowledge_graph_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 5;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 6;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListConceptRelationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListConceptRelationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListConceptRelationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListConceptRelationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListConceptRelationsRequest)
    MergeFrom(*source);
  }
}

void ListConceptRelationsRequest::MergeFrom(const ListConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.predicate().size() > 0) {

    predicate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.predicate_);
  }
  if (from.knowledge_graph_id().size() > 0) {

    knowledge_graph_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.knowledge_graph_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListConceptRelationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListConceptRelationsRequest::CopyFrom(const ListConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConceptRelationsRequest::IsInitialized() const {
  return true;
}

void ListConceptRelationsRequest::InternalSwap(ListConceptRelationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  predicate_.Swap(&other->predicate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  knowledge_graph_id_.Swap(&other->knowledge_graph_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConceptRelationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostConceptRelationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostConceptRelationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostConceptRelationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptRelationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptRelationsRequest::_Internal::user_app_id(const PostConceptRelationsRequest* msg) {
  return *msg->user_app_id_;
}
void PostConceptRelationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptRelationsRequest::clear_concept_relations() {
  concept_relations_.Clear();
}
PostConceptRelationsRequest::PostConceptRelationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostConceptRelationsRequest)
}
PostConceptRelationsRequest::PostConceptRelationsRequest(const PostConceptRelationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_relations_(from.concept_relations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptRelationsRequest)
}

void PostConceptRelationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PostConceptRelationsRequest::~PostConceptRelationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptRelationsRequest)
  SharedDtor();
}

void PostConceptRelationsRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostConceptRelationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostConceptRelationsRequest& PostConceptRelationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostConceptRelationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptRelationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_relations_.Clear();
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostConceptRelationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostConceptRelationsRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptRelation concept_relations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostConceptRelationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptRelationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostConceptRelationsRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated .clarifai.api.ConceptRelation concept_relations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_relations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_concept_relations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptRelationsRequest)
  return target;
}

size_t PostConceptRelationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptRelationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptRelation concept_relations = 3;
  total_size += 1UL * this->_internal_concept_relations_size();
  for (const auto& msg : this->concept_relations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostConceptRelationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostConceptRelationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostConceptRelationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostConceptRelationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostConceptRelationsRequest)
    MergeFrom(*source);
  }
}

void PostConceptRelationsRequest::MergeFrom(const PostConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_relations_.MergeFrom(from.concept_relations_);
  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostConceptRelationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostConceptRelationsRequest::CopyFrom(const PostConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptRelationsRequest::IsInitialized() const {
  return true;
}

void PostConceptRelationsRequest::InternalSwap(PostConceptRelationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_relations_.InternalSwap(&other->concept_relations_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptRelationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteConceptRelationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteConceptRelationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteConceptRelationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteConceptRelationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteConceptRelationsRequest::_Internal::user_app_id(const DeleteConceptRelationsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteConceptRelationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteConceptRelationsRequest::DeleteConceptRelationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteConceptRelationsRequest)
}
DeleteConceptRelationsRequest::DeleteConceptRelationsRequest(const DeleteConceptRelationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteConceptRelationsRequest)
}

void DeleteConceptRelationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteConceptRelationsRequest::~DeleteConceptRelationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteConceptRelationsRequest)
  SharedDtor();
}

void DeleteConceptRelationsRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteConceptRelationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteConceptRelationsRequest& DeleteConceptRelationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteConceptRelationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteConceptRelationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteConceptRelationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteConceptRelationsRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteConceptRelationsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteConceptRelationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteConceptRelationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteConceptRelationsRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated string ids = 3;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteConceptRelationsRequest.ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteConceptRelationsRequest)
  return target;
}

size_t DeleteConceptRelationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteConceptRelationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteConceptRelationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteConceptRelationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteConceptRelationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteConceptRelationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteConceptRelationsRequest)
    MergeFrom(*source);
  }
}

void DeleteConceptRelationsRequest::MergeFrom(const DeleteConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteConceptRelationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteConceptRelationsRequest::CopyFrom(const DeleteConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteConceptRelationsRequest::IsInitialized() const {
  return true;
}

void DeleteConceptRelationsRequest::InternalSwap(DeleteConceptRelationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteConceptRelationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListKnowledgeGraphsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListKnowledgeGraphsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListKnowledgeGraphsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListKnowledgeGraphsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListKnowledgeGraphsRequest::_Internal::user_app_id(const ListKnowledgeGraphsRequest* msg) {
  return *msg->user_app_id_;
}
void ListKnowledgeGraphsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListKnowledgeGraphsRequest::ListKnowledgeGraphsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListKnowledgeGraphsRequest)
}
ListKnowledgeGraphsRequest::ListKnowledgeGraphsRequest(const ListKnowledgeGraphsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListKnowledgeGraphsRequest)
}

void ListKnowledgeGraphsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

ListKnowledgeGraphsRequest::~ListKnowledgeGraphsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListKnowledgeGraphsRequest)
  SharedDtor();
}

void ListKnowledgeGraphsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListKnowledgeGraphsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListKnowledgeGraphsRequest& ListKnowledgeGraphsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListKnowledgeGraphsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListKnowledgeGraphsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListKnowledgeGraphsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListKnowledgeGraphsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListKnowledgeGraphsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListKnowledgeGraphsRequest)
  return target;
}

size_t ListKnowledgeGraphsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListKnowledgeGraphsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListKnowledgeGraphsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListKnowledgeGraphsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListKnowledgeGraphsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListKnowledgeGraphsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListKnowledgeGraphsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListKnowledgeGraphsRequest)
    MergeFrom(*source);
  }
}

void ListKnowledgeGraphsRequest::MergeFrom(const ListKnowledgeGraphsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListKnowledgeGraphsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void ListKnowledgeGraphsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListKnowledgeGraphsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListKnowledgeGraphsRequest::CopyFrom(const ListKnowledgeGraphsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListKnowledgeGraphsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListKnowledgeGraphsRequest::IsInitialized() const {
  return true;
}

void ListKnowledgeGraphsRequest::InternalSwap(ListKnowledgeGraphsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListKnowledgeGraphsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostKnowledgeGraphsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostKnowledgeGraphsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostKnowledgeGraphsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostKnowledgeGraphsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostKnowledgeGraphsRequest::_Internal::user_app_id(const PostKnowledgeGraphsRequest* msg) {
  return *msg->user_app_id_;
}
void PostKnowledgeGraphsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostKnowledgeGraphsRequest::clear_knowledge_graphs() {
  knowledge_graphs_.Clear();
}
PostKnowledgeGraphsRequest::PostKnowledgeGraphsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostKnowledgeGraphsRequest)
}
PostKnowledgeGraphsRequest::PostKnowledgeGraphsRequest(const PostKnowledgeGraphsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      knowledge_graphs_(from.knowledge_graphs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostKnowledgeGraphsRequest)
}

void PostKnowledgeGraphsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostKnowledgeGraphsRequest::~PostKnowledgeGraphsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostKnowledgeGraphsRequest)
  SharedDtor();
}

void PostKnowledgeGraphsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostKnowledgeGraphsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostKnowledgeGraphsRequest& PostKnowledgeGraphsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostKnowledgeGraphsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostKnowledgeGraphsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  knowledge_graphs_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostKnowledgeGraphsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_knowledge_graphs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostKnowledgeGraphsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostKnowledgeGraphsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_knowledge_graphs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_knowledge_graphs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostKnowledgeGraphsRequest)
  return target;
}

size_t PostKnowledgeGraphsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostKnowledgeGraphsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
  total_size += 1UL * this->_internal_knowledge_graphs_size();
  for (const auto& msg : this->knowledge_graphs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostKnowledgeGraphsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostKnowledgeGraphsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostKnowledgeGraphsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostKnowledgeGraphsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostKnowledgeGraphsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostKnowledgeGraphsRequest)
    MergeFrom(*source);
  }
}

void PostKnowledgeGraphsRequest::MergeFrom(const PostKnowledgeGraphsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostKnowledgeGraphsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  knowledge_graphs_.MergeFrom(from.knowledge_graphs_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostKnowledgeGraphsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostKnowledgeGraphsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostKnowledgeGraphsRequest::CopyFrom(const PostKnowledgeGraphsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostKnowledgeGraphsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostKnowledgeGraphsRequest::IsInitialized() const {
  return true;
}

void PostKnowledgeGraphsRequest::InternalSwap(PostKnowledgeGraphsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  knowledge_graphs_.InternalSwap(&other->knowledge_graphs_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostKnowledgeGraphsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostConceptMappingJobsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostConceptMappingJobsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostConceptMappingJobsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptMappingJobsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptMappingJobsRequest::_Internal::user_app_id(const PostConceptMappingJobsRequest* msg) {
  return *msg->user_app_id_;
}
void PostConceptMappingJobsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptMappingJobsRequest::clear_concept_mapping_jobs() {
  concept_mapping_jobs_.Clear();
}
PostConceptMappingJobsRequest::PostConceptMappingJobsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostConceptMappingJobsRequest)
}
PostConceptMappingJobsRequest::PostConceptMappingJobsRequest(const PostConceptMappingJobsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_mapping_jobs_(from.concept_mapping_jobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptMappingJobsRequest)
}

void PostConceptMappingJobsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostConceptMappingJobsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostConceptMappingJobsRequest::~PostConceptMappingJobsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptMappingJobsRequest)
  SharedDtor();
}

void PostConceptMappingJobsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostConceptMappingJobsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostConceptMappingJobsRequest& PostConceptMappingJobsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostConceptMappingJobsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostConceptMappingJobsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptMappingJobsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_mapping_jobs_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostConceptMappingJobsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_mapping_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostConceptMappingJobsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptMappingJobsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_mapping_jobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concept_mapping_jobs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptMappingJobsRequest)
  return target;
}

size_t PostConceptMappingJobsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptMappingJobsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
  total_size += 1UL * this->_internal_concept_mapping_jobs_size();
  for (const auto& msg : this->concept_mapping_jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostConceptMappingJobsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostConceptMappingJobsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostConceptMappingJobsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostConceptMappingJobsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostConceptMappingJobsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostConceptMappingJobsRequest)
    MergeFrom(*source);
  }
}

void PostConceptMappingJobsRequest::MergeFrom(const PostConceptMappingJobsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptMappingJobsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_mapping_jobs_.MergeFrom(from.concept_mapping_jobs_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostConceptMappingJobsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostConceptMappingJobsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostConceptMappingJobsRequest::CopyFrom(const PostConceptMappingJobsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptMappingJobsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptMappingJobsRequest::IsInitialized() const {
  return true;
}

void PostConceptMappingJobsRequest::InternalSwap(PostConceptMappingJobsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_mapping_jobs_.InternalSwap(&other->concept_mapping_jobs_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptMappingJobsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiConceptRelationResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiConceptRelationResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiConceptRelationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptRelationResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptRelationResponse::_Internal::status(const MultiConceptRelationResponse* msg) {
  return *msg->status_;
}
void MultiConceptRelationResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiConceptRelationResponse::clear_concept_relations() {
  concept_relations_.Clear();
}
MultiConceptRelationResponse::MultiConceptRelationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiConceptRelationResponse)
}
MultiConceptRelationResponse::MultiConceptRelationResponse(const MultiConceptRelationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_relations_(from.concept_relations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptRelationResponse)
}

void MultiConceptRelationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiConceptRelationResponse::~MultiConceptRelationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptRelationResponse)
  SharedDtor();
}

void MultiConceptRelationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptRelationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiConceptRelationResponse& MultiConceptRelationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiConceptRelationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptRelationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_relations_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiConceptRelationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiConceptRelationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptRelationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_relations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concept_relations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptRelationResponse)
  return target;
}

size_t MultiConceptRelationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptRelationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concept_relations_size();
  for (const auto& msg : this->concept_relations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiConceptRelationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiConceptRelationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiConceptRelationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiConceptRelationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiConceptRelationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiConceptRelationResponse)
    MergeFrom(*source);
  }
}

void MultiConceptRelationResponse::MergeFrom(const MultiConceptRelationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptRelationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_relations_.MergeFrom(from.concept_relations_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiConceptRelationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiConceptRelationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiConceptRelationResponse::CopyFrom(const MultiConceptRelationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptRelationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptRelationResponse::IsInitialized() const {
  return true;
}

void MultiConceptRelationResponse::InternalSwap(MultiConceptRelationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_relations_.InternalSwap(&other->concept_relations_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptRelationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiKnowledgeGraphResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiKnowledgeGraphResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiKnowledgeGraphResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiKnowledgeGraphResponse* msg);
};

const ::clarifai::api::status::Status&
MultiKnowledgeGraphResponse::_Internal::status(const MultiKnowledgeGraphResponse* msg) {
  return *msg->status_;
}
void MultiKnowledgeGraphResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiKnowledgeGraphResponse::clear_knowledge_graphs() {
  knowledge_graphs_.Clear();
}
MultiKnowledgeGraphResponse::MultiKnowledgeGraphResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiKnowledgeGraphResponse)
}
MultiKnowledgeGraphResponse::MultiKnowledgeGraphResponse(const MultiKnowledgeGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      knowledge_graphs_(from.knowledge_graphs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiKnowledgeGraphResponse)
}

void MultiKnowledgeGraphResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiKnowledgeGraphResponse::~MultiKnowledgeGraphResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiKnowledgeGraphResponse)
  SharedDtor();
}

void MultiKnowledgeGraphResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiKnowledgeGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiKnowledgeGraphResponse& MultiKnowledgeGraphResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiKnowledgeGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiKnowledgeGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  knowledge_graphs_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiKnowledgeGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_knowledge_graphs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiKnowledgeGraphResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiKnowledgeGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_knowledge_graphs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_knowledge_graphs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiKnowledgeGraphResponse)
  return target;
}

size_t MultiKnowledgeGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiKnowledgeGraphResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_knowledge_graphs_size();
  for (const auto& msg : this->knowledge_graphs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiKnowledgeGraphResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiKnowledgeGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiKnowledgeGraphResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiKnowledgeGraphResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiKnowledgeGraphResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiKnowledgeGraphResponse)
    MergeFrom(*source);
  }
}

void MultiKnowledgeGraphResponse::MergeFrom(const MultiKnowledgeGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiKnowledgeGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  knowledge_graphs_.MergeFrom(from.knowledge_graphs_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiKnowledgeGraphResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiKnowledgeGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiKnowledgeGraphResponse::CopyFrom(const MultiKnowledgeGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiKnowledgeGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiKnowledgeGraphResponse::IsInitialized() const {
  return true;
}

void MultiKnowledgeGraphResponse::InternalSwap(MultiKnowledgeGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  knowledge_graphs_.InternalSwap(&other->knowledge_graphs_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiKnowledgeGraphResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiConceptMappingJobResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiConceptMappingJobResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiConceptMappingJobResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptMappingJobResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptMappingJobResponse::_Internal::status(const MultiConceptMappingJobResponse* msg) {
  return *msg->status_;
}
void MultiConceptMappingJobResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
MultiConceptMappingJobResponse::MultiConceptMappingJobResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiConceptMappingJobResponse)
}
MultiConceptMappingJobResponse::MultiConceptMappingJobResponse(const MultiConceptMappingJobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptMappingJobResponse)
}

void MultiConceptMappingJobResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiConceptMappingJobResponse::~MultiConceptMappingJobResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptMappingJobResponse)
  SharedDtor();
}

void MultiConceptMappingJobResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptMappingJobResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiConceptMappingJobResponse& MultiConceptMappingJobResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiConceptMappingJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptMappingJobResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiConceptMappingJobResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiConceptMappingJobResponse.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiConceptMappingJobResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptMappingJobResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiConceptMappingJobResponse.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptMappingJobResponse)
  return target;
}

size_t MultiConceptMappingJobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptMappingJobResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiConceptMappingJobResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiConceptMappingJobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiConceptMappingJobResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiConceptMappingJobResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiConceptMappingJobResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiConceptMappingJobResponse)
    MergeFrom(*source);
  }
}

void MultiConceptMappingJobResponse::MergeFrom(const MultiConceptMappingJobResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptMappingJobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiConceptMappingJobResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiConceptMappingJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiConceptMappingJobResponse::CopyFrom(const MultiConceptMappingJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptMappingJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptMappingJobResponse::IsInitialized() const {
  return true;
}

void MultiConceptMappingJobResponse::InternalSwap(MultiConceptMappingJobResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptMappingJobResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConceptLanguageRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetConceptLanguageRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetConceptLanguageRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetConceptLanguageRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetConceptLanguageRequest::_Internal::user_app_id(const GetConceptLanguageRequest* msg) {
  return *msg->user_app_id_;
}
void GetConceptLanguageRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetConceptLanguageRequest::GetConceptLanguageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetConceptLanguageRequest)
}
GetConceptLanguageRequest::GetConceptLanguageRequest(const GetConceptLanguageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetConceptLanguageRequest)
}

void GetConceptLanguageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetConceptLanguageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetConceptLanguageRequest::~GetConceptLanguageRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetConceptLanguageRequest)
  SharedDtor();
}

void GetConceptLanguageRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetConceptLanguageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConceptLanguageRequest& GetConceptLanguageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConceptLanguageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetConceptLanguageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetConceptLanguageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetConceptLanguageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetConceptLanguageRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetConceptLanguageRequest.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConceptLanguageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetConceptLanguageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetConceptLanguageRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // string language = 3;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetConceptLanguageRequest.language");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetConceptLanguageRequest)
  return target;
}

size_t GetConceptLanguageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetConceptLanguageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // string language = 3;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConceptLanguageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetConceptLanguageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConceptLanguageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConceptLanguageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetConceptLanguageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetConceptLanguageRequest)
    MergeFrom(*source);
  }
}

void GetConceptLanguageRequest::MergeFrom(const GetConceptLanguageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetConceptLanguageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetConceptLanguageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetConceptLanguageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConceptLanguageRequest::CopyFrom(const GetConceptLanguageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetConceptLanguageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConceptLanguageRequest::IsInitialized() const {
  return true;
}

void GetConceptLanguageRequest::InternalSwap(GetConceptLanguageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConceptLanguageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListConceptLanguagesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListConceptLanguagesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListConceptLanguagesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListConceptLanguagesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListConceptLanguagesRequest::_Internal::user_app_id(const ListConceptLanguagesRequest* msg) {
  return *msg->user_app_id_;
}
void ListConceptLanguagesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListConceptLanguagesRequest::ListConceptLanguagesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListConceptLanguagesRequest)
}
ListConceptLanguagesRequest::ListConceptLanguagesRequest(const ListConceptLanguagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListConceptLanguagesRequest)
}

void ListConceptLanguagesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListConceptLanguagesRequest::~ListConceptLanguagesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListConceptLanguagesRequest)
  SharedDtor();
}

void ListConceptLanguagesRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListConceptLanguagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListConceptLanguagesRequest& ListConceptLanguagesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListConceptLanguagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListConceptLanguagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListConceptLanguagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListConceptLanguagesRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListConceptLanguagesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListConceptLanguagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptLanguagesRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListConceptLanguagesRequest)
  return target;
}

size_t ListConceptLanguagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListConceptLanguagesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListConceptLanguagesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListConceptLanguagesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListConceptLanguagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListConceptLanguagesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListConceptLanguagesRequest)
    MergeFrom(*source);
  }
}

void ListConceptLanguagesRequest::MergeFrom(const ListConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListConceptLanguagesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListConceptLanguagesRequest::CopyFrom(const ListConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConceptLanguagesRequest::IsInitialized() const {
  return true;
}

void ListConceptLanguagesRequest::InternalSwap(ListConceptLanguagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConceptLanguagesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchConceptLanguagesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchConceptLanguagesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchConceptLanguagesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchConceptLanguagesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchConceptLanguagesRequest::_Internal::user_app_id(const PatchConceptLanguagesRequest* msg) {
  return *msg->user_app_id_;
}
void PatchConceptLanguagesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchConceptLanguagesRequest::clear_concept_languages() {
  concept_languages_.Clear();
}
PatchConceptLanguagesRequest::PatchConceptLanguagesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchConceptLanguagesRequest)
}
PatchConceptLanguagesRequest::PatchConceptLanguagesRequest(const PatchConceptLanguagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_languages_(from.concept_languages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchConceptLanguagesRequest)
}

void PatchConceptLanguagesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchConceptLanguagesRequest::~PatchConceptLanguagesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchConceptLanguagesRequest)
  SharedDtor();
}

void PatchConceptLanguagesRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchConceptLanguagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchConceptLanguagesRequest& PatchConceptLanguagesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchConceptLanguagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchConceptLanguagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_languages_.Clear();
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchConceptLanguagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchConceptLanguagesRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchConceptLanguagesRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchConceptLanguagesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchConceptLanguagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchConceptLanguagesRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_languages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_concept_languages(i), target, stream);
  }

  // string action = 4;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchConceptLanguagesRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchConceptLanguagesRequest)
  return target;
}

size_t PatchConceptLanguagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchConceptLanguagesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  total_size += 1UL * this->_internal_concept_languages_size();
  for (const auto& msg : this->concept_languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // string action = 4;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchConceptLanguagesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchConceptLanguagesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchConceptLanguagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchConceptLanguagesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchConceptLanguagesRequest)
    MergeFrom(*source);
  }
}

void PatchConceptLanguagesRequest::MergeFrom(const PatchConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_languages_.MergeFrom(from.concept_languages_);
  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchConceptLanguagesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchConceptLanguagesRequest::CopyFrom(const PatchConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchConceptLanguagesRequest::IsInitialized() const {
  return true;
}

void PatchConceptLanguagesRequest::InternalSwap(PatchConceptLanguagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_languages_.InternalSwap(&other->concept_languages_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchConceptLanguagesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostConceptLanguagesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostConceptLanguagesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostConceptLanguagesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptLanguagesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptLanguagesRequest::_Internal::user_app_id(const PostConceptLanguagesRequest* msg) {
  return *msg->user_app_id_;
}
void PostConceptLanguagesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptLanguagesRequest::clear_concept_languages() {
  concept_languages_.Clear();
}
PostConceptLanguagesRequest::PostConceptLanguagesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostConceptLanguagesRequest)
}
PostConceptLanguagesRequest::PostConceptLanguagesRequest(const PostConceptLanguagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_languages_(from.concept_languages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptLanguagesRequest)
}

void PostConceptLanguagesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PostConceptLanguagesRequest::~PostConceptLanguagesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptLanguagesRequest)
  SharedDtor();
}

void PostConceptLanguagesRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostConceptLanguagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostConceptLanguagesRequest& PostConceptLanguagesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostConceptLanguagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptLanguagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_languages_.Clear();
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostConceptLanguagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostConceptLanguagesRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostConceptLanguagesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptLanguagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostConceptLanguagesRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_languages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_concept_languages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptLanguagesRequest)
  return target;
}

size_t PostConceptLanguagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptLanguagesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  total_size += 1UL * this->_internal_concept_languages_size();
  for (const auto& msg : this->concept_languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostConceptLanguagesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostConceptLanguagesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostConceptLanguagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostConceptLanguagesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostConceptLanguagesRequest)
    MergeFrom(*source);
  }
}

void PostConceptLanguagesRequest::MergeFrom(const PostConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_languages_.MergeFrom(from.concept_languages_);
  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostConceptLanguagesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostConceptLanguagesRequest::CopyFrom(const PostConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptLanguagesRequest::IsInitialized() const {
  return true;
}

void PostConceptLanguagesRequest::InternalSwap(PostConceptLanguagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_languages_.InternalSwap(&other->concept_languages_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptLanguagesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleConceptLanguageResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleConceptLanguageResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleConceptLanguageResponse_default_instance_._instance.get_mutable()->concept_language_ = const_cast< ::clarifai::api::ConceptLanguage*>(
      ::clarifai::api::ConceptLanguage::internal_default_instance());
}
class SingleConceptLanguageResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleConceptLanguageResponse* msg);
  static const ::clarifai::api::ConceptLanguage& concept_language(const SingleConceptLanguageResponse* msg);
};

const ::clarifai::api::status::Status&
SingleConceptLanguageResponse::_Internal::status(const SingleConceptLanguageResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::ConceptLanguage&
SingleConceptLanguageResponse::_Internal::concept_language(const SingleConceptLanguageResponse* msg) {
  return *msg->concept_language_;
}
void SingleConceptLanguageResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleConceptLanguageResponse::clear_concept_language() {
  if (GetArenaNoVirtual() == nullptr && concept_language_ != nullptr) {
    delete concept_language_;
  }
  concept_language_ = nullptr;
}
SingleConceptLanguageResponse::SingleConceptLanguageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleConceptLanguageResponse)
}
SingleConceptLanguageResponse::SingleConceptLanguageResponse(const SingleConceptLanguageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_concept_language()) {
    concept_language_ = new ::clarifai::api::ConceptLanguage(*from.concept_language_);
  } else {
    concept_language_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleConceptLanguageResponse)
}

void SingleConceptLanguageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&concept_language_) -
      reinterpret_cast<char*>(&status_)) + sizeof(concept_language_));
}

SingleConceptLanguageResponse::~SingleConceptLanguageResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleConceptLanguageResponse)
  SharedDtor();
}

void SingleConceptLanguageResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete concept_language_;
}

void SingleConceptLanguageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleConceptLanguageResponse& SingleConceptLanguageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleConceptLanguageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleConceptLanguageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && concept_language_ != nullptr) {
    delete concept_language_;
  }
  concept_language_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleConceptLanguageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ConceptLanguage concept_language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept_language(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleConceptLanguageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleConceptLanguageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.ConceptLanguage concept_language = 2;
  if (this->has_concept_language()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::concept_language(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleConceptLanguageResponse)
  return target;
}

size_t SingleConceptLanguageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleConceptLanguageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.ConceptLanguage concept_language = 2;
  if (this->has_concept_language()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_language_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleConceptLanguageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleConceptLanguageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleConceptLanguageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleConceptLanguageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleConceptLanguageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleConceptLanguageResponse)
    MergeFrom(*source);
  }
}

void SingleConceptLanguageResponse::MergeFrom(const SingleConceptLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleConceptLanguageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_concept_language()) {
    _internal_mutable_concept_language()->::clarifai::api::ConceptLanguage::MergeFrom(from._internal_concept_language());
  }
}

void SingleConceptLanguageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleConceptLanguageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleConceptLanguageResponse::CopyFrom(const SingleConceptLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleConceptLanguageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleConceptLanguageResponse::IsInitialized() const {
  return true;
}

void SingleConceptLanguageResponse::InternalSwap(SingleConceptLanguageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(concept_language_, other->concept_language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleConceptLanguageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiConceptLanguageResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiConceptLanguageResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiConceptLanguageResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptLanguageResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptLanguageResponse::_Internal::status(const MultiConceptLanguageResponse* msg) {
  return *msg->status_;
}
void MultiConceptLanguageResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiConceptLanguageResponse::clear_concept_languages() {
  concept_languages_.Clear();
}
MultiConceptLanguageResponse::MultiConceptLanguageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiConceptLanguageResponse)
}
MultiConceptLanguageResponse::MultiConceptLanguageResponse(const MultiConceptLanguageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_languages_(from.concept_languages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptLanguageResponse)
}

void MultiConceptLanguageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiConceptLanguageResponse::~MultiConceptLanguageResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptLanguageResponse)
  SharedDtor();
}

void MultiConceptLanguageResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptLanguageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiConceptLanguageResponse& MultiConceptLanguageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiConceptLanguageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptLanguageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_languages_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiConceptLanguageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiConceptLanguageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptLanguageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_languages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concept_languages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptLanguageResponse)
  return target;
}

size_t MultiConceptLanguageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptLanguageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concept_languages_size();
  for (const auto& msg : this->concept_languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiConceptLanguageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiConceptLanguageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiConceptLanguageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiConceptLanguageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiConceptLanguageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiConceptLanguageResponse)
    MergeFrom(*source);
  }
}

void MultiConceptLanguageResponse::MergeFrom(const MultiConceptLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptLanguageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_languages_.MergeFrom(from.concept_languages_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiConceptLanguageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiConceptLanguageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiConceptLanguageResponse::CopyFrom(const MultiConceptLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptLanguageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptLanguageResponse::IsInitialized() const {
  return true;
}

void MultiConceptLanguageResponse::InternalSwap(MultiConceptLanguageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_languages_.InternalSwap(&other->concept_languages_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptLanguageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInputRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetInputRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetInputRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetInputRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetInputRequest::_Internal::user_app_id(const GetInputRequest* msg) {
  return *msg->user_app_id_;
}
void GetInputRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetInputRequest::GetInputRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetInputRequest)
}
GetInputRequest::GetInputRequest(const GetInputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_id().empty()) {
    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetInputRequest)
}

void GetInputRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetInputRequest::~GetInputRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetInputRequest)
  SharedDtor();
}

void GetInputRequest::SharedDtor() {
  input_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetInputRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInputRequest& GetInputRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetInputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetInputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetInputRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_input_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetInputRequest.input_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInputRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetInputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string input_id = 2;
  if (this->input_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetInputRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetInputRequest)
  return target;
}

size_t GetInputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetInputRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_id = 2;
  if (this->input_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInputRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetInputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInputRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInputRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetInputRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetInputRequest)
    MergeFrom(*source);
  }
}

void GetInputRequest::MergeFrom(const GetInputRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetInputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_id().size() > 0) {

    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetInputRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInputRequest::CopyFrom(const GetInputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInputRequest::IsInitialized() const {
  return true;
}

void GetInputRequest::InternalSwap(GetInputRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_id_.Swap(&other->input_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInputRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInputSamplesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetInputSamplesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetInputSamplesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetInputSamplesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetInputSamplesRequest::_Internal::user_app_id(const GetInputSamplesRequest* msg) {
  return *msg->user_app_id_;
}
void GetInputSamplesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetInputSamplesRequest::GetInputSamplesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetInputSamplesRequest)
}
GetInputSamplesRequest::GetInputSamplesRequest(const GetInputSamplesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetInputSamplesRequest)
}

void GetInputSamplesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInputSamplesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetInputSamplesRequest::~GetInputSamplesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetInputSamplesRequest)
  SharedDtor();
}

void GetInputSamplesRequest::SharedDtor() {
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetInputSamplesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInputSamplesRequest& GetInputSamplesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInputSamplesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetInputSamplesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetInputSamplesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetInputSamplesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetInputSamplesRequest.task_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string user_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetInputSamplesRequest.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInputSamplesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetInputSamplesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string task_id = 2;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetInputSamplesRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  // repeated string user_ids = 3;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetInputSamplesRequest.user_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetInputSamplesRequest)
  return target;
}

size_t GetInputSamplesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetInputSamplesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // string task_id = 2;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInputSamplesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetInputSamplesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInputSamplesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInputSamplesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetInputSamplesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetInputSamplesRequest)
    MergeFrom(*source);
  }
}

void GetInputSamplesRequest::MergeFrom(const GetInputSamplesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetInputSamplesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetInputSamplesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetInputSamplesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInputSamplesRequest::CopyFrom(const GetInputSamplesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetInputSamplesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInputSamplesRequest::IsInitialized() const {
  return true;
}

void GetInputSamplesRequest::InternalSwap(GetInputSamplesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInputSamplesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListInputsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListInputsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_ListInputsRequest_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class ListInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListInputsRequest* msg);
  static const ::clarifai::api::status::Status& status(const ListInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListInputsRequest::_Internal::user_app_id(const ListInputsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::status::Status&
ListInputsRequest::_Internal::status(const ListInputsRequest* msg) {
  return *msg->status_;
}
void ListInputsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void ListInputsRequest::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ListInputsRequest::ListInputsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListInputsRequest)
}
ListInputsRequest::ListInputsRequest(const ListInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListInputsRequest)
}

void ListInputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListInputsRequest::~ListInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListInputsRequest)
  SharedDtor();
}

void ListInputsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete status_;
}

void ListInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListInputsRequest& ListInputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListInputsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListInputsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  // repeated string ids = 4;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListInputsRequest.ids");
    target = stream->WriteString(4, s, target);
  }

  // .clarifai.api.status.Status status = 5;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListInputsRequest)
  return target;
}

size_t ListInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListInputsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.status.Status status = 5;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListInputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListInputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListInputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListInputsRequest)
    MergeFrom(*source);
  }
}

void ListInputsRequest::MergeFrom(const ListInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListInputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInputsRequest::CopyFrom(const ListInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInputsRequest::IsInitialized() const {
  return true;
}

void ListInputsRequest::InternalSwap(ListInputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(status_, other->status_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListInputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamInputsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_StreamInputsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class StreamInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const StreamInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
StreamInputsRequest::_Internal::user_app_id(const StreamInputsRequest* msg) {
  return *msg->user_app_id_;
}
void StreamInputsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
StreamInputsRequest::StreamInputsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.StreamInputsRequest)
}
StreamInputsRequest::StreamInputsRequest(const StreamInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_id().empty()) {
    last_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&per_page_, &from.per_page_,
    static_cast<size_t>(reinterpret_cast<char*>(&descending_) -
    reinterpret_cast<char*>(&per_page_)) + sizeof(descending_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StreamInputsRequest)
}

void StreamInputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  last_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&descending_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(descending_));
}

StreamInputsRequest::~StreamInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.StreamInputsRequest)
  SharedDtor();
}

void StreamInputsRequest::SharedDtor() {
  last_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void StreamInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamInputsRequest& StreamInputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void StreamInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StreamInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&per_page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&descending_) -
      reinterpret_cast<char*>(&per_page_)) + sizeof(descending_));
  _internal_metadata_.Clear();
}

const char* StreamInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_last_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.StreamInputsRequest.last_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool descending = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          descending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamInputsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StreamInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 per_page = 2;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_per_page(), target);
  }

  // string last_id = 3;
  if (this->last_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_id().data(), static_cast<int>(this->_internal_last_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StreamInputsRequest.last_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last_id(), target);
  }

  // bool descending = 4;
  if (this->descending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_descending(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StreamInputsRequest)
  return target;
}

size_t StreamInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StreamInputsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string last_id = 3;
  if (this->last_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 per_page = 2;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  // bool descending = 4;
  if (this->descending() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamInputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.StreamInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamInputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamInputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.StreamInputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.StreamInputsRequest)
    MergeFrom(*source);
  }
}

void StreamInputsRequest::MergeFrom(const StreamInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StreamInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.last_id().size() > 0) {

    last_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  if (from.descending() != 0) {
    _internal_set_descending(from._internal_descending());
  }
}

void StreamInputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.StreamInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamInputsRequest::CopyFrom(const StreamInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StreamInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInputsRequest::IsInitialized() const {
  return true;
}

void StreamInputsRequest::InternalSwap(StreamInputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  last_id_.Swap(&other->last_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(per_page_, other->per_page_);
  swap(descending_, other->descending_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamInputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostInputsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostInputsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostInputsRequest::_Internal::user_app_id(const PostInputsRequest* msg) {
  return *msg->user_app_id_;
}
void PostInputsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostInputsRequest::clear_inputs() {
  inputs_.Clear();
}
PostInputsRequest::PostInputsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostInputsRequest)
}
PostInputsRequest::PostInputsRequest(const PostInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostInputsRequest)
}

void PostInputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostInputsRequest::~PostInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostInputsRequest)
  SharedDtor();
}

void PostInputsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostInputsRequest& PostInputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostInputsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Input inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostInputsRequest)
  return target;
}

size_t PostInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostInputsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostInputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostInputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostInputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostInputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostInputsRequest)
    MergeFrom(*source);
  }
}

void PostInputsRequest::MergeFrom(const PostInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostInputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostInputsRequest::CopyFrom(const PostInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostInputsRequest::IsInitialized() const {
  return true;
}

void PostInputsRequest::InternalSwap(PostInputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostInputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchInputsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchInputsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchInputsRequest::_Internal::user_app_id(const PatchInputsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchInputsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchInputsRequest::clear_inputs() {
  inputs_.Clear();
}
PatchInputsRequest::PatchInputsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchInputsRequest)
}
PatchInputsRequest::PatchInputsRequest(const PatchInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchInputsRequest)
}

void PatchInputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchInputsRequest::~PatchInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchInputsRequest)
  SharedDtor();
}

void PatchInputsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchInputsRequest& PatchInputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchInputsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchInputsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Input inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchInputsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchInputsRequest)
  return target;
}

size_t PatchInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchInputsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchInputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchInputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchInputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchInputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchInputsRequest)
    MergeFrom(*source);
  }
}

void PatchInputsRequest::MergeFrom(const PatchInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchInputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchInputsRequest::CopyFrom(const PatchInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchInputsRequest::IsInitialized() const {
  return true;
}

void PatchInputsRequest::InternalSwap(PatchInputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchInputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteInputRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteInputRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteInputRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteInputRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteInputRequest::_Internal::user_app_id(const DeleteInputRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteInputRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteInputRequest::DeleteInputRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteInputRequest)
}
DeleteInputRequest::DeleteInputRequest(const DeleteInputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_id().empty()) {
    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteInputRequest)
}

void DeleteInputRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteInputRequest::~DeleteInputRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteInputRequest)
  SharedDtor();
}

void DeleteInputRequest::SharedDtor() {
  input_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteInputRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteInputRequest& DeleteInputRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteInputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteInputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteInputRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_input_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteInputRequest.input_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteInputRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteInputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string input_id = 2;
  if (this->input_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteInputRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteInputRequest)
  return target;
}

size_t DeleteInputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteInputRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_id = 2;
  if (this->input_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteInputRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteInputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteInputRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteInputRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteInputRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteInputRequest)
    MergeFrom(*source);
  }
}

void DeleteInputRequest::MergeFrom(const DeleteInputRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteInputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_id().size() > 0) {

    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteInputRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteInputRequest::CopyFrom(const DeleteInputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteInputRequest::IsInitialized() const {
  return true;
}

void DeleteInputRequest::InternalSwap(DeleteInputRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_id_.Swap(&other->input_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteInputRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteInputsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteInputsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteInputsRequest::_Internal::user_app_id(const DeleteInputsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteInputsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteInputsRequest::DeleteInputsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteInputsRequest)
}
DeleteInputsRequest::DeleteInputsRequest(const DeleteInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  delete_all_ = from.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteInputsRequest)
}

void DeleteInputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_all_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(delete_all_));
}

DeleteInputsRequest::~DeleteInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteInputsRequest)
  SharedDtor();
}

void DeleteInputsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteInputsRequest& DeleteInputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  delete_all_ = false;
  _internal_metadata_.Clear();
}

const char* DeleteInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteInputsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool delete_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteInputsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteInputsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteInputsRequest)
  return target;
}

size_t DeleteInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteInputsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteInputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteInputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteInputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteInputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteInputsRequest)
    MergeFrom(*source);
  }
}

void DeleteInputsRequest::MergeFrom(const DeleteInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.delete_all() != 0) {
    _internal_set_delete_all(from._internal_delete_all());
  }
}

void DeleteInputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteInputsRequest::CopyFrom(const DeleteInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteInputsRequest::IsInitialized() const {
  return true;
}

void DeleteInputsRequest::InternalSwap(DeleteInputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(delete_all_, other->delete_all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteInputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleInputResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleInputResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleInputResponse_default_instance_._instance.get_mutable()->input_ = const_cast< ::clarifai::api::Input*>(
      ::clarifai::api::Input::internal_default_instance());
}
class SingleInputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleInputResponse* msg);
  static const ::clarifai::api::Input& input(const SingleInputResponse* msg);
};

const ::clarifai::api::status::Status&
SingleInputResponse::_Internal::status(const SingleInputResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Input&
SingleInputResponse::_Internal::input(const SingleInputResponse* msg) {
  return *msg->input_;
}
void SingleInputResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleInputResponse::clear_input() {
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
SingleInputResponse::SingleInputResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleInputResponse)
}
SingleInputResponse::SingleInputResponse(const SingleInputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleInputResponse)
}

void SingleInputResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_) -
      reinterpret_cast<char*>(&status_)) + sizeof(input_));
}

SingleInputResponse::~SingleInputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleInputResponse)
  SharedDtor();
}

void SingleInputResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete input_;
}

void SingleInputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleInputResponse& SingleInputResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleInputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleInputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleInputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleInputResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleInputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Input input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleInputResponse)
  return target;
}

size_t SingleInputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleInputResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Input input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleInputResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleInputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleInputResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleInputResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleInputResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleInputResponse)
    MergeFrom(*source);
  }
}

void SingleInputResponse::MergeFrom(const SingleInputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleInputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
}

void SingleInputResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleInputResponse::CopyFrom(const SingleInputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInputResponse::IsInitialized() const {
  return true;
}

void SingleInputResponse::InternalSwap(SingleInputResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(input_, other->input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleInputResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiInputResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiInputResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiInputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiInputResponse* msg);
};

const ::clarifai::api::status::Status&
MultiInputResponse::_Internal::status(const MultiInputResponse* msg) {
  return *msg->status_;
}
void MultiInputResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiInputResponse::clear_inputs() {
  inputs_.Clear();
}
MultiInputResponse::MultiInputResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiInputResponse)
}
MultiInputResponse::MultiInputResponse(const MultiInputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiInputResponse)
}

void MultiInputResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiInputResponse::~MultiInputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiInputResponse)
  SharedDtor();
}

void MultiInputResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiInputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiInputResponse& MultiInputResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiInputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiInputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiInputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiInputResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiInputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiInputResponse)
  return target;
}

size_t MultiInputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiInputResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiInputResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiInputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiInputResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiInputResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiInputResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiInputResponse)
    MergeFrom(*source);
  }
}

void MultiInputResponse::MergeFrom(const MultiInputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiInputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiInputResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiInputResponse::CopyFrom(const MultiInputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiInputResponse::IsInitialized() const {
  return true;
}

void MultiInputResponse::InternalSwap(MultiInputResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiInputResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiInputAnnotationResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiInputAnnotationResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiInputAnnotationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiInputAnnotationResponse* msg);
};

const ::clarifai::api::status::Status&
MultiInputAnnotationResponse::_Internal::status(const MultiInputAnnotationResponse* msg) {
  return *msg->status_;
}
void MultiInputAnnotationResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiInputAnnotationResponse::clear_hits() {
  hits_.Clear();
}
MultiInputAnnotationResponse::MultiInputAnnotationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiInputAnnotationResponse)
}
MultiInputAnnotationResponse::MultiInputAnnotationResponse(const MultiInputAnnotationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      hits_(from.hits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiInputAnnotationResponse)
}

void MultiInputAnnotationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiInputAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiInputAnnotationResponse::~MultiInputAnnotationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiInputAnnotationResponse)
  SharedDtor();
}

void MultiInputAnnotationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiInputAnnotationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiInputAnnotationResponse& MultiInputAnnotationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiInputAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiInputAnnotationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiInputAnnotationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiInputAnnotationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiInputAnnotationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiInputAnnotationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_hits(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiInputAnnotationResponse)
  return target;
}

size_t MultiInputAnnotationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiInputAnnotationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_hits_size();
  for (const auto& msg : this->hits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiInputAnnotationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiInputAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiInputAnnotationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiInputAnnotationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiInputAnnotationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiInputAnnotationResponse)
    MergeFrom(*source);
  }
}

void MultiInputAnnotationResponse::MergeFrom(const MultiInputAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiInputAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hits_.MergeFrom(from.hits_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiInputAnnotationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiInputAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiInputAnnotationResponse::CopyFrom(const MultiInputAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiInputAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiInputAnnotationResponse::IsInitialized() const {
  return true;
}

void MultiInputAnnotationResponse::InternalSwap(MultiInputAnnotationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hits_.InternalSwap(&other->hits_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiInputAnnotationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleInputCountResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleInputCountResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleInputCountResponse_default_instance_._instance.get_mutable()->counts_ = const_cast< ::clarifai::api::InputCount*>(
      ::clarifai::api::InputCount::internal_default_instance());
}
class SingleInputCountResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleInputCountResponse* msg);
  static const ::clarifai::api::InputCount& counts(const SingleInputCountResponse* msg);
};

const ::clarifai::api::status::Status&
SingleInputCountResponse::_Internal::status(const SingleInputCountResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::InputCount&
SingleInputCountResponse::_Internal::counts(const SingleInputCountResponse* msg) {
  return *msg->counts_;
}
void SingleInputCountResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleInputCountResponse::clear_counts() {
  if (GetArenaNoVirtual() == nullptr && counts_ != nullptr) {
    delete counts_;
  }
  counts_ = nullptr;
}
SingleInputCountResponse::SingleInputCountResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleInputCountResponse)
}
SingleInputCountResponse::SingleInputCountResponse(const SingleInputCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_counts()) {
    counts_ = new ::clarifai::api::InputCount(*from.counts_);
  } else {
    counts_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleInputCountResponse)
}

void SingleInputCountResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleInputCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&counts_) -
      reinterpret_cast<char*>(&status_)) + sizeof(counts_));
}

SingleInputCountResponse::~SingleInputCountResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleInputCountResponse)
  SharedDtor();
}

void SingleInputCountResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete counts_;
}

void SingleInputCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleInputCountResponse& SingleInputCountResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleInputCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleInputCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleInputCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && counts_ != nullptr) {
    delete counts_;
  }
  counts_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleInputCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.InputCount counts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_counts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleInputCountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleInputCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.InputCount counts = 2;
  if (this->has_counts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::counts(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleInputCountResponse)
  return target;
}

size_t SingleInputCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleInputCountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.InputCount counts = 2;
  if (this->has_counts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *counts_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleInputCountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleInputCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleInputCountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleInputCountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleInputCountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleInputCountResponse)
    MergeFrom(*source);
  }
}

void SingleInputCountResponse::MergeFrom(const SingleInputCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleInputCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_counts()) {
    _internal_mutable_counts()->::clarifai::api::InputCount::MergeFrom(from._internal_counts());
  }
}

void SingleInputCountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleInputCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleInputCountResponse::CopyFrom(const SingleInputCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleInputCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInputCountResponse::IsInitialized() const {
  return true;
}

void SingleInputCountResponse::InternalSwap(SingleInputCountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(counts_, other->counts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleInputCountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInputCountRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetInputCountRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetInputCountRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetInputCountRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetInputCountRequest::_Internal::user_app_id(const GetInputCountRequest* msg) {
  return *msg->user_app_id_;
}
void GetInputCountRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetInputCountRequest::GetInputCountRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetInputCountRequest)
}
GetInputCountRequest::GetInputCountRequest(const GetInputCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetInputCountRequest)
}

void GetInputCountRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInputCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

GetInputCountRequest::~GetInputCountRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetInputCountRequest)
  SharedDtor();
}

void GetInputCountRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetInputCountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInputCountRequest& GetInputCountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInputCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetInputCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetInputCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetInputCountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInputCountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetInputCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetInputCountRequest)
  return target;
}

size_t GetInputCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetInputCountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInputCountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetInputCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInputCountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInputCountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetInputCountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetInputCountRequest)
    MergeFrom(*source);
  }
}

void GetInputCountRequest::MergeFrom(const GetInputCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetInputCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetInputCountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetInputCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInputCountRequest::CopyFrom(const GetInputCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetInputCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInputCountRequest::IsInitialized() const {
  return true;
}

void GetInputCountRequest::InternalSwap(GetInputCountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInputCountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostModelOutputsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostModelOutputsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostModelOutputsRequest_default_instance_._instance.get_mutable()->model_ = const_cast< ::clarifai::api::Model*>(
      ::clarifai::api::Model::internal_default_instance());
}
class PostModelOutputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelOutputsRequest* msg);
  static const ::clarifai::api::Model& model(const PostModelOutputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelOutputsRequest::_Internal::user_app_id(const PostModelOutputsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Model&
PostModelOutputsRequest::_Internal::model(const PostModelOutputsRequest* msg) {
  return *msg->model_;
}
void PostModelOutputsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostModelOutputsRequest::clear_inputs() {
  inputs_.Clear();
}
void PostModelOutputsRequest::clear_model() {
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
PostModelOutputsRequest::PostModelOutputsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostModelOutputsRequest)
}
PostModelOutputsRequest::PostModelOutputsRequest(const PostModelOutputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_id().empty()) {
    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::api::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelOutputsRequest)
}

void PostModelOutputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostModelOutputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(model_));
}

PostModelOutputsRequest::~PostModelOutputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelOutputsRequest)
  SharedDtor();
}

void PostModelOutputsRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete model_;
}

void PostModelOutputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostModelOutputsRequest& PostModelOutputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostModelOutputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostModelOutputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelOutputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostModelOutputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelOutputsRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelOutputsRequest.version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostModelOutputsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelOutputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelOutputsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelOutputsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // repeated .clarifai.api.Input inputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_inputs(i), target, stream);
  }

  // .clarifai.api.Model model = 5;
  if (this->has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::model(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelOutputsRequest)
  return target;
}

size_t PostModelOutputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelOutputsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 4;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Model model = 5;
  if (this->has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostModelOutputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostModelOutputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostModelOutputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostModelOutputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostModelOutputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostModelOutputsRequest)
    MergeFrom(*source);
  }
}

void PostModelOutputsRequest::MergeFrom(const PostModelOutputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelOutputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.version_id().size() > 0) {

    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_model()) {
    _internal_mutable_model()->::clarifai::api::Model::MergeFrom(from._internal_model());
  }
}

void PostModelOutputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostModelOutputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostModelOutputsRequest::CopyFrom(const PostModelOutputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelOutputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelOutputsRequest::IsInitialized() const {
  return true;
}

void PostModelOutputsRequest::InternalSwap(PostModelOutputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_id_.Swap(&other->version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(model_, other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelOutputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListModelInputsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListModelInputsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListModelInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelInputsRequest::_Internal::user_app_id(const ListModelInputsRequest* msg) {
  return *msg->user_app_id_;
}
void ListModelInputsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListModelInputsRequest::ListModelInputsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListModelInputsRequest)
}
ListModelInputsRequest::ListModelInputsRequest(const ListModelInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_id().empty()) {
    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelInputsRequest)
}

void ListModelInputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListModelInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListModelInputsRequest::~ListModelInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelInputsRequest)
  SharedDtor();
}

void ListModelInputsRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListModelInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListModelInputsRequest& ListModelInputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListModelInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListModelInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListModelInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelInputsRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelInputsRequest.version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListModelInputsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelInputsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelInputsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // uint32 page = 4;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page(), target);
  }

  // uint32 per_page = 5;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelInputsRequest)
  return target;
}

size_t ListModelInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelInputsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 4;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 5;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListModelInputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListModelInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListModelInputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListModelInputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListModelInputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListModelInputsRequest)
    MergeFrom(*source);
  }
}

void ListModelInputsRequest::MergeFrom(const ListModelInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.version_id().size() > 0) {

    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListModelInputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListModelInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListModelInputsRequest::CopyFrom(const ListModelInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelInputsRequest::IsInitialized() const {
  return true;
}

void ListModelInputsRequest::InternalSwap(ListModelInputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_id_.Swap(&other->version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelInputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetKeyRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetKeyRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetKeyRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetKeyRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetKeyRequest::_Internal::user_app_id(const GetKeyRequest* msg) {
  return *msg->user_app_id_;
}
void GetKeyRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetKeyRequest::GetKeyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetKeyRequest)
}
GetKeyRequest::GetKeyRequest(const GetKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_id().empty()) {
    key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetKeyRequest)
}

void GetKeyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetKeyRequest::~GetKeyRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetKeyRequest)
  SharedDtor();
}

void GetKeyRequest::SharedDtor() {
  key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetKeyRequest& GetKeyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetKeyRequest.key_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetKeyRequest.key_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetKeyRequest)
  return target;
}

size_t GetKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetKeyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetKeyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetKeyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetKeyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetKeyRequest)
    MergeFrom(*source);
  }
}

void GetKeyRequest::MergeFrom(const GetKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key_id().size() > 0) {

    key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetKeyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetKeyRequest::CopyFrom(const GetKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKeyRequest::IsInitialized() const {
  return true;
}

void GetKeyRequest::InternalSwap(GetKeyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_id_.Swap(&other->key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetKeyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListKeysRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListKeysRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListKeysRequest::_Internal::user_app_id(const ListKeysRequest* msg) {
  return *msg->user_app_id_;
}
void ListKeysRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListKeysRequest::ListKeysRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListKeysRequest)
}
ListKeysRequest::ListKeysRequest(const ListKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListKeysRequest)
}

void ListKeysRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListKeysRequest::~ListKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListKeysRequest)
  SharedDtor();
}

void ListKeysRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListKeysRequest& ListKeysRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListKeysRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListKeysRequest)
  return target;
}

size_t ListKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListKeysRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListKeysRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListKeysRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListKeysRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListKeysRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListKeysRequest)
    MergeFrom(*source);
  }
}

void ListKeysRequest::MergeFrom(const ListKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListKeysRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListKeysRequest::CopyFrom(const ListKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListKeysRequest::IsInitialized() const {
  return true;
}

void ListKeysRequest::InternalSwap(ListKeysRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListKeysRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAppKeysRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListAppKeysRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListAppKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAppKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAppKeysRequest::_Internal::user_app_id(const ListAppKeysRequest* msg) {
  return *msg->user_app_id_;
}
void ListAppKeysRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListAppKeysRequest::ListAppKeysRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListAppKeysRequest)
}
ListAppKeysRequest::ListAppKeysRequest(const ListAppKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAppKeysRequest)
}

void ListAppKeysRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAppKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListAppKeysRequest::~ListAppKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAppKeysRequest)
  SharedDtor();
}

void ListAppKeysRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAppKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAppKeysRequest& ListAppKeysRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAppKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListAppKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAppKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListAppKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAppKeysRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAppKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAppKeysRequest)
  return target;
}

size_t ListAppKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAppKeysRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAppKeysRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListAppKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAppKeysRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAppKeysRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListAppKeysRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListAppKeysRequest)
    MergeFrom(*source);
  }
}

void ListAppKeysRequest::MergeFrom(const ListAppKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAppKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListAppKeysRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListAppKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAppKeysRequest::CopyFrom(const ListAppKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAppKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppKeysRequest::IsInitialized() const {
  return true;
}

void ListAppKeysRequest::InternalSwap(ListAppKeysRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppKeysRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostKeysRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostKeysRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostKeysRequest::_Internal::user_app_id(const PostKeysRequest* msg) {
  return *msg->user_app_id_;
}
void PostKeysRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostKeysRequest::clear_keys() {
  keys_.Clear();
}
PostKeysRequest::PostKeysRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostKeysRequest)
}
PostKeysRequest::PostKeysRequest(const PostKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostKeysRequest)
}

void PostKeysRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostKeysRequest::~PostKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostKeysRequest)
  SharedDtor();
}

void PostKeysRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostKeysRequest& PostKeysRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Key keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostKeysRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Key keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostKeysRequest)
  return target;
}

size_t PostKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostKeysRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Key keys = 2;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostKeysRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostKeysRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostKeysRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostKeysRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostKeysRequest)
    MergeFrom(*source);
  }
}

void PostKeysRequest::MergeFrom(const PostKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostKeysRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostKeysRequest::CopyFrom(const PostKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostKeysRequest::IsInitialized() const {
  return true;
}

void PostKeysRequest::InternalSwap(PostKeysRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostKeysRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteKeyRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteKeyRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteKeyRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteKeyRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteKeyRequest::_Internal::user_app_id(const DeleteKeyRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteKeyRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteKeyRequest::DeleteKeyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteKeyRequest)
}
DeleteKeyRequest::DeleteKeyRequest(const DeleteKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_id().empty()) {
    key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteKeyRequest)
}

void DeleteKeyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteKeyRequest::~DeleteKeyRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteKeyRequest)
  SharedDtor();
}

void DeleteKeyRequest::SharedDtor() {
  key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteKeyRequest& DeleteKeyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteKeyRequest.key_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteKeyRequest.key_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteKeyRequest)
  return target;
}

size_t DeleteKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteKeyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteKeyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteKeyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteKeyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteKeyRequest)
    MergeFrom(*source);
  }
}

void DeleteKeyRequest::MergeFrom(const DeleteKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key_id().size() > 0) {

    key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteKeyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteKeyRequest::CopyFrom(const DeleteKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteKeyRequest::IsInitialized() const {
  return true;
}

void DeleteKeyRequest::InternalSwap(DeleteKeyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_id_.Swap(&other->key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteKeyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchKeysRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchKeysRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchKeysRequest::_Internal::user_app_id(const PatchKeysRequest* msg) {
  return *msg->user_app_id_;
}
void PatchKeysRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchKeysRequest::clear_keys() {
  keys_.Clear();
}
PatchKeysRequest::PatchKeysRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchKeysRequest)
}
PatchKeysRequest::PatchKeysRequest(const PatchKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchKeysRequest)
}

void PatchKeysRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchKeysRequest::~PatchKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchKeysRequest)
  SharedDtor();
}

void PatchKeysRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchKeysRequest& PatchKeysRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Key keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchKeysRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchKeysRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Key keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_keys(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchKeysRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchKeysRequest)
  return target;
}

size_t PatchKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchKeysRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Key keys = 2;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchKeysRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchKeysRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchKeysRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchKeysRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchKeysRequest)
    MergeFrom(*source);
  }
}

void PatchKeysRequest::MergeFrom(const PatchKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchKeysRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchKeysRequest::CopyFrom(const PatchKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchKeysRequest::IsInitialized() const {
  return true;
}

void PatchKeysRequest::InternalSwap(PatchKeysRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchKeysRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleKeyResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleKeyResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleKeyResponse_default_instance_._instance.get_mutable()->key_ = const_cast< ::clarifai::api::Key*>(
      ::clarifai::api::Key::internal_default_instance());
}
class SingleKeyResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleKeyResponse* msg);
  static const ::clarifai::api::Key& key(const SingleKeyResponse* msg);
};

const ::clarifai::api::status::Status&
SingleKeyResponse::_Internal::status(const SingleKeyResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Key&
SingleKeyResponse::_Internal::key(const SingleKeyResponse* msg) {
  return *msg->key_;
}
void SingleKeyResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleKeyResponse::clear_key() {
  if (GetArenaNoVirtual() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
SingleKeyResponse::SingleKeyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleKeyResponse)
}
SingleKeyResponse::SingleKeyResponse(const SingleKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::clarifai::api::Key(*from.key_);
  } else {
    key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleKeyResponse)
}

void SingleKeyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&status_)) + sizeof(key_));
}

SingleKeyResponse::~SingleKeyResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleKeyResponse)
  SharedDtor();
}

void SingleKeyResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete key_;
}

void SingleKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleKeyResponse& SingleKeyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Key key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Key key = 2;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleKeyResponse)
  return target;
}

size_t SingleKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleKeyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleKeyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleKeyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleKeyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleKeyResponse)
    MergeFrom(*source);
  }
}

void SingleKeyResponse::MergeFrom(const SingleKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_key()) {
    _internal_mutable_key()->::clarifai::api::Key::MergeFrom(from._internal_key());
  }
}

void SingleKeyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleKeyResponse::CopyFrom(const SingleKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleKeyResponse::IsInitialized() const {
  return true;
}

void SingleKeyResponse::InternalSwap(SingleKeyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleKeyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiKeyResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiKeyResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiKeyResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiKeyResponse* msg);
};

const ::clarifai::api::status::Status&
MultiKeyResponse::_Internal::status(const MultiKeyResponse* msg) {
  return *msg->status_;
}
void MultiKeyResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiKeyResponse::clear_keys() {
  keys_.Clear();
}
MultiKeyResponse::MultiKeyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiKeyResponse)
}
MultiKeyResponse::MultiKeyResponse(const MultiKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiKeyResponse)
}

void MultiKeyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiKeyResponse::~MultiKeyResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiKeyResponse)
  SharedDtor();
}

void MultiKeyResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiKeyResponse& MultiKeyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiKeyResponse)
  return target;
}

size_t MultiKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiKeyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiKeyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiKeyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiKeyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiKeyResponse)
    MergeFrom(*source);
  }
}

void MultiKeyResponse::MergeFrom(const MultiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiKeyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiKeyResponse::CopyFrom(const MultiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiKeyResponse::IsInitialized() const {
  return true;
}

void MultiKeyResponse::InternalSwap(MultiKeyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiKeyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetModelRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetModelRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetModelRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelRequest::_Internal::user_app_id(const GetModelRequest* msg) {
  return *msg->user_app_id_;
}
void GetModelRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetModelRequest::GetModelRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetModelRequest)
}
GetModelRequest::GetModelRequest(const GetModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_id().empty()) {
    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  trained_before_ = from.trained_before_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelRequest)
}

void GetModelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trained_before_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(trained_before_));
}

GetModelRequest::~GetModelRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelRequest)
  SharedDtor();
}

void GetModelRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetModelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetModelRequest& GetModelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  trained_before_ = false;
  _internal_metadata_.Clear();
}

const char* GetModelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelRequest.version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelRequest.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool trained_before = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          trained_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // string language = 4;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelRequest.language");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language(), target);
  }

  // bool trained_before = 5;
  if (this->trained_before() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_trained_before(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelRequest)
  return target;
}

size_t GetModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // string language = 4;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool trained_before = 5;
  if (this->trained_before() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetModelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetModelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetModelRequest)
    MergeFrom(*source);
  }
}

void GetModelRequest::MergeFrom(const GetModelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.version_id().size() > 0) {

    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.trained_before() != 0) {
    _internal_set_trained_before(from._internal_trained_before());
  }
}

void GetModelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModelRequest::CopyFrom(const GetModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelRequest::IsInitialized() const {
  return true;
}

void GetModelRequest::InternalSwap(GetModelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_id_.Swap(&other->version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(trained_before_, other->trained_before_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListModelsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListModelsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelsRequest::_Internal::user_app_id(const ListModelsRequest* msg) {
  return *msg->user_app_id_;
}
void ListModelsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListModelsRequest::ListModelsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListModelsRequest)
}
ListModelsRequest::ListModelsRequest(const ListModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelsRequest)
}

void ListModelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListModelsRequest::~ListModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelsRequest)
  SharedDtor();
}

void ListModelsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListModelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListModelsRequest& ListModelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListModelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListModelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  // repeated string ids = 4;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.ids");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelsRequest)
  return target;
}

size_t ListModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListModelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListModelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListModelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListModelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListModelsRequest)
    MergeFrom(*source);
  }
}

void ListModelsRequest::MergeFrom(const ListModelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListModelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListModelsRequest::CopyFrom(const ListModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelsRequest::IsInitialized() const {
  return true;
}

void ListModelsRequest::InternalSwap(ListModelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostModelsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostModelsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostModelsRequest_default_instance_._instance.get_mutable()->model_ = const_cast< ::clarifai::api::Model*>(
      ::clarifai::api::Model::internal_default_instance());
}
class PostModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelsRequest* msg);
  static const ::clarifai::api::Model& model(const PostModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelsRequest::_Internal::user_app_id(const PostModelsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Model&
PostModelsRequest::_Internal::model(const PostModelsRequest* msg) {
  return *msg->model_;
}
void PostModelsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostModelsRequest::clear_model() {
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
void PostModelsRequest::clear_models() {
  models_.Clear();
}
PostModelsRequest::PostModelsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostModelsRequest)
}
PostModelsRequest::PostModelsRequest(const PostModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      models_(from.models_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::api::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelsRequest)
}

void PostModelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(model_));
}

PostModelsRequest::~PostModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelsRequest)
  SharedDtor();
}

void PostModelsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete model_;
}

void PostModelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostModelsRequest& PostModelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostModelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Model models = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostModelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.Model model = 2 [deprecated = true];
  if (this->has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model(this), target, stream);
  }

  // repeated .clarifai.api.Model models = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_models(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelsRequest)
  return target;
}

size_t PostModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Model models = 3;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Model model = 2 [deprecated = true];
  if (this->has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostModelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostModelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostModelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostModelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostModelsRequest)
    MergeFrom(*source);
  }
}

void PostModelsRequest::MergeFrom(const PostModelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_model()) {
    _internal_mutable_model()->::clarifai::api::Model::MergeFrom(from._internal_model());
  }
}

void PostModelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostModelsRequest::CopyFrom(const PostModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelsRequest::IsInitialized() const {
  return true;
}

void PostModelsRequest::InternalSwap(PostModelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  models_.InternalSwap(&other->models_);
  swap(user_app_id_, other->user_app_id_);
  swap(model_, other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchModelsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchModelsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModelsRequest::_Internal::user_app_id(const PatchModelsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchModelsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchModelsRequest::clear_models() {
  models_.Clear();
}
PatchModelsRequest::PatchModelsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchModelsRequest)
}
PatchModelsRequest::PatchModelsRequest(const PatchModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      models_(from.models_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModelsRequest)
}

void PatchModelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchModelsRequest::~PatchModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModelsRequest)
  SharedDtor();
}

void PatchModelsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchModelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchModelsRequest& PatchModelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchModelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Model models = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchModelsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchModelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Model models = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_models(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModelsRequest)
  return target;
}

size_t PatchModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Model models = 2;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchModelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchModelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchModelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchModelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchModelsRequest)
    MergeFrom(*source);
  }
}

void PatchModelsRequest::MergeFrom(const PatchModelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchModelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchModelsRequest::CopyFrom(const PatchModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModelsRequest::IsInitialized() const {
  return true;
}

void PatchModelsRequest::InternalSwap(PatchModelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  models_.InternalSwap(&other->models_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteModelRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteModelRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteModelRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteModelRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteModelRequest::_Internal::user_app_id(const DeleteModelRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteModelRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteModelRequest::DeleteModelRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteModelRequest)
}
DeleteModelRequest::DeleteModelRequest(const DeleteModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteModelRequest)
}

void DeleteModelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteModelRequest::~DeleteModelRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteModelRequest)
  SharedDtor();
}

void DeleteModelRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteModelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteModelRequest& DeleteModelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteModelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteModelRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteModelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteModelRequest)
  return target;
}

size_t DeleteModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteModelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteModelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteModelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteModelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteModelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteModelRequest)
    MergeFrom(*source);
  }
}

void DeleteModelRequest::MergeFrom(const DeleteModelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteModelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteModelRequest::CopyFrom(const DeleteModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteModelRequest::IsInitialized() const {
  return true;
}

void DeleteModelRequest::InternalSwap(DeleteModelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteModelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteModelsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteModelsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteModelsRequest::_Internal::user_app_id(const DeleteModelsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteModelsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteModelsRequest::DeleteModelsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteModelsRequest)
}
DeleteModelsRequest::DeleteModelsRequest(const DeleteModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  delete_all_ = from.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteModelsRequest)
}

void DeleteModelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_all_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(delete_all_));
}

DeleteModelsRequest::~DeleteModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteModelsRequest)
  SharedDtor();
}

void DeleteModelsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteModelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteModelsRequest& DeleteModelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  delete_all_ = false;
  _internal_metadata_.Clear();
}

const char* DeleteModelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteModelsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool delete_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteModelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteModelsRequest)
  return target;
}

size_t DeleteModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteModelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteModelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteModelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteModelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteModelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteModelsRequest)
    MergeFrom(*source);
  }
}

void DeleteModelsRequest::MergeFrom(const DeleteModelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.delete_all() != 0) {
    _internal_set_delete_all(from._internal_delete_all());
  }
}

void DeleteModelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteModelsRequest::CopyFrom(const DeleteModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteModelsRequest::IsInitialized() const {
  return true;
}

void DeleteModelsRequest::InternalSwap(DeleteModelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(delete_all_, other->delete_all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteModelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostModelsSearchesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostModelsSearchesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostModelsSearchesRequest_default_instance_._instance.get_mutable()->model_query_ = const_cast< ::clarifai::api::ModelQuery*>(
      ::clarifai::api::ModelQuery::internal_default_instance());
  ::clarifai::api::_PostModelsSearchesRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::clarifai::api::Pagination*>(
      ::clarifai::api::Pagination::internal_default_instance());
}
class PostModelsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelsSearchesRequest* msg);
  static const ::clarifai::api::ModelQuery& model_query(const PostModelsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostModelsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelsSearchesRequest::_Internal::user_app_id(const PostModelsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::ModelQuery&
PostModelsSearchesRequest::_Internal::model_query(const PostModelsSearchesRequest* msg) {
  return *msg->model_query_;
}
const ::clarifai::api::Pagination&
PostModelsSearchesRequest::_Internal::pagination(const PostModelsSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostModelsSearchesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostModelsSearchesRequest::clear_model_query() {
  if (GetArenaNoVirtual() == nullptr && model_query_ != nullptr) {
    delete model_query_;
  }
  model_query_ = nullptr;
}
PostModelsSearchesRequest::PostModelsSearchesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostModelsSearchesRequest)
}
PostModelsSearchesRequest::PostModelsSearchesRequest(const PostModelsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_model_query()) {
    model_query_ = new ::clarifai::api::ModelQuery(*from.model_query_);
  } else {
    model_query_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelsSearchesRequest)
}

void PostModelsSearchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostModelsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostModelsSearchesRequest::~PostModelsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelsSearchesRequest)
  SharedDtor();
}

void PostModelsSearchesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete model_query_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostModelsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostModelsSearchesRequest& PostModelsSearchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostModelsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostModelsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_query_ != nullptr) {
    delete model_query_;
  }
  model_query_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostModelsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ModelQuery model_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostModelsSearchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.ModelQuery model_query = 2;
  if (this->has_model_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model_query(this), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelsSearchesRequest)
  return target;
}

size_t PostModelsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelsSearchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.ModelQuery model_query = 2;
  if (this->has_model_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_query_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostModelsSearchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostModelsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostModelsSearchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostModelsSearchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostModelsSearchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostModelsSearchesRequest)
    MergeFrom(*source);
  }
}

void PostModelsSearchesRequest::MergeFrom(const PostModelsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_model_query()) {
    _internal_mutable_model_query()->::clarifai::api::ModelQuery::MergeFrom(from._internal_model_query());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void PostModelsSearchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostModelsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostModelsSearchesRequest::CopyFrom(const PostModelsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelsSearchesRequest::IsInitialized() const {
  return true;
}

void PostModelsSearchesRequest::InternalSwap(PostModelsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(model_query_, other->model_query_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelsSearchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleModelResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleModelResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleModelResponse_default_instance_._instance.get_mutable()->model_ = const_cast< ::clarifai::api::Model*>(
      ::clarifai::api::Model::internal_default_instance());
}
class SingleModelResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleModelResponse* msg);
  static const ::clarifai::api::Model& model(const SingleModelResponse* msg);
};

const ::clarifai::api::status::Status&
SingleModelResponse::_Internal::status(const SingleModelResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Model&
SingleModelResponse::_Internal::model(const SingleModelResponse* msg) {
  return *msg->model_;
}
void SingleModelResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleModelResponse::clear_model() {
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
SingleModelResponse::SingleModelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleModelResponse)
}
SingleModelResponse::SingleModelResponse(const SingleModelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::api::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleModelResponse)
}

void SingleModelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_) -
      reinterpret_cast<char*>(&status_)) + sizeof(model_));
}

SingleModelResponse::~SingleModelResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleModelResponse)
  SharedDtor();
}

void SingleModelResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete model_;
}

void SingleModelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleModelResponse& SingleModelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleModelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleModelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleModelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Model model = 2;
  if (this->has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleModelResponse)
  return target;
}

size_t SingleModelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleModelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Model model = 2;
  if (this->has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleModelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleModelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleModelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleModelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleModelResponse)
    MergeFrom(*source);
  }
}

void SingleModelResponse::MergeFrom(const SingleModelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_model()) {
    _internal_mutable_model()->::clarifai::api::Model::MergeFrom(from._internal_model());
  }
}

void SingleModelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleModelResponse::CopyFrom(const SingleModelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleModelResponse::IsInitialized() const {
  return true;
}

void SingleModelResponse::InternalSwap(SingleModelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(model_, other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleModelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiModelResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiModelResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiModelResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelResponse::_Internal::status(const MultiModelResponse* msg) {
  return *msg->status_;
}
void MultiModelResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiModelResponse::clear_models() {
  models_.Clear();
}
MultiModelResponse::MultiModelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiModelResponse)
}
MultiModelResponse::MultiModelResponse(const MultiModelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      models_(from.models_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelResponse)
}

void MultiModelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiModelResponse::~MultiModelResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelResponse)
  SharedDtor();
}

void MultiModelResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiModelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiModelResponse& MultiModelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiModelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiModelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiModelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_models(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelResponse)
  return target;
}

size_t MultiModelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiModelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiModelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiModelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiModelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiModelResponse)
    MergeFrom(*source);
  }
}

void MultiModelResponse::MergeFrom(const MultiModelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiModelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiModelResponse::CopyFrom(const MultiModelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelResponse::IsInitialized() const {
  return true;
}

void MultiModelResponse::InternalSwap(MultiModelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  models_.InternalSwap(&other->models_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetModelVersionRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetModelVersionRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetModelVersionRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelVersionRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelVersionRequest::_Internal::user_app_id(const GetModelVersionRequest* msg) {
  return *msg->user_app_id_;
}
void GetModelVersionRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetModelVersionRequest::GetModelVersionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetModelVersionRequest)
}
GetModelVersionRequest::GetModelVersionRequest(const GetModelVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_id().empty()) {
    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelVersionRequest)
}

void GetModelVersionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetModelVersionRequest::~GetModelVersionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelVersionRequest)
  SharedDtor();
}

void GetModelVersionRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetModelVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetModelVersionRequest& GetModelVersionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetModelVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetModelVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelVersionRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelVersionRequest.version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModelVersionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelVersionRequest)
  return target;
}

size_t GetModelVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelVersionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModelVersionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetModelVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModelVersionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetModelVersionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetModelVersionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetModelVersionRequest)
    MergeFrom(*source);
  }
}

void GetModelVersionRequest::MergeFrom(const GetModelVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.version_id().size() > 0) {

    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetModelVersionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetModelVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModelVersionRequest::CopyFrom(const GetModelVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelVersionRequest::IsInitialized() const {
  return true;
}

void GetModelVersionRequest::InternalSwap(GetModelVersionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_id_.Swap(&other->version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelVersionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListModelVersionsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListModelVersionsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListModelVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelVersionsRequest::_Internal::user_app_id(const ListModelVersionsRequest* msg) {
  return *msg->user_app_id_;
}
void ListModelVersionsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListModelVersionsRequest::ListModelVersionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListModelVersionsRequest)
}
ListModelVersionsRequest::ListModelVersionsRequest(const ListModelVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_ids_(from.concept_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelVersionsRequest)
}

void ListModelVersionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListModelVersionsRequest::~ListModelVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelVersionsRequest)
  SharedDtor();
}

void ListModelVersionsRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListModelVersionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListModelVersionsRequest& ListModelVersionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListModelVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelVersionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_ids_.Clear();
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListModelVersionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelVersionsRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string concept_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelVersionsRequest.concept_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListModelVersionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelVersionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelVersionsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  // repeated string concept_ids = 5;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelVersionsRequest.concept_ids");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelVersionsRequest)
  return target;
}

size_t ListModelVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelVersionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string concept_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(concept_ids_.size());
  for (int i = 0, n = concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      concept_ids_.Get(i));
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListModelVersionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListModelVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListModelVersionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListModelVersionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListModelVersionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListModelVersionsRequest)
    MergeFrom(*source);
  }
}

void ListModelVersionsRequest::MergeFrom(const ListModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_ids_.MergeFrom(from.concept_ids_);
  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListModelVersionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListModelVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListModelVersionsRequest::CopyFrom(const ListModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelVersionsRequest::IsInitialized() const {
  return true;
}

void ListModelVersionsRequest::InternalSwap(ListModelVersionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_ids_.InternalSwap(&other->concept_ids_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelVersionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteModelVersionRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteModelVersionRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteModelVersionRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteModelVersionRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteModelVersionRequest::_Internal::user_app_id(const DeleteModelVersionRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteModelVersionRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteModelVersionRequest::DeleteModelVersionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteModelVersionRequest)
}
DeleteModelVersionRequest::DeleteModelVersionRequest(const DeleteModelVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_id().empty()) {
    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteModelVersionRequest)
}

void DeleteModelVersionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteModelVersionRequest::~DeleteModelVersionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteModelVersionRequest)
  SharedDtor();
}

void DeleteModelVersionRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteModelVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteModelVersionRequest& DeleteModelVersionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteModelVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteModelVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteModelVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteModelVersionRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteModelVersionRequest.version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteModelVersionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteModelVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 3;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelVersionRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_id(), target);
  }

  // string version_id = 4;
  if (this->version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelVersionRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteModelVersionRequest)
  return target;
}

size_t DeleteModelVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteModelVersionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 3;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 4;
  if (this->version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteModelVersionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteModelVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteModelVersionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteModelVersionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteModelVersionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteModelVersionRequest)
    MergeFrom(*source);
  }
}

void DeleteModelVersionRequest::MergeFrom(const DeleteModelVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteModelVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.version_id().size() > 0) {

    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteModelVersionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteModelVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteModelVersionRequest::CopyFrom(const DeleteModelVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteModelVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteModelVersionRequest::IsInitialized() const {
  return true;
}

void DeleteModelVersionRequest::InternalSwap(DeleteModelVersionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_id_.Swap(&other->version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteModelVersionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleModelVersionResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleModelVersionResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleModelVersionResponse_default_instance_._instance.get_mutable()->model_version_ = const_cast< ::clarifai::api::ModelVersion*>(
      ::clarifai::api::ModelVersion::internal_default_instance());
}
class SingleModelVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleModelVersionResponse* msg);
  static const ::clarifai::api::ModelVersion& model_version(const SingleModelVersionResponse* msg);
};

const ::clarifai::api::status::Status&
SingleModelVersionResponse::_Internal::status(const SingleModelVersionResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::ModelVersion&
SingleModelVersionResponse::_Internal::model_version(const SingleModelVersionResponse* msg) {
  return *msg->model_version_;
}
void SingleModelVersionResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleModelVersionResponse::clear_model_version() {
  if (GetArenaNoVirtual() == nullptr && model_version_ != nullptr) {
    delete model_version_;
  }
  model_version_ = nullptr;
}
SingleModelVersionResponse::SingleModelVersionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleModelVersionResponse)
}
SingleModelVersionResponse::SingleModelVersionResponse(const SingleModelVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_model_version()) {
    model_version_ = new ::clarifai::api::ModelVersion(*from.model_version_);
  } else {
    model_version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleModelVersionResponse)
}

void SingleModelVersionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_version_) -
      reinterpret_cast<char*>(&status_)) + sizeof(model_version_));
}

SingleModelVersionResponse::~SingleModelVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleModelVersionResponse)
  SharedDtor();
}

void SingleModelVersionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete model_version_;
}

void SingleModelVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleModelVersionResponse& SingleModelVersionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleModelVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleModelVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_version_ != nullptr) {
    delete model_version_;
  }
  model_version_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleModelVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ModelVersion model_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleModelVersionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleModelVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.ModelVersion model_version = 2;
  if (this->has_model_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model_version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleModelVersionResponse)
  return target;
}

size_t SingleModelVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleModelVersionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.ModelVersion model_version = 2;
  if (this->has_model_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_version_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleModelVersionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleModelVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleModelVersionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleModelVersionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleModelVersionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleModelVersionResponse)
    MergeFrom(*source);
  }
}

void SingleModelVersionResponse::MergeFrom(const SingleModelVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleModelVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_model_version()) {
    _internal_mutable_model_version()->::clarifai::api::ModelVersion::MergeFrom(from._internal_model_version());
  }
}

void SingleModelVersionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleModelVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleModelVersionResponse::CopyFrom(const SingleModelVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleModelVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleModelVersionResponse::IsInitialized() const {
  return true;
}

void SingleModelVersionResponse::InternalSwap(SingleModelVersionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(model_version_, other->model_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleModelVersionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiModelVersionResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiModelVersionResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiModelVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelVersionResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelVersionResponse::_Internal::status(const MultiModelVersionResponse* msg) {
  return *msg->status_;
}
void MultiModelVersionResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiModelVersionResponse::clear_model_versions() {
  model_versions_.Clear();
}
MultiModelVersionResponse::MultiModelVersionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiModelVersionResponse)
}
MultiModelVersionResponse::MultiModelVersionResponse(const MultiModelVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      model_versions_(from.model_versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelVersionResponse)
}

void MultiModelVersionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiModelVersionResponse::~MultiModelVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelVersionResponse)
  SharedDtor();
}

void MultiModelVersionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiModelVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiModelVersionResponse& MultiModelVersionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiModelVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_versions_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiModelVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiModelVersionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_model_versions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelVersionResponse)
  return target;
}

size_t MultiModelVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelVersionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_model_versions_size();
  for (const auto& msg : this->model_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiModelVersionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiModelVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiModelVersionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiModelVersionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiModelVersionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiModelVersionResponse)
    MergeFrom(*source);
  }
}

void MultiModelVersionResponse::MergeFrom(const MultiModelVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_versions_.MergeFrom(from.model_versions_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiModelVersionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiModelVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiModelVersionResponse::CopyFrom(const MultiModelVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelVersionResponse::IsInitialized() const {
  return true;
}

void MultiModelVersionResponse::InternalSwap(MultiModelVersionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_versions_.InternalSwap(&other->model_versions_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelVersionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostModelVersionsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostModelVersionsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostModelVersionsRequest_default_instance_._instance.get_mutable()->search_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
  ::clarifai::api::_PostModelVersionsRequest_default_instance_._instance.get_mutable()->train_search_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
  ::clarifai::api::_PostModelVersionsRequest_default_instance_._instance.get_mutable()->test_search_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
}
class PostModelVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::Search& search(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::Search& train_search(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::Search& test_search(const PostModelVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelVersionsRequest::_Internal::user_app_id(const PostModelVersionsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Search&
PostModelVersionsRequest::_Internal::search(const PostModelVersionsRequest* msg) {
  return *msg->search_;
}
const ::clarifai::api::Search&
PostModelVersionsRequest::_Internal::train_search(const PostModelVersionsRequest* msg) {
  return *msg->train_search_;
}
const ::clarifai::api::Search&
PostModelVersionsRequest::_Internal::test_search(const PostModelVersionsRequest* msg) {
  return *msg->test_search_;
}
void PostModelVersionsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostModelVersionsRequest::clear_model_versions() {
  model_versions_.Clear();
}
void PostModelVersionsRequest::clear_search() {
  if (GetArenaNoVirtual() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
}
void PostModelVersionsRequest::clear_train_search() {
  if (GetArenaNoVirtual() == nullptr && train_search_ != nullptr) {
    delete train_search_;
  }
  train_search_ = nullptr;
}
void PostModelVersionsRequest::clear_test_search() {
  if (GetArenaNoVirtual() == nullptr && test_search_ != nullptr) {
    delete test_search_;
  }
  test_search_ = nullptr;
}
PostModelVersionsRequest::PostModelVersionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostModelVersionsRequest)
}
PostModelVersionsRequest::PostModelVersionsRequest(const PostModelVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      model_versions_(from.model_versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_search()) {
    search_ = new ::clarifai::api::Search(*from.search_);
  } else {
    search_ = nullptr;
  }
  if (from._internal_has_train_search()) {
    train_search_ = new ::clarifai::api::Search(*from.train_search_);
  } else {
    train_search_ = nullptr;
  }
  if (from._internal_has_test_search()) {
    test_search_ = new ::clarifai::api::Search(*from.test_search_);
  } else {
    test_search_ = nullptr;
  }
  evaluate_after_training_ = from.evaluate_after_training_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelVersionsRequest)
}

void PostModelVersionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&evaluate_after_training_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(evaluate_after_training_));
}

PostModelVersionsRequest::~PostModelVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelVersionsRequest)
  SharedDtor();
}

void PostModelVersionsRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete search_;
  if (this != internal_default_instance()) delete train_search_;
  if (this != internal_default_instance()) delete test_search_;
}

void PostModelVersionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostModelVersionsRequest& PostModelVersionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostModelVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelVersionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_versions_.Clear();
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && train_search_ != nullptr) {
    delete train_search_;
  }
  train_search_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && test_search_ != nullptr) {
    delete test_search_;
  }
  test_search_ = nullptr;
  evaluate_after_training_ = false;
  _internal_metadata_.Clear();
}

const char* PostModelVersionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelVersionsRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersion model_versions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search search = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search train_search = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_train_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search test_search = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool evaluate_after_training = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          evaluate_after_training_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelVersionsRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostModelVersionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelVersionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated .clarifai.api.ModelVersion model_versions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_model_versions(i), target, stream);
  }

  // .clarifai.api.Search search = 4 [deprecated = true];
  if (this->has_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::search(this), target, stream);
  }

  // .clarifai.api.Search train_search = 5;
  if (this->has_train_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::train_search(this), target, stream);
  }

  // .clarifai.api.Search test_search = 6;
  if (this->has_test_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::test_search(this), target, stream);
  }

  // bool evaluate_after_training = 7;
  if (this->evaluate_after_training() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_evaluate_after_training(), target);
  }

  // string description = 8;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionsRequest.description");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelVersionsRequest)
  return target;
}

size_t PostModelVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelVersionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersion model_versions = 3;
  total_size += 1UL * this->_internal_model_versions_size();
  for (const auto& msg : this->model_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string description = 8;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Search search = 4 [deprecated = true];
  if (this->has_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_);
  }

  // .clarifai.api.Search train_search = 5;
  if (this->has_train_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *train_search_);
  }

  // .clarifai.api.Search test_search = 6;
  if (this->has_test_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_search_);
  }

  // bool evaluate_after_training = 7;
  if (this->evaluate_after_training() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostModelVersionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostModelVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostModelVersionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostModelVersionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostModelVersionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostModelVersionsRequest)
    MergeFrom(*source);
  }
}

void PostModelVersionsRequest::MergeFrom(const PostModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_versions_.MergeFrom(from.model_versions_);
  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_search()) {
    _internal_mutable_search()->::clarifai::api::Search::MergeFrom(from._internal_search());
  }
  if (from.has_train_search()) {
    _internal_mutable_train_search()->::clarifai::api::Search::MergeFrom(from._internal_train_search());
  }
  if (from.has_test_search()) {
    _internal_mutable_test_search()->::clarifai::api::Search::MergeFrom(from._internal_test_search());
  }
  if (from.evaluate_after_training() != 0) {
    _internal_set_evaluate_after_training(from._internal_evaluate_after_training());
  }
}

void PostModelVersionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostModelVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostModelVersionsRequest::CopyFrom(const PostModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelVersionsRequest::IsInitialized() const {
  return true;
}

void PostModelVersionsRequest::InternalSwap(PostModelVersionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_versions_.InternalSwap(&other->model_versions_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(search_, other->search_);
  swap(train_search_, other->train_search_);
  swap(test_search_, other->test_search_);
  swap(evaluate_after_training_, other->evaluate_after_training_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelVersionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostModelVersionMetricsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostModelVersionMetricsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostModelVersionMetricsRequest_default_instance_._instance.get_mutable()->test_search_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
}
class PostModelVersionMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelVersionMetricsRequest* msg);
  static const ::clarifai::api::Search& test_search(const PostModelVersionMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelVersionMetricsRequest::_Internal::user_app_id(const PostModelVersionMetricsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Search&
PostModelVersionMetricsRequest::_Internal::test_search(const PostModelVersionMetricsRequest* msg) {
  return *msg->test_search_;
}
void PostModelVersionMetricsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostModelVersionMetricsRequest::clear_test_search() {
  if (GetArenaNoVirtual() == nullptr && test_search_ != nullptr) {
    delete test_search_;
  }
  test_search_ = nullptr;
}
PostModelVersionMetricsRequest::PostModelVersionMetricsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostModelVersionMetricsRequest)
}
PostModelVersionMetricsRequest::PostModelVersionMetricsRequest(const PostModelVersionMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_id().empty()) {
    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_test_search()) {
    test_search_ = new ::clarifai::api::Search(*from.test_search_);
  } else {
    test_search_ = nullptr;
  }
  max_examples_ = from.max_examples_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelVersionMetricsRequest)
}

void PostModelVersionMetricsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_examples_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(max_examples_));
}

PostModelVersionMetricsRequest::~PostModelVersionMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelVersionMetricsRequest)
  SharedDtor();
}

void PostModelVersionMetricsRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete test_search_;
}

void PostModelVersionMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostModelVersionMetricsRequest& PostModelVersionMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostModelVersionMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelVersionMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && test_search_ != nullptr) {
    delete test_search_;
  }
  test_search_ = nullptr;
  max_examples_ = 0u;
  _internal_metadata_.Clear();
}

const char* PostModelVersionMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelVersionMetricsRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelVersionMetricsRequest.version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_examples = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search test_search = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostModelVersionMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelVersionMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionMetricsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionMetricsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // uint32 max_examples = 4;
  if (this->max_examples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_examples(), target);
  }

  // .clarifai.api.Search test_search = 5;
  if (this->has_test_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::test_search(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelVersionMetricsRequest)
  return target;
}

size_t PostModelVersionMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelVersionMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Search test_search = 5;
  if (this->has_test_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_search_);
  }

  // uint32 max_examples = 4;
  if (this->max_examples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_examples());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostModelVersionMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostModelVersionMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostModelVersionMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostModelVersionMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostModelVersionMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostModelVersionMetricsRequest)
    MergeFrom(*source);
  }
}

void PostModelVersionMetricsRequest::MergeFrom(const PostModelVersionMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelVersionMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.version_id().size() > 0) {

    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_test_search()) {
    _internal_mutable_test_search()->::clarifai::api::Search::MergeFrom(from._internal_test_search());
  }
  if (from.max_examples() != 0) {
    _internal_set_max_examples(from._internal_max_examples());
  }
}

void PostModelVersionMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostModelVersionMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostModelVersionMetricsRequest::CopyFrom(const PostModelVersionMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelVersionMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelVersionMetricsRequest::IsInitialized() const {
  return true;
}

void PostModelVersionMetricsRequest::InternalSwap(PostModelVersionMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_id_.Swap(&other->version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(test_search_, other->test_search_);
  swap(max_examples_, other->max_examples_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelVersionMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetModelVersionMetricsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetModelVersionMetricsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_GetModelVersionMetricsRequest_default_instance_._instance.get_mutable()->fields_ = const_cast< ::clarifai::api::FieldsValue*>(
      ::clarifai::api::FieldsValue::internal_default_instance());
}
class GetModelVersionMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelVersionMetricsRequest* msg);
  static const ::clarifai::api::FieldsValue& fields(const GetModelVersionMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelVersionMetricsRequest::_Internal::user_app_id(const GetModelVersionMetricsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::FieldsValue&
GetModelVersionMetricsRequest::_Internal::fields(const GetModelVersionMetricsRequest* msg) {
  return *msg->fields_;
}
void GetModelVersionMetricsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void GetModelVersionMetricsRequest::clear_fields() {
  if (GetArenaNoVirtual() == nullptr && fields_ != nullptr) {
    delete fields_;
  }
  fields_ = nullptr;
}
GetModelVersionMetricsRequest::GetModelVersionMetricsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetModelVersionMetricsRequest)
}
GetModelVersionMetricsRequest::GetModelVersionMetricsRequest(const GetModelVersionMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_id().empty()) {
    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_fields()) {
    fields_ = new ::clarifai::api::FieldsValue(*from.fields_);
  } else {
    fields_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelVersionMetricsRequest)
}

void GetModelVersionMetricsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fields_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(fields_));
}

GetModelVersionMetricsRequest::~GetModelVersionMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelVersionMetricsRequest)
  SharedDtor();
}

void GetModelVersionMetricsRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete fields_;
}

void GetModelVersionMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetModelVersionMetricsRequest& GetModelVersionMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetModelVersionMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelVersionMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fields_ != nullptr) {
    delete fields_;
  }
  fields_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetModelVersionMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelVersionMetricsRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelVersionMetricsRequest.version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.FieldsValue fields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModelVersionMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelVersionMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionMetricsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionMetricsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // .clarifai.api.FieldsValue fields = 4;
  if (this->has_fields()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fields(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelVersionMetricsRequest)
  return target;
}

size_t GetModelVersionMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelVersionMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.FieldsValue fields = 4;
  if (this->has_fields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fields_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModelVersionMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetModelVersionMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModelVersionMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetModelVersionMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetModelVersionMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetModelVersionMetricsRequest)
    MergeFrom(*source);
  }
}

void GetModelVersionMetricsRequest::MergeFrom(const GetModelVersionMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelVersionMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.version_id().size() > 0) {

    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_fields()) {
    _internal_mutable_fields()->::clarifai::api::FieldsValue::MergeFrom(from._internal_fields());
  }
}

void GetModelVersionMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetModelVersionMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModelVersionMetricsRequest::CopyFrom(const GetModelVersionMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelVersionMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelVersionMetricsRequest::IsInitialized() const {
  return true;
}

void GetModelVersionMetricsRequest::InternalSwap(GetModelVersionMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_id_.Swap(&other->version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(fields_, other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelVersionMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetModelTypeRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetModelTypeRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetModelTypeRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelTypeRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelTypeRequest::_Internal::user_app_id(const GetModelTypeRequest* msg) {
  return *msg->user_app_id_;
}
void GetModelTypeRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetModelTypeRequest::GetModelTypeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetModelTypeRequest)
}
GetModelTypeRequest::GetModelTypeRequest(const GetModelTypeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_type_id().empty()) {
    model_type_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_type_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelTypeRequest)
}

void GetModelTypeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetModelTypeRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetModelTypeRequest::~GetModelTypeRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelTypeRequest)
  SharedDtor();
}

void GetModelTypeRequest::SharedDtor() {
  model_type_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetModelTypeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetModelTypeRequest& GetModelTypeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetModelTypeRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetModelTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelTypeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_type_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetModelTypeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_type_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelTypeRequest.model_type_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModelTypeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelTypeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_type_id = 2;
  if (this->model_type_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type_id().data(), static_cast<int>(this->_internal_model_type_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelTypeRequest.model_type_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_type_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelTypeRequest)
  return target;
}

size_t GetModelTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelTypeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_type_id = 2;
  if (this->model_type_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModelTypeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetModelTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModelTypeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetModelTypeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetModelTypeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetModelTypeRequest)
    MergeFrom(*source);
  }
}

void GetModelTypeRequest::MergeFrom(const GetModelTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_type_id().size() > 0) {

    model_type_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_type_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetModelTypeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetModelTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModelTypeRequest::CopyFrom(const GetModelTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelTypeRequest::IsInitialized() const {
  return true;
}

void GetModelTypeRequest::InternalSwap(GetModelTypeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_type_id_.Swap(&other->model_type_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelTypeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListModelTypesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListModelTypesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListModelTypesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelTypesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelTypesRequest::_Internal::user_app_id(const ListModelTypesRequest* msg) {
  return *msg->user_app_id_;
}
void ListModelTypesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListModelTypesRequest::ListModelTypesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListModelTypesRequest)
}
ListModelTypesRequest::ListModelTypesRequest(const ListModelTypesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelTypesRequest)
}

void ListModelTypesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListModelTypesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListModelTypesRequest::~ListModelTypesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelTypesRequest)
  SharedDtor();
}

void ListModelTypesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListModelTypesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListModelTypesRequest& ListModelTypesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListModelTypesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListModelTypesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelTypesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListModelTypesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListModelTypesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelTypesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelTypesRequest)
  return target;
}

size_t ListModelTypesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelTypesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListModelTypesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListModelTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListModelTypesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListModelTypesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListModelTypesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListModelTypesRequest)
    MergeFrom(*source);
  }
}

void ListModelTypesRequest::MergeFrom(const ListModelTypesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListModelTypesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListModelTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListModelTypesRequest::CopyFrom(const ListModelTypesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelTypesRequest::IsInitialized() const {
  return true;
}

void ListModelTypesRequest::InternalSwap(ListModelTypesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelTypesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleModelTypeResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleModelTypeResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleModelTypeResponse_default_instance_._instance.get_mutable()->model_type_ = const_cast< ::clarifai::api::ModelType*>(
      ::clarifai::api::ModelType::internal_default_instance());
}
class SingleModelTypeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleModelTypeResponse* msg);
  static const ::clarifai::api::ModelType& model_type(const SingleModelTypeResponse* msg);
};

const ::clarifai::api::status::Status&
SingleModelTypeResponse::_Internal::status(const SingleModelTypeResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::ModelType&
SingleModelTypeResponse::_Internal::model_type(const SingleModelTypeResponse* msg) {
  return *msg->model_type_;
}
void SingleModelTypeResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleModelTypeResponse::clear_model_type() {
  if (GetArenaNoVirtual() == nullptr && model_type_ != nullptr) {
    delete model_type_;
  }
  model_type_ = nullptr;
}
SingleModelTypeResponse::SingleModelTypeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleModelTypeResponse)
}
SingleModelTypeResponse::SingleModelTypeResponse(const SingleModelTypeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_model_type()) {
    model_type_ = new ::clarifai::api::ModelType(*from.model_type_);
  } else {
    model_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleModelTypeResponse)
}

void SingleModelTypeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleModelTypeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_type_) -
      reinterpret_cast<char*>(&status_)) + sizeof(model_type_));
}

SingleModelTypeResponse::~SingleModelTypeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleModelTypeResponse)
  SharedDtor();
}

void SingleModelTypeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete model_type_;
}

void SingleModelTypeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleModelTypeResponse& SingleModelTypeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleModelTypeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleModelTypeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleModelTypeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_type_ != nullptr) {
    delete model_type_;
  }
  model_type_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleModelTypeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ModelType model_type = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleModelTypeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleModelTypeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.ModelType model_type = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->has_model_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleModelTypeResponse)
  return target;
}

size_t SingleModelTypeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleModelTypeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.ModelType model_type = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->has_model_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleModelTypeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleModelTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleModelTypeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleModelTypeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleModelTypeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleModelTypeResponse)
    MergeFrom(*source);
  }
}

void SingleModelTypeResponse::MergeFrom(const SingleModelTypeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleModelTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_model_type()) {
    _internal_mutable_model_type()->::clarifai::api::ModelType::MergeFrom(from._internal_model_type());
  }
}

void SingleModelTypeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleModelTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleModelTypeResponse::CopyFrom(const SingleModelTypeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleModelTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleModelTypeResponse::IsInitialized() const {
  return true;
}

void SingleModelTypeResponse::InternalSwap(SingleModelTypeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(model_type_, other->model_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleModelTypeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiModelTypeResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiModelTypeResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiModelTypeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelTypeResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelTypeResponse::_Internal::status(const MultiModelTypeResponse* msg) {
  return *msg->status_;
}
void MultiModelTypeResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiModelTypeResponse::clear_model_types() {
  model_types_.Clear();
}
MultiModelTypeResponse::MultiModelTypeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiModelTypeResponse)
}
MultiModelTypeResponse::MultiModelTypeResponse(const MultiModelTypeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      model_types_(from.model_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelTypeResponse)
}

void MultiModelTypeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiModelTypeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiModelTypeResponse::~MultiModelTypeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelTypeResponse)
  SharedDtor();
}

void MultiModelTypeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiModelTypeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiModelTypeResponse& MultiModelTypeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiModelTypeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiModelTypeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelTypeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_types_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiModelTypeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelType model_types = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiModelTypeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelTypeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ModelType model_types = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_model_types(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelTypeResponse)
  return target;
}

size_t MultiModelTypeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelTypeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelType model_types = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_model_types_size();
  for (const auto& msg : this->model_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiModelTypeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiModelTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiModelTypeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiModelTypeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiModelTypeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiModelTypeResponse)
    MergeFrom(*source);
  }
}

void MultiModelTypeResponse::MergeFrom(const MultiModelTypeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_types_.MergeFrom(from.model_types_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiModelTypeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiModelTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiModelTypeResponse::CopyFrom(const MultiModelTypeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelTypeResponse::IsInitialized() const {
  return true;
}

void MultiModelTypeResponse::InternalSwap(MultiModelTypeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_types_.InternalSwap(&other->model_types_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelTypeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiOutputResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiOutputResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiOutputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiOutputResponse* msg);
};

const ::clarifai::api::status::Status&
MultiOutputResponse::_Internal::status(const MultiOutputResponse* msg) {
  return *msg->status_;
}
void MultiOutputResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiOutputResponse::clear_outputs() {
  outputs_.Clear();
}
MultiOutputResponse::MultiOutputResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiOutputResponse)
}
MultiOutputResponse::MultiOutputResponse(const MultiOutputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiOutputResponse)
}

void MultiOutputResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiOutputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiOutputResponse::~MultiOutputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiOutputResponse)
  SharedDtor();
}

void MultiOutputResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiOutputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiOutputResponse& MultiOutputResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiOutputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiOutputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiOutputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiOutputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiOutputResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiOutputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiOutputResponse)
  return target;
}

size_t MultiOutputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiOutputResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiOutputResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiOutputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiOutputResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiOutputResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiOutputResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiOutputResponse)
    MergeFrom(*source);
  }
}

void MultiOutputResponse::MergeFrom(const MultiOutputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiOutputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiOutputResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiOutputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiOutputResponse::CopyFrom(const MultiOutputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiOutputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiOutputResponse::IsInitialized() const {
  return true;
}

void MultiOutputResponse::InternalSwap(MultiOutputResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  outputs_.InternalSwap(&other->outputs_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiOutputResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListScopesRequest::InitAsDefaultInstance() {
}
class ListScopesRequest::_Internal {
 public:
};

ListScopesRequest::ListScopesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListScopesRequest)
}
ListScopesRequest::ListScopesRequest(const ListScopesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_type().empty()) {
    key_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_type_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListScopesRequest)
}

void ListScopesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListScopesRequest::~ListScopesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListScopesRequest)
  SharedDtor();
}

void ListScopesRequest::SharedDtor() {
  key_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListScopesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListScopesRequest& ListScopesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListScopesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListScopesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListScopesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListScopesRequest.key_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListScopesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListScopesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key_type = 1;
  if (this->key_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_type().data(), static_cast<int>(this->_internal_key_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListScopesRequest.key_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListScopesRequest)
  return target;
}

size_t ListScopesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListScopesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_type = 1;
  if (this->key_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListScopesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListScopesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListScopesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListScopesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListScopesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListScopesRequest)
    MergeFrom(*source);
  }
}

void ListScopesRequest::MergeFrom(const ListScopesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListScopesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key_type().size() > 0) {

    key_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_type_);
  }
}

void ListScopesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListScopesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListScopesRequest::CopyFrom(const ListScopesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListScopesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListScopesRequest::IsInitialized() const {
  return true;
}

void ListScopesRequest::InternalSwap(ListScopesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_type_.Swap(&other->key_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListScopesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MyScopesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_MyScopesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class MyScopesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const MyScopesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
MyScopesRequest::_Internal::user_app_id(const MyScopesRequest* msg) {
  return *msg->user_app_id_;
}
void MyScopesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
MyScopesRequest::MyScopesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MyScopesRequest)
}
MyScopesRequest::MyScopesRequest(const MyScopesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MyScopesRequest)
}

void MyScopesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MyScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

MyScopesRequest::~MyScopesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.MyScopesRequest)
  SharedDtor();
}

void MyScopesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void MyScopesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyScopesRequest& MyScopesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MyScopesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MyScopesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MyScopesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MyScopesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MyScopesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MyScopesRequest)
  return target;
}

size_t MyScopesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MyScopesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyScopesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MyScopesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MyScopesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyScopesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MyScopesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MyScopesRequest)
    MergeFrom(*source);
  }
}

void MyScopesRequest::MergeFrom(const MyScopesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MyScopesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void MyScopesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MyScopesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyScopesRequest::CopyFrom(const MyScopesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MyScopesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyScopesRequest::IsInitialized() const {
  return true;
}

void MyScopesRequest::InternalSwap(MyScopesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MyScopesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiScopeDepsResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiScopeDepsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiScopeDepsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiScopeDepsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiScopeDepsResponse::_Internal::status(const MultiScopeDepsResponse* msg) {
  return *msg->status_;
}
void MultiScopeDepsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiScopeDepsResponse::clear_scope_deps() {
  scope_deps_.Clear();
}
void MultiScopeDepsResponse::clear_endpoint_deps() {
  endpoint_deps_.Clear();
}
MultiScopeDepsResponse::MultiScopeDepsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiScopeDepsResponse)
}
MultiScopeDepsResponse::MultiScopeDepsResponse(const MultiScopeDepsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      scope_deps_(from.scope_deps_),
      endpoint_deps_(from.endpoint_deps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiScopeDepsResponse)
}

void MultiScopeDepsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiScopeDepsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiScopeDepsResponse::~MultiScopeDepsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiScopeDepsResponse)
  SharedDtor();
}

void MultiScopeDepsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiScopeDepsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiScopeDepsResponse& MultiScopeDepsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiScopeDepsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiScopeDepsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiScopeDepsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scope_deps_.Clear();
  endpoint_deps_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiScopeDepsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ScopeDeps scope_deps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scope_deps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_endpoint_deps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiScopeDepsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiScopeDepsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ScopeDeps scope_deps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scope_deps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_scope_deps(i), target, stream);
  }

  // repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_endpoint_deps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_endpoint_deps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiScopeDepsResponse)
  return target;
}

size_t MultiScopeDepsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiScopeDepsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ScopeDeps scope_deps = 2;
  total_size += 1UL * this->_internal_scope_deps_size();
  for (const auto& msg : this->scope_deps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
  total_size += 1UL * this->_internal_endpoint_deps_size();
  for (const auto& msg : this->endpoint_deps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiScopeDepsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiScopeDepsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiScopeDepsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiScopeDepsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiScopeDepsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiScopeDepsResponse)
    MergeFrom(*source);
  }
}

void MultiScopeDepsResponse::MergeFrom(const MultiScopeDepsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiScopeDepsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scope_deps_.MergeFrom(from.scope_deps_);
  endpoint_deps_.MergeFrom(from.endpoint_deps_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiScopeDepsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiScopeDepsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiScopeDepsResponse::CopyFrom(const MultiScopeDepsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiScopeDepsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiScopeDepsResponse::IsInitialized() const {
  return true;
}

void MultiScopeDepsResponse::InternalSwap(MultiScopeDepsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  scope_deps_.InternalSwap(&other->scope_deps_);
  endpoint_deps_.InternalSwap(&other->endpoint_deps_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiScopeDepsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiScopeResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiScopeResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_MultiScopeResponse_default_instance_._instance.get_mutable()->app_ = const_cast< ::clarifai::api::App*>(
      ::clarifai::api::App::internal_default_instance());
}
class MultiScopeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiScopeResponse* msg);
  static const ::clarifai::api::App& app(const MultiScopeResponse* msg);
};

const ::clarifai::api::status::Status&
MultiScopeResponse::_Internal::status(const MultiScopeResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::App&
MultiScopeResponse::_Internal::app(const MultiScopeResponse* msg) {
  return *msg->app_;
}
void MultiScopeResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiScopeResponse::clear_app() {
  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
}
MultiScopeResponse::MultiScopeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiScopeResponse)
}
MultiScopeResponse::MultiScopeResponse(const MultiScopeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      scopes_(from.scopes_),
      endpoints_(from.endpoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_app()) {
    app_ = new ::clarifai::api::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiScopeResponse)
}

void MultiScopeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiScopeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_) -
      reinterpret_cast<char*>(&status_)) + sizeof(app_));
}

MultiScopeResponse::~MultiScopeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiScopeResponse)
  SharedDtor();
}

void MultiScopeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete app_;
}

void MultiScopeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiScopeResponse& MultiScopeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiScopeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiScopeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiScopeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  endpoints_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiScopeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiScopeResponse.scopes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.App app = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string endpoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiScopeResponse.endpoints"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiScopeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiScopeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string scopes = 2;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeResponse.scopes");
    target = stream->WriteString(2, s, target);
  }

  // .clarifai.api.App app = 3;
  if (this->has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::app(this), target, stream);
  }

  // repeated string endpoints = 4;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeResponse.endpoints");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiScopeResponse)
  return target;
}

size_t MultiScopeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiScopeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(scopes_.size());
  for (int i = 0, n = scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      scopes_.Get(i));
  }

  // repeated string endpoints = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(endpoints_.size());
  for (int i = 0, n = endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      endpoints_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.App app = 3;
  if (this->has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiScopeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiScopeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiScopeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiScopeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiScopeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiScopeResponse)
    MergeFrom(*source);
  }
}

void MultiScopeResponse::MergeFrom(const MultiScopeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiScopeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  endpoints_.MergeFrom(from.endpoints_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_app()) {
    _internal_mutable_app()->::clarifai::api::App::MergeFrom(from._internal_app());
  }
}

void MultiScopeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiScopeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiScopeResponse::CopyFrom(const MultiScopeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiScopeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiScopeResponse::IsInitialized() const {
  return true;
}

void MultiScopeResponse::InternalSwap(MultiScopeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  scopes_.InternalSwap(&other->scopes_);
  endpoints_.InternalSwap(&other->endpoints_);
  swap(status_, other->status_);
  swap(app_, other->app_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiScopeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSearchRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetSearchRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetSearchRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetSearchRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetSearchRequest::_Internal::user_app_id(const GetSearchRequest* msg) {
  return *msg->user_app_id_;
}
void GetSearchRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetSearchRequest::GetSearchRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetSearchRequest)
}
GetSearchRequest::GetSearchRequest(const GetSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetSearchRequest)
}

void GetSearchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetSearchRequest::~GetSearchRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetSearchRequest)
  SharedDtor();
}

void GetSearchRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetSearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSearchRequest& GetSearchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetSearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetSearchRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSearchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetSearchRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetSearchRequest)
  return target;
}

size_t GetSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetSearchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSearchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSearchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSearchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetSearchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetSearchRequest)
    MergeFrom(*source);
  }
}

void GetSearchRequest::MergeFrom(const GetSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetSearchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSearchRequest::CopyFrom(const GetSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSearchRequest::IsInitialized() const {
  return true;
}

void GetSearchRequest::InternalSwap(GetSearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSearchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSearchesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListSearchesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListSearchesRequest::_Internal::user_app_id(const ListSearchesRequest* msg) {
  return *msg->user_app_id_;
}
void ListSearchesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListSearchesRequest::ListSearchesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListSearchesRequest)
}
ListSearchesRequest::ListSearchesRequest(const ListSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListSearchesRequest)
}

void ListSearchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListSearchesRequest::~ListSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListSearchesRequest)
  SharedDtor();
}

void ListSearchesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSearchesRequest& ListSearchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSearchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListSearchesRequest)
  return target;
}

size_t ListSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListSearchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSearchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSearchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSearchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListSearchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListSearchesRequest)
    MergeFrom(*source);
  }
}

void ListSearchesRequest::MergeFrom(const ListSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListSearchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSearchesRequest::CopyFrom(const ListSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSearchesRequest::IsInitialized() const {
  return true;
}

void ListSearchesRequest::InternalSwap(ListSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSearchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostSearchesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostSearchesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostSearchesRequest_default_instance_._instance.get_mutable()->query_ = const_cast< ::clarifai::api::Query*>(
      ::clarifai::api::Query::internal_default_instance());
  ::clarifai::api::_PostSearchesRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::clarifai::api::Pagination*>(
      ::clarifai::api::Pagination::internal_default_instance());
}
class PostSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostSearchesRequest* msg);
  static const ::clarifai::api::Query& query(const PostSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostSearchesRequest::_Internal::user_app_id(const PostSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Query&
PostSearchesRequest::_Internal::query(const PostSearchesRequest* msg) {
  return *msg->query_;
}
const ::clarifai::api::Pagination&
PostSearchesRequest::_Internal::pagination(const PostSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostSearchesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostSearchesRequest::clear_query() {
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
void PostSearchesRequest::clear_searches() {
  searches_.Clear();
}
PostSearchesRequest::PostSearchesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostSearchesRequest)
}
PostSearchesRequest::PostSearchesRequest(const PostSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new ::clarifai::api::Query(*from.query_);
  } else {
    query_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostSearchesRequest)
}

void PostSearchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostSearchesRequest::~PostSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostSearchesRequest)
  SharedDtor();
}

void PostSearchesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete query_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostSearchesRequest& PostSearchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searches_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Query query = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostSearchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.Query query = 2 [deprecated = true];
  if (this->has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::query(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_searches(i), target, stream);
  }

  // .clarifai.api.Pagination pagination = 4;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostSearchesRequest)
  return target;
}

size_t PostSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostSearchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 3;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Query query = 2 [deprecated = true];
  if (this->has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_);
  }

  // .clarifai.api.Pagination pagination = 4;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostSearchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostSearchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostSearchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostSearchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostSearchesRequest)
    MergeFrom(*source);
  }
}

void PostSearchesRequest::MergeFrom(const PostSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  searches_.MergeFrom(from.searches_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_query()) {
    _internal_mutable_query()->::clarifai::api::Query::MergeFrom(from._internal_query());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void PostSearchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostSearchesRequest::CopyFrom(const PostSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostSearchesRequest::IsInitialized() const {
  return true;
}

void PostSearchesRequest::InternalSwap(PostSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  searches_.InternalSwap(&other->searches_);
  swap(user_app_id_, other->user_app_id_);
  swap(query_, other->query_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostSearchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostSearchesByIDRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostSearchesByIDRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostSearchesByIDRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::clarifai::api::Pagination*>(
      ::clarifai::api::Pagination::internal_default_instance());
}
class PostSearchesByIDRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostSearchesByIDRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostSearchesByIDRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostSearchesByIDRequest::_Internal::user_app_id(const PostSearchesByIDRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Pagination&
PostSearchesByIDRequest::_Internal::pagination(const PostSearchesByIDRequest* msg) {
  return *msg->pagination_;
}
void PostSearchesByIDRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PostSearchesByIDRequest::PostSearchesByIDRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostSearchesByIDRequest)
}
PostSearchesByIDRequest::PostSearchesByIDRequest(const PostSearchesByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostSearchesByIDRequest)
}

void PostSearchesByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostSearchesByIDRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostSearchesByIDRequest::~PostSearchesByIDRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostSearchesByIDRequest)
  SharedDtor();
}

void PostSearchesByIDRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostSearchesByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostSearchesByIDRequest& PostSearchesByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostSearchesByIDRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostSearchesByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostSearchesByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostSearchesByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostSearchesByIDRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostSearchesByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostSearchesByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostSearchesByIDRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostSearchesByIDRequest)
  return target;
}

size_t PostSearchesByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostSearchesByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostSearchesByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostSearchesByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostSearchesByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostSearchesByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostSearchesByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostSearchesByIDRequest)
    MergeFrom(*source);
  }
}

void PostSearchesByIDRequest::MergeFrom(const PostSearchesByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostSearchesByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void PostSearchesByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostSearchesByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostSearchesByIDRequest::CopyFrom(const PostSearchesByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostSearchesByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostSearchesByIDRequest::IsInitialized() const {
  return true;
}

void PostSearchesByIDRequest::InternalSwap(PostSearchesByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostSearchesByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteSearchRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteSearchRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteSearchRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteSearchRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteSearchRequest::_Internal::user_app_id(const DeleteSearchRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteSearchRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteSearchRequest::DeleteSearchRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteSearchRequest)
}
DeleteSearchRequest::DeleteSearchRequest(const DeleteSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteSearchRequest)
}

void DeleteSearchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteSearchRequest::~DeleteSearchRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteSearchRequest)
  SharedDtor();
}

void DeleteSearchRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteSearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSearchRequest& DeleteSearchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteSearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteSearchRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSearchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteSearchRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteSearchRequest)
  return target;
}

size_t DeleteSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteSearchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSearchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSearchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSearchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteSearchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteSearchRequest)
    MergeFrom(*source);
  }
}

void DeleteSearchRequest::MergeFrom(const DeleteSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteSearchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSearchRequest::CopyFrom(const DeleteSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSearchRequest::IsInitialized() const {
  return true;
}

void DeleteSearchRequest::InternalSwap(DeleteSearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSearchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostAnnotationsSearchesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostAnnotationsSearchesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostAnnotationsSearchesRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::clarifai::api::Pagination*>(
      ::clarifai::api::Pagination::internal_default_instance());
}
class PostAnnotationsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAnnotationsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostAnnotationsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAnnotationsSearchesRequest::_Internal::user_app_id(const PostAnnotationsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Pagination&
PostAnnotationsSearchesRequest::_Internal::pagination(const PostAnnotationsSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostAnnotationsSearchesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAnnotationsSearchesRequest::clear_searches() {
  searches_.Clear();
}
PostAnnotationsSearchesRequest::PostAnnotationsSearchesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostAnnotationsSearchesRequest)
}
PostAnnotationsSearchesRequest::PostAnnotationsSearchesRequest(const PostAnnotationsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAnnotationsSearchesRequest)
}

void PostAnnotationsSearchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostAnnotationsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostAnnotationsSearchesRequest::~PostAnnotationsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAnnotationsSearchesRequest)
  SharedDtor();
}

void PostAnnotationsSearchesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostAnnotationsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostAnnotationsSearchesRequest& PostAnnotationsSearchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostAnnotationsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostAnnotationsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAnnotationsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searches_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostAnnotationsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostAnnotationsSearchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAnnotationsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_searches(i), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAnnotationsSearchesRequest)
  return target;
}

size_t PostAnnotationsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAnnotationsSearchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 2;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostAnnotationsSearchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostAnnotationsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostAnnotationsSearchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostAnnotationsSearchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostAnnotationsSearchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostAnnotationsSearchesRequest)
    MergeFrom(*source);
  }
}

void PostAnnotationsSearchesRequest::MergeFrom(const PostAnnotationsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAnnotationsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  searches_.MergeFrom(from.searches_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void PostAnnotationsSearchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostAnnotationsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostAnnotationsSearchesRequest::CopyFrom(const PostAnnotationsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAnnotationsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAnnotationsSearchesRequest::IsInitialized() const {
  return true;
}

void PostAnnotationsSearchesRequest::InternalSwap(PostAnnotationsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  searches_.InternalSwap(&other->searches_);
  swap(user_app_id_, other->user_app_id_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAnnotationsSearchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAnnotationSearchMetricsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteAnnotationSearchMetricsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteAnnotationSearchMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAnnotationSearchMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAnnotationSearchMetricsRequest::_Internal::user_app_id(const DeleteAnnotationSearchMetricsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteAnnotationSearchMetricsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteAnnotationSearchMetricsRequest::DeleteAnnotationSearchMetricsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteAnnotationSearchMetricsRequest)
}
DeleteAnnotationSearchMetricsRequest::DeleteAnnotationSearchMetricsRequest(const DeleteAnnotationSearchMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAnnotationSearchMetricsRequest)
}

void DeleteAnnotationSearchMetricsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteAnnotationSearchMetricsRequest::~DeleteAnnotationSearchMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  SharedDtor();
}

void DeleteAnnotationSearchMetricsRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteAnnotationSearchMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAnnotationSearchMetricsRequest& DeleteAnnotationSearchMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteAnnotationSearchMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteAnnotationSearchMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteAnnotationSearchMetricsRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAnnotationSearchMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationSearchMetricsRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  return target;
}

size_t DeleteAnnotationSearchMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAnnotationSearchMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAnnotationSearchMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAnnotationSearchMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteAnnotationSearchMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteAnnotationSearchMetricsRequest)
    MergeFrom(*source);
  }
}

void DeleteAnnotationSearchMetricsRequest::MergeFrom(const DeleteAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteAnnotationSearchMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAnnotationSearchMetricsRequest::CopyFrom(const DeleteAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAnnotationSearchMetricsRequest::IsInitialized() const {
  return true;
}

void DeleteAnnotationSearchMetricsRequest::InternalSwap(DeleteAnnotationSearchMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAnnotationSearchMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostInputsSearchesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostInputsSearchesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostInputsSearchesRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::clarifai::api::Pagination*>(
      ::clarifai::api::Pagination::internal_default_instance());
}
class PostInputsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostInputsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostInputsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostInputsSearchesRequest::_Internal::user_app_id(const PostInputsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Pagination&
PostInputsSearchesRequest::_Internal::pagination(const PostInputsSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostInputsSearchesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostInputsSearchesRequest::clear_searches() {
  searches_.Clear();
}
PostInputsSearchesRequest::PostInputsSearchesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostInputsSearchesRequest)
}
PostInputsSearchesRequest::PostInputsSearchesRequest(const PostInputsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostInputsSearchesRequest)
}

void PostInputsSearchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostInputsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostInputsSearchesRequest::~PostInputsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostInputsSearchesRequest)
  SharedDtor();
}

void PostInputsSearchesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostInputsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostInputsSearchesRequest& PostInputsSearchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostInputsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostInputsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostInputsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searches_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostInputsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostInputsSearchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostInputsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_searches(i), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostInputsSearchesRequest)
  return target;
}

size_t PostInputsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostInputsSearchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 2;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostInputsSearchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostInputsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostInputsSearchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostInputsSearchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostInputsSearchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostInputsSearchesRequest)
    MergeFrom(*source);
  }
}

void PostInputsSearchesRequest::MergeFrom(const PostInputsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostInputsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  searches_.MergeFrom(from.searches_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void PostInputsSearchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostInputsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostInputsSearchesRequest::CopyFrom(const PostInputsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostInputsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostInputsSearchesRequest::IsInitialized() const {
  return true;
}

void PostInputsSearchesRequest::InternalSwap(PostInputsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  searches_.InternalSwap(&other->searches_);
  swap(user_app_id_, other->user_app_id_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostInputsSearchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleSearchResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleSearchResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleSearchResponse_default_instance_._instance.get_mutable()->search_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
}
class SingleSearchResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleSearchResponse* msg);
  static const ::clarifai::api::Search& search(const SingleSearchResponse* msg);
};

const ::clarifai::api::status::Status&
SingleSearchResponse::_Internal::status(const SingleSearchResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Search&
SingleSearchResponse::_Internal::search(const SingleSearchResponse* msg) {
  return *msg->search_;
}
void SingleSearchResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleSearchResponse::clear_search() {
  if (GetArenaNoVirtual() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
}
SingleSearchResponse::SingleSearchResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleSearchResponse)
}
SingleSearchResponse::SingleSearchResponse(const SingleSearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_search()) {
    search_ = new ::clarifai::api::Search(*from.search_);
  } else {
    search_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleSearchResponse)
}

void SingleSearchResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&search_) -
      reinterpret_cast<char*>(&status_)) + sizeof(search_));
}

SingleSearchResponse::~SingleSearchResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleSearchResponse)
  SharedDtor();
}

void SingleSearchResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete search_;
}

void SingleSearchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleSearchResponse& SingleSearchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleSearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleSearchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search search = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleSearchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleSearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Search search = 5;
  if (this->has_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::search(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleSearchResponse)
  return target;
}

size_t SingleSearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleSearchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Search search = 5;
  if (this->has_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleSearchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleSearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleSearchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleSearchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleSearchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleSearchResponse)
    MergeFrom(*source);
  }
}

void SingleSearchResponse::MergeFrom(const SingleSearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleSearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_search()) {
    _internal_mutable_search()->::clarifai::api::Search::MergeFrom(from._internal_search());
  }
}

void SingleSearchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleSearchResponse::CopyFrom(const SingleSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleSearchResponse::IsInitialized() const {
  return true;
}

void SingleSearchResponse::InternalSwap(SingleSearchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(search_, other->search_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleSearchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiSearchResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiSearchResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_MultiSearchResponse_default_instance_._instance.get_mutable()->query_ = const_cast< ::clarifai::api::Query*>(
      ::clarifai::api::Query::internal_default_instance());
}
class MultiSearchResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiSearchResponse* msg);
  static const ::clarifai::api::Query& query(const MultiSearchResponse* msg);
};

const ::clarifai::api::status::Status&
MultiSearchResponse::_Internal::status(const MultiSearchResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Query&
MultiSearchResponse::_Internal::query(const MultiSearchResponse* msg) {
  return *msg->query_;
}
void MultiSearchResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiSearchResponse::clear_hits() {
  hits_.Clear();
}
void MultiSearchResponse::clear_query() {
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
void MultiSearchResponse::clear_searches() {
  searches_.Clear();
}
MultiSearchResponse::MultiSearchResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiSearchResponse)
}
MultiSearchResponse::MultiSearchResponse(const MultiSearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      hits_(from.hits_),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new ::clarifai::api::Query(*from.query_);
  } else {
    query_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiSearchResponse)
}

void MultiSearchResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_) -
      reinterpret_cast<char*>(&status_)) + sizeof(query_));
}

MultiSearchResponse::~MultiSearchResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiSearchResponse)
  SharedDtor();
}

void MultiSearchResponse::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete query_;
}

void MultiSearchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiSearchResponse& MultiSearchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiSearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_.Clear();
  searches_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiSearchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiSearchResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Query query = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiSearchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiSearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiSearchResponse.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_hits(i), target, stream);
  }

  // .clarifai.api.Query query = 4;
  if (this->has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::query(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_searches(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiSearchResponse)
  return target;
}

size_t MultiSearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiSearchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_hits_size();
  for (const auto& msg : this->hits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Search searches = 5;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Query query = 4;
  if (this->has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiSearchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiSearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiSearchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiSearchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiSearchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiSearchResponse)
    MergeFrom(*source);
  }
}

void MultiSearchResponse::MergeFrom(const MultiSearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiSearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hits_.MergeFrom(from.hits_);
  searches_.MergeFrom(from.searches_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_query()) {
    _internal_mutable_query()->::clarifai::api::Query::MergeFrom(from._internal_query());
  }
}

void MultiSearchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiSearchResponse::CopyFrom(const MultiSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiSearchResponse::IsInitialized() const {
  return true;
}

void MultiSearchResponse::InternalSwap(MultiSearchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hits_.InternalSwap(&other->hits_);
  searches_.InternalSwap(&other->searches_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiSearchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostAnnotationSearchMetricsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostAnnotationSearchMetricsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostAnnotationSearchMetricsRequest_default_instance_._instance.get_mutable()->ground_truth_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
  ::clarifai::api::_PostAnnotationSearchMetricsRequest_default_instance_._instance.get_mutable()->search_to_eval_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
  ::clarifai::api::_PostAnnotationSearchMetricsRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::clarifai::api::Data*>(
      ::clarifai::api::Data::internal_default_instance());
}
class PostAnnotationSearchMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAnnotationSearchMetricsRequest* msg);
  static const ::clarifai::api::Search& ground_truth(const PostAnnotationSearchMetricsRequest* msg);
  static const ::clarifai::api::Search& search_to_eval(const PostAnnotationSearchMetricsRequest* msg);
  static const ::clarifai::api::Data& data(const PostAnnotationSearchMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAnnotationSearchMetricsRequest::_Internal::user_app_id(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Search&
PostAnnotationSearchMetricsRequest::_Internal::ground_truth(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->ground_truth_;
}
const ::clarifai::api::Search&
PostAnnotationSearchMetricsRequest::_Internal::search_to_eval(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->search_to_eval_;
}
const ::clarifai::api::Data&
PostAnnotationSearchMetricsRequest::_Internal::data(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->data_;
}
void PostAnnotationSearchMetricsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAnnotationSearchMetricsRequest::clear_ground_truth() {
  if (GetArenaNoVirtual() == nullptr && ground_truth_ != nullptr) {
    delete ground_truth_;
  }
  ground_truth_ = nullptr;
}
void PostAnnotationSearchMetricsRequest::clear_search_to_eval() {
  if (GetArenaNoVirtual() == nullptr && search_to_eval_ != nullptr) {
    delete search_to_eval_;
  }
  search_to_eval_ = nullptr;
}
void PostAnnotationSearchMetricsRequest::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
PostAnnotationSearchMetricsRequest::PostAnnotationSearchMetricsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostAnnotationSearchMetricsRequest)
}
PostAnnotationSearchMetricsRequest::PostAnnotationSearchMetricsRequest(const PostAnnotationSearchMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_ground_truth()) {
    ground_truth_ = new ::clarifai::api::Search(*from.ground_truth_);
  } else {
    ground_truth_ = nullptr;
  }
  if (from._internal_has_search_to_eval()) {
    search_to_eval_ = new ::clarifai::api::Search(*from.search_to_eval_);
  } else {
    search_to_eval_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  evaluation_type_ = from.evaluation_type_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAnnotationSearchMetricsRequest)
}

void PostAnnotationSearchMetricsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&evaluation_type_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(evaluation_type_));
}

PostAnnotationSearchMetricsRequest::~PostAnnotationSearchMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAnnotationSearchMetricsRequest)
  SharedDtor();
}

void PostAnnotationSearchMetricsRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete ground_truth_;
  if (this != internal_default_instance()) delete search_to_eval_;
  if (this != internal_default_instance()) delete data_;
}

void PostAnnotationSearchMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostAnnotationSearchMetricsRequest& PostAnnotationSearchMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostAnnotationSearchMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ground_truth_ != nullptr) {
    delete ground_truth_;
  }
  ground_truth_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && search_to_eval_ != nullptr) {
    delete search_to_eval_;
  }
  search_to_eval_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  evaluation_type_ = 0;
  _internal_metadata_.Clear();
}

const char* PostAnnotationSearchMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostAnnotationSearchMetricsRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search ground_truth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_truth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search search_to_eval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_to_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.EvaluationType evaluation_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_evaluation_type(static_cast<::clarifai::api::EvaluationType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostAnnotationSearchMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostAnnotationSearchMetricsRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // .clarifai.api.Search ground_truth = 3;
  if (this->has_ground_truth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ground_truth(this), target, stream);
  }

  // .clarifai.api.Search search_to_eval = 4;
  if (this->has_search_to_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::search_to_eval(this), target, stream);
  }

  // .clarifai.api.Data data = 5;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::data(this), target, stream);
  }

  // .clarifai.api.EvaluationType evaluation_type = 6;
  if (this->evaluation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_evaluation_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAnnotationSearchMetricsRequest)
  return target;
}

size_t PostAnnotationSearchMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Search ground_truth = 3;
  if (this->has_ground_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ground_truth_);
  }

  // .clarifai.api.Search search_to_eval = 4;
  if (this->has_search_to_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_to_eval_);
  }

  // .clarifai.api.Data data = 5;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .clarifai.api.EvaluationType evaluation_type = 6;
  if (this->evaluation_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_evaluation_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostAnnotationSearchMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostAnnotationSearchMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostAnnotationSearchMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostAnnotationSearchMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostAnnotationSearchMetricsRequest)
    MergeFrom(*source);
  }
}

void PostAnnotationSearchMetricsRequest::MergeFrom(const PostAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_ground_truth()) {
    _internal_mutable_ground_truth()->::clarifai::api::Search::MergeFrom(from._internal_ground_truth());
  }
  if (from.has_search_to_eval()) {
    _internal_mutable_search_to_eval()->::clarifai::api::Search::MergeFrom(from._internal_search_to_eval());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (from.evaluation_type() != 0) {
    _internal_set_evaluation_type(from._internal_evaluation_type());
  }
}

void PostAnnotationSearchMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostAnnotationSearchMetricsRequest::CopyFrom(const PostAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAnnotationSearchMetricsRequest::IsInitialized() const {
  return true;
}

void PostAnnotationSearchMetricsRequest::InternalSwap(PostAnnotationSearchMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(ground_truth_, other->ground_truth_);
  swap(search_to_eval_, other->search_to_eval_);
  swap(data_, other->data_);
  swap(evaluation_type_, other->evaluation_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAnnotationSearchMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAnnotationSearchMetricsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetAnnotationSearchMetricsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetAnnotationSearchMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAnnotationSearchMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAnnotationSearchMetricsRequest::_Internal::user_app_id(const GetAnnotationSearchMetricsRequest* msg) {
  return *msg->user_app_id_;
}
void GetAnnotationSearchMetricsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetAnnotationSearchMetricsRequest::GetAnnotationSearchMetricsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetAnnotationSearchMetricsRequest)
}
GetAnnotationSearchMetricsRequest::GetAnnotationSearchMetricsRequest(const GetAnnotationSearchMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAnnotationSearchMetricsRequest)
}

void GetAnnotationSearchMetricsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetAnnotationSearchMetricsRequest::~GetAnnotationSearchMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAnnotationSearchMetricsRequest)
  SharedDtor();
}

void GetAnnotationSearchMetricsRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetAnnotationSearchMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAnnotationSearchMetricsRequest& GetAnnotationSearchMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetAnnotationSearchMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetAnnotationSearchMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetAnnotationSearchMetricsRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAnnotationSearchMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAnnotationSearchMetricsRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAnnotationSearchMetricsRequest)
  return target;
}

size_t GetAnnotationSearchMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAnnotationSearchMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAnnotationSearchMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAnnotationSearchMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetAnnotationSearchMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetAnnotationSearchMetricsRequest)
    MergeFrom(*source);
  }
}

void GetAnnotationSearchMetricsRequest::MergeFrom(const GetAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetAnnotationSearchMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAnnotationSearchMetricsRequest::CopyFrom(const GetAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAnnotationSearchMetricsRequest::IsInitialized() const {
  return true;
}

void GetAnnotationSearchMetricsRequest::InternalSwap(GetAnnotationSearchMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAnnotationSearchMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAnnotationSearchMetricsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListAnnotationSearchMetricsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListAnnotationSearchMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAnnotationSearchMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAnnotationSearchMetricsRequest::_Internal::user_app_id(const ListAnnotationSearchMetricsRequest* msg) {
  return *msg->user_app_id_;
}
void ListAnnotationSearchMetricsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListAnnotationSearchMetricsRequest::ListAnnotationSearchMetricsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListAnnotationSearchMetricsRequest)
}
ListAnnotationSearchMetricsRequest::ListAnnotationSearchMetricsRequest(const ListAnnotationSearchMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAnnotationSearchMetricsRequest)
}

void ListAnnotationSearchMetricsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

ListAnnotationSearchMetricsRequest::~ListAnnotationSearchMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAnnotationSearchMetricsRequest)
  SharedDtor();
}

void ListAnnotationSearchMetricsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAnnotationSearchMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAnnotationSearchMetricsRequest& ListAnnotationSearchMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListAnnotationSearchMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListAnnotationSearchMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAnnotationSearchMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAnnotationSearchMetricsRequest)
  return target;
}

size_t ListAnnotationSearchMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAnnotationSearchMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAnnotationSearchMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAnnotationSearchMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListAnnotationSearchMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListAnnotationSearchMetricsRequest)
    MergeFrom(*source);
  }
}

void ListAnnotationSearchMetricsRequest::MergeFrom(const ListAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void ListAnnotationSearchMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAnnotationSearchMetricsRequest::CopyFrom(const ListAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAnnotationSearchMetricsRequest::IsInitialized() const {
  return true;
}

void ListAnnotationSearchMetricsRequest::InternalSwap(ListAnnotationSearchMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAnnotationSearchMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiAnnotationSearchMetricsResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiAnnotationSearchMetricsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiAnnotationSearchMetricsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAnnotationSearchMetricsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAnnotationSearchMetricsResponse::_Internal::status(const MultiAnnotationSearchMetricsResponse* msg) {
  return *msg->status_;
}
void MultiAnnotationSearchMetricsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiAnnotationSearchMetricsResponse::clear_annotation_search_metrics() {
  annotation_search_metrics_.Clear();
}
MultiAnnotationSearchMetricsResponse::MultiAnnotationSearchMetricsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiAnnotationSearchMetricsResponse)
}
MultiAnnotationSearchMetricsResponse::MultiAnnotationSearchMetricsResponse(const MultiAnnotationSearchMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      annotation_search_metrics_(from.annotation_search_metrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAnnotationSearchMetricsResponse)
}

void MultiAnnotationSearchMetricsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiAnnotationSearchMetricsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiAnnotationSearchMetricsResponse::~MultiAnnotationSearchMetricsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAnnotationSearchMetricsResponse)
  SharedDtor();
}

void MultiAnnotationSearchMetricsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiAnnotationSearchMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiAnnotationSearchMetricsResponse& MultiAnnotationSearchMetricsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiAnnotationSearchMetricsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiAnnotationSearchMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_search_metrics_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiAnnotationSearchMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_search_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAnnotationSearchMetricsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_search_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotation_search_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAnnotationSearchMetricsResponse)
  return target;
}

size_t MultiAnnotationSearchMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
  total_size += 1UL * this->_internal_annotation_search_metrics_size();
  for (const auto& msg : this->annotation_search_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiAnnotationSearchMetricsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiAnnotationSearchMetricsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiAnnotationSearchMetricsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiAnnotationSearchMetricsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiAnnotationSearchMetricsResponse)
    MergeFrom(*source);
  }
}

void MultiAnnotationSearchMetricsResponse::MergeFrom(const MultiAnnotationSearchMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_search_metrics_.MergeFrom(from.annotation_search_metrics_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiAnnotationSearchMetricsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiAnnotationSearchMetricsResponse::CopyFrom(const MultiAnnotationSearchMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAnnotationSearchMetricsResponse::IsInitialized() const {
  return true;
}

void MultiAnnotationSearchMetricsResponse::InternalSwap(MultiAnnotationSearchMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  annotation_search_metrics_.InternalSwap(&other->annotation_search_metrics_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAnnotationSearchMetricsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostValidatePasswordRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostValidatePasswordRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostValidatePasswordRequest_default_instance_._instance.get_mutable()->password_ = const_cast< ::clarifai::api::Password*>(
      ::clarifai::api::Password::internal_default_instance());
}
class PostValidatePasswordRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostValidatePasswordRequest* msg);
  static const ::clarifai::api::Password& password(const PostValidatePasswordRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostValidatePasswordRequest::_Internal::user_app_id(const PostValidatePasswordRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Password&
PostValidatePasswordRequest::_Internal::password(const PostValidatePasswordRequest* msg) {
  return *msg->password_;
}
void PostValidatePasswordRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostValidatePasswordRequest::clear_password() {
  if (GetArenaNoVirtual() == nullptr && password_ != nullptr) {
    delete password_;
  }
  password_ = nullptr;
}
PostValidatePasswordRequest::PostValidatePasswordRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostValidatePasswordRequest)
}
PostValidatePasswordRequest::PostValidatePasswordRequest(const PostValidatePasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_password()) {
    password_ = new ::clarifai::api::Password(*from.password_);
  } else {
    password_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostValidatePasswordRequest)
}

void PostValidatePasswordRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostValidatePasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&password_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(password_));
}

PostValidatePasswordRequest::~PostValidatePasswordRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostValidatePasswordRequest)
  SharedDtor();
}

void PostValidatePasswordRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete password_;
}

void PostValidatePasswordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostValidatePasswordRequest& PostValidatePasswordRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostValidatePasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostValidatePasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostValidatePasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && password_ != nullptr) {
    delete password_;
  }
  password_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostValidatePasswordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Password password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_password(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostValidatePasswordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostValidatePasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.Password password = 2;
  if (this->has_password()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::password(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostValidatePasswordRequest)
  return target;
}

size_t PostValidatePasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostValidatePasswordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Password password = 2;
  if (this->has_password()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *password_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostValidatePasswordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostValidatePasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostValidatePasswordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostValidatePasswordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostValidatePasswordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostValidatePasswordRequest)
    MergeFrom(*source);
  }
}

void PostValidatePasswordRequest::MergeFrom(const PostValidatePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostValidatePasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_password()) {
    _internal_mutable_password()->::clarifai::api::Password::MergeFrom(from._internal_password());
  }
}

void PostValidatePasswordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostValidatePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostValidatePasswordRequest::CopyFrom(const PostValidatePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostValidatePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostValidatePasswordRequest::IsInitialized() const {
  return true;
}

void PostValidatePasswordRequest::InternalSwap(PostValidatePasswordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(password_, other->password_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostValidatePasswordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SinglePasswordValidationResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SinglePasswordValidationResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SinglePasswordValidationResponse_default_instance_._instance.get_mutable()->password_violations_ = const_cast< ::clarifai::api::PasswordViolations*>(
      ::clarifai::api::PasswordViolations::internal_default_instance());
}
class SinglePasswordValidationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SinglePasswordValidationResponse* msg);
  static const ::clarifai::api::PasswordViolations& password_violations(const SinglePasswordValidationResponse* msg);
};

const ::clarifai::api::status::Status&
SinglePasswordValidationResponse::_Internal::status(const SinglePasswordValidationResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::PasswordViolations&
SinglePasswordValidationResponse::_Internal::password_violations(const SinglePasswordValidationResponse* msg) {
  return *msg->password_violations_;
}
void SinglePasswordValidationResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SinglePasswordValidationResponse::clear_password_violations() {
  if (GetArenaNoVirtual() == nullptr && password_violations_ != nullptr) {
    delete password_violations_;
  }
  password_violations_ = nullptr;
}
SinglePasswordValidationResponse::SinglePasswordValidationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SinglePasswordValidationResponse)
}
SinglePasswordValidationResponse::SinglePasswordValidationResponse(const SinglePasswordValidationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_password_violations()) {
    password_violations_ = new ::clarifai::api::PasswordViolations(*from.password_violations_);
  } else {
    password_violations_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SinglePasswordValidationResponse)
}

void SinglePasswordValidationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SinglePasswordValidationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&password_violations_) -
      reinterpret_cast<char*>(&status_)) + sizeof(password_violations_));
}

SinglePasswordValidationResponse::~SinglePasswordValidationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SinglePasswordValidationResponse)
  SharedDtor();
}

void SinglePasswordValidationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete password_violations_;
}

void SinglePasswordValidationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SinglePasswordValidationResponse& SinglePasswordValidationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SinglePasswordValidationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SinglePasswordValidationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SinglePasswordValidationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && password_violations_ != nullptr) {
    delete password_violations_;
  }
  password_violations_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SinglePasswordValidationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.PasswordViolations password_violations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_password_violations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SinglePasswordValidationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SinglePasswordValidationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.PasswordViolations password_violations = 2;
  if (this->has_password_violations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::password_violations(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SinglePasswordValidationResponse)
  return target;
}

size_t SinglePasswordValidationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SinglePasswordValidationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.PasswordViolations password_violations = 2;
  if (this->has_password_violations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *password_violations_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SinglePasswordValidationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SinglePasswordValidationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SinglePasswordValidationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SinglePasswordValidationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SinglePasswordValidationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SinglePasswordValidationResponse)
    MergeFrom(*source);
  }
}

void SinglePasswordValidationResponse::MergeFrom(const SinglePasswordValidationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SinglePasswordValidationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_password_violations()) {
    _internal_mutable_password_violations()->::clarifai::api::PasswordViolations::MergeFrom(from._internal_password_violations());
  }
}

void SinglePasswordValidationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SinglePasswordValidationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SinglePasswordValidationResponse::CopyFrom(const SinglePasswordValidationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SinglePasswordValidationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinglePasswordValidationResponse::IsInitialized() const {
  return true;
}

void SinglePasswordValidationResponse::InternalSwap(SinglePasswordValidationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(password_violations_, other->password_violations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SinglePasswordValidationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetWorkflowRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetWorkflowRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetWorkflowRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetWorkflowRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetWorkflowRequest::_Internal::user_app_id(const GetWorkflowRequest* msg) {
  return *msg->user_app_id_;
}
void GetWorkflowRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetWorkflowRequest::GetWorkflowRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetWorkflowRequest)
}
GetWorkflowRequest::GetWorkflowRequest(const GetWorkflowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  favor_clarifai_workflows_ = from.favor_clarifai_workflows_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetWorkflowRequest)
}

void GetWorkflowRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&favor_clarifai_workflows_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(favor_clarifai_workflows_));
}

GetWorkflowRequest::~GetWorkflowRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetWorkflowRequest)
  SharedDtor();
}

void GetWorkflowRequest::SharedDtor() {
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetWorkflowRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetWorkflowRequest& GetWorkflowRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetWorkflowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetWorkflowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  favor_clarifai_workflows_ = false;
  _internal_metadata_.Clear();
}

const char* GetWorkflowRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetWorkflowRequest.workflow_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool favor_clarifai_workflows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          favor_clarifai_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetWorkflowRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetWorkflowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetWorkflowRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // bool favor_clarifai_workflows = 3;
  if (this->favor_clarifai_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_favor_clarifai_workflows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetWorkflowRequest)
  return target;
}

size_t GetWorkflowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetWorkflowRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool favor_clarifai_workflows = 3;
  if (this->favor_clarifai_workflows() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWorkflowRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetWorkflowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWorkflowRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetWorkflowRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetWorkflowRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetWorkflowRequest)
    MergeFrom(*source);
  }
}

void GetWorkflowRequest::MergeFrom(const GetWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetWorkflowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.workflow_id().size() > 0) {

    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.favor_clarifai_workflows() != 0) {
    _internal_set_favor_clarifai_workflows(from._internal_favor_clarifai_workflows());
  }
}

void GetWorkflowRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetWorkflowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWorkflowRequest::CopyFrom(const GetWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetWorkflowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkflowRequest::IsInitialized() const {
  return true;
}

void GetWorkflowRequest::InternalSwap(GetWorkflowRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  workflow_id_.Swap(&other->workflow_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(favor_clarifai_workflows_, other->favor_clarifai_workflows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkflowRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListWorkflowsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListWorkflowsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListWorkflowsRequest::_Internal::user_app_id(const ListWorkflowsRequest* msg) {
  return *msg->user_app_id_;
}
void ListWorkflowsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListWorkflowsRequest::ListWorkflowsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListWorkflowsRequest)
}
ListWorkflowsRequest::ListWorkflowsRequest(const ListWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListWorkflowsRequest)
}

void ListWorkflowsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListWorkflowsRequest::~ListWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListWorkflowsRequest)
  SharedDtor();
}

void ListWorkflowsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListWorkflowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListWorkflowsRequest& ListWorkflowsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListWorkflowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListWorkflowsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListWorkflowsRequest)
  return target;
}

size_t ListWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListWorkflowsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListWorkflowsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListWorkflowsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListWorkflowsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListWorkflowsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListWorkflowsRequest)
    MergeFrom(*source);
  }
}

void ListWorkflowsRequest::MergeFrom(const ListWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListWorkflowsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListWorkflowsRequest::CopyFrom(const ListWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWorkflowsRequest::IsInitialized() const {
  return true;
}

void ListWorkflowsRequest::InternalSwap(ListWorkflowsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListWorkflowsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostWorkflowsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostWorkflowsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowsRequest::_Internal::user_app_id(const PostWorkflowsRequest* msg) {
  return *msg->user_app_id_;
}
void PostWorkflowsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostWorkflowsRequest::clear_workflows() {
  workflows_.Clear();
}
PostWorkflowsRequest::PostWorkflowsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostWorkflowsRequest)
}
PostWorkflowsRequest::PostWorkflowsRequest(const PostWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      workflows_(from.workflows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowsRequest)
}

void PostWorkflowsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostWorkflowsRequest::~PostWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowsRequest)
  SharedDtor();
}

void PostWorkflowsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostWorkflowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostWorkflowsRequest& PostWorkflowsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflows_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostWorkflowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Workflow workflows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostWorkflowsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Workflow workflows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workflows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_workflows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowsRequest)
  return target;
}

size_t PostWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Workflow workflows = 2;
  total_size += 1UL * this->_internal_workflows_size();
  for (const auto& msg : this->workflows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostWorkflowsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostWorkflowsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostWorkflowsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostWorkflowsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostWorkflowsRequest)
    MergeFrom(*source);
  }
}

void PostWorkflowsRequest::MergeFrom(const PostWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workflows_.MergeFrom(from.workflows_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostWorkflowsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostWorkflowsRequest::CopyFrom(const PostWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowsRequest::IsInitialized() const {
  return true;
}

void PostWorkflowsRequest::InternalSwap(PostWorkflowsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  workflows_.InternalSwap(&other->workflows_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchWorkflowsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchWorkflowsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchWorkflowsRequest::_Internal::user_app_id(const PatchWorkflowsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchWorkflowsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchWorkflowsRequest::clear_workflows() {
  workflows_.Clear();
}
PatchWorkflowsRequest::PatchWorkflowsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchWorkflowsRequest)
}
PatchWorkflowsRequest::PatchWorkflowsRequest(const PatchWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      workflows_(from.workflows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchWorkflowsRequest)
}

void PatchWorkflowsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchWorkflowsRequest::~PatchWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchWorkflowsRequest)
  SharedDtor();
}

void PatchWorkflowsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchWorkflowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchWorkflowsRequest& PatchWorkflowsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflows_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchWorkflowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Workflow workflows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchWorkflowsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchWorkflowsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Workflow workflows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workflows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_workflows(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchWorkflowsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchWorkflowsRequest)
  return target;
}

size_t PatchWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchWorkflowsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Workflow workflows = 2;
  total_size += 1UL * this->_internal_workflows_size();
  for (const auto& msg : this->workflows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchWorkflowsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchWorkflowsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchWorkflowsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchWorkflowsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchWorkflowsRequest)
    MergeFrom(*source);
  }
}

void PatchWorkflowsRequest::MergeFrom(const PatchWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workflows_.MergeFrom(from.workflows_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchWorkflowsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchWorkflowsRequest::CopyFrom(const PatchWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchWorkflowsRequest::IsInitialized() const {
  return true;
}

void PatchWorkflowsRequest::InternalSwap(PatchWorkflowsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  workflows_.InternalSwap(&other->workflows_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchWorkflowsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteWorkflowRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteWorkflowRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteWorkflowRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteWorkflowRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteWorkflowRequest::_Internal::user_app_id(const DeleteWorkflowRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteWorkflowRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteWorkflowRequest::DeleteWorkflowRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteWorkflowRequest)
}
DeleteWorkflowRequest::DeleteWorkflowRequest(const DeleteWorkflowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteWorkflowRequest)
}

void DeleteWorkflowRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteWorkflowRequest::~DeleteWorkflowRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteWorkflowRequest)
  SharedDtor();
}

void DeleteWorkflowRequest::SharedDtor() {
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteWorkflowRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteWorkflowRequest& DeleteWorkflowRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteWorkflowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteWorkflowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteWorkflowRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteWorkflowRequest.workflow_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteWorkflowRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteWorkflowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteWorkflowRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteWorkflowRequest)
  return target;
}

size_t DeleteWorkflowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteWorkflowRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteWorkflowRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteWorkflowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteWorkflowRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteWorkflowRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteWorkflowRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteWorkflowRequest)
    MergeFrom(*source);
  }
}

void DeleteWorkflowRequest::MergeFrom(const DeleteWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteWorkflowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.workflow_id().size() > 0) {

    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteWorkflowRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteWorkflowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteWorkflowRequest::CopyFrom(const DeleteWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteWorkflowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkflowRequest::IsInitialized() const {
  return true;
}

void DeleteWorkflowRequest::InternalSwap(DeleteWorkflowRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  workflow_id_.Swap(&other->workflow_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteWorkflowRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteWorkflowsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteWorkflowsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteWorkflowsRequest::_Internal::user_app_id(const DeleteWorkflowsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteWorkflowsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteWorkflowsRequest::DeleteWorkflowsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteWorkflowsRequest)
}
DeleteWorkflowsRequest::DeleteWorkflowsRequest(const DeleteWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  delete_all_ = from.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteWorkflowsRequest)
}

void DeleteWorkflowsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_all_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(delete_all_));
}

DeleteWorkflowsRequest::~DeleteWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteWorkflowsRequest)
  SharedDtor();
}

void DeleteWorkflowsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteWorkflowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteWorkflowsRequest& DeleteWorkflowsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  delete_all_ = false;
  _internal_metadata_.Clear();
}

const char* DeleteWorkflowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteWorkflowsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool delete_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteWorkflowsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteWorkflowsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteWorkflowsRequest)
  return target;
}

size_t DeleteWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteWorkflowsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteWorkflowsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteWorkflowsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteWorkflowsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteWorkflowsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteWorkflowsRequest)
    MergeFrom(*source);
  }
}

void DeleteWorkflowsRequest::MergeFrom(const DeleteWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.delete_all() != 0) {
    _internal_set_delete_all(from._internal_delete_all());
  }
}

void DeleteWorkflowsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteWorkflowsRequest::CopyFrom(const DeleteWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkflowsRequest::IsInitialized() const {
  return true;
}

void DeleteWorkflowsRequest::InternalSwap(DeleteWorkflowsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(delete_all_, other->delete_all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteWorkflowsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleWorkflowResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleWorkflowResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleWorkflowResponse_default_instance_._instance.get_mutable()->workflow_ = const_cast< ::clarifai::api::Workflow*>(
      ::clarifai::api::Workflow::internal_default_instance());
}
class SingleWorkflowResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleWorkflowResponse* msg);
  static const ::clarifai::api::Workflow& workflow(const SingleWorkflowResponse* msg);
};

const ::clarifai::api::status::Status&
SingleWorkflowResponse::_Internal::status(const SingleWorkflowResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Workflow&
SingleWorkflowResponse::_Internal::workflow(const SingleWorkflowResponse* msg) {
  return *msg->workflow_;
}
void SingleWorkflowResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleWorkflowResponse::clear_workflow() {
  if (GetArenaNoVirtual() == nullptr && workflow_ != nullptr) {
    delete workflow_;
  }
  workflow_ = nullptr;
}
SingleWorkflowResponse::SingleWorkflowResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleWorkflowResponse)
}
SingleWorkflowResponse::SingleWorkflowResponse(const SingleWorkflowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_workflow()) {
    workflow_ = new ::clarifai::api::Workflow(*from.workflow_);
  } else {
    workflow_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleWorkflowResponse)
}

void SingleWorkflowResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workflow_) -
      reinterpret_cast<char*>(&status_)) + sizeof(workflow_));
}

SingleWorkflowResponse::~SingleWorkflowResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleWorkflowResponse)
  SharedDtor();
}

void SingleWorkflowResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete workflow_;
}

void SingleWorkflowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleWorkflowResponse& SingleWorkflowResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleWorkflowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleWorkflowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && workflow_ != nullptr) {
    delete workflow_;
  }
  workflow_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleWorkflowResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Workflow workflow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleWorkflowResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleWorkflowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->has_workflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::workflow(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleWorkflowResponse)
  return target;
}

size_t SingleWorkflowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleWorkflowResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->has_workflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *workflow_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleWorkflowResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleWorkflowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleWorkflowResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleWorkflowResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleWorkflowResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleWorkflowResponse)
    MergeFrom(*source);
  }
}

void SingleWorkflowResponse::MergeFrom(const SingleWorkflowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleWorkflowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_workflow()) {
    _internal_mutable_workflow()->::clarifai::api::Workflow::MergeFrom(from._internal_workflow());
  }
}

void SingleWorkflowResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleWorkflowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleWorkflowResponse::CopyFrom(const SingleWorkflowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleWorkflowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleWorkflowResponse::IsInitialized() const {
  return true;
}

void SingleWorkflowResponse::InternalSwap(SingleWorkflowResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(workflow_, other->workflow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleWorkflowResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiWorkflowResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiWorkflowResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiWorkflowResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiWorkflowResponse* msg);
};

const ::clarifai::api::status::Status&
MultiWorkflowResponse::_Internal::status(const MultiWorkflowResponse* msg) {
  return *msg->status_;
}
void MultiWorkflowResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiWorkflowResponse::clear_workflows() {
  workflows_.Clear();
}
MultiWorkflowResponse::MultiWorkflowResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiWorkflowResponse)
}
MultiWorkflowResponse::MultiWorkflowResponse(const MultiWorkflowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      workflows_(from.workflows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiWorkflowResponse)
}

void MultiWorkflowResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiWorkflowResponse::~MultiWorkflowResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiWorkflowResponse)
  SharedDtor();
}

void MultiWorkflowResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiWorkflowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiWorkflowResponse& MultiWorkflowResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiWorkflowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiWorkflowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflows_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiWorkflowResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiWorkflowResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiWorkflowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workflows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_workflows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiWorkflowResponse)
  return target;
}

size_t MultiWorkflowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiWorkflowResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_workflows_size();
  for (const auto& msg : this->workflows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiWorkflowResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiWorkflowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiWorkflowResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiWorkflowResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiWorkflowResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiWorkflowResponse)
    MergeFrom(*source);
  }
}

void MultiWorkflowResponse::MergeFrom(const MultiWorkflowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiWorkflowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workflows_.MergeFrom(from.workflows_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiWorkflowResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiWorkflowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiWorkflowResponse::CopyFrom(const MultiWorkflowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiWorkflowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiWorkflowResponse::IsInitialized() const {
  return true;
}

void MultiWorkflowResponse::InternalSwap(MultiWorkflowResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  workflows_.InternalSwap(&other->workflows_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiWorkflowResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostWorkflowResultsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostWorkflowResultsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostWorkflowResultsRequest_default_instance_._instance.get_mutable()->output_config_ = const_cast< ::clarifai::api::OutputConfig*>(
      ::clarifai::api::OutputConfig::internal_default_instance());
}
class PostWorkflowResultsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowResultsRequest* msg);
  static const ::clarifai::api::OutputConfig& output_config(const PostWorkflowResultsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowResultsRequest::_Internal::user_app_id(const PostWorkflowResultsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::OutputConfig&
PostWorkflowResultsRequest::_Internal::output_config(const PostWorkflowResultsRequest* msg) {
  return *msg->output_config_;
}
void PostWorkflowResultsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostWorkflowResultsRequest::clear_inputs() {
  inputs_.Clear();
}
void PostWorkflowResultsRequest::clear_output_config() {
  if (GetArenaNoVirtual() == nullptr && output_config_ != nullptr) {
    delete output_config_;
  }
  output_config_ = nullptr;
}
PostWorkflowResultsRequest::PostWorkflowResultsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostWorkflowResultsRequest)
}
PostWorkflowResultsRequest::PostWorkflowResultsRequest(const PostWorkflowResultsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_output_config()) {
    output_config_ = new ::clarifai::api::OutputConfig(*from.output_config_);
  } else {
    output_config_ = nullptr;
  }
  favor_clarifai_workflows_ = from.favor_clarifai_workflows_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsRequest)
}

void PostWorkflowResultsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostWorkflowResultsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&favor_clarifai_workflows_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(favor_clarifai_workflows_));
}

PostWorkflowResultsRequest::~PostWorkflowResultsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsRequest)
  SharedDtor();
}

void PostWorkflowResultsRequest::SharedDtor() {
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete output_config_;
}

void PostWorkflowResultsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostWorkflowResultsRequest& PostWorkflowResultsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostWorkflowResultsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostWorkflowResultsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_config_ != nullptr) {
    delete output_config_;
  }
  output_config_ = nullptr;
  favor_clarifai_workflows_ = false;
  _internal_metadata_.Clear();
}

const char* PostWorkflowResultsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsRequest.workflow_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.OutputConfig output_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool favor_clarifai_workflows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          favor_clarifai_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostWorkflowResultsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // repeated .clarifai.api.Input inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_inputs(i), target, stream);
  }

  // .clarifai.api.OutputConfig output_config = 4;
  if (this->has_output_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::output_config(this), target, stream);
  }

  // bool favor_clarifai_workflows = 5;
  if (this->favor_clarifai_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_favor_clarifai_workflows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsRequest)
  return target;
}

size_t PostWorkflowResultsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 3;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.OutputConfig output_config = 4;
  if (this->has_output_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_config_);
  }

  // bool favor_clarifai_workflows = 5;
  if (this->favor_clarifai_workflows() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostWorkflowResultsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostWorkflowResultsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostWorkflowResultsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostWorkflowResultsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostWorkflowResultsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostWorkflowResultsRequest)
    MergeFrom(*source);
  }
}

void PostWorkflowResultsRequest::MergeFrom(const PostWorkflowResultsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.workflow_id().size() > 0) {

    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_output_config()) {
    _internal_mutable_output_config()->::clarifai::api::OutputConfig::MergeFrom(from._internal_output_config());
  }
  if (from.favor_clarifai_workflows() != 0) {
    _internal_set_favor_clarifai_workflows(from._internal_favor_clarifai_workflows());
  }
}

void PostWorkflowResultsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostWorkflowResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostWorkflowResultsRequest::CopyFrom(const PostWorkflowResultsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsRequest::IsInitialized() const {
  return true;
}

void PostWorkflowResultsRequest::InternalSwap(PostWorkflowResultsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  workflow_id_.Swap(&other->workflow_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(output_config_, other->output_config_);
  swap(favor_clarifai_workflows_, other->favor_clarifai_workflows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostWorkflowResultsResponse::InitAsDefaultInstance() {
  ::clarifai::api::_PostWorkflowResultsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_PostWorkflowResultsResponse_default_instance_._instance.get_mutable()->workflow_ = const_cast< ::clarifai::api::Workflow*>(
      ::clarifai::api::Workflow::internal_default_instance());
}
class PostWorkflowResultsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const PostWorkflowResultsResponse* msg);
  static const ::clarifai::api::Workflow& workflow(const PostWorkflowResultsResponse* msg);
};

const ::clarifai::api::status::Status&
PostWorkflowResultsResponse::_Internal::status(const PostWorkflowResultsResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Workflow&
PostWorkflowResultsResponse::_Internal::workflow(const PostWorkflowResultsResponse* msg) {
  return *msg->workflow_;
}
void PostWorkflowResultsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void PostWorkflowResultsResponse::clear_workflow() {
  if (GetArenaNoVirtual() == nullptr && workflow_ != nullptr) {
    delete workflow_;
  }
  workflow_ = nullptr;
}
void PostWorkflowResultsResponse::clear_results() {
  results_.Clear();
}
PostWorkflowResultsResponse::PostWorkflowResultsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostWorkflowResultsResponse)
}
PostWorkflowResultsResponse::PostWorkflowResultsResponse(const PostWorkflowResultsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_workflow()) {
    workflow_ = new ::clarifai::api::Workflow(*from.workflow_);
  } else {
    workflow_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsResponse)
}

void PostWorkflowResultsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostWorkflowResultsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workflow_) -
      reinterpret_cast<char*>(&status_)) + sizeof(workflow_));
}

PostWorkflowResultsResponse::~PostWorkflowResultsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsResponse)
  SharedDtor();
}

void PostWorkflowResultsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete workflow_;
}

void PostWorkflowResultsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostWorkflowResultsResponse& PostWorkflowResultsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostWorkflowResultsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostWorkflowResultsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && workflow_ != nullptr) {
    delete workflow_;
  }
  workflow_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostWorkflowResultsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Workflow workflow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowResult results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostWorkflowResultsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->has_workflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::workflow(this), target, stream);
  }

  // repeated .clarifai.api.WorkflowResult results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsResponse)
  return target;
}

size_t PostWorkflowResultsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowResult results = 3;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->has_workflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *workflow_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostWorkflowResultsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostWorkflowResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PostWorkflowResultsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostWorkflowResultsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostWorkflowResultsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostWorkflowResultsResponse)
    MergeFrom(*source);
  }
}

void PostWorkflowResultsResponse::MergeFrom(const PostWorkflowResultsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_workflow()) {
    _internal_mutable_workflow()->::clarifai::api::Workflow::MergeFrom(from._internal_workflow());
  }
}

void PostWorkflowResultsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostWorkflowResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostWorkflowResultsResponse::CopyFrom(const PostWorkflowResultsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsResponse::IsInitialized() const {
  return true;
}

void PostWorkflowResultsResponse::InternalSwap(PostWorkflowResultsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(status_, other->status_);
  swap(workflow_, other->workflow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostWorkflowResultsSimilarityRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostWorkflowResultsSimilarityRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostWorkflowResultsSimilarityRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowResultsSimilarityRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowResultsSimilarityRequest::_Internal::user_app_id(const PostWorkflowResultsSimilarityRequest* msg) {
  return *msg->user_app_id_;
}
void PostWorkflowResultsSimilarityRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostWorkflowResultsSimilarityRequest::clear_probe_inputs() {
  probe_inputs_.Clear();
}
void PostWorkflowResultsSimilarityRequest::clear_pool_inputs() {
  pool_inputs_.Clear();
}
PostWorkflowResultsSimilarityRequest::PostWorkflowResultsSimilarityRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostWorkflowResultsSimilarityRequest)
}
PostWorkflowResultsSimilarityRequest::PostWorkflowResultsSimilarityRequest(const PostWorkflowResultsSimilarityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      probe_inputs_(from.probe_inputs_),
      pool_inputs_(from.pool_inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_version_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  favor_clarifai_workflows_ = from.favor_clarifai_workflows_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsSimilarityRequest)
}

void PostWorkflowResultsSimilarityRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostWorkflowResultsSimilarityRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&favor_clarifai_workflows_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(favor_clarifai_workflows_));
}

PostWorkflowResultsSimilarityRequest::~PostWorkflowResultsSimilarityRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsSimilarityRequest)
  SharedDtor();
}

void PostWorkflowResultsSimilarityRequest::SharedDtor() {
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostWorkflowResultsSimilarityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostWorkflowResultsSimilarityRequest& PostWorkflowResultsSimilarityRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostWorkflowResultsSimilarityRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostWorkflowResultsSimilarityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  probe_inputs_.Clear();
  pool_inputs_.Clear();
  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  favor_clarifai_workflows_ = false;
  _internal_metadata_.Clear();
}

const char* PostWorkflowResultsSimilarityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input probe_inputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_probe_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input pool_inputs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pool_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool favor_clarifai_workflows = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          favor_clarifai_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostWorkflowResultsSimilarityRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // string model_version_id = 3;
  if (this->model_version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_version_id(), target);
  }

  // repeated .clarifai.api.Input probe_inputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_probe_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_probe_inputs(i), target, stream);
  }

  // repeated .clarifai.api.Input pool_inputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pool_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pool_inputs(i), target, stream);
  }

  // bool favor_clarifai_workflows = 6;
  if (this->favor_clarifai_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_favor_clarifai_workflows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsSimilarityRequest)
  return target;
}

size_t PostWorkflowResultsSimilarityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input probe_inputs = 4;
  total_size += 1UL * this->_internal_probe_inputs_size();
  for (const auto& msg : this->probe_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Input pool_inputs = 5;
  total_size += 1UL * this->_internal_pool_inputs_size();
  for (const auto& msg : this->pool_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // string model_version_id = 3;
  if (this->model_version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool favor_clarifai_workflows = 6;
  if (this->favor_clarifai_workflows() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostWorkflowResultsSimilarityRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostWorkflowResultsSimilarityRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostWorkflowResultsSimilarityRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostWorkflowResultsSimilarityRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostWorkflowResultsSimilarityRequest)
    MergeFrom(*source);
  }
}

void PostWorkflowResultsSimilarityRequest::MergeFrom(const PostWorkflowResultsSimilarityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  probe_inputs_.MergeFrom(from.probe_inputs_);
  pool_inputs_.MergeFrom(from.pool_inputs_);
  if (from.workflow_id().size() > 0) {

    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from.model_version_id().size() > 0) {

    model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_version_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.favor_clarifai_workflows() != 0) {
    _internal_set_favor_clarifai_workflows(from._internal_favor_clarifai_workflows());
  }
}

void PostWorkflowResultsSimilarityRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostWorkflowResultsSimilarityRequest::CopyFrom(const PostWorkflowResultsSimilarityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsSimilarityRequest::IsInitialized() const {
  return true;
}

void PostWorkflowResultsSimilarityRequest::InternalSwap(PostWorkflowResultsSimilarityRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  probe_inputs_.InternalSwap(&other->probe_inputs_);
  pool_inputs_.InternalSwap(&other->pool_inputs_);
  workflow_id_.Swap(&other->workflow_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_version_id_.Swap(&other->model_version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(favor_clarifai_workflows_, other->favor_clarifai_workflows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsSimilarityRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostWorkflowResultsSimilarityResponse::InitAsDefaultInstance() {
  ::clarifai::api::_PostWorkflowResultsSimilarityResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class PostWorkflowResultsSimilarityResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const PostWorkflowResultsSimilarityResponse* msg);
};

const ::clarifai::api::status::Status&
PostWorkflowResultsSimilarityResponse::_Internal::status(const PostWorkflowResultsSimilarityResponse* msg) {
  return *msg->status_;
}
void PostWorkflowResultsSimilarityResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void PostWorkflowResultsSimilarityResponse::clear_results() {
  results_.Clear();
}
PostWorkflowResultsSimilarityResponse::PostWorkflowResultsSimilarityResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostWorkflowResultsSimilarityResponse)
}
PostWorkflowResultsSimilarityResponse::PostWorkflowResultsSimilarityResponse(const PostWorkflowResultsSimilarityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsSimilarityResponse)
}

void PostWorkflowResultsSimilarityResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostWorkflowResultsSimilarityResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

PostWorkflowResultsSimilarityResponse::~PostWorkflowResultsSimilarityResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsSimilarityResponse)
  SharedDtor();
}

void PostWorkflowResultsSimilarityResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void PostWorkflowResultsSimilarityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostWorkflowResultsSimilarityResponse& PostWorkflowResultsSimilarityResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostWorkflowResultsSimilarityResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostWorkflowResultsSimilarityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostWorkflowResultsSimilarityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostWorkflowResultsSimilarityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsSimilarityResponse)
  return target;
}

size_t PostWorkflowResultsSimilarityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostWorkflowResultsSimilarityResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PostWorkflowResultsSimilarityResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostWorkflowResultsSimilarityResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostWorkflowResultsSimilarityResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostWorkflowResultsSimilarityResponse)
    MergeFrom(*source);
  }
}

void PostWorkflowResultsSimilarityResponse::MergeFrom(const PostWorkflowResultsSimilarityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void PostWorkflowResultsSimilarityResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostWorkflowResultsSimilarityResponse::CopyFrom(const PostWorkflowResultsSimilarityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsSimilarityResponse::IsInitialized() const {
  return true;
}

void PostWorkflowResultsSimilarityResponse::InternalSwap(PostWorkflowResultsSimilarityResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsSimilarityResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostAppDuplicationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostAppDuplicationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostAppDuplicationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAppDuplicationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAppDuplicationsRequest::_Internal::user_app_id(const PostAppDuplicationsRequest* msg) {
  return *msg->user_app_id_;
}
void PostAppDuplicationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAppDuplicationsRequest::clear_app_duplications() {
  app_duplications_.Clear();
}
PostAppDuplicationsRequest::PostAppDuplicationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostAppDuplicationsRequest)
}
PostAppDuplicationsRequest::PostAppDuplicationsRequest(const PostAppDuplicationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      app_duplications_(from.app_duplications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAppDuplicationsRequest)
}

void PostAppDuplicationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostAppDuplicationsRequest::~PostAppDuplicationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAppDuplicationsRequest)
  SharedDtor();
}

void PostAppDuplicationsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostAppDuplicationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostAppDuplicationsRequest& PostAppDuplicationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostAppDuplicationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAppDuplicationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_duplications_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostAppDuplicationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.AppDuplication app_duplications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_duplications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostAppDuplicationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAppDuplicationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_duplications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_app_duplications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAppDuplicationsRequest)
  return target;
}

size_t PostAppDuplicationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAppDuplicationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  total_size += 1UL * this->_internal_app_duplications_size();
  for (const auto& msg : this->app_duplications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostAppDuplicationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostAppDuplicationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostAppDuplicationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostAppDuplicationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostAppDuplicationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostAppDuplicationsRequest)
    MergeFrom(*source);
  }
}

void PostAppDuplicationsRequest::MergeFrom(const PostAppDuplicationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAppDuplicationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  app_duplications_.MergeFrom(from.app_duplications_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostAppDuplicationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostAppDuplicationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostAppDuplicationsRequest::CopyFrom(const PostAppDuplicationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAppDuplicationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAppDuplicationsRequest::IsInitialized() const {
  return true;
}

void PostAppDuplicationsRequest::InternalSwap(PostAppDuplicationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_duplications_.InternalSwap(&other->app_duplications_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAppDuplicationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAppDuplicationRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetAppDuplicationRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetAppDuplicationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAppDuplicationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAppDuplicationRequest::_Internal::user_app_id(const GetAppDuplicationRequest* msg) {
  return *msg->user_app_id_;
}
void GetAppDuplicationRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetAppDuplicationRequest::GetAppDuplicationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetAppDuplicationRequest)
}
GetAppDuplicationRequest::GetAppDuplicationRequest(const GetAppDuplicationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_duplication_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_duplication_id().empty()) {
    app_duplication_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_duplication_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAppDuplicationRequest)
}

void GetAppDuplicationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAppDuplicationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  app_duplication_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetAppDuplicationRequest::~GetAppDuplicationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAppDuplicationRequest)
  SharedDtor();
}

void GetAppDuplicationRequest::SharedDtor() {
  app_duplication_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetAppDuplicationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAppDuplicationRequest& GetAppDuplicationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAppDuplicationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetAppDuplicationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAppDuplicationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_duplication_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetAppDuplicationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_duplication_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_duplication_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetAppDuplicationRequest.app_duplication_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppDuplicationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAppDuplicationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string app_duplication_id = 2;
  if (this->app_duplication_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_duplication_id().data(), static_cast<int>(this->_internal_app_duplication_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAppDuplicationRequest.app_duplication_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_duplication_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAppDuplicationRequest)
  return target;
}

size_t GetAppDuplicationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAppDuplicationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_duplication_id = 2;
  if (this->app_duplication_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_duplication_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppDuplicationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetAppDuplicationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppDuplicationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppDuplicationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetAppDuplicationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetAppDuplicationRequest)
    MergeFrom(*source);
  }
}

void GetAppDuplicationRequest::MergeFrom(const GetAppDuplicationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAppDuplicationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.app_duplication_id().size() > 0) {

    app_duplication_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_duplication_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetAppDuplicationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetAppDuplicationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppDuplicationRequest::CopyFrom(const GetAppDuplicationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAppDuplicationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppDuplicationRequest::IsInitialized() const {
  return true;
}

void GetAppDuplicationRequest::InternalSwap(GetAppDuplicationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_duplication_id_.Swap(&other->app_duplication_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppDuplicationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAppDuplicationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListAppDuplicationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListAppDuplicationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAppDuplicationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAppDuplicationsRequest::_Internal::user_app_id(const ListAppDuplicationsRequest* msg) {
  return *msg->user_app_id_;
}
void ListAppDuplicationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListAppDuplicationsRequest::ListAppDuplicationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListAppDuplicationsRequest)
}
ListAppDuplicationsRequest::ListAppDuplicationsRequest(const ListAppDuplicationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAppDuplicationsRequest)
}

void ListAppDuplicationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

ListAppDuplicationsRequest::~ListAppDuplicationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAppDuplicationsRequest)
  SharedDtor();
}

void ListAppDuplicationsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAppDuplicationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAppDuplicationsRequest& ListAppDuplicationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListAppDuplicationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAppDuplicationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListAppDuplicationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAppDuplicationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAppDuplicationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAppDuplicationsRequest)
  return target;
}

size_t ListAppDuplicationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAppDuplicationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAppDuplicationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListAppDuplicationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAppDuplicationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAppDuplicationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListAppDuplicationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListAppDuplicationsRequest)
    MergeFrom(*source);
  }
}

void ListAppDuplicationsRequest::MergeFrom(const ListAppDuplicationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAppDuplicationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void ListAppDuplicationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListAppDuplicationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAppDuplicationsRequest::CopyFrom(const ListAppDuplicationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAppDuplicationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppDuplicationsRequest::IsInitialized() const {
  return true;
}

void ListAppDuplicationsRequest::InternalSwap(ListAppDuplicationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppDuplicationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiAppDuplicationsResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiAppDuplicationsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiAppDuplicationsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAppDuplicationsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAppDuplicationsResponse::_Internal::status(const MultiAppDuplicationsResponse* msg) {
  return *msg->status_;
}
void MultiAppDuplicationsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiAppDuplicationsResponse::clear_app_duplications() {
  app_duplications_.Clear();
}
MultiAppDuplicationsResponse::MultiAppDuplicationsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiAppDuplicationsResponse)
}
MultiAppDuplicationsResponse::MultiAppDuplicationsResponse(const MultiAppDuplicationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      app_duplications_(from.app_duplications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAppDuplicationsResponse)
}

void MultiAppDuplicationsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiAppDuplicationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiAppDuplicationsResponse::~MultiAppDuplicationsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAppDuplicationsResponse)
  SharedDtor();
}

void MultiAppDuplicationsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiAppDuplicationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiAppDuplicationsResponse& MultiAppDuplicationsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiAppDuplicationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiAppDuplicationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAppDuplicationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_duplications_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiAppDuplicationsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.AppDuplication app_duplications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_duplications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAppDuplicationsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAppDuplicationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_duplications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_app_duplications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAppDuplicationsResponse)
  return target;
}

size_t MultiAppDuplicationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAppDuplicationsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  total_size += 1UL * this->_internal_app_duplications_size();
  for (const auto& msg : this->app_duplications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiAppDuplicationsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiAppDuplicationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiAppDuplicationsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiAppDuplicationsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiAppDuplicationsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiAppDuplicationsResponse)
    MergeFrom(*source);
  }
}

void MultiAppDuplicationsResponse::MergeFrom(const MultiAppDuplicationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAppDuplicationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  app_duplications_.MergeFrom(from.app_duplications_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiAppDuplicationsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiAppDuplicationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiAppDuplicationsResponse::CopyFrom(const MultiAppDuplicationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAppDuplicationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAppDuplicationsResponse::IsInitialized() const {
  return true;
}

void MultiAppDuplicationsResponse::InternalSwap(MultiAppDuplicationsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_duplications_.InternalSwap(&other->app_duplications_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAppDuplicationsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleAppDuplicationResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleAppDuplicationResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleAppDuplicationResponse_default_instance_._instance.get_mutable()->app_duplication_ = const_cast< ::clarifai::api::AppDuplication*>(
      ::clarifai::api::AppDuplication::internal_default_instance());
}
class SingleAppDuplicationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleAppDuplicationResponse* msg);
  static const ::clarifai::api::AppDuplication& app_duplication(const SingleAppDuplicationResponse* msg);
};

const ::clarifai::api::status::Status&
SingleAppDuplicationResponse::_Internal::status(const SingleAppDuplicationResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::AppDuplication&
SingleAppDuplicationResponse::_Internal::app_duplication(const SingleAppDuplicationResponse* msg) {
  return *msg->app_duplication_;
}
void SingleAppDuplicationResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleAppDuplicationResponse::clear_app_duplication() {
  if (GetArenaNoVirtual() == nullptr && app_duplication_ != nullptr) {
    delete app_duplication_;
  }
  app_duplication_ = nullptr;
}
SingleAppDuplicationResponse::SingleAppDuplicationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleAppDuplicationResponse)
}
SingleAppDuplicationResponse::SingleAppDuplicationResponse(const SingleAppDuplicationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_app_duplication()) {
    app_duplication_ = new ::clarifai::api::AppDuplication(*from.app_duplication_);
  } else {
    app_duplication_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleAppDuplicationResponse)
}

void SingleAppDuplicationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleAppDuplicationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_duplication_) -
      reinterpret_cast<char*>(&status_)) + sizeof(app_duplication_));
}

SingleAppDuplicationResponse::~SingleAppDuplicationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleAppDuplicationResponse)
  SharedDtor();
}

void SingleAppDuplicationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete app_duplication_;
}

void SingleAppDuplicationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleAppDuplicationResponse& SingleAppDuplicationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleAppDuplicationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleAppDuplicationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleAppDuplicationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && app_duplication_ != nullptr) {
    delete app_duplication_;
  }
  app_duplication_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleAppDuplicationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.AppDuplication app_duplication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_duplication(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleAppDuplicationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleAppDuplicationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.AppDuplication app_duplication = 2;
  if (this->has_app_duplication()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app_duplication(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleAppDuplicationResponse)
  return target;
}

size_t SingleAppDuplicationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleAppDuplicationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.AppDuplication app_duplication = 2;
  if (this->has_app_duplication()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_duplication_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleAppDuplicationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleAppDuplicationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleAppDuplicationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleAppDuplicationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleAppDuplicationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleAppDuplicationResponse)
    MergeFrom(*source);
  }
}

void SingleAppDuplicationResponse::MergeFrom(const SingleAppDuplicationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleAppDuplicationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_app_duplication()) {
    _internal_mutable_app_duplication()->::clarifai::api::AppDuplication::MergeFrom(from._internal_app_duplication());
  }
}

void SingleAppDuplicationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleAppDuplicationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleAppDuplicationResponse::CopyFrom(const SingleAppDuplicationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleAppDuplicationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAppDuplicationResponse::IsInitialized() const {
  return true;
}

void SingleAppDuplicationResponse::InternalSwap(SingleAppDuplicationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(app_duplication_, other->app_duplication_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAppDuplicationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostTasksRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostTasksRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostTasksRequest::_Internal::user_app_id(const PostTasksRequest* msg) {
  return *msg->user_app_id_;
}
void PostTasksRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostTasksRequest::clear_tasks() {
  tasks_.Clear();
}
PostTasksRequest::PostTasksRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostTasksRequest)
}
PostTasksRequest::PostTasksRequest(const PostTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostTasksRequest)
}

void PostTasksRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostTasksRequest::~PostTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostTasksRequest)
  SharedDtor();
}

void PostTasksRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostTasksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostTasksRequest& PostTasksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostTasksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Task tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostTasksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Task tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostTasksRequest)
  return target;
}

size_t PostTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostTasksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Task tasks = 2;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostTasksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostTasksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostTasksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostTasksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostTasksRequest)
    MergeFrom(*source);
  }
}

void PostTasksRequest::MergeFrom(const PostTasksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostTasksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostTasksRequest::CopyFrom(const PostTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTasksRequest::IsInitialized() const {
  return true;
}

void PostTasksRequest::InternalSwap(PostTasksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostTasksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTaskRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetTaskRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetTaskRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetTaskRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetTaskRequest::_Internal::user_app_id(const GetTaskRequest* msg) {
  return *msg->user_app_id_;
}
void GetTaskRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetTaskRequest::GetTaskRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetTaskRequest)
}
GetTaskRequest::GetTaskRequest(const GetTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetTaskRequest)
}

void GetTaskRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTaskRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetTaskRequest::~GetTaskRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetTaskRequest)
  SharedDtor();
}

void GetTaskRequest::SharedDtor() {
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTaskRequest& GetTaskRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTaskRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetTaskRequest.task_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string task_id = 2;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetTaskRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetTaskRequest)
  return target;
}

size_t GetTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 2;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTaskRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTaskRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTaskRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetTaskRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetTaskRequest)
    MergeFrom(*source);
  }
}

void GetTaskRequest::MergeFrom(const GetTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetTaskRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTaskRequest::CopyFrom(const GetTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTaskRequest::IsInitialized() const {
  return true;
}

void GetTaskRequest::InternalSwap(GetTaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTaskRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTasksRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListTasksRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListTasksRequest::_Internal::user_app_id(const ListTasksRequest* msg) {
  return *msg->user_app_id_;
}
void ListTasksRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListTasksRequest::ListTasksRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListTasksRequest)
}
ListTasksRequest::ListTasksRequest(const ListTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      worker_user_ids_(from.worker_user_ids_),
      review_user_ids_(from.review_user_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&including_label_order_tasks_) -
    reinterpret_cast<char*>(&page_)) + sizeof(including_label_order_tasks_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListTasksRequest)
}

void ListTasksRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&including_label_order_tasks_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(including_label_order_tasks_));
}

ListTasksRequest::~ListTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListTasksRequest)
  SharedDtor();
}

void ListTasksRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListTasksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTasksRequest& ListTasksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_user_ids_.Clear();
  review_user_ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&including_label_order_tasks_) -
      reinterpret_cast<char*>(&page_)) + sizeof(including_label_order_tasks_));
  _internal_metadata_.Clear();
}

const char* ListTasksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string worker_user_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_worker_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListTasksRequest.worker_user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string review_user_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_review_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListTasksRequest.review_user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool including_label_order_tasks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          including_label_order_tasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTasksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  // repeated string worker_user_ids = 4;
  for (int i = 0, n = this->_internal_worker_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_worker_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListTasksRequest.worker_user_ids");
    target = stream->WriteString(4, s, target);
  }

  // repeated string review_user_ids = 5;
  for (int i = 0, n = this->_internal_review_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_review_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListTasksRequest.review_user_ids");
    target = stream->WriteString(5, s, target);
  }

  // bool including_label_order_tasks = 6;
  if (this->including_label_order_tasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_including_label_order_tasks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListTasksRequest)
  return target;
}

size_t ListTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListTasksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string worker_user_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(worker_user_ids_.size());
  for (int i = 0, n = worker_user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      worker_user_ids_.Get(i));
  }

  // repeated string review_user_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(review_user_ids_.size());
  for (int i = 0, n = review_user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      review_user_ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  // bool including_label_order_tasks = 6;
  if (this->including_label_order_tasks() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTasksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTasksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTasksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListTasksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListTasksRequest)
    MergeFrom(*source);
  }
}

void ListTasksRequest::MergeFrom(const ListTasksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  worker_user_ids_.MergeFrom(from.worker_user_ids_);
  review_user_ids_.MergeFrom(from.review_user_ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  if (from.including_label_order_tasks() != 0) {
    _internal_set_including_label_order_tasks(from._internal_including_label_order_tasks());
  }
}

void ListTasksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTasksRequest::CopyFrom(const ListTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTasksRequest::IsInitialized() const {
  return true;
}

void ListTasksRequest::InternalSwap(ListTasksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  worker_user_ids_.InternalSwap(&other->worker_user_ids_);
  review_user_ids_.InternalSwap(&other->review_user_ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
  swap(including_label_order_tasks_, other->including_label_order_tasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTasksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchTasksRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchTasksRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchTasksRequest::_Internal::user_app_id(const PatchTasksRequest* msg) {
  return *msg->user_app_id_;
}
void PatchTasksRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchTasksRequest::clear_tasks() {
  tasks_.Clear();
}
PatchTasksRequest::PatchTasksRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchTasksRequest)
}
PatchTasksRequest::PatchTasksRequest(const PatchTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchTasksRequest)
}

void PatchTasksRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchTasksRequest::~PatchTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchTasksRequest)
  SharedDtor();
}

void PatchTasksRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchTasksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchTasksRequest& PatchTasksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchTasksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Task tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchTasksRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchTasksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Task tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tasks(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchTasksRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchTasksRequest)
  return target;
}

size_t PatchTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchTasksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Task tasks = 2;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchTasksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchTasksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchTasksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchTasksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchTasksRequest)
    MergeFrom(*source);
  }
}

void PatchTasksRequest::MergeFrom(const PatchTasksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchTasksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchTasksRequest::CopyFrom(const PatchTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchTasksRequest::IsInitialized() const {
  return true;
}

void PatchTasksRequest::InternalSwap(PatchTasksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchTasksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteTasksRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteTasksRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteTasksRequest::_Internal::user_app_id(const DeleteTasksRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteTasksRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteTasksRequest::DeleteTasksRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteTasksRequest)
}
DeleteTasksRequest::DeleteTasksRequest(const DeleteTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteTasksRequest)
}

void DeleteTasksRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

DeleteTasksRequest::~DeleteTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteTasksRequest)
  SharedDtor();
}

void DeleteTasksRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteTasksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTasksRequest& DeleteTasksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteTasksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteTasksRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTasksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteTasksRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteTasksRequest)
  return target;
}

size_t DeleteTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteTasksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTasksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTasksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteTasksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteTasksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteTasksRequest)
    MergeFrom(*source);
  }
}

void DeleteTasksRequest::MergeFrom(const DeleteTasksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteTasksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTasksRequest::CopyFrom(const DeleteTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTasksRequest::IsInitialized() const {
  return true;
}

void DeleteTasksRequest::InternalSwap(DeleteTasksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTasksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiTaskResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiTaskResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiTaskResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiTaskResponse* msg);
};

const ::clarifai::api::status::Status&
MultiTaskResponse::_Internal::status(const MultiTaskResponse* msg) {
  return *msg->status_;
}
void MultiTaskResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiTaskResponse::clear_tasks() {
  tasks_.Clear();
}
MultiTaskResponse::MultiTaskResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiTaskResponse)
}
MultiTaskResponse::MultiTaskResponse(const MultiTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiTaskResponse)
}

void MultiTaskResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiTaskResponse::~MultiTaskResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiTaskResponse)
  SharedDtor();
}

void MultiTaskResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiTaskResponse& MultiTaskResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiTaskResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiTaskResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiTaskResponse)
  return target;
}

size_t MultiTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiTaskResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiTaskResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiTaskResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiTaskResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiTaskResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiTaskResponse)
    MergeFrom(*source);
  }
}

void MultiTaskResponse::MergeFrom(const MultiTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiTaskResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiTaskResponse::CopyFrom(const MultiTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiTaskResponse::IsInitialized() const {
  return true;
}

void MultiTaskResponse::InternalSwap(MultiTaskResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiTaskResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleTaskResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleTaskResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleTaskResponse_default_instance_._instance.get_mutable()->task_ = const_cast< ::clarifai::api::Task*>(
      ::clarifai::api::Task::internal_default_instance());
}
class SingleTaskResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleTaskResponse* msg);
  static const ::clarifai::api::Task& task(const SingleTaskResponse* msg);
};

const ::clarifai::api::status::Status&
SingleTaskResponse::_Internal::status(const SingleTaskResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Task&
SingleTaskResponse::_Internal::task(const SingleTaskResponse* msg) {
  return *msg->task_;
}
void SingleTaskResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleTaskResponse::clear_task() {
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
SingleTaskResponse::SingleTaskResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleTaskResponse)
}
SingleTaskResponse::SingleTaskResponse(const SingleTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_task()) {
    task_ = new ::clarifai::api::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleTaskResponse)
}

void SingleTaskResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_) -
      reinterpret_cast<char*>(&status_)) + sizeof(task_));
}

SingleTaskResponse::~SingleTaskResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleTaskResponse)
  SharedDtor();
}

void SingleTaskResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete task_;
}

void SingleTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleTaskResponse& SingleTaskResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleTaskResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Task task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleTaskResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Task task = 2;
  if (this->has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::task(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleTaskResponse)
  return target;
}

size_t SingleTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleTaskResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Task task = 2;
  if (this->has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleTaskResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleTaskResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleTaskResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleTaskResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleTaskResponse)
    MergeFrom(*source);
  }
}

void SingleTaskResponse::MergeFrom(const SingleTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_task()) {
    _internal_mutable_task()->::clarifai::api::Task::MergeFrom(from._internal_task());
  }
}

void SingleTaskResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleTaskResponse::CopyFrom(const SingleTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTaskResponse::IsInitialized() const {
  return true;
}

void SingleTaskResponse::InternalSwap(SingleTaskResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(task_, other->task_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleTaskResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTaskCountRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetTaskCountRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetTaskCountRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetTaskCountRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetTaskCountRequest::_Internal::user_app_id(const GetTaskCountRequest* msg) {
  return *msg->user_app_id_;
}
void GetTaskCountRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetTaskCountRequest::GetTaskCountRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetTaskCountRequest)
}
GetTaskCountRequest::GetTaskCountRequest(const GetTaskCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetTaskCountRequest)
}

void GetTaskCountRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTaskCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetTaskCountRequest::~GetTaskCountRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetTaskCountRequest)
  SharedDtor();
}

void GetTaskCountRequest::SharedDtor() {
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetTaskCountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTaskCountRequest& GetTaskCountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTaskCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetTaskCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetTaskCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetTaskCountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetTaskCountRequest.task_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string user_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetTaskCountRequest.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTaskCountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetTaskCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string task_id = 2;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetTaskCountRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  // repeated string user_ids = 3;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetTaskCountRequest.user_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetTaskCountRequest)
  return target;
}

size_t GetTaskCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetTaskCountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // string task_id = 2;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTaskCountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetTaskCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTaskCountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTaskCountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetTaskCountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetTaskCountRequest)
    MergeFrom(*source);
  }
}

void GetTaskCountRequest::MergeFrom(const GetTaskCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetTaskCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetTaskCountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetTaskCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTaskCountRequest::CopyFrom(const GetTaskCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetTaskCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTaskCountRequest::IsInitialized() const {
  return true;
}

void GetTaskCountRequest::InternalSwap(GetTaskCountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTaskCountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleTaskCountResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleTaskCountResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class SingleTaskCountResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleTaskCountResponse* msg);
};

const ::clarifai::api::status::Status&
SingleTaskCountResponse::_Internal::status(const SingleTaskCountResponse* msg) {
  return *msg->status_;
}
void SingleTaskCountResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleTaskCountResponse::clear_counts() {
  counts_.Clear();
}
SingleTaskCountResponse::SingleTaskCountResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleTaskCountResponse)
}
SingleTaskCountResponse::SingleTaskCountResponse(const SingleTaskCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      counts_(from.counts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleTaskCountResponse)
}

void SingleTaskCountResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleTaskCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

SingleTaskCountResponse::~SingleTaskCountResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleTaskCountResponse)
  SharedDtor();
}

void SingleTaskCountResponse::SharedDtor() {
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void SingleTaskCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleTaskCountResponse& SingleTaskCountResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleTaskCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleTaskCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleTaskCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counts_.Clear();
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleTaskCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleTaskCountResponse.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string task_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleTaskCountResponse.task_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.TaskStatusCountPerUser counts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleTaskCountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleTaskCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleTaskCountResponse.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // string task_id = 3;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleTaskCountResponse.task_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_task_id(), target);
  }

  // repeated .clarifai.api.TaskStatusCountPerUser counts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_counts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_counts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleTaskCountResponse)
  return target;
}

size_t SingleTaskCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleTaskCountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.TaskStatusCountPerUser counts = 4;
  total_size += 1UL * this->_internal_counts_size();
  for (const auto& msg : this->counts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string task_id = 3;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleTaskCountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleTaskCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleTaskCountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleTaskCountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleTaskCountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleTaskCountResponse)
    MergeFrom(*source);
  }
}

void SingleTaskCountResponse::MergeFrom(const SingleTaskCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleTaskCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  counts_.MergeFrom(from.counts_);
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void SingleTaskCountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleTaskCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleTaskCountResponse::CopyFrom(const SingleTaskCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleTaskCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTaskCountResponse::IsInitialized() const {
  return true;
}

void SingleTaskCountResponse::InternalSwap(SingleTaskCountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  counts_.InternalSwap(&other->counts_);
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleTaskCountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostCollectorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostCollectorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostCollectorsRequest::_Internal::user_app_id(const PostCollectorsRequest* msg) {
  return *msg->user_app_id_;
}
void PostCollectorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostCollectorsRequest::clear_collectors() {
  collectors_.Clear();
}
PostCollectorsRequest::PostCollectorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostCollectorsRequest)
}
PostCollectorsRequest::PostCollectorsRequest(const PostCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collectors_(from.collectors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostCollectorsRequest)
}

void PostCollectorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostCollectorsRequest::~PostCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostCollectorsRequest)
  SharedDtor();
}

void PostCollectorsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostCollectorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostCollectorsRequest& PostCollectorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collectors_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostCollectorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collector collectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostCollectorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Collector collectors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collectors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collectors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostCollectorsRequest)
  return target;
}

size_t PostCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostCollectorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collector collectors = 2;
  total_size += 1UL * this->_internal_collectors_size();
  for (const auto& msg : this->collectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostCollectorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostCollectorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostCollectorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostCollectorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostCollectorsRequest)
    MergeFrom(*source);
  }
}

void PostCollectorsRequest::MergeFrom(const PostCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collectors_.MergeFrom(from.collectors_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostCollectorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostCollectorsRequest::CopyFrom(const PostCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostCollectorsRequest::IsInitialized() const {
  return true;
}

void PostCollectorsRequest::InternalSwap(PostCollectorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collectors_.InternalSwap(&other->collectors_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostCollectorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchCollectorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchCollectorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchCollectorsRequest::_Internal::user_app_id(const PatchCollectorsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchCollectorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchCollectorsRequest::clear_collectors() {
  collectors_.Clear();
}
PatchCollectorsRequest::PatchCollectorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchCollectorsRequest)
}
PatchCollectorsRequest::PatchCollectorsRequest(const PatchCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collectors_(from.collectors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchCollectorsRequest)
}

void PatchCollectorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchCollectorsRequest::~PatchCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchCollectorsRequest)
  SharedDtor();
}

void PatchCollectorsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchCollectorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchCollectorsRequest& PatchCollectorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collectors_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchCollectorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collector collectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchCollectorsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchCollectorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Collector collectors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collectors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collectors(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchCollectorsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchCollectorsRequest)
  return target;
}

size_t PatchCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchCollectorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collector collectors = 2;
  total_size += 1UL * this->_internal_collectors_size();
  for (const auto& msg : this->collectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchCollectorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchCollectorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchCollectorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchCollectorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchCollectorsRequest)
    MergeFrom(*source);
  }
}

void PatchCollectorsRequest::MergeFrom(const PatchCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collectors_.MergeFrom(from.collectors_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchCollectorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchCollectorsRequest::CopyFrom(const PatchCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchCollectorsRequest::IsInitialized() const {
  return true;
}

void PatchCollectorsRequest::InternalSwap(PatchCollectorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collectors_.InternalSwap(&other->collectors_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchCollectorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteCollectorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteCollectorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteCollectorsRequest::_Internal::user_app_id(const DeleteCollectorsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteCollectorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteCollectorsRequest::DeleteCollectorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteCollectorsRequest)
}
DeleteCollectorsRequest::DeleteCollectorsRequest(const DeleteCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  delete_all_ = from.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteCollectorsRequest)
}

void DeleteCollectorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_all_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(delete_all_));
}

DeleteCollectorsRequest::~DeleteCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteCollectorsRequest)
  SharedDtor();
}

void DeleteCollectorsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteCollectorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteCollectorsRequest& DeleteCollectorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  delete_all_ = false;
  _internal_metadata_.Clear();
}

const char* DeleteCollectorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteCollectorsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool delete_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteCollectorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteCollectorsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteCollectorsRequest)
  return target;
}

size_t DeleteCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteCollectorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteCollectorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteCollectorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteCollectorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteCollectorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteCollectorsRequest)
    MergeFrom(*source);
  }
}

void DeleteCollectorsRequest::MergeFrom(const DeleteCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.delete_all() != 0) {
    _internal_set_delete_all(from._internal_delete_all());
  }
}

void DeleteCollectorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCollectorsRequest::CopyFrom(const DeleteCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCollectorsRequest::IsInitialized() const {
  return true;
}

void DeleteCollectorsRequest::InternalSwap(DeleteCollectorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(delete_all_, other->delete_all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCollectorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCollectorRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetCollectorRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetCollectorRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetCollectorRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetCollectorRequest::_Internal::user_app_id(const GetCollectorRequest* msg) {
  return *msg->user_app_id_;
}
void GetCollectorRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetCollectorRequest::GetCollectorRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetCollectorRequest)
}
GetCollectorRequest::GetCollectorRequest(const GetCollectorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collector_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collector_id().empty()) {
    collector_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collector_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetCollectorRequest)
}

void GetCollectorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCollectorRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  collector_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetCollectorRequest::~GetCollectorRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetCollectorRequest)
  SharedDtor();
}

void GetCollectorRequest::SharedDtor() {
  collector_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetCollectorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCollectorRequest& GetCollectorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCollectorRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetCollectorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetCollectorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collector_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetCollectorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collector_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_collector_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetCollectorRequest.collector_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollectorRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetCollectorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string collector_id = 2;
  if (this->collector_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collector_id().data(), static_cast<int>(this->_internal_collector_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetCollectorRequest.collector_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collector_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetCollectorRequest)
  return target;
}

size_t GetCollectorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetCollectorRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collector_id = 2;
  if (this->collector_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collector_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCollectorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetCollectorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCollectorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCollectorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetCollectorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetCollectorRequest)
    MergeFrom(*source);
  }
}

void GetCollectorRequest::MergeFrom(const GetCollectorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetCollectorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collector_id().size() > 0) {

    collector_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collector_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetCollectorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetCollectorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollectorRequest::CopyFrom(const GetCollectorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetCollectorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectorRequest::IsInitialized() const {
  return true;
}

void GetCollectorRequest::InternalSwap(GetCollectorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collector_id_.Swap(&other->collector_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollectorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCollectorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListCollectorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListCollectorsRequest::_Internal::user_app_id(const ListCollectorsRequest* msg) {
  return *msg->user_app_id_;
}
void ListCollectorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListCollectorsRequest::ListCollectorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListCollectorsRequest)
}
ListCollectorsRequest::ListCollectorsRequest(const ListCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListCollectorsRequest)
}

void ListCollectorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListCollectorsRequest::~ListCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListCollectorsRequest)
  SharedDtor();
}

void ListCollectorsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListCollectorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCollectorsRequest& ListCollectorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListCollectorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCollectorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListCollectorsRequest)
  return target;
}

size_t ListCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListCollectorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCollectorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCollectorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCollectorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListCollectorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListCollectorsRequest)
    MergeFrom(*source);
  }
}

void ListCollectorsRequest::MergeFrom(const ListCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListCollectorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCollectorsRequest::CopyFrom(const ListCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollectorsRequest::IsInitialized() const {
  return true;
}

void ListCollectorsRequest::InternalSwap(ListCollectorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCollectorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiCollectorResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiCollectorResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiCollectorResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiCollectorResponse* msg);
};

const ::clarifai::api::status::Status&
MultiCollectorResponse::_Internal::status(const MultiCollectorResponse* msg) {
  return *msg->status_;
}
void MultiCollectorResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiCollectorResponse::clear_collectors() {
  collectors_.Clear();
}
MultiCollectorResponse::MultiCollectorResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiCollectorResponse)
}
MultiCollectorResponse::MultiCollectorResponse(const MultiCollectorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collectors_(from.collectors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiCollectorResponse)
}

void MultiCollectorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiCollectorResponse::~MultiCollectorResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiCollectorResponse)
  SharedDtor();
}

void MultiCollectorResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiCollectorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiCollectorResponse& MultiCollectorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiCollectorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiCollectorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collectors_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiCollectorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collector collectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiCollectorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiCollectorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Collector collectors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collectors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collectors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiCollectorResponse)
  return target;
}

size_t MultiCollectorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiCollectorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collector collectors = 2;
  total_size += 1UL * this->_internal_collectors_size();
  for (const auto& msg : this->collectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiCollectorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiCollectorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiCollectorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiCollectorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiCollectorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiCollectorResponse)
    MergeFrom(*source);
  }
}

void MultiCollectorResponse::MergeFrom(const MultiCollectorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiCollectorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collectors_.MergeFrom(from.collectors_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiCollectorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiCollectorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiCollectorResponse::CopyFrom(const MultiCollectorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiCollectorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCollectorResponse::IsInitialized() const {
  return true;
}

void MultiCollectorResponse::InternalSwap(MultiCollectorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collectors_.InternalSwap(&other->collectors_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiCollectorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleCollectorResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleCollectorResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleCollectorResponse_default_instance_._instance.get_mutable()->collector_ = const_cast< ::clarifai::api::Collector*>(
      ::clarifai::api::Collector::internal_default_instance());
}
class SingleCollectorResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleCollectorResponse* msg);
  static const ::clarifai::api::Collector& collector(const SingleCollectorResponse* msg);
};

const ::clarifai::api::status::Status&
SingleCollectorResponse::_Internal::status(const SingleCollectorResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Collector&
SingleCollectorResponse::_Internal::collector(const SingleCollectorResponse* msg) {
  return *msg->collector_;
}
void SingleCollectorResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleCollectorResponse::clear_collector() {
  if (GetArenaNoVirtual() == nullptr && collector_ != nullptr) {
    delete collector_;
  }
  collector_ = nullptr;
}
SingleCollectorResponse::SingleCollectorResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleCollectorResponse)
}
SingleCollectorResponse::SingleCollectorResponse(const SingleCollectorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_collector()) {
    collector_ = new ::clarifai::api::Collector(*from.collector_);
  } else {
    collector_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleCollectorResponse)
}

void SingleCollectorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collector_) -
      reinterpret_cast<char*>(&status_)) + sizeof(collector_));
}

SingleCollectorResponse::~SingleCollectorResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleCollectorResponse)
  SharedDtor();
}

void SingleCollectorResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete collector_;
}

void SingleCollectorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleCollectorResponse& SingleCollectorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleCollectorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleCollectorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && collector_ != nullptr) {
    delete collector_;
  }
  collector_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleCollectorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Collector collector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_collector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleCollectorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleCollectorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Collector collector = 2;
  if (this->has_collector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::collector(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleCollectorResponse)
  return target;
}

size_t SingleCollectorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleCollectorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Collector collector = 2;
  if (this->has_collector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *collector_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleCollectorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleCollectorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleCollectorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleCollectorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleCollectorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleCollectorResponse)
    MergeFrom(*source);
  }
}

void SingleCollectorResponse::MergeFrom(const SingleCollectorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleCollectorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_collector()) {
    _internal_mutable_collector()->::clarifai::api::Collector::MergeFrom(from._internal_collector());
  }
}

void SingleCollectorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleCollectorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleCollectorResponse::CopyFrom(const SingleCollectorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleCollectorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleCollectorResponse::IsInitialized() const {
  return true;
}

void SingleCollectorResponse::InternalSwap(SingleCollectorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(collector_, other->collector_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleCollectorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostStatValuesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostStatValuesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostStatValuesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostStatValuesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostStatValuesRequest::_Internal::user_app_id(const PostStatValuesRequest* msg) {
  return *msg->user_app_id_;
}
void PostStatValuesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostStatValuesRequest::clear_stat_values() {
  stat_values_.Clear();
}
PostStatValuesRequest::PostStatValuesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostStatValuesRequest)
}
PostStatValuesRequest::PostStatValuesRequest(const PostStatValuesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stat_values_(from.stat_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostStatValuesRequest)
}

void PostStatValuesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostStatValuesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostStatValuesRequest::~PostStatValuesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostStatValuesRequest)
  SharedDtor();
}

void PostStatValuesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostStatValuesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostStatValuesRequest& PostStatValuesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostStatValuesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostStatValuesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostStatValuesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_values_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostStatValuesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValue stat_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostStatValuesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostStatValuesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.StatValue stat_values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stat_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostStatValuesRequest)
  return target;
}

size_t PostStatValuesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostStatValuesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValue stat_values = 2;
  total_size += 1UL * this->_internal_stat_values_size();
  for (const auto& msg : this->stat_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostStatValuesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostStatValuesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostStatValuesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostStatValuesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostStatValuesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostStatValuesRequest)
    MergeFrom(*source);
  }
}

void PostStatValuesRequest::MergeFrom(const PostStatValuesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostStatValuesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_values_.MergeFrom(from.stat_values_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostStatValuesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostStatValuesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostStatValuesRequest::CopyFrom(const PostStatValuesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostStatValuesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostStatValuesRequest::IsInitialized() const {
  return true;
}

void PostStatValuesRequest::InternalSwap(PostStatValuesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stat_values_.InternalSwap(&other->stat_values_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostStatValuesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiStatValueResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiStatValueResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiStatValueResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiStatValueResponse* msg);
};

const ::clarifai::api::status::Status&
MultiStatValueResponse::_Internal::status(const MultiStatValueResponse* msg) {
  return *msg->status_;
}
void MultiStatValueResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiStatValueResponse::clear_stat_values() {
  stat_values_.Clear();
}
MultiStatValueResponse::MultiStatValueResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiStatValueResponse)
}
MultiStatValueResponse::MultiStatValueResponse(const MultiStatValueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stat_values_(from.stat_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiStatValueResponse)
}

void MultiStatValueResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiStatValueResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiStatValueResponse::~MultiStatValueResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiStatValueResponse)
  SharedDtor();
}

void MultiStatValueResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiStatValueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiStatValueResponse& MultiStatValueResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiStatValueResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiStatValueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiStatValueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_values_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiStatValueResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiStatValueResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiStatValueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stat_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiStatValueResponse)
  return target;
}

size_t MultiStatValueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiStatValueResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_stat_values_size();
  for (const auto& msg : this->stat_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiStatValueResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiStatValueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiStatValueResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiStatValueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiStatValueResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiStatValueResponse)
    MergeFrom(*source);
  }
}

void MultiStatValueResponse::MergeFrom(const MultiStatValueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiStatValueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_values_.MergeFrom(from.stat_values_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiStatValueResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiStatValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiStatValueResponse::CopyFrom(const MultiStatValueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiStatValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiStatValueResponse::IsInitialized() const {
  return true;
}

void MultiStatValueResponse::InternalSwap(MultiStatValueResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stat_values_.InternalSwap(&other->stat_values_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiStatValueResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostStatValuesAggregateRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostStatValuesAggregateRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostStatValuesAggregateRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostStatValuesAggregateRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostStatValuesAggregateRequest::_Internal::user_app_id(const PostStatValuesAggregateRequest* msg) {
  return *msg->user_app_id_;
}
void PostStatValuesAggregateRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostStatValuesAggregateRequest::clear_stat_value_aggregate_queries() {
  stat_value_aggregate_queries_.Clear();
}
PostStatValuesAggregateRequest::PostStatValuesAggregateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostStatValuesAggregateRequest)
}
PostStatValuesAggregateRequest::PostStatValuesAggregateRequest(const PostStatValuesAggregateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stat_value_aggregate_queries_(from.stat_value_aggregate_queries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostStatValuesAggregateRequest)
}

void PostStatValuesAggregateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostStatValuesAggregateRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostStatValuesAggregateRequest::~PostStatValuesAggregateRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostStatValuesAggregateRequest)
  SharedDtor();
}

void PostStatValuesAggregateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostStatValuesAggregateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostStatValuesAggregateRequest& PostStatValuesAggregateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostStatValuesAggregateRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostStatValuesAggregateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostStatValuesAggregateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_value_aggregate_queries_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostStatValuesAggregateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_value_aggregate_queries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostStatValuesAggregateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostStatValuesAggregateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_value_aggregate_queries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stat_value_aggregate_queries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostStatValuesAggregateRequest)
  return target;
}

size_t PostStatValuesAggregateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostStatValuesAggregateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
  total_size += 1UL * this->_internal_stat_value_aggregate_queries_size();
  for (const auto& msg : this->stat_value_aggregate_queries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostStatValuesAggregateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostStatValuesAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostStatValuesAggregateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostStatValuesAggregateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostStatValuesAggregateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostStatValuesAggregateRequest)
    MergeFrom(*source);
  }
}

void PostStatValuesAggregateRequest::MergeFrom(const PostStatValuesAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostStatValuesAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_value_aggregate_queries_.MergeFrom(from.stat_value_aggregate_queries_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostStatValuesAggregateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostStatValuesAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostStatValuesAggregateRequest::CopyFrom(const PostStatValuesAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostStatValuesAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostStatValuesAggregateRequest::IsInitialized() const {
  return true;
}

void PostStatValuesAggregateRequest::InternalSwap(PostStatValuesAggregateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stat_value_aggregate_queries_.InternalSwap(&other->stat_value_aggregate_queries_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostStatValuesAggregateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiStatValueAggregateResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiStatValueAggregateResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiStatValueAggregateResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiStatValueAggregateResponse* msg);
};

const ::clarifai::api::status::Status&
MultiStatValueAggregateResponse::_Internal::status(const MultiStatValueAggregateResponse* msg) {
  return *msg->status_;
}
void MultiStatValueAggregateResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiStatValueAggregateResponse::clear_stat_value_aggregate_results() {
  stat_value_aggregate_results_.Clear();
}
MultiStatValueAggregateResponse::MultiStatValueAggregateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiStatValueAggregateResponse)
}
MultiStatValueAggregateResponse::MultiStatValueAggregateResponse(const MultiStatValueAggregateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stat_value_aggregate_results_(from.stat_value_aggregate_results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiStatValueAggregateResponse)
}

void MultiStatValueAggregateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiStatValueAggregateResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiStatValueAggregateResponse::~MultiStatValueAggregateResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiStatValueAggregateResponse)
  SharedDtor();
}

void MultiStatValueAggregateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiStatValueAggregateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiStatValueAggregateResponse& MultiStatValueAggregateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiStatValueAggregateResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiStatValueAggregateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiStatValueAggregateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_value_aggregate_results_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiStatValueAggregateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_value_aggregate_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiStatValueAggregateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiStatValueAggregateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_value_aggregate_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stat_value_aggregate_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiStatValueAggregateResponse)
  return target;
}

size_t MultiStatValueAggregateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiStatValueAggregateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
  total_size += 1UL * this->_internal_stat_value_aggregate_results_size();
  for (const auto& msg : this->stat_value_aggregate_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiStatValueAggregateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiStatValueAggregateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiStatValueAggregateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiStatValueAggregateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiStatValueAggregateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiStatValueAggregateResponse)
    MergeFrom(*source);
  }
}

void MultiStatValueAggregateResponse::MergeFrom(const MultiStatValueAggregateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiStatValueAggregateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_value_aggregate_results_.MergeFrom(from.stat_value_aggregate_results_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiStatValueAggregateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiStatValueAggregateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiStatValueAggregateResponse::CopyFrom(const MultiStatValueAggregateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiStatValueAggregateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiStatValueAggregateResponse::IsInitialized() const {
  return true;
}

void MultiStatValueAggregateResponse::InternalSwap(MultiStatValueAggregateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stat_value_aggregate_results_.InternalSwap(&other->stat_value_aggregate_results_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiStatValueAggregateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::api::Pagination* Arena::CreateMaybeMessage< ::clarifai::api::Pagination >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Pagination >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAnnotationRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetAnnotationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetAnnotationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAnnotationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAnnotationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAnnotationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAnnotationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAnnotationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchAnnotationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAnnotationsStatusRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchAnnotationsStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchAnnotationsStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAnnotationsStatusResponse* Arena::CreateMaybeMessage< ::clarifai::api::PatchAnnotationsStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchAnnotationsStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAnnotationRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteAnnotationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteAnnotationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAnnotationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteAnnotationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleAnnotationResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleAnnotationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleAnnotationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAnnotationResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiAnnotationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiAnnotationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAppRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetAppRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAppsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAppsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListAppsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAppsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAppsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostAppsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAppRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteAppRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAppsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchAppsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchAppsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAppsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAppsSearchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostAppsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleAppResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleAppResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAppResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiAppResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListCollaboratorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostCollaboratorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchCollaboratorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteCollaboratorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiCollaboratorsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiCollaboratorsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiCollaboratorsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListCollaborationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListCollaborationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListCollaborationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiCollaborationsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiCollaborationsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiCollaborationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetStatusCodeRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetStatusCodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetStatusCodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListStatusCodesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListStatusCodesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListStatusCodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleStatusCodeResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleStatusCodeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleStatusCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiStatusCodeResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiStatusCodeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiStatusCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetConceptRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetConceptRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetConceptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListConceptsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListConceptsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptsSearchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostConceptsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchConceptsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchConceptsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetConceptCountsRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetConceptCountsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetConceptCountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleConceptResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleConceptResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleConceptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiConceptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptCountResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptCountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiConceptCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListConceptRelationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListConceptRelationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListConceptRelationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptRelationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptRelationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostConceptRelationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteConceptRelationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteConceptRelationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteConceptRelationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListKnowledgeGraphsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListKnowledgeGraphsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListKnowledgeGraphsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostKnowledgeGraphsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostKnowledgeGraphsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostKnowledgeGraphsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptMappingJobsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptMappingJobsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostConceptMappingJobsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptRelationResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptRelationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiConceptRelationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiKnowledgeGraphResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiKnowledgeGraphResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiKnowledgeGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptMappingJobResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptMappingJobResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiConceptMappingJobResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetConceptLanguageRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetConceptLanguageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetConceptLanguageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListConceptLanguagesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListConceptLanguagesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListConceptLanguagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchConceptLanguagesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchConceptLanguagesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchConceptLanguagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptLanguagesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptLanguagesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostConceptLanguagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleConceptLanguageResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleConceptLanguageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleConceptLanguageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptLanguageResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptLanguageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiConceptLanguageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetInputRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetInputRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetInputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetInputSamplesRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetInputSamplesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetInputSamplesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListInputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StreamInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::StreamInputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::StreamInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostInputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchInputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteInputRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteInputRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteInputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteInputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleInputResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleInputResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleInputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiInputResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiInputResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiInputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiInputAnnotationResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiInputAnnotationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiInputAnnotationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleInputCountResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleInputCountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleInputCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetInputCountRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetInputCountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetInputCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelOutputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelOutputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostModelOutputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListModelInputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListModelInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetKeyRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetKeyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListKeysRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListKeysRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAppKeysRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAppKeysRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListAppKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostKeysRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostKeysRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteKeyRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteKeyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchKeysRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchKeysRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleKeyResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleKeyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiKeyResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiKeyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetModelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListModelsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModelsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchModelsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteModelRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteModelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteModelsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteModelsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelsSearchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostModelsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleModelResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleModelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleModelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiModelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiModelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelVersionRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetModelVersionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetModelVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelVersionsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListModelVersionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListModelVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteModelVersionRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteModelVersionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteModelVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleModelVersionResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleModelVersionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleModelVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelVersionResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiModelVersionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiModelVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelVersionsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelVersionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostModelVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelVersionMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelVersionMetricsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostModelVersionMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelVersionMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetModelVersionMetricsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetModelVersionMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelTypeRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetModelTypeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetModelTypeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelTypesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListModelTypesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListModelTypesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleModelTypeResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleModelTypeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleModelTypeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelTypeResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiModelTypeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiModelTypeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiOutputResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiOutputResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiOutputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListScopesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListScopesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListScopesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MyScopesRequest* Arena::CreateMaybeMessage< ::clarifai::api::MyScopesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MyScopesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiScopeDepsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiScopeDepsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiScopeDepsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiScopeResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiScopeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiScopeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetSearchRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetSearchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetSearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListSearchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostSearchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostSearchesByIDRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostSearchesByIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostSearchesByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteSearchRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteSearchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteSearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAnnotationsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAnnotationsSearchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostAnnotationsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteAnnotationSearchMetricsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteAnnotationSearchMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostInputsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostInputsSearchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostInputsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleSearchResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleSearchResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleSearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiSearchResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiSearchResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiSearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAnnotationSearchMetricsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostAnnotationSearchMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetAnnotationSearchMetricsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetAnnotationSearchMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAnnotationSearchMetricsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListAnnotationSearchMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAnnotationSearchMetricsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiAnnotationSearchMetricsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiAnnotationSearchMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostValidatePasswordRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostValidatePasswordRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostValidatePasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SinglePasswordValidationResponse* Arena::CreateMaybeMessage< ::clarifai::api::SinglePasswordValidationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SinglePasswordValidationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetWorkflowRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetWorkflowRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetWorkflowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListWorkflowsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListWorkflowsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchWorkflowsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchWorkflowsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteWorkflowRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteWorkflowRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteWorkflowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteWorkflowsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteWorkflowsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleWorkflowResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleWorkflowResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleWorkflowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiWorkflowResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiWorkflowResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiWorkflowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostWorkflowResultsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsResponse* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostWorkflowResultsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsSimilarityRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsSimilarityRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostWorkflowResultsSimilarityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsSimilarityResponse* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsSimilarityResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostWorkflowResultsSimilarityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAppDuplicationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAppDuplicationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostAppDuplicationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAppDuplicationRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetAppDuplicationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetAppDuplicationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAppDuplicationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAppDuplicationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListAppDuplicationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAppDuplicationsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiAppDuplicationsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiAppDuplicationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleAppDuplicationResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleAppDuplicationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleAppDuplicationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostTasksRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostTasksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetTaskRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetTaskRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListTasksRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListTasksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchTasksRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchTasksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteTasksRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteTasksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiTaskResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiTaskResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleTaskResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleTaskResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetTaskCountRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetTaskCountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetTaskCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleTaskCountResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleTaskCountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleTaskCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostCollectorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostCollectorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchCollectorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchCollectorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteCollectorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteCollectorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetCollectorRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetCollectorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetCollectorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListCollectorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListCollectorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiCollectorResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiCollectorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiCollectorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleCollectorResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleCollectorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleCollectorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostStatValuesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostStatValuesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostStatValuesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiStatValueResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiStatValueResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiStatValueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostStatValuesAggregateRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostStatValuesAggregateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostStatValuesAggregateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiStatValueAggregateResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiStatValueAggregateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiStatValueAggregateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
